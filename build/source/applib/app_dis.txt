In archive C:/diy-x86os-master/start/start/build/source/applib/libapp.a:

crt0.S.obj:     file format elf32-i386
rw-rw-rw- 0/0   1324 Jun 17 17:56 2024 crt0.S.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000010  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000044  2**0
                  ALLOC
  3 .debug_line   00000067  00000000  00000000  00000044  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_info   0000008f  00000000  00000000  000000ab  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  5 .debug_abbrev 00000014  00000000  00000000  0000013a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_aranges 00000020  00000000  00000000  00000150  2**3
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 g       .text	00000000 _start
00000000         *UND*	00000000 cstart



Disassembly of section .text:

00000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
   0:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
   3:	8e d8                	mov    %eax,%ds
    mov %ax, %es
   5:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   7:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   9:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
   b:	e9 fc ff ff ff       	jmp    c <_start+0xc>
			c: R_386_PC32	cstart

cstart.c.obj:     file format elf32-i386
rw-rw-rw- 0/0   7436 Jun 17 17:56 2024 cstart.c.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000003e  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, RELOC, READONLY, CODE
  1 .data         00000000  00000000  00000000  00000072  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  00000072  2**0
                  ALLOC
  3 .debug_info   00000950  00000000  00000000  00000072  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_abbrev 000001cc  00000000  00000000  000009c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  00000b8e  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_line   000001ae  00000000  00000000  00000bae  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_str    000005ca  00000000  00000000  00000d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000012  00000000  00000000  00001326  2**0
                  CONTENTS, READONLY
  9 .debug_frame  0000002c  00000000  00000000  00001338  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
00000000 g     F .text	0000003e cstart
00000000         *UND*	00000000 __bss_start__
00000000         *UND*	00000000 __bss_end__
00000000         *UND*	00000000 main
00000000         *UND*	00000000 exit



Disassembly of section .text:

00000000 <cstart>:
extern uint8_t __bss_start__[], __bss_end__[];
/**
 * @brief 应用的初始化，C部分
 */
void cstart(int argc, char **argv)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	83 ec 18             	sub    $0x18,%esp
    // 清空bss区，注意这是必须的！！！
    // 像newlib库中有些代码就依赖于此，未清空时数据未知，导致调用sbrk时申请很大内存空间
    uint8_t *start = __bss_start__;
   6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
			9: R_386_32	__bss_start__
    while (start < __bss_end__)
   d:	eb 0c                	jmp    1b <cstart+0x1b>
    {
        *start++ = 0;
   f:	8b 45 f4             	mov    -0xc(%ebp),%eax
  12:	8d 50 01             	lea    0x1(%eax),%edx
  15:	89 55 f4             	mov    %edx,-0xc(%ebp)
  18:	c6 00 00             	movb   $0x0,(%eax)
    while (start < __bss_end__)
  1b:	81 7d f4 00 00 00 00 	cmpl   $0x0,-0xc(%ebp)
			1e: R_386_32	__bss_end__
  22:	72 eb                	jb     f <cstart+0xf>
    }
    exit(main(argc, argv));
  24:	83 ec 08             	sub    $0x8,%esp
  27:	ff 75 0c             	pushl  0xc(%ebp)
  2a:	ff 75 08             	pushl  0x8(%ebp)
  2d:	e8 fc ff ff ff       	call   2e <cstart+0x2e>
			2e: R_386_PC32	main
  32:	83 c4 10             	add    $0x10,%esp
  35:	83 ec 0c             	sub    $0xc,%esp
  38:	50                   	push   %eax
  39:	e8 fc ff ff ff       	call   3a <cstart+0x3a>
			3a: R_386_PC32	exit

lib_syscall.c.obj:     file format elf32-i386
rw-rw-rw- 0/0  12268 Jun 17 17:56 2024 lib_syscall.c.obj
architecture: i386, flags 0x00000011:
HAS_RELOC, HAS_SYMS
start address 0x00000000

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002b7  00000000  00000000  00000034  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00000000  00000000  000002eb  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000000  00000000  00000000  000002eb  2**0
                  ALLOC
  3 .debug_info   00000f69  00000000  00000000  000002eb  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  4 .debug_abbrev 00000259  00000000  00000000  00001254  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  000014ad  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  6 .debug_line   0000024c  00000000  00000000  000014cd  2**0
                  CONTENTS, RELOC, READONLY, DEBUGGING
  7 .debug_str    000007a4  00000000  00000000  00001719  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .comment      00000012  00000000  00000000  00001ebd  2**0
                  CONTENTS, READONLY
  9 .debug_frame  00000258  00000000  00000000  00001ed0  2**2
                  CONTENTS, RELOC, READONLY, DEBUGGING
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 lib_syscall.c
00000000 l    d  .text	00000000 .text
00000000 l    d  .data	00000000 .data
00000000 l    d  .bss	00000000 .bss
00000000 l     F .text	0000004c sys_call
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .comment	00000000 .comment
0000004c g     F .text	0000002a msleep
00000076 g     F .text	0000001b getpid
00000091 g     F .text	00000028 print_msg
000000b9 g     F .text	0000001b fork
000000d4 g     F .text	0000002d execve
00000101 g     F .text	0000001b yield
0000011c g     F .text	00000027 open
00000143 g     F .text	0000002d read
00000170 g     F .text	0000002d write
0000019d g     F .text	00000021 close
000001be g     F .text	0000002d lseek
000001eb g     F .text	00000027 fstat
00000212 g     F .text	00000021 isatty
00000233 g     F .text	00000021 sbrk
00000254 g     F .text	00000021 dup
00000275 g     F .text	00000021 wait
00000296 g     F .text	00000021 _exit



Disassembly of section .text:

00000000 <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
   0:	55                   	push   %ebp
   1:	89 e5                	mov    %esp,%ebp
   3:	57                   	push   %edi
   4:	56                   	push   %esi
   5:	53                   	push   %ebx
   6:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
   9:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
  10:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
  17:	8b 45 08             	mov    0x8(%ebp),%eax
  1a:	8b 40 10             	mov    0x10(%eax),%eax
  1d:	8b 55 08             	mov    0x8(%ebp),%edx
  20:	8b 52 0c             	mov    0xc(%edx),%edx
  23:	8b 4d 08             	mov    0x8(%ebp),%ecx
  26:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
  29:	8b 5d 08             	mov    0x8(%ebp),%ebx
  2c:	8b 5b 04             	mov    0x4(%ebx),%ebx
  2f:	8b 75 08             	mov    0x8(%ebp),%esi
  32:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
  34:	8d 7d e8             	lea    -0x18(%ebp),%edi
  37:	50                   	push   %eax
  38:	52                   	push   %edx
  39:	51                   	push   %ecx
  3a:	53                   	push   %ebx
  3b:	56                   	push   %esi
  3c:	ff 1f                	lcall  *(%edi)
  3e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
  41:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
  44:	83 c4 10             	add    $0x10,%esp
  47:	5b                   	pop    %ebx
  48:	5e                   	pop    %esi
  49:	5f                   	pop    %edi
  4a:	5d                   	pop    %ebp
  4b:	c3                   	ret    

0000004c <msleep>:

int msleep(int ms)
{
  4c:	55                   	push   %ebp
  4d:	89 e5                	mov    %esp,%ebp
  4f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
  52:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
  56:	7e 1b                	jle    73 <msleep+0x27>
    {
        return;
    }

    syscall_args_t args;
    args.id = SYS_msleep;
  58:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
  5f:	8b 45 08             	mov    0x8(%ebp),%eax
  62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
  65:	8d 45 ec             	lea    -0x14(%ebp),%eax
  68:	50                   	push   %eax
  69:	e8 92 ff ff ff       	call   0 <sys_call>
  6e:	83 c4 04             	add    $0x4,%esp
  71:	eb 01                	jmp    74 <msleep+0x28>
        return;
  73:	90                   	nop
}
  74:	c9                   	leave  
  75:	c3                   	ret    

00000076 <getpid>:

int getpid(void)
{
  76:	55                   	push   %ebp
  77:	89 e5                	mov    %esp,%ebp
  79:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
  7c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
  83:	8d 45 ec             	lea    -0x14(%ebp),%eax
  86:	50                   	push   %eax
  87:	e8 74 ff ff ff       	call   0 <sys_call>
  8c:	83 c4 04             	add    $0x4,%esp
}
  8f:	c9                   	leave  
  90:	c3                   	ret    

00000091 <print_msg>:

void print_msg(const char *fmt, int arg)
{
  91:	55                   	push   %ebp
  92:	89 e5                	mov    %esp,%ebp
  94:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
  97:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
  9e:	8b 45 08             	mov    0x8(%ebp),%eax
  a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
  a4:	8b 45 0c             	mov    0xc(%ebp),%eax
  a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
  aa:	8d 45 ec             	lea    -0x14(%ebp),%eax
  ad:	50                   	push   %eax
  ae:	e8 4d ff ff ff       	call   0 <sys_call>
  b3:	83 c4 04             	add    $0x4,%esp
}
  b6:	90                   	nop
  b7:	c9                   	leave  
  b8:	c3                   	ret    

000000b9 <fork>:

int fork(void)
{
  b9:	55                   	push   %ebp
  ba:	89 e5                	mov    %esp,%ebp
  bc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
  bf:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
  c6:	8d 45 ec             	lea    -0x14(%ebp),%eax
  c9:	50                   	push   %eax
  ca:	e8 31 ff ff ff       	call   0 <sys_call>
  cf:	83 c4 04             	add    $0x4,%esp
}
  d2:	c9                   	leave  
  d3:	c3                   	ret    

000000d4 <execve>:

int execve(const char *name, char *const *argv, char *const *env)
{
  d4:	55                   	push   %ebp
  d5:	89 e5                	mov    %esp,%ebp
  d7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
  da:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
  e1:	8b 45 08             	mov    0x8(%ebp),%eax
  e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
  e7:	8b 45 0c             	mov    0xc(%ebp),%eax
  ea:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
  ed:	8b 45 10             	mov    0x10(%ebp),%eax
  f0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
  f3:	8d 45 ec             	lea    -0x14(%ebp),%eax
  f6:	50                   	push   %eax
  f7:	e8 04 ff ff ff       	call   0 <sys_call>
  fc:	83 c4 04             	add    $0x4,%esp
}
  ff:	c9                   	leave  
 100:	c3                   	ret    

00000101 <yield>:

int yield(void)
{
 101:	55                   	push   %ebp
 102:	89 e5                	mov    %esp,%ebp
 104:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
 107:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
 10e:	8d 45 ec             	lea    -0x14(%ebp),%eax
 111:	50                   	push   %eax
 112:	e8 e9 fe ff ff       	call   0 <sys_call>
 117:	83 c4 04             	add    $0x4,%esp
}
 11a:	c9                   	leave  
 11b:	c3                   	ret    

0000011c <open>:

int open(const char *name, int flags, ...)
{
 11c:	55                   	push   %ebp
 11d:	89 e5                	mov    %esp,%ebp
 11f:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
 122:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
 129:	8b 45 08             	mov    0x8(%ebp),%eax
 12c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
 12f:	8b 45 0c             	mov    0xc(%ebp),%eax
 132:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
 135:	8d 45 ec             	lea    -0x14(%ebp),%eax
 138:	50                   	push   %eax
 139:	e8 c2 fe ff ff       	call   0 <sys_call>
 13e:	83 c4 04             	add    $0x4,%esp
}
 141:	c9                   	leave  
 142:	c3                   	ret    

00000143 <read>:

int read(int file, char *ptr, int len)
{
 143:	55                   	push   %ebp
 144:	89 e5                	mov    %esp,%ebp
 146:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
 149:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
 150:	8b 45 08             	mov    0x8(%ebp),%eax
 153:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 156:	8b 45 0c             	mov    0xc(%ebp),%eax
 159:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
 15c:	8b 45 10             	mov    0x10(%ebp),%eax
 15f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 162:	8d 45 ec             	lea    -0x14(%ebp),%eax
 165:	50                   	push   %eax
 166:	e8 95 fe ff ff       	call   0 <sys_call>
 16b:	83 c4 04             	add    $0x4,%esp
}
 16e:	c9                   	leave  
 16f:	c3                   	ret    

00000170 <write>:

int write(int file, char *ptr, int len)
{
 170:	55                   	push   %ebp
 171:	89 e5                	mov    %esp,%ebp
 173:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
 176:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
 17d:	8b 45 08             	mov    0x8(%ebp),%eax
 180:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 183:	8b 45 0c             	mov    0xc(%ebp),%eax
 186:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
 189:	8b 45 10             	mov    0x10(%ebp),%eax
 18c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 18f:	8d 45 ec             	lea    -0x14(%ebp),%eax
 192:	50                   	push   %eax
 193:	e8 68 fe ff ff       	call   0 <sys_call>
 198:	83 c4 04             	add    $0x4,%esp
}
 19b:	c9                   	leave  
 19c:	c3                   	ret    

0000019d <close>:

int close(int file)
{
 19d:	55                   	push   %ebp
 19e:	89 e5                	mov    %esp,%ebp
 1a0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
 1a3:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
 1aa:	8b 45 08             	mov    0x8(%ebp),%eax
 1ad:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 1b0:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1b3:	50                   	push   %eax
 1b4:	e8 47 fe ff ff       	call   0 <sys_call>
 1b9:	83 c4 04             	add    $0x4,%esp
}
 1bc:	c9                   	leave  
 1bd:	c3                   	ret    

000001be <lseek>:

int lseek(int file, int ptr, int dir)
{
 1be:	55                   	push   %ebp
 1bf:	89 e5                	mov    %esp,%ebp
 1c1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
 1c4:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
 1cb:	8b 45 08             	mov    0x8(%ebp),%eax
 1ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
 1d1:	8b 45 0c             	mov    0xc(%ebp),%eax
 1d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
 1d7:	8b 45 10             	mov    0x10(%ebp),%eax
 1da:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
 1dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
 1e0:	50                   	push   %eax
 1e1:	e8 1a fe ff ff       	call   0 <sys_call>
 1e6:	83 c4 04             	add    $0x4,%esp
}
 1e9:	c9                   	leave  
 1ea:	c3                   	ret    

000001eb <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st)
{
 1eb:	55                   	push   %ebp
 1ec:	89 e5                	mov    %esp,%ebp
 1ee:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
 1f1:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
 1f8:	8b 45 08             	mov    0x8(%ebp),%eax
 1fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
 1fe:	8b 45 0c             	mov    0xc(%ebp),%eax
 201:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
 204:	8d 45 ec             	lea    -0x14(%ebp),%eax
 207:	50                   	push   %eax
 208:	e8 f3 fd ff ff       	call   0 <sys_call>
 20d:	83 c4 04             	add    $0x4,%esp
}
 210:	c9                   	leave  
 211:	c3                   	ret    

00000212 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file)
{
 212:	55                   	push   %ebp
 213:	89 e5                	mov    %esp,%ebp
 215:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
 218:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
 21f:	8b 45 08             	mov    0x8(%ebp),%eax
 222:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 225:	8d 45 ec             	lea    -0x14(%ebp),%eax
 228:	50                   	push   %eax
 229:	e8 d2 fd ff ff       	call   0 <sys_call>
 22e:	83 c4 04             	add    $0x4,%esp
}
 231:	c9                   	leave  
 232:	c3                   	ret    

00000233 <sbrk>:

void *sbrk(ptrdiff_t incr)
{
 233:	55                   	push   %ebp
 234:	89 e5                	mov    %esp,%ebp
 236:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
 239:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
 240:	8b 45 08             	mov    0x8(%ebp),%eax
 243:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
 246:	8d 45 ec             	lea    -0x14(%ebp),%eax
 249:	50                   	push   %eax
 24a:	e8 b1 fd ff ff       	call   0 <sys_call>
 24f:	83 c4 04             	add    $0x4,%esp
}
 252:	c9                   	leave  
 253:	c3                   	ret    

00000254 <dup>:

int dup(int file)
{
 254:	55                   	push   %ebp
 255:	89 e5                	mov    %esp,%ebp
 257:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
 25a:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
 261:	8b 45 08             	mov    0x8(%ebp),%eax
 264:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 267:	8d 45 ec             	lea    -0x14(%ebp),%eax
 26a:	50                   	push   %eax
 26b:	e8 90 fd ff ff       	call   0 <sys_call>
 270:	83 c4 04             	add    $0x4,%esp
}
 273:	c9                   	leave  
 274:	c3                   	ret    

00000275 <wait>:

int wait(int *status)
{
 275:	55                   	push   %ebp
 276:	89 e5                	mov    %esp,%ebp
 278:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
 27b:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
 282:	8b 45 08             	mov    0x8(%ebp),%eax
 285:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
 288:	8d 45 ec             	lea    -0x14(%ebp),%eax
 28b:	50                   	push   %eax
 28c:	e8 6f fd ff ff       	call   0 <sys_call>
 291:	83 c4 04             	add    $0x4,%esp
}
 294:	c9                   	leave  
 295:	c3                   	ret    

00000296 <_exit>:

void _exit(int status)
{
 296:	55                   	push   %ebp
 297:	89 e5                	mov    %esp,%ebp
 299:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
 29c:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
 2a3:	8b 45 08             	mov    0x8(%ebp),%eax
 2a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
 2a9:	8d 45 ec             	lea    -0x14(%ebp),%eax
 2ac:	50                   	push   %eax
 2ad:	e8 4e fd ff ff       	call   0 <sys_call>
 2b2:	83 c4 04             	add    $0x4,%esp
    for (;;)
 2b5:	eb fe                	jmp    2b5 <_exit+0x1f>
