
C:/diy-x86os-master/start/start/build/source/init/init.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/init/init.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x82000000

Program Header:
    LOAD off    0x00001000 vaddr 0x82000000 paddr 0x82000000 align 2**12
         filesz 0x00002030 memsz 0x00002094 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000017c3  82000000  82000000  00001000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000004  820017c4  820017c4  000027c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000850  820017e0  820017e0  000027e0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  82002040  82002040  00003030  2**5
                  ALLOC
  4 .debug_line   00001122  00000000  00000000  00003030  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007c41  00000000  00000000  00004152  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000019e8  00000000  00000000  0000bd93  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000198  00000000  00000000  0000d780  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000aac  00000000  00000000  0000d918  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000023  00000000  00000000  0000e3c4  2**0
                  CONTENTS, READONLY
 10 .debug_frame  000005a4  00000000  00000000  0000e3e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line_str 00000395  00000000  00000000  0000e98c  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
82000000 l    d  .text	00000000 .text
820017c4 l    d  .rodata	00000000 .rodata
820017e0 l    d  .data	00000000 .data
82002040 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 cstart.c
00000000 l    df *ABS*	00000000 lib_syscall.c
8200004e l     F .text	0000004c sys_call
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
820017e0 l     O .data	00000424 impure_data
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
820004da l     F .text	00000293 malloc_extend_top
00000000 l    df *ABS*	00000000 mlock.c
82002088 l     O .bss	00000004 __malloc_recursive_mutex
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 __call_atexit.c
8200208c l     O .bss	00000004 __atexit_recursive_mutex
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 reent.c
8200162c g     F .text	00000037 cleanup_glue
8200014f g     F .text	0000001b yield
82000405 g     F .text	00000033 ioctl
82000f95 g     F .text	00000006 __malloc_unlock
82002090 g     O .bss	00000004 errno
82000122 g     F .text	0000002d execve
820000c4 g     F .text	0000001b getpid
820004a1 g     F .text	0000001c malloc
82000260 g     F .text	00000021 isatty
82002040 g     O .bss	00000004 __malloc_top_pad
82002040 g       .bss	00000000 __bss_start__
82000f9b g     F .text	00000040 _sbrk_r
82000370 g     F .text	00000040 readdir
82002044 g     O .bss	00000004 __malloc_max_sbrked_mem
8200020c g     F .text	0000002d lseek
820017c4 g     O .rodata	00000004 _global_impure_ptr
82001663 g     F .text	00000160 _reclaim_reent
820001be g     F .text	0000002d write
82000239 g     F .text	00000027 fstat
82002094 g       .bss	00000000 __bss_end__
820010f0 g     F .text	000003db _free_r
820002c3 g     F .text	00000021 wait
82000fdb g     F .text	00000115 __call_exitprocs
8200202c g     O .data	00000004 __malloc_sbrk_base
82000000 g       .text	00000000 _start
82000191 g     F .text	0000002d read
82002060 g     O .bss	00000028 __malloc_current_mallinfo
820003e4 g     F .text	00000021 unlink
82000107 g     F .text	0000001b fork
82001c20 g     O .data	00000408 __malloc_av_
82000f8f g     F .text	00000006 __malloc_lock
82000281 g     F .text	00000021 sbrk
82000010 g     F .text	0000003e cstart
82000438 g     F .text	00000025 main
82002048 g     O .bss	00000004 __malloc_max_total_mem
8200076d g     F .text	00000822 _malloc_r
82000305 g     F .text	0000006b opendir
820014cb g     F .text	00000161 _malloc_trim_r
820002a2 g     F .text	00000021 dup
82001c04 g     O .data	00000004 _impure_ptr
820000df g     F .text	00000028 print_msg
82002028 g     O .data	00000004 __malloc_trim_threshold
8200045d g     F .text	00000044 exit
820002e4 g     F .text	00000021 _exit
8200016a g     F .text	00000027 open
820003b0 g     F .text	00000034 closedir
8200009a g     F .text	0000002a msleep
820001eb g     F .text	00000021 close
820004bd g     F .text	0000001d free



Disassembly of section .text:

82000000 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
82000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
82000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
82000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
82000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
82000009:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
8200000b:	e9 00 00 00 00       	jmp    82000010 <cstart>

82000010 <cstart>:
extern uint8_t __bss_start__[], __bss_end__[];
/**
 * @brief 应用的初始化，C部分
 */
void cstart(int argc, char **argv)
{
82000010:	55                   	push   %ebp
82000011:	89 e5                	mov    %esp,%ebp
82000013:	83 ec 18             	sub    $0x18,%esp
    // 清空bss区，注意这是必须的！！！
    // 像newlib库中有些代码就依赖于此，未清空时数据未知，导致调用sbrk时申请很大内存空间
    uint8_t *start = __bss_start__;
82000016:	c7 45 f4 40 20 00 82 	movl   $0x82002040,-0xc(%ebp)
    while (start < __bss_end__)
8200001d:	eb 0c                	jmp    8200002b <cstart+0x1b>
    {
        *start++ = 0;
8200001f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000022:	8d 50 01             	lea    0x1(%eax),%edx
82000025:	89 55 f4             	mov    %edx,-0xc(%ebp)
82000028:	c6 00 00             	movb   $0x0,(%eax)
    while (start < __bss_end__)
8200002b:	81 7d f4 94 20 00 82 	cmpl   $0x82002094,-0xc(%ebp)
82000032:	72 eb                	jb     8200001f <cstart+0xf>
    }
    exit(main(argc, argv));
82000034:	83 ec 08             	sub    $0x8,%esp
82000037:	ff 75 0c             	pushl  0xc(%ebp)
8200003a:	ff 75 08             	pushl  0x8(%ebp)
8200003d:	e8 f6 03 00 00       	call   82000438 <main>
82000042:	83 c4 10             	add    $0x10,%esp
82000045:	83 ec 0c             	sub    $0xc,%esp
82000048:	50                   	push   %eax
82000049:	e8 0f 04 00 00       	call   8200045d <exit>

8200004e <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
8200004e:	55                   	push   %ebp
8200004f:	89 e5                	mov    %esp,%ebp
82000051:	57                   	push   %edi
82000052:	56                   	push   %esi
82000053:	53                   	push   %ebx
82000054:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
82000057:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
8200005e:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
82000065:	8b 45 08             	mov    0x8(%ebp),%eax
82000068:	8b 40 10             	mov    0x10(%eax),%eax
8200006b:	8b 55 08             	mov    0x8(%ebp),%edx
8200006e:	8b 52 0c             	mov    0xc(%edx),%edx
82000071:	8b 4d 08             	mov    0x8(%ebp),%ecx
82000074:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
82000077:	8b 5d 08             	mov    0x8(%ebp),%ebx
8200007a:	8b 5b 04             	mov    0x4(%ebx),%ebx
8200007d:	8b 75 08             	mov    0x8(%ebp),%esi
82000080:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
82000082:	8d 7d e8             	lea    -0x18(%ebp),%edi
82000085:	50                   	push   %eax
82000086:	52                   	push   %edx
82000087:	51                   	push   %ecx
82000088:	53                   	push   %ebx
82000089:	56                   	push   %esi
8200008a:	ff 1f                	lcall  *(%edi)
8200008c:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
8200008f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
82000092:	83 c4 10             	add    $0x10,%esp
82000095:	5b                   	pop    %ebx
82000096:	5e                   	pop    %esi
82000097:	5f                   	pop    %edi
82000098:	5d                   	pop    %ebp
82000099:	c3                   	ret    

8200009a <msleep>:

int msleep(int ms)
{
8200009a:	55                   	push   %ebp
8200009b:	89 e5                	mov    %esp,%ebp
8200009d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
820000a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
820000a4:	7e 1b                	jle    820000c1 <msleep+0x27>
    {
        return;
    }

    syscall_args_t args;
    args.id = SYS_msleep;
820000a6:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
820000ad:	8b 45 08             	mov    0x8(%ebp),%eax
820000b0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
820000b3:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000b6:	50                   	push   %eax
820000b7:	e8 92 ff ff ff       	call   8200004e <sys_call>
820000bc:	83 c4 04             	add    $0x4,%esp
820000bf:	eb 01                	jmp    820000c2 <msleep+0x28>
        return;
820000c1:	90                   	nop
}
820000c2:	c9                   	leave  
820000c3:	c3                   	ret    

820000c4 <getpid>:

int getpid(void)
{
820000c4:	55                   	push   %ebp
820000c5:	89 e5                	mov    %esp,%ebp
820000c7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
820000ca:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
820000d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000d4:	50                   	push   %eax
820000d5:	e8 74 ff ff ff       	call   8200004e <sys_call>
820000da:	83 c4 04             	add    $0x4,%esp
}
820000dd:	c9                   	leave  
820000de:	c3                   	ret    

820000df <print_msg>:

void print_msg(const char *fmt, int arg)
{
820000df:	55                   	push   %ebp
820000e0:	89 e5                	mov    %esp,%ebp
820000e2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
820000e5:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
820000ec:	8b 45 08             	mov    0x8(%ebp),%eax
820000ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
820000f2:	8b 45 0c             	mov    0xc(%ebp),%eax
820000f5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
820000f8:	8d 45 ec             	lea    -0x14(%ebp),%eax
820000fb:	50                   	push   %eax
820000fc:	e8 4d ff ff ff       	call   8200004e <sys_call>
82000101:	83 c4 04             	add    $0x4,%esp
}
82000104:	90                   	nop
82000105:	c9                   	leave  
82000106:	c3                   	ret    

82000107 <fork>:

int fork(void)
{
82000107:	55                   	push   %ebp
82000108:	89 e5                	mov    %esp,%ebp
8200010a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8200010d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
82000114:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000117:	50                   	push   %eax
82000118:	e8 31 ff ff ff       	call   8200004e <sys_call>
8200011d:	83 c4 04             	add    $0x4,%esp
}
82000120:	c9                   	leave  
82000121:	c3                   	ret    

82000122 <execve>:

int execve(const char *name, char *const *argv, char *const *env)
{
82000122:	55                   	push   %ebp
82000123:	89 e5                	mov    %esp,%ebp
82000125:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
82000128:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
8200012f:	8b 45 08             	mov    0x8(%ebp),%eax
82000132:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
82000135:	8b 45 0c             	mov    0xc(%ebp),%eax
82000138:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
8200013b:	8b 45 10             	mov    0x10(%ebp),%eax
8200013e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
82000141:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000144:	50                   	push   %eax
82000145:	e8 04 ff ff ff       	call   8200004e <sys_call>
8200014a:	83 c4 04             	add    $0x4,%esp
}
8200014d:	c9                   	leave  
8200014e:	c3                   	ret    

8200014f <yield>:

int yield(void)
{
8200014f:	55                   	push   %ebp
82000150:	89 e5                	mov    %esp,%ebp
82000152:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
82000155:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
8200015c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200015f:	50                   	push   %eax
82000160:	e8 e9 fe ff ff       	call   8200004e <sys_call>
82000165:	83 c4 04             	add    $0x4,%esp
}
82000168:	c9                   	leave  
82000169:	c3                   	ret    

8200016a <open>:

int open(const char *name, int flags, ...)
{
8200016a:	55                   	push   %ebp
8200016b:	89 e5                	mov    %esp,%ebp
8200016d:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
82000170:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
82000177:	8b 45 08             	mov    0x8(%ebp),%eax
8200017a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
8200017d:	8b 45 0c             	mov    0xc(%ebp),%eax
82000180:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
82000183:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000186:	50                   	push   %eax
82000187:	e8 c2 fe ff ff       	call   8200004e <sys_call>
8200018c:	83 c4 04             	add    $0x4,%esp
}
8200018f:	c9                   	leave  
82000190:	c3                   	ret    

82000191 <read>:

int read(int file, char *ptr, int len)
{
82000191:	55                   	push   %ebp
82000192:	89 e5                	mov    %esp,%ebp
82000194:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
82000197:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
8200019e:	8b 45 08             	mov    0x8(%ebp),%eax
820001a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
820001a4:	8b 45 0c             	mov    0xc(%ebp),%eax
820001a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
820001aa:	8b 45 10             	mov    0x10(%ebp),%eax
820001ad:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
820001b0:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001b3:	50                   	push   %eax
820001b4:	e8 95 fe ff ff       	call   8200004e <sys_call>
820001b9:	83 c4 04             	add    $0x4,%esp
}
820001bc:	c9                   	leave  
820001bd:	c3                   	ret    

820001be <write>:

int write(int file, char *ptr, int len)
{
820001be:	55                   	push   %ebp
820001bf:	89 e5                	mov    %esp,%ebp
820001c1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
820001c4:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
820001cb:	8b 45 08             	mov    0x8(%ebp),%eax
820001ce:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
820001d1:	8b 45 0c             	mov    0xc(%ebp),%eax
820001d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
820001d7:	8b 45 10             	mov    0x10(%ebp),%eax
820001da:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
820001dd:	8d 45 ec             	lea    -0x14(%ebp),%eax
820001e0:	50                   	push   %eax
820001e1:	e8 68 fe ff ff       	call   8200004e <sys_call>
820001e6:	83 c4 04             	add    $0x4,%esp
}
820001e9:	c9                   	leave  
820001ea:	c3                   	ret    

820001eb <close>:

int close(int file)
{
820001eb:	55                   	push   %ebp
820001ec:	89 e5                	mov    %esp,%ebp
820001ee:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
820001f1:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
820001f8:	8b 45 08             	mov    0x8(%ebp),%eax
820001fb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820001fe:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000201:	50                   	push   %eax
82000202:	e8 47 fe ff ff       	call   8200004e <sys_call>
82000207:	83 c4 04             	add    $0x4,%esp
}
8200020a:	c9                   	leave  
8200020b:	c3                   	ret    

8200020c <lseek>:

int lseek(int file, int ptr, int dir)
{
8200020c:	55                   	push   %ebp
8200020d:	89 e5                	mov    %esp,%ebp
8200020f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
82000212:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
82000219:	8b 45 08             	mov    0x8(%ebp),%eax
8200021c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
8200021f:	8b 45 0c             	mov    0xc(%ebp),%eax
82000222:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
82000225:	8b 45 10             	mov    0x10(%ebp),%eax
82000228:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
8200022b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200022e:	50                   	push   %eax
8200022f:	e8 1a fe ff ff       	call   8200004e <sys_call>
82000234:	83 c4 04             	add    $0x4,%esp
}
82000237:	c9                   	leave  
82000238:	c3                   	ret    

82000239 <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st)
{
82000239:	55                   	push   %ebp
8200023a:	89 e5                	mov    %esp,%ebp
8200023c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
8200023f:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
82000246:	8b 45 08             	mov    0x8(%ebp),%eax
82000249:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
8200024c:	8b 45 0c             	mov    0xc(%ebp),%eax
8200024f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
82000252:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000255:	50                   	push   %eax
82000256:	e8 f3 fd ff ff       	call   8200004e <sys_call>
8200025b:	83 c4 04             	add    $0x4,%esp
}
8200025e:	c9                   	leave  
8200025f:	c3                   	ret    

82000260 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file)
{
82000260:	55                   	push   %ebp
82000261:	89 e5                	mov    %esp,%ebp
82000263:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
82000266:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
8200026d:	8b 45 08             	mov    0x8(%ebp),%eax
82000270:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
82000273:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000276:	50                   	push   %eax
82000277:	e8 d2 fd ff ff       	call   8200004e <sys_call>
8200027c:	83 c4 04             	add    $0x4,%esp
}
8200027f:	c9                   	leave  
82000280:	c3                   	ret    

82000281 <sbrk>:

void *sbrk(ptrdiff_t incr)
{
82000281:	55                   	push   %ebp
82000282:	89 e5                	mov    %esp,%ebp
82000284:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
82000287:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
8200028e:	8b 45 08             	mov    0x8(%ebp),%eax
82000291:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
82000294:	8d 45 ec             	lea    -0x14(%ebp),%eax
82000297:	50                   	push   %eax
82000298:	e8 b1 fd ff ff       	call   8200004e <sys_call>
8200029d:	83 c4 04             	add    $0x4,%esp
}
820002a0:	c9                   	leave  
820002a1:	c3                   	ret    

820002a2 <dup>:

int dup(int file)
{
820002a2:	55                   	push   %ebp
820002a3:	89 e5                	mov    %esp,%ebp
820002a5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
820002a8:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
820002af:	8b 45 08             	mov    0x8(%ebp),%eax
820002b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820002b5:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002b8:	50                   	push   %eax
820002b9:	e8 90 fd ff ff       	call   8200004e <sys_call>
820002be:	83 c4 04             	add    $0x4,%esp
}
820002c1:	c9                   	leave  
820002c2:	c3                   	ret    

820002c3 <wait>:

int wait(int *status)
{
820002c3:	55                   	push   %ebp
820002c4:	89 e5                	mov    %esp,%ebp
820002c6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
820002c9:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
820002d0:	8b 45 08             	mov    0x8(%ebp),%eax
820002d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820002d6:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002d9:	50                   	push   %eax
820002da:	e8 6f fd ff ff       	call   8200004e <sys_call>
820002df:	83 c4 04             	add    $0x4,%esp
}
820002e2:	c9                   	leave  
820002e3:	c3                   	ret    

820002e4 <_exit>:

void _exit(int status)
{
820002e4:	55                   	push   %ebp
820002e5:	89 e5                	mov    %esp,%ebp
820002e7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
820002ea:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
820002f1:	8b 45 08             	mov    0x8(%ebp),%eax
820002f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
820002f7:	8d 45 ec             	lea    -0x14(%ebp),%eax
820002fa:	50                   	push   %eax
820002fb:	e8 4e fd ff ff       	call   8200004e <sys_call>
82000300:	83 c4 04             	add    $0x4,%esp
    for (;;)
82000303:	eb fe                	jmp    82000303 <_exit+0x1f>

82000305 <opendir>:
    {
    }
}

DIR *opendir(const char *name)
{
82000305:	55                   	push   %ebp
82000306:	89 e5                	mov    %esp,%ebp
82000308:	83 ec 28             	sub    $0x28,%esp
    DIR *dir = (DIR *)malloc(sizeof(DIR));
8200030b:	83 ec 0c             	sub    $0xc,%esp
8200030e:	68 10 01 00 00       	push   $0x110
82000313:	e8 89 01 00 00       	call   820004a1 <malloc>
82000318:	83 c4 10             	add    $0x10,%esp
8200031b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dir == (DIR *)0)
8200031e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
82000322:	75 07                	jne    8200032b <opendir+0x26>
    {
        return (DIR *)0;
82000324:	b8 00 00 00 00       	mov    $0x0,%eax
82000329:	eb 43                	jmp    8200036e <opendir+0x69>
    }

    syscall_args_t args;
    args.id = SYS_opendir;
8200032b:	c7 45 dc 3c 00 00 00 	movl   $0x3c,-0x24(%ebp)
    args.arg0 = (int)name;
82000332:	8b 45 08             	mov    0x8(%ebp),%eax
82000335:	89 45 e0             	mov    %eax,-0x20(%ebp)
    args.arg1 = (int)dir;
82000338:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200033b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    int err = sys_call(&args);
8200033e:	83 ec 0c             	sub    $0xc,%esp
82000341:	8d 45 dc             	lea    -0x24(%ebp),%eax
82000344:	50                   	push   %eax
82000345:	e8 04 fd ff ff       	call   8200004e <sys_call>
8200034a:	83 c4 10             	add    $0x10,%esp
8200034d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0)
82000350:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
82000354:	79 15                	jns    8200036b <opendir+0x66>
    {
        free(dir);
82000356:	83 ec 0c             	sub    $0xc,%esp
82000359:	ff 75 f4             	pushl  -0xc(%ebp)
8200035c:	e8 5c 01 00 00       	call   820004bd <free>
82000361:	83 c4 10             	add    $0x10,%esp
        return (DIR *)0;
82000364:	b8 00 00 00 00       	mov    $0x0,%eax
82000369:	eb 03                	jmp    8200036e <opendir+0x69>
    }
    return dir;
8200036b:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
8200036e:	c9                   	leave  
8200036f:	c3                   	ret    

82000370 <readdir>:

struct dirent *readdir(DIR *dir)
{
82000370:	55                   	push   %ebp
82000371:	89 e5                	mov    %esp,%ebp
82000373:	83 ec 20             	sub    $0x20,%esp

    syscall_args_t args;
    args.id = SYS_readdir;
82000376:	c7 45 e8 3d 00 00 00 	movl   $0x3d,-0x18(%ebp)
    args.arg0 = (int)dir;
8200037d:	8b 45 08             	mov    0x8(%ebp),%eax
82000380:	89 45 ec             	mov    %eax,-0x14(%ebp)
    args.arg1 = (int)&dir->dirent;
82000383:	8b 45 08             	mov    0x8(%ebp),%eax
82000386:	83 c0 04             	add    $0x4,%eax
82000389:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = sys_call(&args);
8200038c:	8d 45 e8             	lea    -0x18(%ebp),%eax
8200038f:	50                   	push   %eax
82000390:	e8 b9 fc ff ff       	call   8200004e <sys_call>
82000395:	83 c4 04             	add    $0x4,%esp
82000398:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (err < 0)
8200039b:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
8200039f:	79 07                	jns    820003a8 <readdir+0x38>
    {
        return (struct dirent *)0;
820003a1:	b8 00 00 00 00       	mov    $0x0,%eax
820003a6:	eb 06                	jmp    820003ae <readdir+0x3e>
    }
    return &dir->dirent;
820003a8:	8b 45 08             	mov    0x8(%ebp),%eax
820003ab:	83 c0 04             	add    $0x4,%eax
}
820003ae:	c9                   	leave  
820003af:	c3                   	ret    

820003b0 <closedir>:

int closedir(DIR *dir)
{
820003b0:	55                   	push   %ebp
820003b1:	89 e5                	mov    %esp,%ebp
820003b3:	83 ec 28             	sub    $0x28,%esp
    syscall_args_t args;
    args.id = SYS_closedir;
820003b6:	c7 45 e4 3e 00 00 00 	movl   $0x3e,-0x1c(%ebp)
    args.arg0 = (int)dir;
820003bd:	8b 45 08             	mov    0x8(%ebp),%eax
820003c0:	89 45 e8             	mov    %eax,-0x18(%ebp)
    sys_call(&args);
820003c3:	8d 45 e4             	lea    -0x1c(%ebp),%eax
820003c6:	50                   	push   %eax
820003c7:	e8 82 fc ff ff       	call   8200004e <sys_call>
820003cc:	83 c4 04             	add    $0x4,%esp

    free(dir);
820003cf:	83 ec 0c             	sub    $0xc,%esp
820003d2:	ff 75 08             	pushl  0x8(%ebp)
820003d5:	e8 e3 00 00 00       	call   820004bd <free>
820003da:	83 c4 10             	add    $0x10,%esp
    return 0;
820003dd:	b8 00 00 00 00       	mov    $0x0,%eax
}
820003e2:	c9                   	leave  
820003e3:	c3                   	ret    

820003e4 <unlink>:

int unlink(const char *path)
{
820003e4:	55                   	push   %ebp
820003e5:	89 e5                	mov    %esp,%ebp
820003e7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_unlink;
820003ea:	c7 45 ec 3f 00 00 00 	movl   $0x3f,-0x14(%ebp)
    args.arg0 = (int)path;
820003f1:	8b 45 08             	mov    0x8(%ebp),%eax
820003f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
820003f7:	8d 45 ec             	lea    -0x14(%ebp),%eax
820003fa:	50                   	push   %eax
820003fb:	e8 4e fc ff ff       	call   8200004e <sys_call>
82000400:	83 c4 04             	add    $0x4,%esp
}
82000403:	c9                   	leave  
82000404:	c3                   	ret    

82000405 <ioctl>:

int ioctl(int fd, int cmd, int arg0, int arg1)
{
82000405:	55                   	push   %ebp
82000406:	89 e5                	mov    %esp,%ebp
82000408:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_ioctl;
8200040b:	c7 45 ec 3b 00 00 00 	movl   $0x3b,-0x14(%ebp)
    args.arg0 = fd;
82000412:	8b 45 08             	mov    0x8(%ebp),%eax
82000415:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = cmd;
82000418:	8b 45 0c             	mov    0xc(%ebp),%eax
8200041b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = arg0;
8200041e:	8b 45 10             	mov    0x10(%ebp),%eax
82000421:	89 45 f8             	mov    %eax,-0x8(%ebp)
    args.arg3 = arg1;
82000424:	8b 45 14             	mov    0x14(%ebp),%eax
82000427:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return sys_call(&args);
8200042a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8200042d:	50                   	push   %eax
8200042e:	e8 1b fc ff ff       	call   8200004e <sys_call>
82000433:	83 c4 04             	add    $0x4,%esp
82000436:	c9                   	leave  
82000437:	c3                   	ret    

82000438 <main>:
#include <getopt.h>
#include <stdlib.h>
#include <sys/file.h>

int main(int argc, char **argv)
{
82000438:	55                   	push   %ebp
82000439:	89 e5                	mov    %esp,%ebp
8200043b:	83 ec 10             	sub    $0x10,%esp
    int a = 3 / 0;
8200043e:	b8 03 00 00 00       	mov    $0x3,%eax
82000443:	b9 00 00 00 00       	mov    $0x0,%ecx
82000448:	99                   	cltd   
82000449:	f7 f9                	idiv   %ecx
8200044b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    *(char *)0 = 0x1234;
8200044e:	b8 00 00 00 00       	mov    $0x0,%eax
82000453:	c6 00 34             	movb   $0x34,(%eax)

    return 0;
82000456:	b8 00 00 00 00       	mov    $0x0,%eax
8200045b:	c9                   	leave  
8200045c:	c3                   	ret    

8200045d <exit>:
8200045d:	55                   	push   %ebp
8200045e:	89 e5                	mov    %esp,%ebp
82000460:	83 ec 08             	sub    $0x8,%esp
82000463:	83 ec 08             	sub    $0x8,%esp
82000466:	6a 00                	push   $0x0
82000468:	ff 75 08             	pushl  0x8(%ebp)
8200046b:	e8 6b 0b 00 00       	call   82000fdb <__call_exitprocs>
82000470:	83 c4 10             	add    $0x10,%esp
82000473:	a1 c4 17 00 82       	mov    0x820017c4,%eax
82000478:	8b 40 3c             	mov    0x3c(%eax),%eax
8200047b:	85 c0                	test   %eax,%eax
8200047d:	74 17                	je     82000496 <exit+0x39>
8200047f:	a1 c4 17 00 82       	mov    0x820017c4,%eax
82000484:	8b 40 3c             	mov    0x3c(%eax),%eax
82000487:	8b 15 c4 17 00 82    	mov    0x820017c4,%edx
8200048d:	83 ec 0c             	sub    $0xc,%esp
82000490:	52                   	push   %edx
82000491:	ff d0                	call   *%eax
82000493:	83 c4 10             	add    $0x10,%esp
82000496:	83 ec 0c             	sub    $0xc,%esp
82000499:	ff 75 08             	pushl  0x8(%ebp)
8200049c:	e8 43 fe ff ff       	call   820002e4 <_exit>

820004a1 <malloc>:
820004a1:	55                   	push   %ebp
820004a2:	89 e5                	mov    %esp,%ebp
820004a4:	83 ec 08             	sub    $0x8,%esp
820004a7:	a1 04 1c 00 82       	mov    0x82001c04,%eax
820004ac:	83 ec 08             	sub    $0x8,%esp
820004af:	ff 75 08             	pushl  0x8(%ebp)
820004b2:	50                   	push   %eax
820004b3:	e8 b5 02 00 00       	call   8200076d <_malloc_r>
820004b8:	83 c4 10             	add    $0x10,%esp
820004bb:	c9                   	leave  
820004bc:	c3                   	ret    

820004bd <free>:
820004bd:	55                   	push   %ebp
820004be:	89 e5                	mov    %esp,%ebp
820004c0:	83 ec 08             	sub    $0x8,%esp
820004c3:	a1 04 1c 00 82       	mov    0x82001c04,%eax
820004c8:	83 ec 08             	sub    $0x8,%esp
820004cb:	ff 75 08             	pushl  0x8(%ebp)
820004ce:	50                   	push   %eax
820004cf:	e8 1c 0c 00 00       	call   820010f0 <_free_r>
820004d4:	83 c4 10             	add    $0x10,%esp
820004d7:	90                   	nop
820004d8:	c9                   	leave  
820004d9:	c3                   	ret    

820004da <malloc_extend_top>:
820004da:	55                   	push   %ebp
820004db:	89 e5                	mov    %esp,%ebp
820004dd:	83 ec 38             	sub    $0x38,%esp
820004e0:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
820004e7:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820004ec:	8b 40 08             	mov    0x8(%eax),%eax
820004ef:	89 45 e0             	mov    %eax,-0x20(%ebp)
820004f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
820004f5:	8b 40 04             	mov    0x4(%eax),%eax
820004f8:	83 e0 fc             	and    $0xfffffffc,%eax
820004fb:	89 45 dc             	mov    %eax,-0x24(%ebp)
820004fe:	8b 55 e0             	mov    -0x20(%ebp),%edx
82000501:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000504:	01 d0                	add    %edx,%eax
82000506:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000509:	8b 15 40 20 00 82    	mov    0x82002040,%edx
8200050f:	8b 45 0c             	mov    0xc(%ebp),%eax
82000512:	01 d0                	add    %edx,%eax
82000514:	83 c0 10             	add    $0x10,%eax
82000517:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200051a:	c7 45 d4 00 10 00 00 	movl   $0x1000,-0x2c(%ebp)
82000521:	a1 2c 20 00 82       	mov    0x8200202c,%eax
82000526:	83 f8 ff             	cmp    $0xffffffff,%eax
82000529:	74 15                	je     82000540 <malloc_extend_top+0x66>
8200052b:	8b 55 d4             	mov    -0x2c(%ebp),%edx
8200052e:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000531:	01 d0                	add    %edx,%eax
82000533:	8d 50 ff             	lea    -0x1(%eax),%edx
82000536:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000539:	f7 d8                	neg    %eax
8200053b:	21 d0                	and    %edx,%eax
8200053d:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000540:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000543:	83 ec 08             	sub    $0x8,%esp
82000546:	50                   	push   %eax
82000547:	ff 75 08             	pushl  0x8(%ebp)
8200054a:	e8 4c 0a 00 00       	call   82000f9b <_sbrk_r>
8200054f:	83 c4 10             	add    $0x10,%esp
82000552:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000555:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
82000559:	0f 84 0b 02 00 00    	je     8200076a <malloc_extend_top+0x290>
8200055f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000562:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000565:	73 0e                	jae    82000575 <malloc_extend_top+0x9b>
82000567:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
8200056c:	39 45 e0             	cmp    %eax,-0x20(%ebp)
8200056f:	0f 85 f5 01 00 00    	jne    8200076a <malloc_extend_top+0x290>
82000575:	a1 60 20 00 82       	mov    0x82002060,%eax
8200057a:	89 c2                	mov    %eax,%edx
8200057c:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200057f:	01 d0                	add    %edx,%eax
82000581:	a3 60 20 00 82       	mov    %eax,0x82002060
82000586:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000589:	3b 45 d8             	cmp    -0x28(%ebp),%eax
8200058c:	75 30                	jne    820005be <malloc_extend_top+0xe4>
8200058e:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000591:	8d 50 ff             	lea    -0x1(%eax),%edx
82000594:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000597:	21 d0                	and    %edx,%eax
82000599:	85 c0                	test   %eax,%eax
8200059b:	75 21                	jne    820005be <malloc_extend_top+0xe4>
8200059d:	8b 55 e8             	mov    -0x18(%ebp),%edx
820005a0:	8b 45 dc             	mov    -0x24(%ebp),%eax
820005a3:	01 d0                	add    %edx,%eax
820005a5:	89 45 d0             	mov    %eax,-0x30(%ebp)
820005a8:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820005ad:	8b 40 08             	mov    0x8(%eax),%eax
820005b0:	8b 55 d0             	mov    -0x30(%ebp),%edx
820005b3:	83 ca 01             	or     $0x1,%edx
820005b6:	89 50 04             	mov    %edx,0x4(%eax)
820005b9:	e9 76 01 00 00       	jmp    82000734 <malloc_extend_top+0x25a>
820005be:	a1 2c 20 00 82       	mov    0x8200202c,%eax
820005c3:	83 f8 ff             	cmp    $0xffffffff,%eax
820005c6:	75 0a                	jne    820005d2 <malloc_extend_top+0xf8>
820005c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005cb:	a3 2c 20 00 82       	mov    %eax,0x8200202c
820005d0:	eb 13                	jmp    820005e5 <malloc_extend_top+0x10b>
820005d2:	8b 15 60 20 00 82    	mov    0x82002060,%edx
820005d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005db:	2b 45 d8             	sub    -0x28(%ebp),%eax
820005de:	01 d0                	add    %edx,%eax
820005e0:	a3 60 20 00 82       	mov    %eax,0x82002060
820005e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
820005e8:	83 c0 08             	add    $0x8,%eax
820005eb:	83 e0 07             	and    $0x7,%eax
820005ee:	89 45 cc             	mov    %eax,-0x34(%ebp)
820005f1:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
820005f5:	74 13                	je     8200060a <malloc_extend_top+0x130>
820005f7:	b8 08 00 00 00       	mov    $0x8,%eax
820005fc:	2b 45 cc             	sub    -0x34(%ebp),%eax
820005ff:	89 45 f0             	mov    %eax,-0x10(%ebp)
82000602:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000605:	01 45 f4             	add    %eax,-0xc(%ebp)
82000608:	eb 07                	jmp    82000611 <malloc_extend_top+0x137>
8200060a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
82000611:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000614:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000617:	01 d0                	add    %edx,%eax
82000619:	89 c2                	mov    %eax,%edx
8200061b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200061e:	83 e8 01             	sub    $0x1,%eax
82000621:	21 c2                	and    %eax,%edx
82000623:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000626:	29 d0                	sub    %edx,%eax
82000628:	01 45 f0             	add    %eax,-0x10(%ebp)
8200062b:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200062e:	83 e8 01             	sub    $0x1,%eax
82000631:	21 45 f0             	and    %eax,-0x10(%ebp)
82000634:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000637:	83 ec 08             	sub    $0x8,%esp
8200063a:	50                   	push   %eax
8200063b:	ff 75 08             	pushl  0x8(%ebp)
8200063e:	e8 58 09 00 00       	call   82000f9b <_sbrk_r>
82000643:	83 c4 10             	add    $0x10,%esp
82000646:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000649:	83 7d ec ff          	cmpl   $0xffffffff,-0x14(%ebp)
8200064d:	75 28                	jne    82000677 <malloc_extend_top+0x19d>
8200064f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
82000656:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
8200065d:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000660:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000663:	01 d0                	add    %edx,%eax
82000665:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000668:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
8200066c:	74 09                	je     82000677 <malloc_extend_top+0x19d>
8200066e:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000671:	83 e8 08             	sub    $0x8,%eax
82000674:	01 45 ec             	add    %eax,-0x14(%ebp)
82000677:	a1 60 20 00 82       	mov    0x82002060,%eax
8200067c:	89 c2                	mov    %eax,%edx
8200067e:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000681:	01 d0                	add    %edx,%eax
82000683:	a3 60 20 00 82       	mov    %eax,0x82002060
82000688:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
8200068d:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000690:	89 42 08             	mov    %eax,0x8(%edx)
82000693:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000696:	2b 45 f4             	sub    -0xc(%ebp),%eax
82000699:	89 c2                	mov    %eax,%edx
8200069b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200069e:	01 d0                	add    %edx,%eax
820006a0:	89 45 d0             	mov    %eax,-0x30(%ebp)
820006a3:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006a8:	8b 40 08             	mov    0x8(%eax),%eax
820006ab:	8b 55 d0             	mov    -0x30(%ebp),%edx
820006ae:	83 ca 01             	or     $0x1,%edx
820006b1:	89 50 04             	mov    %edx,0x4(%eax)
820006b4:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006b9:	39 45 e0             	cmp    %eax,-0x20(%ebp)
820006bc:	74 76                	je     82000734 <malloc_extend_top+0x25a>
820006be:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
820006c2:	77 14                	ja     820006d8 <malloc_extend_top+0x1fe>
820006c4:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820006c9:	8b 40 08             	mov    0x8(%eax),%eax
820006cc:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
820006d3:	e9 93 00 00 00       	jmp    8200076b <malloc_extend_top+0x291>
820006d8:	8b 45 dc             	mov    -0x24(%ebp),%eax
820006db:	83 e8 0c             	sub    $0xc,%eax
820006de:	83 e0 f8             	and    $0xfffffff8,%eax
820006e1:	89 45 dc             	mov    %eax,-0x24(%ebp)
820006e4:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006e7:	8b 40 04             	mov    0x4(%eax),%eax
820006ea:	83 e0 01             	and    $0x1,%eax
820006ed:	0b 45 dc             	or     -0x24(%ebp),%eax
820006f0:	89 c2                	mov    %eax,%edx
820006f2:	8b 45 e0             	mov    -0x20(%ebp),%eax
820006f5:	89 50 04             	mov    %edx,0x4(%eax)
820006f8:	8b 55 e0             	mov    -0x20(%ebp),%edx
820006fb:	8b 45 dc             	mov    -0x24(%ebp),%eax
820006fe:	01 d0                	add    %edx,%eax
82000700:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
82000707:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200070a:	8d 50 04             	lea    0x4(%eax),%edx
8200070d:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000710:	01 d0                	add    %edx,%eax
82000712:	c7 40 04 05 00 00 00 	movl   $0x5,0x4(%eax)
82000719:	83 7d dc 0f          	cmpl   $0xf,-0x24(%ebp)
8200071d:	76 15                	jbe    82000734 <malloc_extend_top+0x25a>
8200071f:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000722:	83 c0 08             	add    $0x8,%eax
82000725:	83 ec 08             	sub    $0x8,%esp
82000728:	50                   	push   %eax
82000729:	ff 75 08             	pushl  0x8(%ebp)
8200072c:	e8 bf 09 00 00       	call   820010f0 <_free_r>
82000731:	83 c4 10             	add    $0x10,%esp
82000734:	a1 60 20 00 82       	mov    0x82002060,%eax
82000739:	89 c2                	mov    %eax,%edx
8200073b:	a1 44 20 00 82       	mov    0x82002044,%eax
82000740:	39 c2                	cmp    %eax,%edx
82000742:	76 0a                	jbe    8200074e <malloc_extend_top+0x274>
82000744:	a1 60 20 00 82       	mov    0x82002060,%eax
82000749:	a3 44 20 00 82       	mov    %eax,0x82002044
8200074e:	a1 60 20 00 82       	mov    0x82002060,%eax
82000753:	89 c2                	mov    %eax,%edx
82000755:	a1 48 20 00 82       	mov    0x82002048,%eax
8200075a:	39 c2                	cmp    %eax,%edx
8200075c:	76 0d                	jbe    8200076b <malloc_extend_top+0x291>
8200075e:	a1 60 20 00 82       	mov    0x82002060,%eax
82000763:	a3 48 20 00 82       	mov    %eax,0x82002048
82000768:	eb 01                	jmp    8200076b <malloc_extend_top+0x291>
8200076a:	90                   	nop
8200076b:	c9                   	leave  
8200076c:	c3                   	ret    

8200076d <_malloc_r>:
8200076d:	55                   	push   %ebp
8200076e:	89 e5                	mov    %esp,%ebp
82000770:	53                   	push   %ebx
82000771:	83 ec 44             	sub    $0x44,%esp
82000774:	8b 45 0c             	mov    0xc(%ebp),%eax
82000777:	83 c0 0b             	add    $0xb,%eax
8200077a:	83 f8 16             	cmp    $0x16,%eax
8200077d:	76 0b                	jbe    8200078a <_malloc_r+0x1d>
8200077f:	8b 45 0c             	mov    0xc(%ebp),%eax
82000782:	83 c0 0b             	add    $0xb,%eax
82000785:	83 e0 f8             	and    $0xfffffff8,%eax
82000788:	eb 05                	jmp    8200078f <_malloc_r+0x22>
8200078a:	b8 10 00 00 00       	mov    $0x10,%eax
8200078f:	89 45 d0             	mov    %eax,-0x30(%ebp)
82000792:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000795:	85 c0                	test   %eax,%eax
82000797:	78 08                	js     820007a1 <_malloc_r+0x34>
82000799:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200079c:	3b 45 0c             	cmp    0xc(%ebp),%eax
8200079f:	73 13                	jae    820007b4 <_malloc_r+0x47>
820007a1:	8b 45 08             	mov    0x8(%ebp),%eax
820007a4:	c7 00 0c 00 00 00    	movl   $0xc,(%eax)
820007aa:	b8 00 00 00 00       	mov    $0x0,%eax
820007af:	e9 d6 07 00 00       	jmp    82000f8a <_malloc_r+0x81d>
820007b4:	83 ec 0c             	sub    $0xc,%esp
820007b7:	ff 75 08             	pushl  0x8(%ebp)
820007ba:	e8 d0 07 00 00       	call   82000f8f <__malloc_lock>
820007bf:	83 c4 10             	add    $0x10,%esp
820007c2:	81 7d d0 f7 01 00 00 	cmpl   $0x1f7,-0x30(%ebp)
820007c9:	0f 87 b0 00 00 00    	ja     8200087f <_malloc_r+0x112>
820007cf:	8b 45 d0             	mov    -0x30(%ebp),%eax
820007d2:	c1 e8 03             	shr    $0x3,%eax
820007d5:	89 45 f0             	mov    %eax,-0x10(%ebp)
820007d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
820007db:	83 c0 01             	add    $0x1,%eax
820007de:	01 c0                	add    %eax,%eax
820007e0:	c1 e0 02             	shl    $0x2,%eax
820007e3:	05 20 1c 00 82       	add    $0x82001c20,%eax
820007e8:	83 e8 08             	sub    $0x8,%eax
820007eb:	89 45 d4             	mov    %eax,-0x2c(%ebp)
820007ee:	8b 45 d4             	mov    -0x2c(%ebp),%eax
820007f1:	8b 40 0c             	mov    0xc(%eax),%eax
820007f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
820007f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
820007fa:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
820007fd:	75 0d                	jne    8200080c <_malloc_r+0x9f>
820007ff:	83 45 d4 08          	addl   $0x8,-0x2c(%ebp)
82000803:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000806:	8b 40 0c             	mov    0xc(%eax),%eax
82000809:	89 45 f4             	mov    %eax,-0xc(%ebp)
8200080c:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200080f:	3b 45 d4             	cmp    -0x2c(%ebp),%eax
82000812:	74 62                	je     82000876 <_malloc_r+0x109>
82000814:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000817:	8b 40 04             	mov    0x4(%eax),%eax
8200081a:	83 e0 fc             	and    $0xfffffffc,%eax
8200081d:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000820:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000823:	8b 40 0c             	mov    0xc(%eax),%eax
82000826:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000829:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200082c:	8b 40 08             	mov    0x8(%eax),%eax
8200082f:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000832:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000835:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000838:	89 50 0c             	mov    %edx,0xc(%eax)
8200083b:	8b 45 d8             	mov    -0x28(%ebp),%eax
8200083e:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000841:	89 50 08             	mov    %edx,0x8(%eax)
82000844:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000847:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200084a:	01 d0                	add    %edx,%eax
8200084c:	8b 50 04             	mov    0x4(%eax),%edx
8200084f:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000852:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000855:	01 c8                	add    %ecx,%eax
82000857:	83 ca 01             	or     $0x1,%edx
8200085a:	89 50 04             	mov    %edx,0x4(%eax)
8200085d:	83 ec 0c             	sub    $0xc,%esp
82000860:	ff 75 08             	pushl  0x8(%ebp)
82000863:	e8 2d 07 00 00       	call   82000f95 <__malloc_unlock>
82000868:	83 c4 10             	add    $0x10,%esp
8200086b:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200086e:	83 c0 08             	add    $0x8,%eax
82000871:	e9 14 07 00 00       	jmp    82000f8a <_malloc_r+0x81d>
82000876:	83 45 f0 02          	addl   $0x2,-0x10(%ebp)
8200087a:	e9 46 01 00 00       	jmp    820009c5 <_malloc_r+0x258>
8200087f:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000882:	c1 e8 09             	shr    $0x9,%eax
82000885:	85 c0                	test   %eax,%eax
82000887:	75 08                	jne    82000891 <_malloc_r+0x124>
82000889:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200088c:	c1 e8 03             	shr    $0x3,%eax
8200088f:	eb 77                	jmp    82000908 <_malloc_r+0x19b>
82000891:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000894:	c1 e8 09             	shr    $0x9,%eax
82000897:	83 f8 04             	cmp    $0x4,%eax
8200089a:	77 0b                	ja     820008a7 <_malloc_r+0x13a>
8200089c:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200089f:	c1 e8 06             	shr    $0x6,%eax
820008a2:	83 c0 38             	add    $0x38,%eax
820008a5:	eb 61                	jmp    82000908 <_malloc_r+0x19b>
820008a7:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008aa:	c1 e8 09             	shr    $0x9,%eax
820008ad:	83 f8 14             	cmp    $0x14,%eax
820008b0:	77 0b                	ja     820008bd <_malloc_r+0x150>
820008b2:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008b5:	c1 e8 09             	shr    $0x9,%eax
820008b8:	83 c0 5b             	add    $0x5b,%eax
820008bb:	eb 4b                	jmp    82000908 <_malloc_r+0x19b>
820008bd:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008c0:	c1 e8 09             	shr    $0x9,%eax
820008c3:	83 f8 54             	cmp    $0x54,%eax
820008c6:	77 0b                	ja     820008d3 <_malloc_r+0x166>
820008c8:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008cb:	c1 e8 0c             	shr    $0xc,%eax
820008ce:	83 c0 6e             	add    $0x6e,%eax
820008d1:	eb 35                	jmp    82000908 <_malloc_r+0x19b>
820008d3:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008d6:	c1 e8 09             	shr    $0x9,%eax
820008d9:	3d 54 01 00 00       	cmp    $0x154,%eax
820008de:	77 0b                	ja     820008eb <_malloc_r+0x17e>
820008e0:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008e3:	c1 e8 0f             	shr    $0xf,%eax
820008e6:	83 c0 77             	add    $0x77,%eax
820008e9:	eb 1d                	jmp    82000908 <_malloc_r+0x19b>
820008eb:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008ee:	c1 e8 09             	shr    $0x9,%eax
820008f1:	3d 54 05 00 00       	cmp    $0x554,%eax
820008f6:	77 0b                	ja     82000903 <_malloc_r+0x196>
820008f8:	8b 45 d0             	mov    -0x30(%ebp),%eax
820008fb:	c1 e8 12             	shr    $0x12,%eax
820008fe:	83 c0 7c             	add    $0x7c,%eax
82000901:	eb 05                	jmp    82000908 <_malloc_r+0x19b>
82000903:	b8 7e 00 00 00       	mov    $0x7e,%eax
82000908:	89 45 f0             	mov    %eax,-0x10(%ebp)
8200090b:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200090e:	83 c0 01             	add    $0x1,%eax
82000911:	01 c0                	add    %eax,%eax
82000913:	c1 e0 02             	shl    $0x2,%eax
82000916:	05 20 1c 00 82       	add    $0x82001c20,%eax
8200091b:	83 e8 08             	sub    $0x8,%eax
8200091e:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000921:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000924:	8b 40 0c             	mov    0xc(%eax),%eax
82000927:	89 45 f4             	mov    %eax,-0xc(%ebp)
8200092a:	e9 86 00 00 00       	jmp    820009b5 <_malloc_r+0x248>
8200092f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000932:	8b 40 04             	mov    0x4(%eax),%eax
82000935:	83 e0 fc             	and    $0xfffffffc,%eax
82000938:	89 45 cc             	mov    %eax,-0x34(%ebp)
8200093b:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200093e:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000941:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000944:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000948:	7e 06                	jle    82000950 <_malloc_r+0x1e3>
8200094a:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
8200094e:	eb 71                	jmp    820009c1 <_malloc_r+0x254>
82000950:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000954:	78 56                	js     820009ac <_malloc_r+0x23f>
82000956:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000959:	8b 40 0c             	mov    0xc(%eax),%eax
8200095c:	89 45 d8             	mov    %eax,-0x28(%ebp)
8200095f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000962:	8b 40 08             	mov    0x8(%eax),%eax
82000965:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000968:	8b 45 dc             	mov    -0x24(%ebp),%eax
8200096b:	8b 55 d8             	mov    -0x28(%ebp),%edx
8200096e:	89 50 0c             	mov    %edx,0xc(%eax)
82000971:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000974:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000977:	89 50 08             	mov    %edx,0x8(%eax)
8200097a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200097d:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000980:	01 d0                	add    %edx,%eax
82000982:	8b 50 04             	mov    0x4(%eax),%edx
82000985:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000988:	8b 45 cc             	mov    -0x34(%ebp),%eax
8200098b:	01 c8                	add    %ecx,%eax
8200098d:	83 ca 01             	or     $0x1,%edx
82000990:	89 50 04             	mov    %edx,0x4(%eax)
82000993:	83 ec 0c             	sub    $0xc,%esp
82000996:	ff 75 08             	pushl  0x8(%ebp)
82000999:	e8 f7 05 00 00       	call   82000f95 <__malloc_unlock>
8200099e:	83 c4 10             	add    $0x10,%esp
820009a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009a4:	83 c0 08             	add    $0x8,%eax
820009a7:	e9 de 05 00 00       	jmp    82000f8a <_malloc_r+0x81d>
820009ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009af:	8b 40 0c             	mov    0xc(%eax),%eax
820009b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
820009b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009b8:	3b 45 ec             	cmp    -0x14(%ebp),%eax
820009bb:	0f 85 6e ff ff ff    	jne    8200092f <_malloc_r+0x1c2>
820009c1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
820009c5:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
820009ca:	8b 40 08             	mov    0x8(%eax),%eax
820009cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
820009d0:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
820009d5:	39 45 f4             	cmp    %eax,-0xc(%ebp)
820009d8:	0f 84 9c 02 00 00    	je     82000c7a <_malloc_r+0x50d>
820009de:	8b 45 f4             	mov    -0xc(%ebp),%eax
820009e1:	8b 40 04             	mov    0x4(%eax),%eax
820009e4:	83 e0 fc             	and    $0xfffffffc,%eax
820009e7:	89 45 cc             	mov    %eax,-0x34(%ebp)
820009ea:	8b 45 cc             	mov    -0x34(%ebp),%eax
820009ed:	2b 45 d0             	sub    -0x30(%ebp),%eax
820009f0:	89 45 e8             	mov    %eax,-0x18(%ebp)
820009f3:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
820009f7:	7e 7a                	jle    82000a73 <_malloc_r+0x306>
820009f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
820009fc:	8b 45 d0             	mov    -0x30(%ebp),%eax
820009ff:	01 d0                	add    %edx,%eax
82000a01:	89 45 c4             	mov    %eax,-0x3c(%ebp)
82000a04:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000a07:	83 c8 01             	or     $0x1,%eax
82000a0a:	89 c2                	mov    %eax,%edx
82000a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000a0f:	89 50 04             	mov    %edx,0x4(%eax)
82000a12:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000a17:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000a1a:	89 50 0c             	mov    %edx,0xc(%eax)
82000a1d:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a22:	8b 40 0c             	mov    0xc(%eax),%eax
82000a25:	89 42 08             	mov    %eax,0x8(%edx)
82000a28:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a2d:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a30:	89 50 0c             	mov    %edx,0xc(%eax)
82000a33:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a36:	8b 50 0c             	mov    0xc(%eax),%edx
82000a39:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a3c:	89 50 08             	mov    %edx,0x8(%eax)
82000a3f:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a42:	83 c8 01             	or     $0x1,%eax
82000a45:	89 c2                	mov    %eax,%edx
82000a47:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a4a:	89 50 04             	mov    %edx,0x4(%eax)
82000a4d:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000a50:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000a53:	01 c2                	add    %eax,%edx
82000a55:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000a58:	89 02                	mov    %eax,(%edx)
82000a5a:	83 ec 0c             	sub    $0xc,%esp
82000a5d:	ff 75 08             	pushl  0x8(%ebp)
82000a60:	e8 30 05 00 00       	call   82000f95 <__malloc_unlock>
82000a65:	83 c4 10             	add    $0x10,%esp
82000a68:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000a6b:	83 c0 08             	add    $0x8,%eax
82000a6e:	e9 17 05 00 00       	jmp    82000f8a <_malloc_r+0x81d>
82000a73:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000a78:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a7d:	89 50 0c             	mov    %edx,0xc(%eax)
82000a80:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000a85:	8b 40 0c             	mov    0xc(%eax),%eax
82000a88:	89 42 08             	mov    %eax,0x8(%edx)
82000a8b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000a8f:	78 32                	js     82000ac3 <_malloc_r+0x356>
82000a91:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000a94:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000a97:	01 d0                	add    %edx,%eax
82000a99:	8b 50 04             	mov    0x4(%eax),%edx
82000a9c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000a9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000aa2:	01 c8                	add    %ecx,%eax
82000aa4:	83 ca 01             	or     $0x1,%edx
82000aa7:	89 50 04             	mov    %edx,0x4(%eax)
82000aaa:	83 ec 0c             	sub    $0xc,%esp
82000aad:	ff 75 08             	pushl  0x8(%ebp)
82000ab0:	e8 e0 04 00 00       	call   82000f95 <__malloc_unlock>
82000ab5:	83 c4 10             	add    $0x10,%esp
82000ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000abb:	83 c0 08             	add    $0x8,%eax
82000abe:	e9 c7 04 00 00       	jmp    82000f8a <_malloc_r+0x81d>
82000ac3:	81 7d cc ff 01 00 00 	cmpl   $0x1ff,-0x34(%ebp)
82000aca:	77 7f                	ja     82000b4b <_malloc_r+0x3de>
82000acc:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000acf:	c1 e8 03             	shr    $0x3,%eax
82000ad2:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000ad5:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ada:	8b 58 04             	mov    0x4(%eax),%ebx
82000add:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000ae0:	8d 50 03             	lea    0x3(%eax),%edx
82000ae3:	85 c0                	test   %eax,%eax
82000ae5:	0f 48 c2             	cmovs  %edx,%eax
82000ae8:	c1 f8 02             	sar    $0x2,%eax
82000aeb:	ba 01 00 00 00       	mov    $0x1,%edx
82000af0:	89 c1                	mov    %eax,%ecx
82000af2:	d3 e2                	shl    %cl,%edx
82000af4:	89 d0                	mov    %edx,%eax
82000af6:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000afb:	09 d8                	or     %ebx,%eax
82000afd:	89 42 04             	mov    %eax,0x4(%edx)
82000b00:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000b03:	83 c0 01             	add    $0x1,%eax
82000b06:	01 c0                	add    %eax,%eax
82000b08:	c1 e0 02             	shl    $0x2,%eax
82000b0b:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000b10:	83 e8 08             	sub    $0x8,%eax
82000b13:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000b16:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b19:	8b 40 08             	mov    0x8(%eax),%eax
82000b1c:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b22:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000b25:	89 50 0c             	mov    %edx,0xc(%eax)
82000b28:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000b2b:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000b2e:	89 50 08             	mov    %edx,0x8(%eax)
82000b31:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b34:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000b37:	89 50 08             	mov    %edx,0x8(%eax)
82000b3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000b3d:	8b 50 08             	mov    0x8(%eax),%edx
82000b40:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000b43:	89 50 0c             	mov    %edx,0xc(%eax)
82000b46:	e9 2f 01 00 00       	jmp    82000c7a <_malloc_r+0x50d>
82000b4b:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b4e:	c1 e8 09             	shr    $0x9,%eax
82000b51:	85 c0                	test   %eax,%eax
82000b53:	75 08                	jne    82000b5d <_malloc_r+0x3f0>
82000b55:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b58:	c1 e8 03             	shr    $0x3,%eax
82000b5b:	eb 77                	jmp    82000bd4 <_malloc_r+0x467>
82000b5d:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b60:	c1 e8 09             	shr    $0x9,%eax
82000b63:	83 f8 04             	cmp    $0x4,%eax
82000b66:	77 0b                	ja     82000b73 <_malloc_r+0x406>
82000b68:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b6b:	c1 e8 06             	shr    $0x6,%eax
82000b6e:	83 c0 38             	add    $0x38,%eax
82000b71:	eb 61                	jmp    82000bd4 <_malloc_r+0x467>
82000b73:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b76:	c1 e8 09             	shr    $0x9,%eax
82000b79:	83 f8 14             	cmp    $0x14,%eax
82000b7c:	77 0b                	ja     82000b89 <_malloc_r+0x41c>
82000b7e:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b81:	c1 e8 09             	shr    $0x9,%eax
82000b84:	83 c0 5b             	add    $0x5b,%eax
82000b87:	eb 4b                	jmp    82000bd4 <_malloc_r+0x467>
82000b89:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b8c:	c1 e8 09             	shr    $0x9,%eax
82000b8f:	83 f8 54             	cmp    $0x54,%eax
82000b92:	77 0b                	ja     82000b9f <_malloc_r+0x432>
82000b94:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000b97:	c1 e8 0c             	shr    $0xc,%eax
82000b9a:	83 c0 6e             	add    $0x6e,%eax
82000b9d:	eb 35                	jmp    82000bd4 <_malloc_r+0x467>
82000b9f:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000ba2:	c1 e8 09             	shr    $0x9,%eax
82000ba5:	3d 54 01 00 00       	cmp    $0x154,%eax
82000baa:	77 0b                	ja     82000bb7 <_malloc_r+0x44a>
82000bac:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000baf:	c1 e8 0f             	shr    $0xf,%eax
82000bb2:	83 c0 77             	add    $0x77,%eax
82000bb5:	eb 1d                	jmp    82000bd4 <_malloc_r+0x467>
82000bb7:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bba:	c1 e8 09             	shr    $0x9,%eax
82000bbd:	3d 54 05 00 00       	cmp    $0x554,%eax
82000bc2:	77 0b                	ja     82000bcf <_malloc_r+0x462>
82000bc4:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000bc7:	c1 e8 12             	shr    $0x12,%eax
82000bca:	83 c0 7c             	add    $0x7c,%eax
82000bcd:	eb 05                	jmp    82000bd4 <_malloc_r+0x467>
82000bcf:	b8 7e 00 00 00       	mov    $0x7e,%eax
82000bd4:	89 45 c8             	mov    %eax,-0x38(%ebp)
82000bd7:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000bda:	83 c0 01             	add    $0x1,%eax
82000bdd:	01 c0                	add    %eax,%eax
82000bdf:	c1 e0 02             	shl    $0x2,%eax
82000be2:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000be7:	83 e8 08             	sub    $0x8,%eax
82000bea:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000bed:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000bf0:	8b 40 08             	mov    0x8(%eax),%eax
82000bf3:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000bf6:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000bf9:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000bfc:	75 36                	jne    82000c34 <_malloc_r+0x4c7>
82000bfe:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000c03:	8b 58 04             	mov    0x4(%eax),%ebx
82000c06:	8b 45 c8             	mov    -0x38(%ebp),%eax
82000c09:	8d 50 03             	lea    0x3(%eax),%edx
82000c0c:	85 c0                	test   %eax,%eax
82000c0e:	0f 48 c2             	cmovs  %edx,%eax
82000c11:	c1 f8 02             	sar    $0x2,%eax
82000c14:	ba 01 00 00 00       	mov    $0x1,%edx
82000c19:	89 c1                	mov    %eax,%ecx
82000c1b:	d3 e2                	shl    %cl,%edx
82000c1d:	89 d0                	mov    %edx,%eax
82000c1f:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000c24:	09 d8                	or     %ebx,%eax
82000c26:	89 42 04             	mov    %eax,0x4(%edx)
82000c29:	eb 28                	jmp    82000c53 <_malloc_r+0x4e6>
82000c2b:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c2e:	8b 40 08             	mov    0x8(%eax),%eax
82000c31:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000c34:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c37:	3b 45 d8             	cmp    -0x28(%ebp),%eax
82000c3a:	74 0e                	je     82000c4a <_malloc_r+0x4dd>
82000c3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c3f:	8b 40 04             	mov    0x4(%eax),%eax
82000c42:	83 e0 fc             	and    $0xfffffffc,%eax
82000c45:	39 45 cc             	cmp    %eax,-0x34(%ebp)
82000c48:	72 e1                	jb     82000c2b <_malloc_r+0x4be>
82000c4a:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c4d:	8b 40 0c             	mov    0xc(%eax),%eax
82000c50:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000c53:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c56:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000c59:	89 50 0c             	mov    %edx,0xc(%eax)
82000c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000c5f:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000c62:	89 50 08             	mov    %edx,0x8(%eax)
82000c65:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c68:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000c6b:	89 50 08             	mov    %edx,0x8(%eax)
82000c6e:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000c71:	8b 50 08             	mov    0x8(%eax),%edx
82000c74:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000c77:	89 50 0c             	mov    %edx,0xc(%eax)
82000c7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000c7d:	8d 50 03             	lea    0x3(%eax),%edx
82000c80:	85 c0                	test   %eax,%eax
82000c82:	0f 48 c2             	cmovs  %edx,%eax
82000c85:	c1 f8 02             	sar    $0x2,%eax
82000c88:	ba 01 00 00 00       	mov    $0x1,%edx
82000c8d:	89 c1                	mov    %eax,%ecx
82000c8f:	d3 e2                	shl    %cl,%edx
82000c91:	89 d0                	mov    %edx,%eax
82000c93:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82000c96:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000c9b:	8b 40 04             	mov    0x4(%eax),%eax
82000c9e:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000ca1:	0f 87 13 02 00 00    	ja     82000eba <_malloc_r+0x74d>
82000ca7:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000cac:	8b 40 04             	mov    0x4(%eax),%eax
82000caf:	23 45 e4             	and    -0x1c(%ebp),%eax
82000cb2:	85 c0                	test   %eax,%eax
82000cb4:	75 27                	jne    82000cdd <_malloc_r+0x570>
82000cb6:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000cb9:	83 e0 fc             	and    $0xfffffffc,%eax
82000cbc:	83 c0 04             	add    $0x4,%eax
82000cbf:	89 45 f0             	mov    %eax,-0x10(%ebp)
82000cc2:	d1 65 e4             	shll   -0x1c(%ebp)
82000cc5:	eb 07                	jmp    82000cce <_malloc_r+0x561>
82000cc7:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000ccb:	d1 65 e4             	shll   -0x1c(%ebp)
82000cce:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000cd3:	8b 40 04             	mov    0x4(%eax),%eax
82000cd6:	23 45 e4             	and    -0x1c(%ebp),%eax
82000cd9:	85 c0                	test   %eax,%eax
82000cdb:	74 ea                	je     82000cc7 <_malloc_r+0x55a>
82000cdd:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000ce0:	89 45 e0             	mov    %eax,-0x20(%ebp)
82000ce3:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000ce6:	83 c0 01             	add    $0x1,%eax
82000ce9:	01 c0                	add    %eax,%eax
82000ceb:	c1 e0 02             	shl    $0x2,%eax
82000cee:	05 20 1c 00 82       	add    $0x82001c20,%eax
82000cf3:	83 e8 08             	sub    $0x8,%eax
82000cf6:	89 45 ec             	mov    %eax,-0x14(%ebp)
82000cf9:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000cfc:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82000cff:	8b 45 ec             	mov    -0x14(%ebp),%eax
82000d02:	8b 40 0c             	mov    0xc(%eax),%eax
82000d05:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000d08:	e9 22 01 00 00       	jmp    82000e2f <_malloc_r+0x6c2>
82000d0d:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d10:	8b 40 04             	mov    0x4(%eax),%eax
82000d13:	83 e0 fc             	and    $0xfffffffc,%eax
82000d16:	89 45 cc             	mov    %eax,-0x34(%ebp)
82000d19:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000d1c:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000d1f:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000d22:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000d26:	0f 8e 9e 00 00 00    	jle    82000dca <_malloc_r+0x65d>
82000d2c:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000d2f:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d32:	01 d0                	add    %edx,%eax
82000d34:	89 45 c4             	mov    %eax,-0x3c(%ebp)
82000d37:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000d3a:	83 c8 01             	or     $0x1,%eax
82000d3d:	89 c2                	mov    %eax,%edx
82000d3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d42:	89 50 04             	mov    %edx,0x4(%eax)
82000d45:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d48:	8b 40 0c             	mov    0xc(%eax),%eax
82000d4b:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000d4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000d51:	8b 40 08             	mov    0x8(%eax),%eax
82000d54:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000d57:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000d5a:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000d5d:	89 50 0c             	mov    %edx,0xc(%eax)
82000d60:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000d63:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000d66:	89 50 08             	mov    %edx,0x8(%eax)
82000d69:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
82000d6e:	8b 55 c4             	mov    -0x3c(%ebp),%edx
82000d71:	89 50 0c             	mov    %edx,0xc(%eax)
82000d74:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000d79:	8b 40 0c             	mov    0xc(%eax),%eax
82000d7c:	89 42 08             	mov    %eax,0x8(%edx)
82000d7f:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82000d84:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d87:	89 50 0c             	mov    %edx,0xc(%eax)
82000d8a:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d8d:	8b 50 0c             	mov    0xc(%eax),%edx
82000d90:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000d93:	89 50 08             	mov    %edx,0x8(%eax)
82000d96:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000d99:	83 c8 01             	or     $0x1,%eax
82000d9c:	89 c2                	mov    %eax,%edx
82000d9e:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000da1:	89 50 04             	mov    %edx,0x4(%eax)
82000da4:	8b 55 e8             	mov    -0x18(%ebp),%edx
82000da7:	8b 45 c4             	mov    -0x3c(%ebp),%eax
82000daa:	01 c2                	add    %eax,%edx
82000dac:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000daf:	89 02                	mov    %eax,(%edx)
82000db1:	83 ec 0c             	sub    $0xc,%esp
82000db4:	ff 75 08             	pushl  0x8(%ebp)
82000db7:	e8 d9 01 00 00       	call   82000f95 <__malloc_unlock>
82000dbc:	83 c4 10             	add    $0x10,%esp
82000dbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000dc2:	83 c0 08             	add    $0x8,%eax
82000dc5:	e9 c0 01 00 00       	jmp    82000f8a <_malloc_r+0x81d>
82000dca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
82000dce:	78 56                	js     82000e26 <_malloc_r+0x6b9>
82000dd0:	8b 55 f4             	mov    -0xc(%ebp),%edx
82000dd3:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000dd6:	01 d0                	add    %edx,%eax
82000dd8:	8b 50 04             	mov    0x4(%eax),%edx
82000ddb:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000dde:	8b 45 cc             	mov    -0x34(%ebp),%eax
82000de1:	01 c8                	add    %ecx,%eax
82000de3:	83 ca 01             	or     $0x1,%edx
82000de6:	89 50 04             	mov    %edx,0x4(%eax)
82000de9:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000dec:	8b 40 0c             	mov    0xc(%eax),%eax
82000def:	89 45 d8             	mov    %eax,-0x28(%ebp)
82000df2:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000df5:	8b 40 08             	mov    0x8(%eax),%eax
82000df8:	89 45 dc             	mov    %eax,-0x24(%ebp)
82000dfb:	8b 45 dc             	mov    -0x24(%ebp),%eax
82000dfe:	8b 55 d8             	mov    -0x28(%ebp),%edx
82000e01:	89 50 0c             	mov    %edx,0xc(%eax)
82000e04:	8b 45 d8             	mov    -0x28(%ebp),%eax
82000e07:	8b 55 dc             	mov    -0x24(%ebp),%edx
82000e0a:	89 50 08             	mov    %edx,0x8(%eax)
82000e0d:	83 ec 0c             	sub    $0xc,%esp
82000e10:	ff 75 08             	pushl  0x8(%ebp)
82000e13:	e8 7d 01 00 00       	call   82000f95 <__malloc_unlock>
82000e18:	83 c4 10             	add    $0x10,%esp
82000e1b:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e1e:	83 c0 08             	add    $0x8,%eax
82000e21:	e9 64 01 00 00       	jmp    82000f8a <_malloc_r+0x81d>
82000e26:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e29:	8b 40 0c             	mov    0xc(%eax),%eax
82000e2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000e2f:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000e32:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82000e35:	0f 85 d2 fe ff ff    	jne    82000d0d <_malloc_r+0x5a0>
82000e3b:	83 45 ec 08          	addl   $0x8,-0x14(%ebp)
82000e3f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
82000e43:	8b 45 f0             	mov    -0x10(%ebp),%eax
82000e46:	83 e0 03             	and    $0x3,%eax
82000e49:	85 c0                	test   %eax,%eax
82000e4b:	0f 85 ae fe ff ff    	jne    82000cff <_malloc_r+0x592>
82000e51:	8b 45 e0             	mov    -0x20(%ebp),%eax
82000e54:	83 e0 03             	and    $0x3,%eax
82000e57:	85 c0                	test   %eax,%eax
82000e59:	75 19                	jne    82000e74 <_malloc_r+0x707>
82000e5b:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000e60:	8b 48 04             	mov    0x4(%eax),%ecx
82000e63:	8b 45 e4             	mov    -0x1c(%ebp),%eax
82000e66:	f7 d0                	not    %eax
82000e68:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000e6d:	21 c8                	and    %ecx,%eax
82000e6f:	89 42 04             	mov    %eax,0x4(%edx)
82000e72:	eb 13                	jmp    82000e87 <_malloc_r+0x71a>
82000e74:	83 6d e0 01          	subl   $0x1,-0x20(%ebp)
82000e78:	83 6d d4 08          	subl   $0x8,-0x2c(%ebp)
82000e7c:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82000e7f:	8b 40 08             	mov    0x8(%eax),%eax
82000e82:	39 45 d4             	cmp    %eax,-0x2c(%ebp)
82000e85:	74 ca                	je     82000e51 <_malloc_r+0x6e4>
82000e87:	d1 65 e4             	shll   -0x1c(%ebp)
82000e8a:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000e8f:	8b 40 04             	mov    0x4(%eax),%eax
82000e92:	39 45 e4             	cmp    %eax,-0x1c(%ebp)
82000e95:	77 23                	ja     82000eba <_malloc_r+0x74d>
82000e97:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
82000e9b:	74 1d                	je     82000eba <_malloc_r+0x74d>
82000e9d:	eb 07                	jmp    82000ea6 <_malloc_r+0x739>
82000e9f:	83 45 f0 04          	addl   $0x4,-0x10(%ebp)
82000ea3:	d1 65 e4             	shll   -0x1c(%ebp)
82000ea6:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000eab:	8b 40 04             	mov    0x4(%eax),%eax
82000eae:	23 45 e4             	and    -0x1c(%ebp),%eax
82000eb1:	85 c0                	test   %eax,%eax
82000eb3:	74 ea                	je     82000e9f <_malloc_r+0x732>
82000eb5:	e9 23 fe ff ff       	jmp    82000cdd <_malloc_r+0x570>
82000eba:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ebf:	8b 40 08             	mov    0x8(%eax),%eax
82000ec2:	8b 40 04             	mov    0x4(%eax),%eax
82000ec5:	83 e0 fc             	and    $0xfffffffc,%eax
82000ec8:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000ecb:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000ece:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000ed3:	8b 40 08             	mov    0x8(%eax),%eax
82000ed6:	8b 40 04             	mov    0x4(%eax),%eax
82000ed9:	83 e0 fc             	and    $0xfffffffc,%eax
82000edc:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000edf:	77 06                	ja     82000ee7 <_malloc_r+0x77a>
82000ee1:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000ee5:	7f 53                	jg     82000f3a <_malloc_r+0x7cd>
82000ee7:	83 ec 08             	sub    $0x8,%esp
82000eea:	ff 75 d0             	pushl  -0x30(%ebp)
82000eed:	ff 75 08             	pushl  0x8(%ebp)
82000ef0:	e8 e5 f5 ff ff       	call   820004da <malloc_extend_top>
82000ef5:	83 c4 10             	add    $0x10,%esp
82000ef8:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000efd:	8b 40 08             	mov    0x8(%eax),%eax
82000f00:	8b 40 04             	mov    0x4(%eax),%eax
82000f03:	83 e0 fc             	and    $0xfffffffc,%eax
82000f06:	2b 45 d0             	sub    -0x30(%ebp),%eax
82000f09:	89 45 e8             	mov    %eax,-0x18(%ebp)
82000f0c:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f11:	8b 40 08             	mov    0x8(%eax),%eax
82000f14:	8b 40 04             	mov    0x4(%eax),%eax
82000f17:	83 e0 fc             	and    $0xfffffffc,%eax
82000f1a:	39 45 d0             	cmp    %eax,-0x30(%ebp)
82000f1d:	77 06                	ja     82000f25 <_malloc_r+0x7b8>
82000f1f:	83 7d e8 0f          	cmpl   $0xf,-0x18(%ebp)
82000f23:	7f 15                	jg     82000f3a <_malloc_r+0x7cd>
82000f25:	83 ec 0c             	sub    $0xc,%esp
82000f28:	ff 75 08             	pushl  0x8(%ebp)
82000f2b:	e8 65 00 00 00       	call   82000f95 <__malloc_unlock>
82000f30:	83 c4 10             	add    $0x10,%esp
82000f33:	b8 00 00 00 00       	mov    $0x0,%eax
82000f38:	eb 50                	jmp    82000f8a <_malloc_r+0x81d>
82000f3a:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f3f:	8b 40 08             	mov    0x8(%eax),%eax
82000f42:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000f45:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f48:	83 c8 01             	or     $0x1,%eax
82000f4b:	89 c2                	mov    %eax,%edx
82000f4d:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f50:	89 50 04             	mov    %edx,0x4(%eax)
82000f53:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82000f58:	8b 4d f4             	mov    -0xc(%ebp),%ecx
82000f5b:	8b 45 d0             	mov    -0x30(%ebp),%eax
82000f5e:	01 c8                	add    %ecx,%eax
82000f60:	89 42 08             	mov    %eax,0x8(%edx)
82000f63:	8b 45 e8             	mov    -0x18(%ebp),%eax
82000f66:	83 c8 01             	or     $0x1,%eax
82000f69:	89 c2                	mov    %eax,%edx
82000f6b:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82000f70:	8b 40 08             	mov    0x8(%eax),%eax
82000f73:	89 50 04             	mov    %edx,0x4(%eax)
82000f76:	83 ec 0c             	sub    $0xc,%esp
82000f79:	ff 75 08             	pushl  0x8(%ebp)
82000f7c:	e8 14 00 00 00       	call   82000f95 <__malloc_unlock>
82000f81:	83 c4 10             	add    $0x10,%esp
82000f84:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000f87:	83 c0 08             	add    $0x8,%eax
82000f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
82000f8d:	c9                   	leave  
82000f8e:	c3                   	ret    

82000f8f <__malloc_lock>:
82000f8f:	55                   	push   %ebp
82000f90:	89 e5                	mov    %esp,%ebp
82000f92:	90                   	nop
82000f93:	5d                   	pop    %ebp
82000f94:	c3                   	ret    

82000f95 <__malloc_unlock>:
82000f95:	55                   	push   %ebp
82000f96:	89 e5                	mov    %esp,%ebp
82000f98:	90                   	nop
82000f99:	5d                   	pop    %ebp
82000f9a:	c3                   	ret    

82000f9b <_sbrk_r>:
82000f9b:	55                   	push   %ebp
82000f9c:	89 e5                	mov    %esp,%ebp
82000f9e:	83 ec 18             	sub    $0x18,%esp
82000fa1:	c7 05 90 20 00 82 00 	movl   $0x0,0x82002090
82000fa8:	00 00 00 
82000fab:	83 ec 0c             	sub    $0xc,%esp
82000fae:	ff 75 0c             	pushl  0xc(%ebp)
82000fb1:	e8 cb f2 ff ff       	call   82000281 <sbrk>
82000fb6:	83 c4 10             	add    $0x10,%esp
82000fb9:	89 45 f4             	mov    %eax,-0xc(%ebp)
82000fbc:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)
82000fc0:	75 14                	jne    82000fd6 <_sbrk_r+0x3b>
82000fc2:	a1 90 20 00 82       	mov    0x82002090,%eax
82000fc7:	85 c0                	test   %eax,%eax
82000fc9:	74 0b                	je     82000fd6 <_sbrk_r+0x3b>
82000fcb:	8b 15 90 20 00 82    	mov    0x82002090,%edx
82000fd1:	8b 45 08             	mov    0x8(%ebp),%eax
82000fd4:	89 10                	mov    %edx,(%eax)
82000fd6:	8b 45 f4             	mov    -0xc(%ebp),%eax
82000fd9:	c9                   	leave  
82000fda:	c3                   	ret    

82000fdb <__call_exitprocs>:
82000fdb:	55                   	push   %ebp
82000fdc:	89 e5                	mov    %esp,%ebp
82000fde:	57                   	push   %edi
82000fdf:	56                   	push   %esi
82000fe0:	53                   	push   %ebx
82000fe1:	83 ec 1c             	sub    $0x1c,%esp
82000fe4:	a1 c4 17 00 82       	mov    0x820017c4,%eax
82000fe9:	8b 98 48 01 00 00    	mov    0x148(%eax),%ebx
82000fef:	a1 c4 17 00 82       	mov    0x820017c4,%eax
82000ff4:	05 48 01 00 00       	add    $0x148,%eax
82000ff9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
82000ffc:	90                   	nop
82000ffd:	85 db                	test   %ebx,%ebx
82000fff:	0f 84 e1 00 00 00    	je     820010e6 <__call_exitprocs+0x10b>
82001005:	8d bb 88 00 00 00    	lea    0x88(%ebx),%edi
8200100b:	8b 43 04             	mov    0x4(%ebx),%eax
8200100e:	8d 70 ff             	lea    -0x1(%eax),%esi
82001011:	e9 c6 00 00 00       	jmp    820010dc <__call_exitprocs+0x101>
82001016:	b8 01 00 00 00       	mov    $0x1,%eax
8200101b:	89 f1                	mov    %esi,%ecx
8200101d:	d3 e0                	shl    %cl,%eax
8200101f:	89 45 e0             	mov    %eax,-0x20(%ebp)
82001022:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
82001026:	74 17                	je     8200103f <__call_exitprocs+0x64>
82001028:	85 ff                	test   %edi,%edi
8200102a:	0f 84 a5 00 00 00    	je     820010d5 <__call_exitprocs+0xfa>
82001030:	8d 46 20             	lea    0x20(%esi),%eax
82001033:	8b 04 87             	mov    (%edi,%eax,4),%eax
82001036:	39 45 0c             	cmp    %eax,0xc(%ebp)
82001039:	0f 85 96 00 00 00    	jne    820010d5 <__call_exitprocs+0xfa>
8200103f:	8b 44 b3 08          	mov    0x8(%ebx,%esi,4),%eax
82001043:	89 45 dc             	mov    %eax,-0x24(%ebp)
82001046:	8b 43 04             	mov    0x4(%ebx),%eax
82001049:	83 e8 01             	sub    $0x1,%eax
8200104c:	39 c6                	cmp    %eax,%esi
8200104e:	75 0b                	jne    8200105b <__call_exitprocs+0x80>
82001050:	8b 43 04             	mov    0x4(%ebx),%eax
82001053:	83 e8 01             	sub    $0x1,%eax
82001056:	89 43 04             	mov    %eax,0x4(%ebx)
82001059:	eb 08                	jmp    82001063 <__call_exitprocs+0x88>
8200105b:	c7 44 b3 08 00 00 00 	movl   $0x0,0x8(%ebx,%esi,4)
82001062:	00 
82001063:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
82001067:	74 6f                	je     820010d8 <__call_exitprocs+0xfd>
82001069:	8b 43 04             	mov    0x4(%ebx),%eax
8200106c:	89 45 d8             	mov    %eax,-0x28(%ebp)
8200106f:	85 ff                	test   %edi,%edi
82001071:	74 0f                	je     82001082 <__call_exitprocs+0xa7>
82001073:	8b 97 00 01 00 00    	mov    0x100(%edi),%edx
82001079:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200107c:	21 d0                	and    %edx,%eax
8200107e:	85 c0                	test   %eax,%eax
82001080:	75 07                	jne    82001089 <__call_exitprocs+0xae>
82001082:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001085:	ff d0                	call   *%eax
82001087:	eb 32                	jmp    820010bb <__call_exitprocs+0xe0>
82001089:	8b 97 04 01 00 00    	mov    0x104(%edi),%edx
8200108f:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001092:	21 d0                	and    %edx,%eax
82001094:	85 c0                	test   %eax,%eax
82001096:	75 14                	jne    820010ac <__call_exitprocs+0xd1>
82001098:	8b 04 b7             	mov    (%edi,%esi,4),%eax
8200109b:	83 ec 08             	sub    $0x8,%esp
8200109e:	50                   	push   %eax
8200109f:	ff 75 08             	pushl  0x8(%ebp)
820010a2:	8b 45 dc             	mov    -0x24(%ebp),%eax
820010a5:	ff d0                	call   *%eax
820010a7:	83 c4 10             	add    $0x10,%esp
820010aa:	eb 0f                	jmp    820010bb <__call_exitprocs+0xe0>
820010ac:	8b 04 b7             	mov    (%edi,%esi,4),%eax
820010af:	83 ec 0c             	sub    $0xc,%esp
820010b2:	50                   	push   %eax
820010b3:	8b 45 dc             	mov    -0x24(%ebp),%eax
820010b6:	ff d0                	call   *%eax
820010b8:	83 c4 10             	add    $0x10,%esp
820010bb:	8b 43 04             	mov    0x4(%ebx),%eax
820010be:	39 45 d8             	cmp    %eax,-0x28(%ebp)
820010c1:	0f 85 1d ff ff ff    	jne    82000fe4 <__call_exitprocs+0x9>
820010c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
820010ca:	8b 00                	mov    (%eax),%eax
820010cc:	39 c3                	cmp    %eax,%ebx
820010ce:	74 09                	je     820010d9 <__call_exitprocs+0xfe>
820010d0:	e9 0f ff ff ff       	jmp    82000fe4 <__call_exitprocs+0x9>
820010d5:	90                   	nop
820010d6:	eb 01                	jmp    820010d9 <__call_exitprocs+0xfe>
820010d8:	90                   	nop
820010d9:	83 ee 01             	sub    $0x1,%esi
820010dc:	85 f6                	test   %esi,%esi
820010de:	0f 89 32 ff ff ff    	jns    82001016 <__call_exitprocs+0x3b>
820010e4:	eb 01                	jmp    820010e7 <__call_exitprocs+0x10c>
820010e6:	90                   	nop
820010e7:	90                   	nop
820010e8:	8d 65 f4             	lea    -0xc(%ebp),%esp
820010eb:	5b                   	pop    %ebx
820010ec:	5e                   	pop    %esi
820010ed:	5f                   	pop    %edi
820010ee:	5d                   	pop    %ebp
820010ef:	c3                   	ret    

820010f0 <_free_r>:
820010f0:	55                   	push   %ebp
820010f1:	89 e5                	mov    %esp,%ebp
820010f3:	53                   	push   %ebx
820010f4:	83 ec 34             	sub    $0x34,%esp
820010f7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
820010fb:	0f 84 c4 03 00 00    	je     820014c5 <_free_r+0x3d5>
82001101:	83 ec 0c             	sub    $0xc,%esp
82001104:	ff 75 08             	pushl  0x8(%ebp)
82001107:	e8 83 fe ff ff       	call   82000f8f <__malloc_lock>
8200110c:	83 c4 10             	add    $0x10,%esp
8200110f:	8b 45 0c             	mov    0xc(%ebp),%eax
82001112:	83 e8 08             	sub    $0x8,%eax
82001115:	89 45 f4             	mov    %eax,-0xc(%ebp)
82001118:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200111b:	8b 40 04             	mov    0x4(%eax),%eax
8200111e:	89 45 e0             	mov    %eax,-0x20(%ebp)
82001121:	8b 45 e0             	mov    -0x20(%ebp),%eax
82001124:	83 e0 fe             	and    $0xfffffffe,%eax
82001127:	89 45 f0             	mov    %eax,-0x10(%ebp)
8200112a:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200112d:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001130:	01 d0                	add    %edx,%eax
82001132:	89 45 dc             	mov    %eax,-0x24(%ebp)
82001135:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001138:	8b 40 04             	mov    0x4(%eax),%eax
8200113b:	83 e0 fc             	and    $0xfffffffc,%eax
8200113e:	89 45 d8             	mov    %eax,-0x28(%ebp)
82001141:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001146:	8b 40 08             	mov    0x8(%eax),%eax
82001149:	39 45 dc             	cmp    %eax,-0x24(%ebp)
8200114c:	0f 85 94 00 00 00    	jne    820011e6 <_free_r+0xf6>
82001152:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001155:	01 45 f0             	add    %eax,-0x10(%ebp)
82001158:	8b 45 e0             	mov    -0x20(%ebp),%eax
8200115b:	83 e0 01             	and    $0x1,%eax
8200115e:	85 c0                	test   %eax,%eax
82001160:	75 3a                	jne    8200119c <_free_r+0xac>
82001162:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001165:	8b 00                	mov    (%eax),%eax
82001167:	89 45 d4             	mov    %eax,-0x2c(%ebp)
8200116a:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200116d:	f7 d8                	neg    %eax
8200116f:	01 45 f4             	add    %eax,-0xc(%ebp)
82001172:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001175:	01 45 f0             	add    %eax,-0x10(%ebp)
82001178:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200117b:	8b 40 0c             	mov    0xc(%eax),%eax
8200117e:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001181:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001184:	8b 40 08             	mov    0x8(%eax),%eax
82001187:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200118a:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200118d:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001190:	89 50 0c             	mov    %edx,0xc(%eax)
82001193:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001196:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001199:	89 50 08             	mov    %edx,0x8(%eax)
8200119c:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200119f:	83 c8 01             	or     $0x1,%eax
820011a2:	89 c2                	mov    %eax,%edx
820011a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
820011a7:	89 50 04             	mov    %edx,0x4(%eax)
820011aa:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
820011af:	8b 45 f4             	mov    -0xc(%ebp),%eax
820011b2:	89 42 08             	mov    %eax,0x8(%edx)
820011b5:	a1 28 20 00 82       	mov    0x82002028,%eax
820011ba:	39 45 f0             	cmp    %eax,-0x10(%ebp)
820011bd:	72 14                	jb     820011d3 <_free_r+0xe3>
820011bf:	a1 40 20 00 82       	mov    0x82002040,%eax
820011c4:	83 ec 08             	sub    $0x8,%esp
820011c7:	50                   	push   %eax
820011c8:	ff 75 08             	pushl  0x8(%ebp)
820011cb:	e8 fb 02 00 00       	call   820014cb <_malloc_trim_r>
820011d0:	83 c4 10             	add    $0x10,%esp
820011d3:	83 ec 0c             	sub    $0xc,%esp
820011d6:	ff 75 08             	pushl  0x8(%ebp)
820011d9:	e8 b7 fd ff ff       	call   82000f95 <__malloc_unlock>
820011de:	83 c4 10             	add    $0x10,%esp
820011e1:	e9 e0 02 00 00       	jmp    820014c6 <_free_r+0x3d6>
820011e6:	8b 45 dc             	mov    -0x24(%ebp),%eax
820011e9:	8b 55 d8             	mov    -0x28(%ebp),%edx
820011ec:	89 50 04             	mov    %edx,0x4(%eax)
820011ef:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)
820011f6:	8b 45 e0             	mov    -0x20(%ebp),%eax
820011f9:	83 e0 01             	and    $0x1,%eax
820011fc:	85 c0                	test   %eax,%eax
820011fe:	75 52                	jne    82001252 <_free_r+0x162>
82001200:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001203:	8b 00                	mov    (%eax),%eax
82001205:	89 45 d4             	mov    %eax,-0x2c(%ebp)
82001208:	8b 45 d4             	mov    -0x2c(%ebp),%eax
8200120b:	f7 d8                	neg    %eax
8200120d:	01 45 f4             	add    %eax,-0xc(%ebp)
82001210:	8b 45 d4             	mov    -0x2c(%ebp),%eax
82001213:	01 45 f0             	add    %eax,-0x10(%ebp)
82001216:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001219:	8b 40 08             	mov    0x8(%eax),%eax
8200121c:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82001221:	39 d0                	cmp    %edx,%eax
82001223:	75 09                	jne    8200122e <_free_r+0x13e>
82001225:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
8200122c:	eb 24                	jmp    82001252 <_free_r+0x162>
8200122e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001231:	8b 40 0c             	mov    0xc(%eax),%eax
82001234:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001237:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200123a:	8b 40 08             	mov    0x8(%eax),%eax
8200123d:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001240:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001243:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001246:	89 50 0c             	mov    %edx,0xc(%eax)
82001249:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200124c:	8b 55 e8             	mov    -0x18(%ebp),%edx
8200124f:	89 50 08             	mov    %edx,0x8(%eax)
82001252:	8b 55 dc             	mov    -0x24(%ebp),%edx
82001255:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001258:	01 d0                	add    %edx,%eax
8200125a:	8b 40 04             	mov    0x4(%eax),%eax
8200125d:	83 e0 01             	and    $0x1,%eax
82001260:	85 c0                	test   %eax,%eax
82001262:	75 75                	jne    820012d9 <_free_r+0x1e9>
82001264:	8b 45 d8             	mov    -0x28(%ebp),%eax
82001267:	01 45 f0             	add    %eax,-0x10(%ebp)
8200126a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
8200126e:	75 45                	jne    820012b5 <_free_r+0x1c5>
82001270:	8b 45 dc             	mov    -0x24(%ebp),%eax
82001273:	8b 40 08             	mov    0x8(%eax),%eax
82001276:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
8200127b:	39 d0                	cmp    %edx,%eax
8200127d:	75 36                	jne    820012b5 <_free_r+0x1c5>
8200127f:	c7 45 e4 01 00 00 00 	movl   $0x1,-0x1c(%ebp)
82001286:	b8 28 1c 00 82       	mov    $0x82001c28,%eax
8200128b:	8b 55 f4             	mov    -0xc(%ebp),%edx
8200128e:	89 50 0c             	mov    %edx,0xc(%eax)
82001291:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
82001296:	8b 40 0c             	mov    0xc(%eax),%eax
82001299:	89 42 08             	mov    %eax,0x8(%edx)
8200129c:	ba 28 1c 00 82       	mov    $0x82001c28,%edx
820012a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012a4:	89 50 0c             	mov    %edx,0xc(%eax)
820012a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012aa:	8b 50 0c             	mov    0xc(%eax),%edx
820012ad:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012b0:	89 50 08             	mov    %edx,0x8(%eax)
820012b3:	eb 24                	jmp    820012d9 <_free_r+0x1e9>
820012b5:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012b8:	8b 40 0c             	mov    0xc(%eax),%eax
820012bb:	89 45 ec             	mov    %eax,-0x14(%ebp)
820012be:	8b 45 dc             	mov    -0x24(%ebp),%eax
820012c1:	8b 40 08             	mov    0x8(%eax),%eax
820012c4:	89 45 e8             	mov    %eax,-0x18(%ebp)
820012c7:	8b 45 e8             	mov    -0x18(%ebp),%eax
820012ca:	8b 55 ec             	mov    -0x14(%ebp),%edx
820012cd:	89 50 0c             	mov    %edx,0xc(%eax)
820012d0:	8b 45 ec             	mov    -0x14(%ebp),%eax
820012d3:	8b 55 e8             	mov    -0x18(%ebp),%edx
820012d6:	89 50 08             	mov    %edx,0x8(%eax)
820012d9:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012dc:	83 c8 01             	or     $0x1,%eax
820012df:	89 c2                	mov    %eax,%edx
820012e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
820012e4:	89 50 04             	mov    %edx,0x4(%eax)
820012e7:	8b 55 f4             	mov    -0xc(%ebp),%edx
820012ea:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012ed:	01 c2                	add    %eax,%edx
820012ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
820012f2:	89 02                	mov    %eax,(%edx)
820012f4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
820012f8:	0f 85 b7 01 00 00    	jne    820014b5 <_free_r+0x3c5>
820012fe:	81 7d f0 ff 01 00 00 	cmpl   $0x1ff,-0x10(%ebp)
82001305:	77 7f                	ja     82001386 <_free_r+0x296>
82001307:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200130a:	c1 e8 03             	shr    $0x3,%eax
8200130d:	89 45 d0             	mov    %eax,-0x30(%ebp)
82001310:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001315:	8b 58 04             	mov    0x4(%eax),%ebx
82001318:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200131b:	8d 50 03             	lea    0x3(%eax),%edx
8200131e:	85 c0                	test   %eax,%eax
82001320:	0f 48 c2             	cmovs  %edx,%eax
82001323:	c1 f8 02             	sar    $0x2,%eax
82001326:	ba 01 00 00 00       	mov    $0x1,%edx
8200132b:	89 c1                	mov    %eax,%ecx
8200132d:	d3 e2                	shl    %cl,%edx
8200132f:	89 d0                	mov    %edx,%eax
82001331:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
82001336:	09 d8                	or     %ebx,%eax
82001338:	89 42 04             	mov    %eax,0x4(%edx)
8200133b:	8b 45 d0             	mov    -0x30(%ebp),%eax
8200133e:	83 c0 01             	add    $0x1,%eax
82001341:	01 c0                	add    %eax,%eax
82001343:	c1 e0 02             	shl    $0x2,%eax
82001346:	05 20 1c 00 82       	add    $0x82001c20,%eax
8200134b:	83 e8 08             	sub    $0x8,%eax
8200134e:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001351:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001354:	8b 40 08             	mov    0x8(%eax),%eax
82001357:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200135a:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200135d:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001360:	89 50 0c             	mov    %edx,0xc(%eax)
82001363:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001366:	8b 55 e8             	mov    -0x18(%ebp),%edx
82001369:	89 50 08             	mov    %edx,0x8(%eax)
8200136c:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200136f:	8b 55 f4             	mov    -0xc(%ebp),%edx
82001372:	89 50 08             	mov    %edx,0x8(%eax)
82001375:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001378:	8b 50 08             	mov    0x8(%eax),%edx
8200137b:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200137e:	89 50 0c             	mov    %edx,0xc(%eax)
82001381:	e9 2f 01 00 00       	jmp    820014b5 <_free_r+0x3c5>
82001386:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001389:	c1 e8 09             	shr    $0x9,%eax
8200138c:	85 c0                	test   %eax,%eax
8200138e:	75 08                	jne    82001398 <_free_r+0x2a8>
82001390:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001393:	c1 e8 03             	shr    $0x3,%eax
82001396:	eb 77                	jmp    8200140f <_free_r+0x31f>
82001398:	8b 45 f0             	mov    -0x10(%ebp),%eax
8200139b:	c1 e8 09             	shr    $0x9,%eax
8200139e:	83 f8 04             	cmp    $0x4,%eax
820013a1:	77 0b                	ja     820013ae <_free_r+0x2be>
820013a3:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013a6:	c1 e8 06             	shr    $0x6,%eax
820013a9:	83 c0 38             	add    $0x38,%eax
820013ac:	eb 61                	jmp    8200140f <_free_r+0x31f>
820013ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013b1:	c1 e8 09             	shr    $0x9,%eax
820013b4:	83 f8 14             	cmp    $0x14,%eax
820013b7:	77 0b                	ja     820013c4 <_free_r+0x2d4>
820013b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013bc:	c1 e8 09             	shr    $0x9,%eax
820013bf:	83 c0 5b             	add    $0x5b,%eax
820013c2:	eb 4b                	jmp    8200140f <_free_r+0x31f>
820013c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013c7:	c1 e8 09             	shr    $0x9,%eax
820013ca:	83 f8 54             	cmp    $0x54,%eax
820013cd:	77 0b                	ja     820013da <_free_r+0x2ea>
820013cf:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013d2:	c1 e8 0c             	shr    $0xc,%eax
820013d5:	83 c0 6e             	add    $0x6e,%eax
820013d8:	eb 35                	jmp    8200140f <_free_r+0x31f>
820013da:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013dd:	c1 e8 09             	shr    $0x9,%eax
820013e0:	3d 54 01 00 00       	cmp    $0x154,%eax
820013e5:	77 0b                	ja     820013f2 <_free_r+0x302>
820013e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013ea:	c1 e8 0f             	shr    $0xf,%eax
820013ed:	83 c0 77             	add    $0x77,%eax
820013f0:	eb 1d                	jmp    8200140f <_free_r+0x31f>
820013f2:	8b 45 f0             	mov    -0x10(%ebp),%eax
820013f5:	c1 e8 09             	shr    $0x9,%eax
820013f8:	3d 54 05 00 00       	cmp    $0x554,%eax
820013fd:	77 0b                	ja     8200140a <_free_r+0x31a>
820013ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001402:	c1 e8 12             	shr    $0x12,%eax
82001405:	83 c0 7c             	add    $0x7c,%eax
82001408:	eb 05                	jmp    8200140f <_free_r+0x31f>
8200140a:	b8 7e 00 00 00       	mov    $0x7e,%eax
8200140f:	89 45 d0             	mov    %eax,-0x30(%ebp)
82001412:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001415:	83 c0 01             	add    $0x1,%eax
82001418:	01 c0                	add    %eax,%eax
8200141a:	c1 e0 02             	shl    $0x2,%eax
8200141d:	05 20 1c 00 82       	add    $0x82001c20,%eax
82001422:	83 e8 08             	sub    $0x8,%eax
82001425:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001428:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200142b:	8b 40 08             	mov    0x8(%eax),%eax
8200142e:	89 45 e8             	mov    %eax,-0x18(%ebp)
82001431:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001434:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82001437:	75 36                	jne    8200146f <_free_r+0x37f>
82001439:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
8200143e:	8b 58 04             	mov    0x4(%eax),%ebx
82001441:	8b 45 d0             	mov    -0x30(%ebp),%eax
82001444:	8d 50 03             	lea    0x3(%eax),%edx
82001447:	85 c0                	test   %eax,%eax
82001449:	0f 48 c2             	cmovs  %edx,%eax
8200144c:	c1 f8 02             	sar    $0x2,%eax
8200144f:	ba 01 00 00 00       	mov    $0x1,%edx
82001454:	89 c1                	mov    %eax,%ecx
82001456:	d3 e2                	shl    %cl,%edx
82001458:	89 d0                	mov    %edx,%eax
8200145a:	ba 20 1c 00 82       	mov    $0x82001c20,%edx
8200145f:	09 d8                	or     %ebx,%eax
82001461:	89 42 04             	mov    %eax,0x4(%edx)
82001464:	eb 28                	jmp    8200148e <_free_r+0x39e>
82001466:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001469:	8b 40 08             	mov    0x8(%eax),%eax
8200146c:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200146f:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001472:	3b 45 ec             	cmp    -0x14(%ebp),%eax
82001475:	74 0e                	je     82001485 <_free_r+0x395>
82001477:	8b 45 e8             	mov    -0x18(%ebp),%eax
8200147a:	8b 40 04             	mov    0x4(%eax),%eax
8200147d:	83 e0 fc             	and    $0xfffffffc,%eax
82001480:	39 45 f0             	cmp    %eax,-0x10(%ebp)
82001483:	72 e1                	jb     82001466 <_free_r+0x376>
82001485:	8b 45 e8             	mov    -0x18(%ebp),%eax
82001488:	8b 40 0c             	mov    0xc(%eax),%eax
8200148b:	89 45 ec             	mov    %eax,-0x14(%ebp)
8200148e:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001491:	8b 55 ec             	mov    -0x14(%ebp),%edx
82001494:	89 50 0c             	mov    %edx,0xc(%eax)
82001497:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200149a:	8b 55 e8             	mov    -0x18(%ebp),%edx
8200149d:	89 50 08             	mov    %edx,0x8(%eax)
820014a0:	8b 45 ec             	mov    -0x14(%ebp),%eax
820014a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
820014a6:	89 50 08             	mov    %edx,0x8(%eax)
820014a9:	8b 45 ec             	mov    -0x14(%ebp),%eax
820014ac:	8b 50 08             	mov    0x8(%eax),%edx
820014af:	8b 45 e8             	mov    -0x18(%ebp),%eax
820014b2:	89 50 0c             	mov    %edx,0xc(%eax)
820014b5:	83 ec 0c             	sub    $0xc,%esp
820014b8:	ff 75 08             	pushl  0x8(%ebp)
820014bb:	e8 d5 fa ff ff       	call   82000f95 <__malloc_unlock>
820014c0:	83 c4 10             	add    $0x10,%esp
820014c3:	eb 01                	jmp    820014c6 <_free_r+0x3d6>
820014c5:	90                   	nop
820014c6:	8b 5d fc             	mov    -0x4(%ebp),%ebx
820014c9:	c9                   	leave  
820014ca:	c3                   	ret    

820014cb <_malloc_trim_r>:
820014cb:	55                   	push   %ebp
820014cc:	89 e5                	mov    %esp,%ebp
820014ce:	83 ec 28             	sub    $0x28,%esp
820014d1:	c7 45 f4 00 10 00 00 	movl   $0x1000,-0xc(%ebp)
820014d8:	83 ec 0c             	sub    $0xc,%esp
820014db:	ff 75 08             	pushl  0x8(%ebp)
820014de:	e8 ac fa ff ff       	call   82000f8f <__malloc_lock>
820014e3:	83 c4 10             	add    $0x10,%esp
820014e6:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820014eb:	8b 40 08             	mov    0x8(%eax),%eax
820014ee:	8b 40 04             	mov    0x4(%eax),%eax
820014f1:	83 e0 fc             	and    $0xfffffffc,%eax
820014f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
820014f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
820014fa:	2b 45 0c             	sub    0xc(%ebp),%eax
820014fd:	89 c2                	mov    %eax,%edx
820014ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001502:	01 d0                	add    %edx,%eax
82001504:	83 e8 11             	sub    $0x11,%eax
82001507:	ba 00 00 00 00       	mov    $0x0,%edx
8200150c:	f7 75 f4             	divl   -0xc(%ebp)
8200150f:	83 e8 01             	sub    $0x1,%eax
82001512:	0f af 45 f4          	imul   -0xc(%ebp),%eax
82001516:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001519:	8b 45 f4             	mov    -0xc(%ebp),%eax
8200151c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
8200151f:	7d 18                	jge    82001539 <_malloc_trim_r+0x6e>
82001521:	83 ec 0c             	sub    $0xc,%esp
82001524:	ff 75 08             	pushl  0x8(%ebp)
82001527:	e8 69 fa ff ff       	call   82000f95 <__malloc_unlock>
8200152c:	83 c4 10             	add    $0x10,%esp
8200152f:	b8 00 00 00 00       	mov    $0x0,%eax
82001534:	e9 f1 00 00 00       	jmp    8200162a <_malloc_trim_r+0x15f>
82001539:	83 ec 08             	sub    $0x8,%esp
8200153c:	6a 00                	push   $0x0
8200153e:	ff 75 08             	pushl  0x8(%ebp)
82001541:	e8 55 fa ff ff       	call   82000f9b <_sbrk_r>
82001546:	83 c4 10             	add    $0x10,%esp
82001549:	89 45 e8             	mov    %eax,-0x18(%ebp)
8200154c:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001551:	8b 50 08             	mov    0x8(%eax),%edx
82001554:	8b 45 f0             	mov    -0x10(%ebp),%eax
82001557:	01 d0                	add    %edx,%eax
82001559:	39 45 e8             	cmp    %eax,-0x18(%ebp)
8200155c:	74 18                	je     82001576 <_malloc_trim_r+0xab>
8200155e:	83 ec 0c             	sub    $0xc,%esp
82001561:	ff 75 08             	pushl  0x8(%ebp)
82001564:	e8 2c fa ff ff       	call   82000f95 <__malloc_unlock>
82001569:	83 c4 10             	add    $0x10,%esp
8200156c:	b8 00 00 00 00       	mov    $0x0,%eax
82001571:	e9 b4 00 00 00       	jmp    8200162a <_malloc_trim_r+0x15f>
82001576:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001579:	f7 d8                	neg    %eax
8200157b:	83 ec 08             	sub    $0x8,%esp
8200157e:	50                   	push   %eax
8200157f:	ff 75 08             	pushl  0x8(%ebp)
82001582:	e8 14 fa ff ff       	call   82000f9b <_sbrk_r>
82001587:	83 c4 10             	add    $0x10,%esp
8200158a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8200158d:	83 7d e4 ff          	cmpl   $0xffffffff,-0x1c(%ebp)
82001591:	75 61                	jne    820015f4 <_malloc_trim_r+0x129>
82001593:	83 ec 08             	sub    $0x8,%esp
82001596:	6a 00                	push   $0x0
82001598:	ff 75 08             	pushl  0x8(%ebp)
8200159b:	e8 fb f9 ff ff       	call   82000f9b <_sbrk_r>
820015a0:	83 c4 10             	add    $0x10,%esp
820015a3:	89 45 e8             	mov    %eax,-0x18(%ebp)
820015a6:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820015ab:	8b 50 08             	mov    0x8(%eax),%edx
820015ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
820015b1:	29 d0                	sub    %edx,%eax
820015b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
820015b6:	83 7d f0 0f          	cmpl   $0xf,-0x10(%ebp)
820015ba:	7e 23                	jle    820015df <_malloc_trim_r+0x114>
820015bc:	8b 15 2c 20 00 82    	mov    0x8200202c,%edx
820015c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
820015c5:	29 d0                	sub    %edx,%eax
820015c7:	a3 60 20 00 82       	mov    %eax,0x82002060
820015cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
820015cf:	83 c8 01             	or     $0x1,%eax
820015d2:	89 c2                	mov    %eax,%edx
820015d4:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
820015d9:	8b 40 08             	mov    0x8(%eax),%eax
820015dc:	89 50 04             	mov    %edx,0x4(%eax)
820015df:	83 ec 0c             	sub    $0xc,%esp
820015e2:	ff 75 08             	pushl  0x8(%ebp)
820015e5:	e8 ab f9 ff ff       	call   82000f95 <__malloc_unlock>
820015ea:	83 c4 10             	add    $0x10,%esp
820015ed:	b8 00 00 00 00       	mov    $0x0,%eax
820015f2:	eb 36                	jmp    8200162a <_malloc_trim_r+0x15f>
820015f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
820015f7:	2b 45 ec             	sub    -0x14(%ebp),%eax
820015fa:	83 c8 01             	or     $0x1,%eax
820015fd:	89 c2                	mov    %eax,%edx
820015ff:	b8 20 1c 00 82       	mov    $0x82001c20,%eax
82001604:	8b 40 08             	mov    0x8(%eax),%eax
82001607:	89 50 04             	mov    %edx,0x4(%eax)
8200160a:	a1 60 20 00 82       	mov    0x82002060,%eax
8200160f:	2b 45 ec             	sub    -0x14(%ebp),%eax
82001612:	a3 60 20 00 82       	mov    %eax,0x82002060
82001617:	83 ec 0c             	sub    $0xc,%esp
8200161a:	ff 75 08             	pushl  0x8(%ebp)
8200161d:	e8 73 f9 ff ff       	call   82000f95 <__malloc_unlock>
82001622:	83 c4 10             	add    $0x10,%esp
82001625:	b8 01 00 00 00       	mov    $0x1,%eax
8200162a:	c9                   	leave  
8200162b:	c3                   	ret    

8200162c <cleanup_glue>:
8200162c:	55                   	push   %ebp
8200162d:	89 e5                	mov    %esp,%ebp
8200162f:	83 ec 08             	sub    $0x8,%esp
82001632:	8b 45 0c             	mov    0xc(%ebp),%eax
82001635:	8b 00                	mov    (%eax),%eax
82001637:	85 c0                	test   %eax,%eax
82001639:	74 14                	je     8200164f <cleanup_glue+0x23>
8200163b:	8b 45 0c             	mov    0xc(%ebp),%eax
8200163e:	8b 00                	mov    (%eax),%eax
82001640:	83 ec 08             	sub    $0x8,%esp
82001643:	50                   	push   %eax
82001644:	ff 75 08             	pushl  0x8(%ebp)
82001647:	e8 e0 ff ff ff       	call   8200162c <cleanup_glue>
8200164c:	83 c4 10             	add    $0x10,%esp
8200164f:	83 ec 08             	sub    $0x8,%esp
82001652:	ff 75 0c             	pushl  0xc(%ebp)
82001655:	ff 75 08             	pushl  0x8(%ebp)
82001658:	e8 93 fa ff ff       	call   820010f0 <_free_r>
8200165d:	83 c4 10             	add    $0x10,%esp
82001660:	90                   	nop
82001661:	c9                   	leave  
82001662:	c3                   	ret    

82001663 <_reclaim_reent>:
82001663:	55                   	push   %ebp
82001664:	89 e5                	mov    %esp,%ebp
82001666:	83 ec 28             	sub    $0x28,%esp
82001669:	a1 04 1c 00 82       	mov    0x82001c04,%eax
8200166e:	39 45 08             	cmp    %eax,0x8(%ebp)
82001671:	0f 84 49 01 00 00    	je     820017c0 <_reclaim_reent+0x15d>
82001677:	8b 45 08             	mov    0x8(%ebp),%eax
8200167a:	8b 40 4c             	mov    0x4c(%eax),%eax
8200167d:	85 c0                	test   %eax,%eax
8200167f:	74 64                	je     820016e5 <_reclaim_reent+0x82>
82001681:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
82001688:	eb 3e                	jmp    820016c8 <_reclaim_reent+0x65>
8200168a:	8b 45 08             	mov    0x8(%ebp),%eax
8200168d:	8b 50 4c             	mov    0x4c(%eax),%edx
82001690:	8b 45 f4             	mov    -0xc(%ebp),%eax
82001693:	c1 e0 02             	shl    $0x2,%eax
82001696:	01 d0                	add    %edx,%eax
82001698:	8b 00                	mov    (%eax),%eax
8200169a:	89 45 f0             	mov    %eax,-0x10(%ebp)
8200169d:	eb 1f                	jmp    820016be <_reclaim_reent+0x5b>
8200169f:	8b 45 f0             	mov    -0x10(%ebp),%eax
820016a2:	89 45 e8             	mov    %eax,-0x18(%ebp)
820016a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
820016a8:	8b 00                	mov    (%eax),%eax
820016aa:	89 45 f0             	mov    %eax,-0x10(%ebp)
820016ad:	83 ec 08             	sub    $0x8,%esp
820016b0:	ff 75 e8             	pushl  -0x18(%ebp)
820016b3:	ff 75 08             	pushl  0x8(%ebp)
820016b6:	e8 35 fa ff ff       	call   820010f0 <_free_r>
820016bb:	83 c4 10             	add    $0x10,%esp
820016be:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
820016c2:	75 db                	jne    8200169f <_reclaim_reent+0x3c>
820016c4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
820016c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
820016cb:	83 f8 1f             	cmp    $0x1f,%eax
820016ce:	76 ba                	jbe    8200168a <_reclaim_reent+0x27>
820016d0:	8b 45 08             	mov    0x8(%ebp),%eax
820016d3:	8b 40 4c             	mov    0x4c(%eax),%eax
820016d6:	83 ec 08             	sub    $0x8,%esp
820016d9:	50                   	push   %eax
820016da:	ff 75 08             	pushl  0x8(%ebp)
820016dd:	e8 0e fa ff ff       	call   820010f0 <_free_r>
820016e2:	83 c4 10             	add    $0x10,%esp
820016e5:	8b 45 08             	mov    0x8(%ebp),%eax
820016e8:	8b 40 40             	mov    0x40(%eax),%eax
820016eb:	85 c0                	test   %eax,%eax
820016ed:	74 15                	je     82001704 <_reclaim_reent+0xa1>
820016ef:	8b 45 08             	mov    0x8(%ebp),%eax
820016f2:	8b 40 40             	mov    0x40(%eax),%eax
820016f5:	83 ec 08             	sub    $0x8,%esp
820016f8:	50                   	push   %eax
820016f9:	ff 75 08             	pushl  0x8(%ebp)
820016fc:	e8 ef f9 ff ff       	call   820010f0 <_free_r>
82001701:	83 c4 10             	add    $0x10,%esp
82001704:	8b 45 08             	mov    0x8(%ebp),%eax
82001707:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
8200170d:	85 c0                	test   %eax,%eax
8200170f:	74 50                	je     82001761 <_reclaim_reent+0xfe>
82001711:	8b 45 08             	mov    0x8(%ebp),%eax
82001714:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
8200171a:	8b 55 08             	mov    0x8(%ebp),%edx
8200171d:	81 c2 4c 01 00 00    	add    $0x14c,%edx
82001723:	39 d0                	cmp    %edx,%eax
82001725:	74 3a                	je     82001761 <_reclaim_reent+0xfe>
82001727:	8b 45 08             	mov    0x8(%ebp),%eax
8200172a:	8b 80 48 01 00 00    	mov    0x148(%eax),%eax
82001730:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001733:	eb 1f                	jmp    82001754 <_reclaim_reent+0xf1>
82001735:	8b 45 ec             	mov    -0x14(%ebp),%eax
82001738:	89 45 e4             	mov    %eax,-0x1c(%ebp)
8200173b:	8b 45 ec             	mov    -0x14(%ebp),%eax
8200173e:	8b 00                	mov    (%eax),%eax
82001740:	89 45 ec             	mov    %eax,-0x14(%ebp)
82001743:	83 ec 08             	sub    $0x8,%esp
82001746:	ff 75 e4             	pushl  -0x1c(%ebp)
82001749:	ff 75 08             	pushl  0x8(%ebp)
8200174c:	e8 9f f9 ff ff       	call   820010f0 <_free_r>
82001751:	83 c4 10             	add    $0x10,%esp
82001754:	8b 45 08             	mov    0x8(%ebp),%eax
82001757:	05 4c 01 00 00       	add    $0x14c,%eax
8200175c:	39 45 ec             	cmp    %eax,-0x14(%ebp)
8200175f:	75 d4                	jne    82001735 <_reclaim_reent+0xd2>
82001761:	8b 45 08             	mov    0x8(%ebp),%eax
82001764:	8b 40 54             	mov    0x54(%eax),%eax
82001767:	85 c0                	test   %eax,%eax
82001769:	74 15                	je     82001780 <_reclaim_reent+0x11d>
8200176b:	8b 45 08             	mov    0x8(%ebp),%eax
8200176e:	8b 40 54             	mov    0x54(%eax),%eax
82001771:	83 ec 08             	sub    $0x8,%esp
82001774:	50                   	push   %eax
82001775:	ff 75 08             	pushl  0x8(%ebp)
82001778:	e8 73 f9 ff ff       	call   820010f0 <_free_r>
8200177d:	83 c4 10             	add    $0x10,%esp
82001780:	8b 45 08             	mov    0x8(%ebp),%eax
82001783:	8b 40 38             	mov    0x38(%eax),%eax
82001786:	85 c0                	test   %eax,%eax
82001788:	74 36                	je     820017c0 <_reclaim_reent+0x15d>
8200178a:	8b 45 08             	mov    0x8(%ebp),%eax
8200178d:	8b 40 3c             	mov    0x3c(%eax),%eax
82001790:	83 ec 0c             	sub    $0xc,%esp
82001793:	ff 75 08             	pushl  0x8(%ebp)
82001796:	ff d0                	call   *%eax
82001798:	83 c4 10             	add    $0x10,%esp
8200179b:	8b 45 08             	mov    0x8(%ebp),%eax
8200179e:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
820017a4:	85 c0                	test   %eax,%eax
820017a6:	74 18                	je     820017c0 <_reclaim_reent+0x15d>
820017a8:	8b 45 08             	mov    0x8(%ebp),%eax
820017ab:	8b 80 e0 02 00 00    	mov    0x2e0(%eax),%eax
820017b1:	83 ec 08             	sub    $0x8,%esp
820017b4:	50                   	push   %eax
820017b5:	ff 75 08             	pushl  0x8(%ebp)
820017b8:	e8 6f fe ff ff       	call   8200162c <cleanup_glue>
820017bd:	83 c4 10             	add    $0x10,%esp
820017c0:	90                   	nop
820017c1:	c9                   	leave  
820017c2:	c3                   	ret    
