
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00001954 memsz 0x00005670 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015d2  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       0000037c  000115d4  000115d4  000025d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000004  00011950  00011950  00002950  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00003d10  00011960  00011960  00002954  2**5
                  ALLOC
  4 .debug_line   00000b60  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001975  00000000  00000000  000034b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000855  00000000  00000000  00004e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000100  00000000  00000000  00005680  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000008ab  00000000  00000000  00005780  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .comment      00000011  00000000  00000000  0000602b  2**0
                  CONTENTS, READONLY
 10 .debug_frame  00000944  00000000  00000000  0000603c  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
000115d4 l    d  .rodata	00000000 .rodata
00011950 l    d  .data	00000000 .data
00011960 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 task.c
000102c7 l     F .text	000000dd tss_init
00011638 l     O .rodata	0000000a __func__.1856
00000000 l    df *ABS*	00000000 cpu.c
000103fb l     F .text	00000028 lgdt
00010423 l     F .text	0000001a far_jump
00011960 l     O .bss	00000800 gdt_table
00000000 l    df *ABS*	00000000 irq.c
000105d3 l     F .text	0000001d inb
000105f0 l     F .text	0000001f outb
0001060f l     F .text	00000007 cli
00010616 l     F .text	00000007 sti
0001061d l     F .text	00000028 lidt
00010645 l     F .text	00000007 hlt
00012160 l     O .bss	00000400 idt_table
0001064c l     F .text	000000d2 dump_core_regs
0001071e l     F .text	0000004e do_default_handler
0001099c l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00010d6a l     F .text	0000001f outb
00012560 l     O .bss	00000004 sys_tick
00010d89 l     F .text	00000060 init_pic
00000000 l    df *ABS*	00000000 init.c
00010e24 l     F .text	0000000c write_tr
00012580 l     O .bss	0000006c init_task
00012600 l     O .bss	00001000 init_task_stack
00013600 l     O .bss	0000006c first_task
00000000 l    df *ABS*	00000000 klib.c
00010f4d l     F .text	00000007 hlt
00011950 l     O .data	00000004 num2ch.1892
00000000 l    df *ABS*	00000000 log.c
00011472 l     F .text	0000001d inb
0001148f l     F .text	0000001f outb
000110c4 g     F .text	0000004f kernel_memcpy
00010d34 g     F .text	0000000b irq_enable_global
000108a0 g     F .text	0000001c do_handler_segment_not_present
00011113 g     F .text	00000041 kernel_memset
00010274 g       .text	00000000 exception_handler_virtual_exception
000105b5 g     F .text	0000000b cpu_init
000114ae g     F .text	00000066 log_init
00010e8b g     F .text	000000c2 init_main
00010219 g       .text	00000000 exception_handler_alignment_check
00010f54 g     F .text	00000047 kernel_strcpy
00010c17 g     F .text	0000008b irq_enable
00010035 g       .text	00000000 exception_handler_unknown
000100b1 g       .text	00000000 exception_handler_breakpoint
000107f8 g     F .text	0000001c do_handler_overflow
000108f4 g     F .text	0000001c do_handler_alignment_check
000101c0 g       .text	00000000 exception_handler_general_protection
00010964 g     F .text	0000001c do_handler_general_protection
00010788 g     F .text	0000001c do_handler_divider
00010868 g     F .text	0000001c do_handler_double_fault
00010e4d g     F .text	0000003e init_task_entry
00010980 g     F .text	0000001c do_handler_page_fault
0001014c g       .text	00000000 exception_handler_double_fault
00010d3f g     F .text	0000002b pic_send_eoi
00010de9 g     F .text	00000023 do_handler_timer
000101a3 g       .text	00000000 exception_handler_stack_segment_fault
00010948 g     F .text	0000001c do_handler_virtual_exception
000100d0 g       .text	00000000 exception_handler_overflow
000104bc g     F .text	00000045 get_alloc_desc
000102b2 g       .text	00000000 simple_switch
00013670 g     O .bss	00002000 stack
000100ef g       .text	00000000 exception_handler_bound_range
00010830 g     F .text	0000001c do_handler_invalid_opcode
00010169 g       .text	00000000 exception_handler_invalid_tss
000108d8 g     F .text	0000001c do_handler_fpu_error
00010910 g     F .text	0000001c do_handler_machine_check
000107a4 g     F .text	0000001c do_handler_Debug
000107c0 g     F .text	0000001c do_handler_NMI
00010054 g       .text	00000000 exception_handler_divider
00010f9b g     F .text	00000070 kernel_strncpy
00010d29 g     F .text	0000000b irq_disable_global
00010e30 g     F .text	0000001d kernel_init
00010000 g       .text	00000000 _start
000112f1 g     F .text	0000014b kernel_vsprintf
0001012d g       .text	00000000 exception_handler_device_unavailable
0001010e g       .text	00000000 exception_handler_invalid_opcode
00010236 g       .text	00000000 exception_handler_machine_check
00010884 g     F .text	0000001c do_handler_invalid_tss
0001143c g     F .text	00000036 panic
00010293 g       .text	00000000 exception_handler_timer
00010bdd g     F .text	0000003a irq_install
00010501 g     F .text	0000006d init_gdt
00010ca2 g     F .text	00000087 irq_disable
00010255 g       .text	00000000 exception_handler_smd_exception
0001084c g     F .text	0000001c do_handler_device_unavailable
000105c0 g     F .text	00000013 switch_to_tss
00011154 g     F .text	0000005e kernel_memcmp
0001092c g     F .text	0000001c do_handler_smd_exception
000101dd g       .text	00000000 exception_handler_page_fault
0001076c g     F .text	0000001c do_handler_unknown
000101fa g       .text	00000000 exception_handler_fpu_error
000103e0 g     F .text	0000001b task_switch_from_to
00010a2f g     F .text	000001ae irq_init
00011089 g     F .text	0000003b kernel_strlen
0001043d g     F .text	0000007f segment_desc_set
00010814 g     F .text	0000001c do_handler_bound_range
0001100b g     F .text	0000007e kernel_strncmp
00010186 g       .text	00000000 exception_handler_segment_not_present
00010092 g       .text	00000000 exception_handler_NMI
00010073 g       .text	00000000 exception_handler_Debug
000108bc g     F .text	0000001c do_handler_stack_segment_fault
000107dc g     F .text	0000001c do_handler_breakpoint
00011514 g     F .text	000000be log_printf
000103a4 g     F .text	0000003c task_init
000111b2 g     F .text	0000013f kernel_itoa
0001056e g     F .text	00000047 gate_desc_set
00010e0c g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .extern init_main
    .global _start
    # void start (boot_info_t *boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax
    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 24 0e 00 00       	call   10e30 <kernel_init>
    jmp $KERNEL_SELECTOR_CS, $gdt_reload # 重新加载GDT
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    ; mov $stack, %eax
   10021:	b8 70 36 01 00       	mov    $0x13670,%eax
    ; mov $KERNEL_STACK_SIZE, %ebx
   10026:	bb 00 20 00 00       	mov    $0x2000,%ebx

    mov $(stack + KERNEL_STACK_SIZE), %esp
   1002b:	bc 70 56 01 00       	mov    $0x15670,%esp
    jmp init_main
   10030:	e9 56 0e 00 00       	jmp    10e8b <init_main>

00010035 <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   10035:	6a 00                	push   $0x0
   10037:	6a ff                	push   $0xffffffff
   10039:	60                   	pusha  
   1003a:	1e                   	push   %ds
   1003b:	06                   	push   %es
   1003c:	0f a0                	push   %fs
   1003e:	0f a8                	push   %gs
   10040:	54                   	push   %esp
   10041:	e8 26 07 00 00       	call   1076c <do_handler_unknown>
   10046:	83 c4 04             	add    $0x4,%esp
   10049:	0f a9                	pop    %gs
   1004b:	0f a1                	pop    %fs
   1004d:	07                   	pop    %es
   1004e:	1f                   	pop    %ds
   1004f:	61                   	popa   
   10050:	83 c4 08             	add    $0x8,%esp
   10053:	cf                   	iret   

00010054 <exception_handler_divider>:
exception_handler divider, 0, 0
   10054:	6a 00                	push   $0x0
   10056:	6a 00                	push   $0x0
   10058:	60                   	pusha  
   10059:	1e                   	push   %ds
   1005a:	06                   	push   %es
   1005b:	0f a0                	push   %fs
   1005d:	0f a8                	push   %gs
   1005f:	54                   	push   %esp
   10060:	e8 23 07 00 00       	call   10788 <do_handler_divider>
   10065:	83 c4 04             	add    $0x4,%esp
   10068:	0f a9                	pop    %gs
   1006a:	0f a1                	pop    %fs
   1006c:	07                   	pop    %es
   1006d:	1f                   	pop    %ds
   1006e:	61                   	popa   
   1006f:	83 c4 08             	add    $0x8,%esp
   10072:	cf                   	iret   

00010073 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10073:	6a 00                	push   $0x0
   10075:	6a 01                	push   $0x1
   10077:	60                   	pusha  
   10078:	1e                   	push   %ds
   10079:	06                   	push   %es
   1007a:	0f a0                	push   %fs
   1007c:	0f a8                	push   %gs
   1007e:	54                   	push   %esp
   1007f:	e8 20 07 00 00       	call   107a4 <do_handler_Debug>
   10084:	83 c4 04             	add    $0x4,%esp
   10087:	0f a9                	pop    %gs
   10089:	0f a1                	pop    %fs
   1008b:	07                   	pop    %es
   1008c:	1f                   	pop    %ds
   1008d:	61                   	popa   
   1008e:	83 c4 08             	add    $0x8,%esp
   10091:	cf                   	iret   

00010092 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10092:	6a 00                	push   $0x0
   10094:	6a 02                	push   $0x2
   10096:	60                   	pusha  
   10097:	1e                   	push   %ds
   10098:	06                   	push   %es
   10099:	0f a0                	push   %fs
   1009b:	0f a8                	push   %gs
   1009d:	54                   	push   %esp
   1009e:	e8 1d 07 00 00       	call   107c0 <do_handler_NMI>
   100a3:	83 c4 04             	add    $0x4,%esp
   100a6:	0f a9                	pop    %gs
   100a8:	0f a1                	pop    %fs
   100aa:	07                   	pop    %es
   100ab:	1f                   	pop    %ds
   100ac:	61                   	popa   
   100ad:	83 c4 08             	add    $0x8,%esp
   100b0:	cf                   	iret   

000100b1 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100b1:	6a 00                	push   $0x0
   100b3:	6a 03                	push   $0x3
   100b5:	60                   	pusha  
   100b6:	1e                   	push   %ds
   100b7:	06                   	push   %es
   100b8:	0f a0                	push   %fs
   100ba:	0f a8                	push   %gs
   100bc:	54                   	push   %esp
   100bd:	e8 1a 07 00 00       	call   107dc <do_handler_breakpoint>
   100c2:	83 c4 04             	add    $0x4,%esp
   100c5:	0f a9                	pop    %gs
   100c7:	0f a1                	pop    %fs
   100c9:	07                   	pop    %es
   100ca:	1f                   	pop    %ds
   100cb:	61                   	popa   
   100cc:	83 c4 08             	add    $0x8,%esp
   100cf:	cf                   	iret   

000100d0 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100d0:	6a 00                	push   $0x0
   100d2:	6a 04                	push   $0x4
   100d4:	60                   	pusha  
   100d5:	1e                   	push   %ds
   100d6:	06                   	push   %es
   100d7:	0f a0                	push   %fs
   100d9:	0f a8                	push   %gs
   100db:	54                   	push   %esp
   100dc:	e8 17 07 00 00       	call   107f8 <do_handler_overflow>
   100e1:	83 c4 04             	add    $0x4,%esp
   100e4:	0f a9                	pop    %gs
   100e6:	0f a1                	pop    %fs
   100e8:	07                   	pop    %es
   100e9:	1f                   	pop    %ds
   100ea:	61                   	popa   
   100eb:	83 c4 08             	add    $0x8,%esp
   100ee:	cf                   	iret   

000100ef <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100ef:	6a 00                	push   $0x0
   100f1:	6a 05                	push   $0x5
   100f3:	60                   	pusha  
   100f4:	1e                   	push   %ds
   100f5:	06                   	push   %es
   100f6:	0f a0                	push   %fs
   100f8:	0f a8                	push   %gs
   100fa:	54                   	push   %esp
   100fb:	e8 14 07 00 00       	call   10814 <do_handler_bound_range>
   10100:	83 c4 04             	add    $0x4,%esp
   10103:	0f a9                	pop    %gs
   10105:	0f a1                	pop    %fs
   10107:	07                   	pop    %es
   10108:	1f                   	pop    %ds
   10109:	61                   	popa   
   1010a:	83 c4 08             	add    $0x8,%esp
   1010d:	cf                   	iret   

0001010e <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   1010e:	6a 00                	push   $0x0
   10110:	6a 06                	push   $0x6
   10112:	60                   	pusha  
   10113:	1e                   	push   %ds
   10114:	06                   	push   %es
   10115:	0f a0                	push   %fs
   10117:	0f a8                	push   %gs
   10119:	54                   	push   %esp
   1011a:	e8 11 07 00 00       	call   10830 <do_handler_invalid_opcode>
   1011f:	83 c4 04             	add    $0x4,%esp
   10122:	0f a9                	pop    %gs
   10124:	0f a1                	pop    %fs
   10126:	07                   	pop    %es
   10127:	1f                   	pop    %ds
   10128:	61                   	popa   
   10129:	83 c4 08             	add    $0x8,%esp
   1012c:	cf                   	iret   

0001012d <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   1012d:	6a 00                	push   $0x0
   1012f:	6a 07                	push   $0x7
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 0e 07 00 00       	call   1084c <do_handler_device_unavailable>
   1013e:	83 c4 04             	add    $0x4,%esp
   10141:	0f a9                	pop    %gs
   10143:	0f a1                	pop    %fs
   10145:	07                   	pop    %es
   10146:	1f                   	pop    %ds
   10147:	61                   	popa   
   10148:	83 c4 08             	add    $0x8,%esp
   1014b:	cf                   	iret   

0001014c <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1014c:	6a 08                	push   $0x8
   1014e:	60                   	pusha  
   1014f:	1e                   	push   %ds
   10150:	06                   	push   %es
   10151:	0f a0                	push   %fs
   10153:	0f a8                	push   %gs
   10155:	54                   	push   %esp
   10156:	e8 0d 07 00 00       	call   10868 <do_handler_double_fault>
   1015b:	83 c4 04             	add    $0x4,%esp
   1015e:	0f a9                	pop    %gs
   10160:	0f a1                	pop    %fs
   10162:	07                   	pop    %es
   10163:	1f                   	pop    %ds
   10164:	61                   	popa   
   10165:	83 c4 08             	add    $0x8,%esp
   10168:	cf                   	iret   

00010169 <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   10169:	6a 0a                	push   $0xa
   1016b:	60                   	pusha  
   1016c:	1e                   	push   %ds
   1016d:	06                   	push   %es
   1016e:	0f a0                	push   %fs
   10170:	0f a8                	push   %gs
   10172:	54                   	push   %esp
   10173:	e8 0c 07 00 00       	call   10884 <do_handler_invalid_tss>
   10178:	83 c4 04             	add    $0x4,%esp
   1017b:	0f a9                	pop    %gs
   1017d:	0f a1                	pop    %fs
   1017f:	07                   	pop    %es
   10180:	1f                   	pop    %ds
   10181:	61                   	popa   
   10182:	83 c4 08             	add    $0x8,%esp
   10185:	cf                   	iret   

00010186 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10186:	6a 0b                	push   $0xb
   10188:	60                   	pusha  
   10189:	1e                   	push   %ds
   1018a:	06                   	push   %es
   1018b:	0f a0                	push   %fs
   1018d:	0f a8                	push   %gs
   1018f:	54                   	push   %esp
   10190:	e8 0b 07 00 00       	call   108a0 <do_handler_segment_not_present>
   10195:	83 c4 04             	add    $0x4,%esp
   10198:	0f a9                	pop    %gs
   1019a:	0f a1                	pop    %fs
   1019c:	07                   	pop    %es
   1019d:	1f                   	pop    %ds
   1019e:	61                   	popa   
   1019f:	83 c4 08             	add    $0x8,%esp
   101a2:	cf                   	iret   

000101a3 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   101a3:	6a 0c                	push   $0xc
   101a5:	60                   	pusha  
   101a6:	1e                   	push   %ds
   101a7:	06                   	push   %es
   101a8:	0f a0                	push   %fs
   101aa:	0f a8                	push   %gs
   101ac:	54                   	push   %esp
   101ad:	e8 0a 07 00 00       	call   108bc <do_handler_stack_segment_fault>
   101b2:	83 c4 04             	add    $0x4,%esp
   101b5:	0f a9                	pop    %gs
   101b7:	0f a1                	pop    %fs
   101b9:	07                   	pop    %es
   101ba:	1f                   	pop    %ds
   101bb:	61                   	popa   
   101bc:	83 c4 08             	add    $0x8,%esp
   101bf:	cf                   	iret   

000101c0 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101c0:	6a 0d                	push   $0xd
   101c2:	60                   	pusha  
   101c3:	1e                   	push   %ds
   101c4:	06                   	push   %es
   101c5:	0f a0                	push   %fs
   101c7:	0f a8                	push   %gs
   101c9:	54                   	push   %esp
   101ca:	e8 95 07 00 00       	call   10964 <do_handler_general_protection>
   101cf:	83 c4 04             	add    $0x4,%esp
   101d2:	0f a9                	pop    %gs
   101d4:	0f a1                	pop    %fs
   101d6:	07                   	pop    %es
   101d7:	1f                   	pop    %ds
   101d8:	61                   	popa   
   101d9:	83 c4 08             	add    $0x8,%esp
   101dc:	cf                   	iret   

000101dd <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101dd:	6a 0e                	push   $0xe
   101df:	60                   	pusha  
   101e0:	1e                   	push   %ds
   101e1:	06                   	push   %es
   101e2:	0f a0                	push   %fs
   101e4:	0f a8                	push   %gs
   101e6:	54                   	push   %esp
   101e7:	e8 94 07 00 00       	call   10980 <do_handler_page_fault>
   101ec:	83 c4 04             	add    $0x4,%esp
   101ef:	0f a9                	pop    %gs
   101f1:	0f a1                	pop    %fs
   101f3:	07                   	pop    %es
   101f4:	1f                   	pop    %ds
   101f5:	61                   	popa   
   101f6:	83 c4 08             	add    $0x8,%esp
   101f9:	cf                   	iret   

000101fa <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101fa:	6a 00                	push   $0x0
   101fc:	6a 10                	push   $0x10
   101fe:	60                   	pusha  
   101ff:	1e                   	push   %ds
   10200:	06                   	push   %es
   10201:	0f a0                	push   %fs
   10203:	0f a8                	push   %gs
   10205:	54                   	push   %esp
   10206:	e8 cd 06 00 00       	call   108d8 <do_handler_fpu_error>
   1020b:	83 c4 04             	add    $0x4,%esp
   1020e:	0f a9                	pop    %gs
   10210:	0f a1                	pop    %fs
   10212:	07                   	pop    %es
   10213:	1f                   	pop    %ds
   10214:	61                   	popa   
   10215:	83 c4 08             	add    $0x8,%esp
   10218:	cf                   	iret   

00010219 <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   10219:	6a 11                	push   $0x11
   1021b:	60                   	pusha  
   1021c:	1e                   	push   %ds
   1021d:	06                   	push   %es
   1021e:	0f a0                	push   %fs
   10220:	0f a8                	push   %gs
   10222:	54                   	push   %esp
   10223:	e8 cc 06 00 00       	call   108f4 <do_handler_alignment_check>
   10228:	83 c4 04             	add    $0x4,%esp
   1022b:	0f a9                	pop    %gs
   1022d:	0f a1                	pop    %fs
   1022f:	07                   	pop    %es
   10230:	1f                   	pop    %ds
   10231:	61                   	popa   
   10232:	83 c4 08             	add    $0x8,%esp
   10235:	cf                   	iret   

00010236 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10236:	6a 00                	push   $0x0
   10238:	6a 12                	push   $0x12
   1023a:	60                   	pusha  
   1023b:	1e                   	push   %ds
   1023c:	06                   	push   %es
   1023d:	0f a0                	push   %fs
   1023f:	0f a8                	push   %gs
   10241:	54                   	push   %esp
   10242:	e8 c9 06 00 00       	call   10910 <do_handler_machine_check>
   10247:	83 c4 04             	add    $0x4,%esp
   1024a:	0f a9                	pop    %gs
   1024c:	0f a1                	pop    %fs
   1024e:	07                   	pop    %es
   1024f:	1f                   	pop    %ds
   10250:	61                   	popa   
   10251:	83 c4 08             	add    $0x8,%esp
   10254:	cf                   	iret   

00010255 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10255:	6a 00                	push   $0x0
   10257:	6a 13                	push   $0x13
   10259:	60                   	pusha  
   1025a:	1e                   	push   %ds
   1025b:	06                   	push   %es
   1025c:	0f a0                	push   %fs
   1025e:	0f a8                	push   %gs
   10260:	54                   	push   %esp
   10261:	e8 c6 06 00 00       	call   1092c <do_handler_smd_exception>
   10266:	83 c4 04             	add    $0x4,%esp
   10269:	0f a9                	pop    %gs
   1026b:	0f a1                	pop    %fs
   1026d:	07                   	pop    %es
   1026e:	1f                   	pop    %ds
   1026f:	61                   	popa   
   10270:	83 c4 08             	add    $0x8,%esp
   10273:	cf                   	iret   

00010274 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10274:	6a 00                	push   $0x0
   10276:	6a 14                	push   $0x14
   10278:	60                   	pusha  
   10279:	1e                   	push   %ds
   1027a:	06                   	push   %es
   1027b:	0f a0                	push   %fs
   1027d:	0f a8                	push   %gs
   1027f:	54                   	push   %esp
   10280:	e8 c3 06 00 00       	call   10948 <do_handler_virtual_exception>
   10285:	83 c4 04             	add    $0x4,%esp
   10288:	0f a9                	pop    %gs
   1028a:	0f a1                	pop    %fs
   1028c:	07                   	pop    %es
   1028d:	1f                   	pop    %ds
   1028e:	61                   	popa   
   1028f:	83 c4 08             	add    $0x8,%esp
   10292:	cf                   	iret   

00010293 <exception_handler_timer>:

# 硬件中断
exception_handler timer, 0x20, 0
   10293:	6a 00                	push   $0x0
   10295:	6a 20                	push   $0x20
   10297:	60                   	pusha  
   10298:	1e                   	push   %ds
   10299:	06                   	push   %es
   1029a:	0f a0                	push   %fs
   1029c:	0f a8                	push   %gs
   1029e:	54                   	push   %esp
   1029f:	e8 45 0b 00 00       	call   10de9 <do_handler_timer>
   102a4:	83 c4 04             	add    $0x4,%esp
   102a7:	0f a9                	pop    %gs
   102a9:	0f a1                	pop    %fs
   102ab:	07                   	pop    %es
   102ac:	1f                   	pop    %ds
   102ad:	61                   	popa   
   102ae:	83 c4 08             	add    $0x8,%esp
   102b1:	cf                   	iret   

000102b2 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
    .text
    .global simple_switch
simple_switch:
    movl 4(%esp), %eax   // 取from->stack
   102b2:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102b6:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102ba:	55                   	push   %ebp
	push %ebx
   102bb:	53                   	push   %ebx
	push %esi
   102bc:	56                   	push   %esi
	push %edi
   102bd:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102be:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102c0:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102c2:	5f                   	pop    %edi
	pop %esi
   102c3:	5e                   	pop    %esi
	pop %ebx
   102c4:	5b                   	pop    %ebx
	pop %ebp
   102c5:	5d                   	pop    %ebp
   102c6:	c3                   	ret    

000102c7 <tss_init>:
#include "os_cfg.h"
#include "cpu/cpu.h"
#include "tools/log.h"

static int tss_init(task_t *task, uint32_t entry, uint32_t esp)
{
   102c7:	55                   	push   %ebp
   102c8:	89 e5                	mov    %esp,%ebp
   102ca:	83 ec 18             	sub    $0x18,%esp
    int tss_sel = get_alloc_desc();
   102cd:	e8 ea 01 00 00       	call   104bc <get_alloc_desc>
   102d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (tss_sel < 0)
   102d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   102d9:	79 1a                	jns    102f5 <tss_init+0x2e>
    {
        log_printf("alloc tss failed.\n");
   102db:	83 ec 0c             	sub    $0xc,%esp
   102de:	68 d4 15 01 00       	push   $0x115d4
   102e3:	e8 2c 12 00 00       	call   11514 <log_printf>
   102e8:	83 c4 10             	add    $0x10,%esp
        return -1;
   102eb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   102f0:	e9 ad 00 00 00       	jmp    103a2 <tss_init+0xdb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS); // 设置GDT表项内容
   102f5:	8b 45 08             	mov    0x8(%ebp),%eax
   102f8:	68 89 00 00 00       	push   $0x89
   102fd:	6a 68                	push   $0x68
   102ff:	50                   	push   %eax
   10300:	ff 75 f4             	pushl  -0xc(%ebp)
   10303:	e8 35 01 00 00       	call   1043d <segment_desc_set>
   10308:	83 c4 10             	add    $0x10,%esp

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   1030b:	8b 45 08             	mov    0x8(%ebp),%eax
   1030e:	83 ec 04             	sub    $0x4,%esp
   10311:	6a 68                	push   $0x68
   10313:	6a 00                	push   $0x0
   10315:	50                   	push   %eax
   10316:	e8 f8 0d 00 00       	call   11113 <kernel_memset>
   1031b:	83 c4 10             	add    $0x10,%esp
    task->tss.eip = entry;
   1031e:	8b 45 08             	mov    0x8(%ebp),%eax
   10321:	8b 55 0c             	mov    0xc(%ebp),%edx
   10324:	89 50 20             	mov    %edx,0x20(%eax)
    task->tss.esp = task->tss.esp0 = esp;
   10327:	8b 45 08             	mov    0x8(%ebp),%eax
   1032a:	8b 55 10             	mov    0x10(%ebp),%edx
   1032d:	89 50 04             	mov    %edx,0x4(%eax)
   10330:	8b 45 08             	mov    0x8(%ebp),%eax
   10333:	8b 50 04             	mov    0x4(%eax),%edx
   10336:	8b 45 08             	mov    0x8(%ebp),%eax
   10339:	89 50 38             	mov    %edx,0x38(%eax)
    task->tss.ss = task->tss.ss0 = KERNEL_SELECTOR_DS;
   1033c:	8b 45 08             	mov    0x8(%ebp),%eax
   1033f:	c7 40 08 10 00 00 00 	movl   $0x10,0x8(%eax)
   10346:	8b 45 08             	mov    0x8(%ebp),%eax
   10349:	8b 50 08             	mov    0x8(%eax),%edx
   1034c:	8b 45 08             	mov    0x8(%ebp),%eax
   1034f:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = KERNEL_SELECTOR_DS;
   10352:	8b 45 08             	mov    0x8(%ebp),%eax
   10355:	c7 40 5c 10 00 00 00 	movl   $0x10,0x5c(%eax)
   1035c:	8b 45 08             	mov    0x8(%ebp),%eax
   1035f:	8b 50 5c             	mov    0x5c(%eax),%edx
   10362:	8b 45 08             	mov    0x8(%ebp),%eax
   10365:	89 50 58             	mov    %edx,0x58(%eax)
   10368:	8b 45 08             	mov    0x8(%ebp),%eax
   1036b:	8b 50 58             	mov    0x58(%eax),%edx
   1036e:	8b 45 08             	mov    0x8(%ebp),%eax
   10371:	89 50 54             	mov    %edx,0x54(%eax)
   10374:	8b 45 08             	mov    0x8(%ebp),%eax
   10377:	8b 50 54             	mov    0x54(%eax),%edx
   1037a:	8b 45 08             	mov    0x8(%ebp),%eax
   1037d:	89 50 48             	mov    %edx,0x48(%eax)
    task->tss.cs = KERNEL_SELECTOR_CS;
   10380:	8b 45 08             	mov    0x8(%ebp),%eax
   10383:	c7 40 4c 08 00 00 00 	movl   $0x8,0x4c(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   1038a:	8b 45 08             	mov    0x8(%ebp),%eax
   1038d:	c7 40 24 02 02 00 00 	movl   $0x202,0x24(%eax)

    task->tss_sel = tss_sel;
   10394:	8b 45 08             	mov    0x8(%ebp),%eax
   10397:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1039a:	89 50 68             	mov    %edx,0x68(%eax)
    return 0;
   1039d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   103a2:	c9                   	leave  
   103a3:	c3                   	ret    

000103a4 <task_init>:

int task_init(task_t *task, uint32_t entry, uint32_t esp)
{
   103a4:	55                   	push   %ebp
   103a5:	89 e5                	mov    %esp,%ebp
   103a7:	83 ec 08             	sub    $0x8,%esp
    ASSERT(task != (task_t *)0);
   103aa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   103ae:	75 19                	jne    103c9 <task_init+0x25>
   103b0:	68 e7 15 01 00       	push   $0x115e7
   103b5:	68 38 16 01 00       	push   $0x11638
   103ba:	6a 21                	push   $0x21
   103bc:	68 fc 15 01 00       	push   $0x115fc
   103c1:	e8 76 10 00 00       	call   1143c <panic>
   103c6:	83 c4 10             	add    $0x10,%esp
    tss_init(task, entry, esp);
   103c9:	83 ec 04             	sub    $0x4,%esp
   103cc:	ff 75 10             	pushl  0x10(%ebp)
   103cf:	ff 75 0c             	pushl  0xc(%ebp)
   103d2:	ff 75 08             	pushl  0x8(%ebp)
   103d5:	e8 ed fe ff ff       	call   102c7 <tss_init>
   103da:	83 c4 10             	add    $0x10,%esp
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    // }
}
   103dd:	90                   	nop
   103de:	c9                   	leave  
   103df:	c3                   	ret    

000103e0 <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   103e0:	55                   	push   %ebp
   103e1:	89 e5                	mov    %esp,%ebp
   103e3:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   103e6:	8b 45 0c             	mov    0xc(%ebp),%eax
   103e9:	8b 40 68             	mov    0x68(%eax),%eax
   103ec:	83 ec 0c             	sub    $0xc,%esp
   103ef:	50                   	push   %eax
   103f0:	e8 cb 01 00 00       	call   105c0 <switch_to_tss>
   103f5:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
   103f8:	90                   	nop
   103f9:	c9                   	leave  
   103fa:	c3                   	ret    

000103fb <lgdt>:
{
    __asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size)
{
   103fb:	55                   	push   %ebp
   103fc:	89 e5                	mov    %esp,%ebp
   103fe:	83 ec 10             	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } gdt;

    gdt.start31_16 = start >> 16;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	c1 e8 10             	shr    $0x10,%eax
   10407:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1040b:	8b 45 08             	mov    0x8(%ebp),%eax
   1040e:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   10412:	8b 45 0c             	mov    0xc(%ebp),%eax
   10415:	83 e8 01             	sub    $0x1,%eax
   10418:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   1041c:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   10420:	90                   	nop
   10421:	c9                   	leave  
   10422:	c3                   	ret    

00010423 <far_jump>:
{
    __asm__ __volatile__("mov %[v], %%cr0" ::[v] "r"(v));
}

static inline void far_jump(uint32_t selector, uint32_t offset)
{
   10423:	55                   	push   %ebp
   10424:	89 e5                	mov    %esp,%ebp
   10426:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   10429:	8b 45 0c             	mov    0xc(%ebp),%eax
   1042c:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1042f:	8b 45 08             	mov    0x8(%ebp),%eax
   10432:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   10435:	8d 45 f8             	lea    -0x8(%ebp),%eax
   10438:	ff 28                	ljmp   *(%eax)
}
   1043a:	90                   	nop
   1043b:	c9                   	leave  
   1043c:	c3                   	ret    

0001043d <segment_desc_set>:
#include "comm/cpu_instr.h"

static segment_desc_t gdt_table[GDT_TABLE_SIZE];

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   1043d:	55                   	push   %ebp
   1043e:	89 e5                	mov    %esp,%ebp
   10440:	83 ec 14             	sub    $0x14,%esp
   10443:	8b 45 14             	mov    0x14(%ebp),%eax
   10446:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector / sizeof(segment_desc_t)); //
   1044a:	8b 45 08             	mov    0x8(%ebp),%eax
   1044d:	83 e0 f8             	and    $0xfffffff8,%eax
   10450:	05 60 19 01 00       	add    $0x11960,%eax
   10455:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 设置limit单位为4kB
    if (limit > 0xFFFF)
   10458:	81 7d 10 ff ff 00 00 	cmpl   $0xffff,0x10(%ebp)
   1045f:	76 0f                	jbe    10470 <segment_desc_set+0x33>
    {
        attr |= SEG_G; // G 标志位
   10461:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   10467:	8b 45 10             	mov    0x10(%ebp),%eax
   1046a:	c1 e8 0c             	shr    $0xc,%eax
   1046d:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   10470:	8b 45 10             	mov    0x10(%ebp),%eax
   10473:	89 c2                	mov    %eax,%edx
   10475:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10478:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   1047b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1047e:	89 c2                	mov    %eax,%edx
   10480:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10483:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   10487:	8b 45 0c             	mov    0xc(%ebp),%eax
   1048a:	c1 e8 10             	shr    $0x10,%eax
   1048d:	89 c2                	mov    %eax,%edx
   1048f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10492:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   10495:	8b 45 0c             	mov    0xc(%ebp),%eax
   10498:	c1 e8 18             	shr    $0x18,%eax
   1049b:	89 c2                	mov    %eax,%edx
   1049d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104a0:	88 50 07             	mov    %dl,0x7(%eax)
    desc->attr = attr | (((limit >> 16) & 0xFF) << 8);
   104a3:	8b 45 10             	mov    0x10(%ebp),%eax
   104a6:	c1 e8 10             	shr    $0x10,%eax
   104a9:	c1 e0 08             	shl    $0x8,%eax
   104ac:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   104b0:	89 c2                	mov    %eax,%edx
   104b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104b5:	66 89 50 05          	mov    %dx,0x5(%eax)
}
   104b9:	90                   	nop
   104ba:	c9                   	leave  
   104bb:	c3                   	ret    

000104bc <get_alloc_desc>:

int get_alloc_desc()
{
   104bc:	55                   	push   %ebp
   104bd:	89 e5                	mov    %esp,%ebp
   104bf:	83 ec 10             	sub    $0x10,%esp
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   104c2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   104c9:	eb 26                	jmp    104f1 <get_alloc_desc+0x35>
    {
        segment_desc_t *desc = gdt_table + i;
   104cb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104ce:	c1 e0 03             	shl    $0x3,%eax
   104d1:	05 60 19 01 00       	add    $0x11960,%eax
   104d6:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if (desc->attr == 0) // 根据属性是否为0判断
   104d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   104dc:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   104e0:	66 85 c0             	test   %ax,%ax
   104e3:	75 08                	jne    104ed <get_alloc_desc+0x31>
        {
            return i * sizeof(segment_desc_t);
   104e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   104e8:	c1 e0 03             	shl    $0x3,%eax
   104eb:	eb 12                	jmp    104ff <get_alloc_desc+0x43>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   104ed:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   104f1:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   104f8:	7e d1                	jle    104cb <get_alloc_desc+0xf>
        }
    }
    return -1;
   104fa:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   104ff:	c9                   	leave  
   10500:	c3                   	ret    

00010501 <init_gdt>:

void init_gdt(void)
{
   10501:	55                   	push   %ebp
   10502:	89 e5                	mov    %esp,%ebp
   10504:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10507:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1050e:	eb 19                	jmp    10529 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0); // 找到第几个GDT表项
   10510:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10513:	c1 e0 03             	shl    $0x3,%eax
   10516:	6a 00                	push   $0x0
   10518:	6a 00                	push   $0x0
   1051a:	6a 00                	push   $0x0
   1051c:	50                   	push   %eax
   1051d:	e8 1b ff ff ff       	call   1043d <segment_desc_set>
   10522:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   10525:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   10529:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   10530:	7e de                	jle    10510 <init_gdt+0xf>
    }
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF,
   10532:	68 92 40 00 00       	push   $0x4092
   10537:	6a ff                	push   $0xffffffff
   10539:	6a 00                	push   $0x0
   1053b:	6a 10                	push   $0x10
   1053d:	e8 fb fe ff ff       	call   1043d <segment_desc_set>
   10542:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF,
   10545:	68 9a 40 00 00       	push   $0x409a
   1054a:	6a ff                	push   $0xffffffff
   1054c:	6a 00                	push   $0x0
   1054e:	6a 08                	push   $0x8
   10550:	e8 e8 fe ff ff       	call   1043d <segment_desc_set>
   10555:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 重新加载GDT
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   10558:	b8 60 19 01 00       	mov    $0x11960,%eax
   1055d:	68 00 08 00 00       	push   $0x800
   10562:	50                   	push   %eax
   10563:	e8 93 fe ff ff       	call   103fb <lgdt>
   10568:	83 c4 08             	add    $0x8,%esp
}
   1056b:	90                   	nop
   1056c:	c9                   	leave  
   1056d:	c3                   	ret    

0001056e <gate_desc_set>:

void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   1056e:	55                   	push   %ebp
   1056f:	89 e5                	mov    %esp,%ebp
   10571:	83 ec 08             	sub    $0x8,%esp
   10574:	8b 55 0c             	mov    0xc(%ebp),%edx
   10577:	8b 45 14             	mov    0x14(%ebp),%eax
   1057a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1057e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   10582:	8b 45 10             	mov    0x10(%ebp),%eax
   10585:	89 c2                	mov    %eax,%edx
   10587:	8b 45 08             	mov    0x8(%ebp),%eax
   1058a:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1058d:	8b 45 08             	mov    0x8(%ebp),%eax
   10590:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10594:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   10598:	8b 45 08             	mov    0x8(%ebp),%eax
   1059b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1059f:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFFF;
   105a3:	8b 45 10             	mov    0x10(%ebp),%eax
   105a6:	c1 e8 10             	shr    $0x10,%eax
   105a9:	89 c2                	mov    %eax,%edx
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   105b2:	90                   	nop
   105b3:	c9                   	leave  
   105b4:	c3                   	ret    

000105b5 <cpu_init>:

void cpu_init(void)
{
   105b5:	55                   	push   %ebp
   105b6:	89 e5                	mov    %esp,%ebp
    init_gdt();
   105b8:	e8 44 ff ff ff       	call   10501 <init_gdt>
}
   105bd:	90                   	nop
   105be:	5d                   	pop    %ebp
   105bf:	c3                   	ret    

000105c0 <switch_to_tss>:

void switch_to_tss(uint32_t tss_selector)
{
   105c0:	55                   	push   %ebp
   105c1:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   105c3:	6a 00                	push   $0x0
   105c5:	ff 75 08             	pushl  0x8(%ebp)
   105c8:	e8 56 fe ff ff       	call   10423 <far_jump>
   105cd:	83 c4 08             	add    $0x8,%esp
   105d0:	90                   	nop
   105d1:	c9                   	leave  
   105d2:	c3                   	ret    

000105d3 <inb>:
{
   105d3:	55                   	push   %ebp
   105d4:	89 e5                	mov    %esp,%ebp
   105d6:	83 ec 14             	sub    $0x14,%esp
   105d9:	8b 45 08             	mov    0x8(%ebp),%eax
   105dc:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   105e0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   105e4:	89 c2                	mov    %eax,%edx
   105e6:	ec                   	in     (%dx),%al
   105e7:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   105ea:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   105ee:	c9                   	leave  
   105ef:	c3                   	ret    

000105f0 <outb>:
{
   105f0:	55                   	push   %ebp
   105f1:	89 e5                	mov    %esp,%ebp
   105f3:	83 ec 08             	sub    $0x8,%esp
   105f6:	8b 55 08             	mov    0x8(%ebp),%edx
   105f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   105fc:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10600:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   10603:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10607:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1060b:	ee                   	out    %al,(%dx)
}
   1060c:	90                   	nop
   1060d:	c9                   	leave  
   1060e:	c3                   	ret    

0001060f <cli>:
{
   1060f:	55                   	push   %ebp
   10610:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   10612:	fa                   	cli    
}
   10613:	90                   	nop
   10614:	5d                   	pop    %ebp
   10615:	c3                   	ret    

00010616 <sti>:
{
   10616:	55                   	push   %ebp
   10617:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   10619:	fb                   	sti    
}
   1061a:	90                   	nop
   1061b:	5d                   	pop    %ebp
   1061c:	c3                   	ret    

0001061d <lidt>:
{
   1061d:	55                   	push   %ebp
   1061e:	89 e5                	mov    %esp,%ebp
   10620:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   10623:	8b 45 08             	mov    0x8(%ebp),%eax
   10626:	c1 e8 10             	shr    $0x10,%eax
   10629:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   1062d:	8b 45 08             	mov    0x8(%ebp),%eax
   10630:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   10634:	8b 45 0c             	mov    0xc(%ebp),%eax
   10637:	83 e8 01             	sub    $0x1,%eax
   1063a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   1063e:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   10642:	90                   	nop
   10643:	c9                   	leave  
   10644:	c3                   	ret    

00010645 <hlt>:

static inline void hlt(void)
{
   10645:	55                   	push   %ebp
   10646:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10648:	f4                   	hlt    
}
   10649:	90                   	nop
   1064a:	5d                   	pop    %ebp
   1064b:	c3                   	ret    

0001064c <dump_core_regs>:
#define IDT_TABLE_NR 128

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs(exception_frame_t *frame)
{
   1064c:	55                   	push   %ebp
   1064d:	89 e5                	mov    %esp,%ebp
   1064f:	57                   	push   %edi
   10650:	56                   	push   %esi
   10651:	53                   	push   %ebx
   10652:	83 ec 1c             	sub    $0x1c,%esp
    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->err_code);
   10655:	8b 45 08             	mov    0x8(%ebp),%eax
   10658:	8b 50 34             	mov    0x34(%eax),%edx
   1065b:	8b 45 08             	mov    0x8(%ebp),%eax
   1065e:	8b 40 30             	mov    0x30(%eax),%eax
   10661:	83 ec 04             	sub    $0x4,%esp
   10664:	52                   	push   %edx
   10665:	50                   	push   %eax
   10666:	68 44 16 01 00       	push   $0x11644
   1066b:	e8 a4 0e 00 00       	call   11514 <log_printf>
   10670:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   10673:	8b 45 08             	mov    0x8(%ebp),%eax
   10676:	8b 30                	mov    (%eax),%esi
   10678:	8b 45 08             	mov    0x8(%ebp),%eax
   1067b:	8b 58 04             	mov    0x4(%eax),%ebx
   1067e:	8b 45 08             	mov    0x8(%ebp),%eax
   10681:	8b 48 08             	mov    0x8(%eax),%ecx
   10684:	8b 45 08             	mov    0x8(%ebp),%eax
   10687:	8b 50 0c             	mov    0xc(%eax),%edx
   1068a:	8b 45 08             	mov    0x8(%ebp),%eax
   1068d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10690:	83 ec 08             	sub    $0x8,%esp
   10693:	56                   	push   %esi
   10694:	53                   	push   %ebx
   10695:	51                   	push   %ecx
   10696:	52                   	push   %edx
   10697:	50                   	push   %eax
   10698:	68 60 16 01 00       	push   $0x11660
   1069d:	e8 72 0e 00 00       	call   11514 <log_printf>
   106a2:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   106a5:	8b 45 08             	mov    0x8(%ebp),%eax
   106a8:	8b 48 1c             	mov    0x1c(%eax),%ecx
   106ab:	8b 45 08             	mov    0x8(%ebp),%eax
   106ae:	8b 40 18             	mov    0x18(%eax),%eax
   106b1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   106b4:	8b 45 08             	mov    0x8(%ebp),%eax
   106b7:	8b 78 14             	mov    0x14(%eax),%edi
   106ba:	89 7d e0             	mov    %edi,-0x20(%ebp)
   106bd:	8b 45 08             	mov    0x8(%ebp),%eax
   106c0:	8b 78 10             	mov    0x10(%eax),%edi
   106c3:	8b 45 08             	mov    0x8(%ebp),%eax
   106c6:	8b 70 24             	mov    0x24(%eax),%esi
   106c9:	8b 45 08             	mov    0x8(%ebp),%eax
   106cc:	8b 58 28             	mov    0x28(%eax),%ebx
   106cf:	8b 45 08             	mov    0x8(%ebp),%eax
   106d2:	8b 50 20             	mov    0x20(%eax),%edx
   106d5:	8b 45 08             	mov    0x8(%ebp),%eax
   106d8:	8b 40 2c             	mov    0x2c(%eax),%eax
   106db:	83 ec 0c             	sub    $0xc,%esp
   106de:	51                   	push   %ecx
   106df:	ff 75 e4             	pushl  -0x1c(%ebp)
   106e2:	ff 75 e0             	pushl  -0x20(%ebp)
   106e5:	57                   	push   %edi
   106e6:	56                   	push   %esi
   106e7:	53                   	push   %ebx
   106e8:	52                   	push   %edx
   106e9:	50                   	push   %eax
   106ea:	68 88 16 01 00       	push   $0x11688
   106ef:	e8 20 0e 00 00       	call   11514 <log_printf>
   106f4:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, frame->esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   106f7:	8b 45 08             	mov    0x8(%ebp),%eax
   106fa:	8b 50 40             	mov    0x40(%eax),%edx
   106fd:	8b 45 08             	mov    0x8(%ebp),%eax
   10700:	8b 40 38             	mov    0x38(%eax),%eax
   10703:	83 ec 04             	sub    $0x4,%esp
   10706:	52                   	push   %edx
   10707:	50                   	push   %eax
   10708:	68 d1 16 01 00       	push   $0x116d1
   1070d:	e8 02 0e 00 00       	call   11514 <log_printf>
   10712:	83 c4 10             	add    $0x10,%esp
}
   10715:	90                   	nop
   10716:	8d 65 f4             	lea    -0xc(%ebp),%esp
   10719:	5b                   	pop    %ebx
   1071a:	5e                   	pop    %esi
   1071b:	5f                   	pop    %edi
   1071c:	5d                   	pop    %ebp
   1071d:	c3                   	ret    

0001071e <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   1071e:	55                   	push   %ebp
   1071f:	89 e5                	mov    %esp,%ebp
   10721:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   10724:	83 ec 0c             	sub    $0xc,%esp
   10727:	68 e8 16 01 00       	push   $0x116e8
   1072c:	e8 e3 0d 00 00       	call   11514 <log_printf>
   10731:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", msg);
   10734:	83 ec 08             	sub    $0x8,%esp
   10737:	ff 75 0c             	pushl  0xc(%ebp)
   1073a:	68 09 17 01 00       	push   $0x11709
   1073f:	e8 d0 0d 00 00       	call   11514 <log_printf>
   10744:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame); // 打印寄存器
   10747:	83 ec 0c             	sub    $0xc,%esp
   1074a:	ff 75 08             	pushl  0x8(%ebp)
   1074d:	e8 fa fe ff ff       	call   1064c <dump_core_regs>
   10752:	83 c4 10             	add    $0x10,%esp
    log_printf("--------------------------------");
   10755:	83 ec 0c             	sub    $0xc,%esp
   10758:	68 e8 16 01 00       	push   $0x116e8
   1075d:	e8 b2 0d 00 00       	call   11514 <log_printf>
   10762:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   10765:	e8 db fe ff ff       	call   10645 <hlt>
   1076a:	eb f9                	jmp    10765 <do_default_handler+0x47>

0001076c <do_handler_unknown>:
    }
}

void do_handler_unknown(exception_frame_t *frame)
{
   1076c:	55                   	push   %ebp
   1076d:	89 e5                	mov    %esp,%ebp
   1076f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   10772:	83 ec 08             	sub    $0x8,%esp
   10775:	68 24 17 01 00       	push   $0x11724
   1077a:	ff 75 08             	pushl  0x8(%ebp)
   1077d:	e8 9c ff ff ff       	call   1071e <do_default_handler>
   10782:	83 c4 10             	add    $0x10,%esp
}
   10785:	90                   	nop
   10786:	c9                   	leave  
   10787:	c3                   	ret    

00010788 <do_handler_divider>:

void do_handler_divider(exception_frame_t *frame)
{
   10788:	55                   	push   %ebp
   10789:	89 e5                	mov    %esp,%ebp
   1078b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception");
   1078e:	83 ec 08             	sub    $0x8,%esp
   10791:	68 36 17 01 00       	push   $0x11736
   10796:	ff 75 08             	pushl  0x8(%ebp)
   10799:	e8 80 ff ff ff       	call   1071e <do_default_handler>
   1079e:	83 c4 10             	add    $0x10,%esp
}
   107a1:	90                   	nop
   107a2:	c9                   	leave  
   107a3:	c3                   	ret    

000107a4 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t *frame)
{
   107a4:	55                   	push   %ebp
   107a5:	89 e5                	mov    %esp,%ebp
   107a7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   107aa:	83 ec 08             	sub    $0x8,%esp
   107ad:	68 48 17 01 00       	push   $0x11748
   107b2:	ff 75 08             	pushl  0x8(%ebp)
   107b5:	e8 64 ff ff ff       	call   1071e <do_default_handler>
   107ba:	83 c4 10             	add    $0x10,%esp
}
   107bd:	90                   	nop
   107be:	c9                   	leave  
   107bf:	c3                   	ret    

000107c0 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t *frame)
{
   107c0:	55                   	push   %ebp
   107c1:	89 e5                	mov    %esp,%ebp
   107c3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   107c6:	83 ec 08             	sub    $0x8,%esp
   107c9:	68 58 17 01 00       	push   $0x11758
   107ce:	ff 75 08             	pushl  0x8(%ebp)
   107d1:	e8 48 ff ff ff       	call   1071e <do_default_handler>
   107d6:	83 c4 10             	add    $0x10,%esp
}
   107d9:	90                   	nop
   107da:	c9                   	leave  
   107db:	c3                   	ret    

000107dc <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t *frame)
{
   107dc:	55                   	push   %ebp
   107dd:	89 e5                	mov    %esp,%ebp
   107df:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   107e2:	83 ec 08             	sub    $0x8,%esp
   107e5:	68 67 17 01 00       	push   $0x11767
   107ea:	ff 75 08             	pushl  0x8(%ebp)
   107ed:	e8 2c ff ff ff       	call   1071e <do_default_handler>
   107f2:	83 c4 10             	add    $0x10,%esp
}
   107f5:	90                   	nop
   107f6:	c9                   	leave  
   107f7:	c3                   	ret    

000107f8 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t *frame)
{
   107f8:	55                   	push   %ebp
   107f9:	89 e5                	mov    %esp,%ebp
   107fb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   107fe:	83 ec 08             	sub    $0x8,%esp
   10801:	68 73 17 01 00       	push   $0x11773
   10806:	ff 75 08             	pushl  0x8(%ebp)
   10809:	e8 10 ff ff ff       	call   1071e <do_default_handler>
   1080e:	83 c4 10             	add    $0x10,%esp
}
   10811:	90                   	nop
   10812:	c9                   	leave  
   10813:	c3                   	ret    

00010814 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t *frame)
{
   10814:	55                   	push   %ebp
   10815:	89 e5                	mov    %esp,%ebp
   10817:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   1081a:	83 ec 08             	sub    $0x8,%esp
   1081d:	68 7d 17 01 00       	push   $0x1177d
   10822:	ff 75 08             	pushl  0x8(%ebp)
   10825:	e8 f4 fe ff ff       	call   1071e <do_default_handler>
   1082a:	83 c4 10             	add    $0x10,%esp
}
   1082d:	90                   	nop
   1082e:	c9                   	leave  
   1082f:	c3                   	ret    

00010830 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t *frame)
{
   10830:	55                   	push   %ebp
   10831:	89 e5                	mov    %esp,%ebp
   10833:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   10836:	83 ec 08             	sub    $0x8,%esp
   10839:	68 93 17 01 00       	push   $0x11793
   1083e:	ff 75 08             	pushl  0x8(%ebp)
   10841:	e8 d8 fe ff ff       	call   1071e <do_default_handler>
   10846:	83 c4 10             	add    $0x10,%esp
}
   10849:	90                   	nop
   1084a:	c9                   	leave  
   1084b:	c3                   	ret    

0001084c <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t *frame)
{
   1084c:	55                   	push   %ebp
   1084d:	89 e5                	mov    %esp,%ebp
   1084f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   10852:	83 ec 08             	sub    $0x8,%esp
   10855:	68 a3 17 01 00       	push   $0x117a3
   1085a:	ff 75 08             	pushl  0x8(%ebp)
   1085d:	e8 bc fe ff ff       	call   1071e <do_default_handler>
   10862:	83 c4 10             	add    $0x10,%esp
}
   10865:	90                   	nop
   10866:	c9                   	leave  
   10867:	c3                   	ret    

00010868 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t *frame)
{
   10868:	55                   	push   %ebp
   10869:	89 e5                	mov    %esp,%ebp
   1086b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   1086e:	83 ec 08             	sub    $0x8,%esp
   10871:	68 b9 17 01 00       	push   $0x117b9
   10876:	ff 75 08             	pushl  0x8(%ebp)
   10879:	e8 a0 fe ff ff       	call   1071e <do_default_handler>
   1087e:	83 c4 10             	add    $0x10,%esp
}
   10881:	90                   	nop
   10882:	c9                   	leave  
   10883:	c3                   	ret    

00010884 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t *frame)
{
   10884:	55                   	push   %ebp
   10885:	89 e5                	mov    %esp,%ebp
   10887:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   1088a:	83 ec 08             	sub    $0x8,%esp
   1088d:	68 c7 17 01 00       	push   $0x117c7
   10892:	ff 75 08             	pushl  0x8(%ebp)
   10895:	e8 84 fe ff ff       	call   1071e <do_default_handler>
   1089a:	83 c4 10             	add    $0x10,%esp
}
   1089d:	90                   	nop
   1089e:	c9                   	leave  
   1089f:	c3                   	ret    

000108a0 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t *frame)
{
   108a0:	55                   	push   %ebp
   108a1:	89 e5                	mov    %esp,%ebp
   108a3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   108a6:	83 ec 08             	sub    $0x8,%esp
   108a9:	68 d3 17 01 00       	push   $0x117d3
   108ae:	ff 75 08             	pushl  0x8(%ebp)
   108b1:	e8 68 fe ff ff       	call   1071e <do_default_handler>
   108b6:	83 c4 10             	add    $0x10,%esp
}
   108b9:	90                   	nop
   108ba:	c9                   	leave  
   108bb:	c3                   	ret    

000108bc <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   108bc:	55                   	push   %ebp
   108bd:	89 e5                	mov    %esp,%ebp
   108bf:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   108c2:	83 ec 08             	sub    $0x8,%esp
   108c5:	68 e8 17 01 00       	push   $0x117e8
   108ca:	ff 75 08             	pushl  0x8(%ebp)
   108cd:	e8 4c fe ff ff       	call   1071e <do_default_handler>
   108d2:	83 c4 10             	add    $0x10,%esp
}
   108d5:	90                   	nop
   108d6:	c9                   	leave  
   108d7:	c3                   	ret    

000108d8 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   108d8:	55                   	push   %ebp
   108d9:	89 e5                	mov    %esp,%ebp
   108db:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   108de:	83 ec 08             	sub    $0x8,%esp
   108e1:	68 fd 17 01 00       	push   $0x117fd
   108e6:	ff 75 08             	pushl  0x8(%ebp)
   108e9:	e8 30 fe ff ff       	call   1071e <do_default_handler>
   108ee:	83 c4 10             	add    $0x10,%esp
}
   108f1:	90                   	nop
   108f2:	c9                   	leave  
   108f3:	c3                   	ret    

000108f4 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   108f4:	55                   	push   %ebp
   108f5:	89 e5                	mov    %esp,%ebp
   108f7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   108fa:	83 ec 08             	sub    $0x8,%esp
   108fd:	68 1b 18 01 00       	push   $0x1181b
   10902:	ff 75 08             	pushl  0x8(%ebp)
   10905:	e8 14 fe ff ff       	call   1071e <do_default_handler>
   1090a:	83 c4 10             	add    $0x10,%esp
}
   1090d:	90                   	nop
   1090e:	c9                   	leave  
   1090f:	c3                   	ret    

00010910 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   10910:	55                   	push   %ebp
   10911:	89 e5                	mov    %esp,%ebp
   10913:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   10916:	83 ec 08             	sub    $0x8,%esp
   10919:	68 2c 18 01 00       	push   $0x1182c
   1091e:	ff 75 08             	pushl  0x8(%ebp)
   10921:	e8 f8 fd ff ff       	call   1071e <do_default_handler>
   10926:	83 c4 10             	add    $0x10,%esp
}
   10929:	90                   	nop
   1092a:	c9                   	leave  
   1092b:	c3                   	ret    

0001092c <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   1092c:	55                   	push   %ebp
   1092d:	89 e5                	mov    %esp,%ebp
   1092f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   10932:	83 ec 08             	sub    $0x8,%esp
   10935:	68 3c 18 01 00       	push   $0x1183c
   1093a:	ff 75 08             	pushl  0x8(%ebp)
   1093d:	e8 dc fd ff ff       	call   1071e <do_default_handler>
   10942:	83 c4 10             	add    $0x10,%esp
}
   10945:	90                   	nop
   10946:	c9                   	leave  
   10947:	c3                   	ret    

00010948 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   10948:	55                   	push   %ebp
   10949:	89 e5                	mov    %esp,%ebp
   1094b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   1094e:	83 ec 08             	sub    $0x8,%esp
   10951:	68 5b 18 01 00       	push   $0x1185b
   10956:	ff 75 08             	pushl  0x8(%ebp)
   10959:	e8 c0 fd ff ff       	call   1071e <do_default_handler>
   1095e:	83 c4 10             	add    $0x10,%esp
}
   10961:	90                   	nop
   10962:	c9                   	leave  
   10963:	c3                   	ret    

00010964 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   10964:	55                   	push   %ebp
   10965:	89 e5                	mov    %esp,%ebp
   10967:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "General_protection Exception.");
   1096a:	83 ec 08             	sub    $0x8,%esp
   1096d:	68 75 18 01 00       	push   $0x11875
   10972:	ff 75 08             	pushl  0x8(%ebp)
   10975:	e8 a4 fd ff ff       	call   1071e <do_default_handler>
   1097a:	83 c4 10             	add    $0x10,%esp
}
   1097d:	90                   	nop
   1097e:	c9                   	leave  
   1097f:	c3                   	ret    

00010980 <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   10980:	55                   	push   %ebp
   10981:	89 e5                	mov    %esp,%ebp
   10983:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Page_fault Exception.");
   10986:	83 ec 08             	sub    $0x8,%esp
   10989:	68 93 18 01 00       	push   $0x11893
   1098e:	ff 75 08             	pushl  0x8(%ebp)
   10991:	e8 88 fd ff ff       	call   1071e <do_default_handler>
   10996:	83 c4 10             	add    $0x10,%esp
}
   10999:	90                   	nop
   1099a:	c9                   	leave  
   1099b:	c3                   	ret    

0001099c <init_pic>:

static void init_pic(void)
{
   1099c:	55                   	push   %ebp
   1099d:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   1099f:	6a 11                	push   $0x11
   109a1:	6a 20                	push   $0x20
   109a3:	e8 48 fc ff ff       	call   105f0 <outb>
   109a8:	83 c4 08             	add    $0x8,%esp
    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   109ab:	6a 20                	push   $0x20
   109ad:	6a 21                	push   $0x21
   109af:	e8 3c fc ff ff       	call   105f0 <outb>
   109b4:	83 c4 08             	add    $0x8,%esp
    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   109b7:	6a 04                	push   $0x4
   109b9:	6a 21                	push   $0x21
   109bb:	e8 30 fc ff ff       	call   105f0 <outb>
   109c0:	83 c4 08             	add    $0x8,%esp
    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   109c3:	6a 01                	push   $0x1
   109c5:	6a 21                	push   $0x21
   109c7:	e8 24 fc ff ff       	call   105f0 <outb>
   109cc:	83 c4 08             	add    $0x8,%esp

    // 第二块芯片
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   109cf:	6a 11                	push   $0x11
   109d1:	68 a0 00 00 00       	push   $0xa0
   109d6:	e8 15 fc ff ff       	call   105f0 <outb>
   109db:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   109de:	6a 28                	push   $0x28
   109e0:	68 a1 00 00 00       	push   $0xa1
   109e5:	e8 06 fc ff ff       	call   105f0 <outb>
   109ea:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   109ed:	6a 02                	push   $0x2
   109ef:	68 a1 00 00 00       	push   $0xa1
   109f4:	e8 f7 fb ff ff       	call   105f0 <outb>
   109f9:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   109fc:	6a 01                	push   $0x1
   109fe:	68 a1 00 00 00       	push   $0xa1
   10a03:	e8 e8 fb ff ff       	call   105f0 <outb>
   10a08:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   10a0b:	68 fb 00 00 00       	push   $0xfb
   10a10:	6a 21                	push   $0x21
   10a12:	e8 d9 fb ff ff       	call   105f0 <outb>
   10a17:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   10a1a:	68 ff 00 00 00       	push   $0xff
   10a1f:	68 a1 00 00 00       	push   $0xa1
   10a24:	e8 c7 fb ff ff       	call   105f0 <outb>
   10a29:	83 c4 08             	add    $0x8,%esp
}
   10a2c:	90                   	nop
   10a2d:	c9                   	leave  
   10a2e:	c3                   	ret    

00010a2f <irq_init>:

void irq_init(void)
{
   10a2f:	55                   	push   %ebp
   10a30:	89 e5                	mov    %esp,%ebp
   10a32:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a35:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10a3c:	eb 25                	jmp    10a63 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10a3e:	ba 35 00 01 00       	mov    $0x10035,%edx
   10a43:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10a46:	c1 e0 03             	shl    $0x3,%eax
   10a49:	05 60 21 01 00       	add    $0x12160,%eax
   10a4e:	68 00 8e 00 00       	push   $0x8e00
   10a53:	52                   	push   %edx
   10a54:	6a 08                	push   $0x8
   10a56:	50                   	push   %eax
   10a57:	e8 12 fb ff ff       	call   1056e <gate_desc_set>
   10a5c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   10a5f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10a63:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   10a67:	7e d5                	jle    10a3e <irq_init+0xf>
    }
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   10a69:	83 ec 08             	sub    $0x8,%esp
   10a6c:	68 54 00 01 00       	push   $0x10054
   10a71:	6a 00                	push   $0x0
   10a73:	e8 65 01 00 00       	call   10bdd <irq_install>
   10a78:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   10a7b:	83 ec 08             	sub    $0x8,%esp
   10a7e:	68 73 00 01 00       	push   $0x10073
   10a83:	6a 01                	push   $0x1
   10a85:	e8 53 01 00 00       	call   10bdd <irq_install>
   10a8a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   10a8d:	83 ec 08             	sub    $0x8,%esp
   10a90:	68 92 00 01 00       	push   $0x10092
   10a95:	6a 02                	push   $0x2
   10a97:	e8 41 01 00 00       	call   10bdd <irq_install>
   10a9c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   10a9f:	83 ec 08             	sub    $0x8,%esp
   10aa2:	68 b1 00 01 00       	push   $0x100b1
   10aa7:	6a 03                	push   $0x3
   10aa9:	e8 2f 01 00 00       	call   10bdd <irq_install>
   10aae:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   10ab1:	83 ec 08             	sub    $0x8,%esp
   10ab4:	68 d0 00 01 00       	push   $0x100d0
   10ab9:	6a 04                	push   $0x4
   10abb:	e8 1d 01 00 00       	call   10bdd <irq_install>
   10ac0:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   10ac3:	83 ec 08             	sub    $0x8,%esp
   10ac6:	68 ef 00 01 00       	push   $0x100ef
   10acb:	6a 05                	push   $0x5
   10acd:	e8 0b 01 00 00       	call   10bdd <irq_install>
   10ad2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   10ad5:	83 ec 08             	sub    $0x8,%esp
   10ad8:	68 0e 01 01 00       	push   $0x1010e
   10add:	6a 06                	push   $0x6
   10adf:	e8 f9 00 00 00       	call   10bdd <irq_install>
   10ae4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   10ae7:	83 ec 08             	sub    $0x8,%esp
   10aea:	68 2d 01 01 00       	push   $0x1012d
   10aef:	6a 07                	push   $0x7
   10af1:	e8 e7 00 00 00       	call   10bdd <irq_install>
   10af6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   10af9:	83 ec 08             	sub    $0x8,%esp
   10afc:	68 4c 01 01 00       	push   $0x1014c
   10b01:	6a 08                	push   $0x8
   10b03:	e8 d5 00 00 00       	call   10bdd <irq_install>
   10b08:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   10b0b:	83 ec 08             	sub    $0x8,%esp
   10b0e:	68 69 01 01 00       	push   $0x10169
   10b13:	6a 0a                	push   $0xa
   10b15:	e8 c3 00 00 00       	call   10bdd <irq_install>
   10b1a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   10b1d:	83 ec 08             	sub    $0x8,%esp
   10b20:	68 86 01 01 00       	push   $0x10186
   10b25:	6a 0b                	push   $0xb
   10b27:	e8 b1 00 00 00       	call   10bdd <irq_install>
   10b2c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   10b2f:	83 ec 08             	sub    $0x8,%esp
   10b32:	68 a3 01 01 00       	push   $0x101a3
   10b37:	6a 0c                	push   $0xc
   10b39:	e8 9f 00 00 00       	call   10bdd <irq_install>
   10b3e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   10b41:	83 ec 08             	sub    $0x8,%esp
   10b44:	68 c0 01 01 00       	push   $0x101c0
   10b49:	6a 0d                	push   $0xd
   10b4b:	e8 8d 00 00 00       	call   10bdd <irq_install>
   10b50:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   10b53:	83 ec 08             	sub    $0x8,%esp
   10b56:	68 dd 01 01 00       	push   $0x101dd
   10b5b:	6a 0e                	push   $0xe
   10b5d:	e8 7b 00 00 00       	call   10bdd <irq_install>
   10b62:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   10b65:	83 ec 08             	sub    $0x8,%esp
   10b68:	68 fa 01 01 00       	push   $0x101fa
   10b6d:	6a 10                	push   $0x10
   10b6f:	e8 69 00 00 00       	call   10bdd <irq_install>
   10b74:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   10b77:	83 ec 08             	sub    $0x8,%esp
   10b7a:	68 19 02 01 00       	push   $0x10219
   10b7f:	6a 11                	push   $0x11
   10b81:	e8 57 00 00 00       	call   10bdd <irq_install>
   10b86:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   10b89:	83 ec 08             	sub    $0x8,%esp
   10b8c:	68 36 02 01 00       	push   $0x10236
   10b91:	6a 12                	push   $0x12
   10b93:	e8 45 00 00 00       	call   10bdd <irq_install>
   10b98:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   10b9b:	83 ec 08             	sub    $0x8,%esp
   10b9e:	68 55 02 01 00       	push   $0x10255
   10ba3:	6a 13                	push   $0x13
   10ba5:	e8 33 00 00 00       	call   10bdd <irq_install>
   10baa:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   10bad:	83 ec 08             	sub    $0x8,%esp
   10bb0:	68 74 02 01 00       	push   $0x10274
   10bb5:	6a 14                	push   $0x14
   10bb7:	e8 21 00 00 00       	call   10bdd <irq_install>
   10bbc:	83 c4 10             	add    $0x10,%esp
    lidt((uint32_t)idt_table, sizeof(idt_table));
   10bbf:	b8 60 21 01 00       	mov    $0x12160,%eax
   10bc4:	83 ec 08             	sub    $0x8,%esp
   10bc7:	68 00 04 00 00       	push   $0x400
   10bcc:	50                   	push   %eax
   10bcd:	e8 4b fa ff ff       	call   1061d <lidt>
   10bd2:	83 c4 10             	add    $0x10,%esp

    init_pic();
   10bd5:	e8 c2 fd ff ff       	call   1099c <init_pic>
}
   10bda:	90                   	nop
   10bdb:	c9                   	leave  
   10bdc:	c3                   	ret    

00010bdd <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   10bdd:	55                   	push   %ebp
   10bde:	89 e5                	mov    %esp,%ebp
   10be0:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   10be3:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   10be7:	7e 07                	jle    10bf0 <irq_install+0x13>
    {
        return -1;
   10be9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bee:	eb 25                	jmp    10c15 <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   10bf0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10bf3:	8b 55 08             	mov    0x8(%ebp),%edx
   10bf6:	c1 e2 03             	shl    $0x3,%edx
   10bf9:	81 c2 60 21 01 00    	add    $0x12160,%edx
   10bff:	68 00 8e 00 00       	push   $0x8e00
   10c04:	50                   	push   %eax
   10c05:	6a 08                	push   $0x8
   10c07:	52                   	push   %edx
   10c08:	e8 61 f9 ff ff       	call   1056e <gate_desc_set>
   10c0d:	83 c4 10             	add    $0x10,%esp
    return 0;
   10c10:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c15:	c9                   	leave  
   10c16:	c3                   	ret    

00010c17 <irq_enable>:

void irq_enable(int irq_num)
{
   10c17:	55                   	push   %ebp
   10c18:	89 e5                	mov    %esp,%ebp
   10c1a:	53                   	push   %ebx
   10c1b:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10c1e:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10c22:	7e 78                	jle    10c9c <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   10c24:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10c28:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10c2c:	7f 32                	jg     10c60 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   10c2e:	6a 21                	push   $0x21
   10c30:	e8 9e f9 ff ff       	call   105d3 <inb>
   10c35:	83 c4 04             	add    $0x4,%esp
   10c38:	89 c2                	mov    %eax,%edx
   10c3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3d:	bb 01 00 00 00       	mov    $0x1,%ebx
   10c42:	89 c1                	mov    %eax,%ecx
   10c44:	d3 e3                	shl    %cl,%ebx
   10c46:	89 d8                	mov    %ebx,%eax
   10c48:	f7 d0                	not    %eax
   10c4a:	21 d0                	and    %edx,%eax
   10c4c:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10c4f:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10c53:	50                   	push   %eax
   10c54:	6a 21                	push   $0x21
   10c56:	e8 95 f9 ff ff       	call   105f0 <outb>
   10c5b:	83 c4 08             	add    $0x8,%esp
   10c5e:	eb 3d                	jmp    10c9d <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   10c60:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   10c64:	68 a1 00 00 00       	push   $0xa1
   10c69:	e8 65 f9 ff ff       	call   105d3 <inb>
   10c6e:	83 c4 04             	add    $0x4,%esp
   10c71:	89 c2                	mov    %eax,%edx
   10c73:	8b 45 08             	mov    0x8(%ebp),%eax
   10c76:	bb 01 00 00 00       	mov    $0x1,%ebx
   10c7b:	89 c1                	mov    %eax,%ecx
   10c7d:	d3 e3                	shl    %cl,%ebx
   10c7f:	89 d8                	mov    %ebx,%eax
   10c81:	f7 d0                	not    %eax
   10c83:	21 d0                	and    %edx,%eax
   10c85:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10c88:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10c8c:	50                   	push   %eax
   10c8d:	68 a1 00 00 00       	push   $0xa1
   10c92:	e8 59 f9 ff ff       	call   105f0 <outb>
   10c97:	83 c4 08             	add    $0x8,%esp
   10c9a:	eb 01                	jmp    10c9d <irq_enable+0x86>
        return;
   10c9c:	90                   	nop
    }
}
   10c9d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10ca0:	c9                   	leave  
   10ca1:	c3                   	ret    

00010ca2 <irq_disable>:

void irq_disable(int irq_num)
{
   10ca2:	55                   	push   %ebp
   10ca3:	89 e5                	mov    %esp,%ebp
   10ca5:	53                   	push   %ebx
   10ca6:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   10ca9:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   10cad:	7e 74                	jle    10d23 <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   10caf:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   10cb3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10cb7:	7f 30                	jg     10ce9 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   10cb9:	6a 21                	push   $0x21
   10cbb:	e8 13 f9 ff ff       	call   105d3 <inb>
   10cc0:	83 c4 04             	add    $0x4,%esp
   10cc3:	89 c3                	mov    %eax,%ebx
   10cc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc8:	ba 01 00 00 00       	mov    $0x1,%edx
   10ccd:	89 c1                	mov    %eax,%ecx
   10ccf:	d3 e2                	shl    %cl,%edx
   10cd1:	89 d0                	mov    %edx,%eax
   10cd3:	09 d8                	or     %ebx,%eax
   10cd5:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   10cd8:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   10cdc:	50                   	push   %eax
   10cdd:	6a 21                	push   $0x21
   10cdf:	e8 0c f9 ff ff       	call   105f0 <outb>
   10ce4:	83 c4 08             	add    $0x8,%esp
   10ce7:	eb 3b                	jmp    10d24 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   10ce9:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   10ced:	68 a1 00 00 00       	push   $0xa1
   10cf2:	e8 dc f8 ff ff       	call   105d3 <inb>
   10cf7:	83 c4 04             	add    $0x4,%esp
   10cfa:	89 c3                	mov    %eax,%ebx
   10cfc:	8b 45 08             	mov    0x8(%ebp),%eax
   10cff:	ba 01 00 00 00       	mov    $0x1,%edx
   10d04:	89 c1                	mov    %eax,%ecx
   10d06:	d3 e2                	shl    %cl,%edx
   10d08:	89 d0                	mov    %edx,%eax
   10d0a:	09 d8                	or     %ebx,%eax
   10d0c:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   10d0f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   10d13:	50                   	push   %eax
   10d14:	68 a1 00 00 00       	push   $0xa1
   10d19:	e8 d2 f8 ff ff       	call   105f0 <outb>
   10d1e:	83 c4 08             	add    $0x8,%esp
   10d21:	eb 01                	jmp    10d24 <irq_disable+0x82>
        return;
   10d23:	90                   	nop
    }
}
   10d24:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10d27:	c9                   	leave  
   10d28:	c3                   	ret    

00010d29 <irq_disable_global>:

void irq_disable_global(void)
{
   10d29:	55                   	push   %ebp
   10d2a:	89 e5                	mov    %esp,%ebp
    cli();
   10d2c:	e8 de f8 ff ff       	call   1060f <cli>
}
   10d31:	90                   	nop
   10d32:	5d                   	pop    %ebp
   10d33:	c3                   	ret    

00010d34 <irq_enable_global>:

void irq_enable_global(void)
{
   10d34:	55                   	push   %ebp
   10d35:	89 e5                	mov    %esp,%ebp
    sti();
   10d37:	e8 da f8 ff ff       	call   10616 <sti>
}
   10d3c:	90                   	nop
   10d3d:	5d                   	pop    %ebp
   10d3e:	c3                   	ret    

00010d3f <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   10d3f:	55                   	push   %ebp
   10d40:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   10d42:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    // 从片也可能需要发送EOI
    if (irq_num >= 8)
   10d46:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   10d4a:	7e 0f                	jle    10d5b <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   10d4c:	6a 20                	push   $0x20
   10d4e:	68 a0 00 00 00       	push   $0xa0
   10d53:	e8 98 f8 ff ff       	call   105f0 <outb>
   10d58:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   10d5b:	6a 20                	push   $0x20
   10d5d:	6a 20                	push   $0x20
   10d5f:	e8 8c f8 ff ff       	call   105f0 <outb>
   10d64:	83 c4 08             	add    $0x8,%esp
   10d67:	90                   	nop
   10d68:	c9                   	leave  
   10d69:	c3                   	ret    

00010d6a <outb>:
{
   10d6a:	55                   	push   %ebp
   10d6b:	89 e5                	mov    %esp,%ebp
   10d6d:	83 ec 08             	sub    $0x8,%esp
   10d70:	8b 55 08             	mov    0x8(%ebp),%edx
   10d73:	8b 45 0c             	mov    0xc(%ebp),%eax
   10d76:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   10d7a:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   10d7d:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   10d81:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   10d85:	ee                   	out    %al,(%dx)
}
   10d86:	90                   	nop
   10d87:	c9                   	leave  
   10d88:	c3                   	ret    

00010d89 <init_pic>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
static void init_pic(void)
{
   10d89:	55                   	push   %ebp
   10d8a:	89 e5                	mov    %esp,%ebp
   10d8c:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS); // 每隔10ms+1
   10d8f:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   10d96:	6a 36                	push   $0x36
   10d98:	6a 43                	push   $0x43
   10d9a:	e8 cb ff ff ff       	call   10d6a <outb>
   10d9f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);        // 加载低8位
   10da2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10da5:	0f b6 c0             	movzbl %al,%eax
   10da8:	50                   	push   %eax
   10da9:	6a 40                	push   $0x40
   10dab:	e8 ba ff ff ff       	call   10d6a <outb>
   10db0:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   10db3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10db6:	c1 e8 08             	shr    $0x8,%eax
   10db9:	0f b6 c0             	movzbl %al,%eax
   10dbc:	50                   	push   %eax
   10dbd:	6a 40                	push   $0x40
   10dbf:	e8 a6 ff ff ff       	call   10d6a <outb>
   10dc4:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   10dc7:	83 ec 08             	sub    $0x8,%esp
   10dca:	68 93 02 01 00       	push   $0x10293
   10dcf:	6a 20                	push   $0x20
   10dd1:	e8 07 fe ff ff       	call   10bdd <irq_install>
   10dd6:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   10dd9:	83 ec 0c             	sub    $0xc,%esp
   10ddc:	6a 20                	push   $0x20
   10dde:	e8 34 fe ff ff       	call   10c17 <irq_enable>
   10de3:	83 c4 10             	add    $0x10,%esp
}
   10de6:	90                   	nop
   10de7:	c9                   	leave  
   10de8:	c3                   	ret    

00010de9 <do_handler_timer>:
void do_handler_timer(exception_frame_t *frame)
{
   10de9:	55                   	push   %ebp
   10dea:	89 e5                	mov    %esp,%ebp
   10dec:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   10def:	a1 60 25 01 00       	mov    0x12560,%eax
   10df4:	83 c0 01             	add    $0x1,%eax
   10df7:	a3 60 25 01 00       	mov    %eax,0x12560
    pic_send_eoi(IRQ0_TIMER);
   10dfc:	83 ec 0c             	sub    $0xc,%esp
   10dff:	6a 20                	push   $0x20
   10e01:	e8 39 ff ff ff       	call   10d3f <pic_send_eoi>
   10e06:	83 c4 10             	add    $0x10,%esp
}
   10e09:	90                   	nop
   10e0a:	c9                   	leave  
   10e0b:	c3                   	ret    

00010e0c <time_init>:
void time_init(void)
{
   10e0c:	55                   	push   %ebp
   10e0d:	89 e5                	mov    %esp,%ebp
   10e0f:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   10e12:	c7 05 60 25 01 00 00 	movl   $0x0,0x12560
   10e19:	00 00 00 
    init_pic();
   10e1c:	e8 68 ff ff ff       	call   10d89 <init_pic>
   10e21:	90                   	nop
   10e22:	c9                   	leave  
   10e23:	c3                   	ret    

00010e24 <write_tr>:

// 写tss register 当前运行那个进程
static inline void write_tr(uint32_t tss_selector)
{
   10e24:	55                   	push   %ebp
   10e25:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   10e27:	8b 45 08             	mov    0x8(%ebp),%eax
   10e2a:	0f 00 d8             	ltr    %ax
}
   10e2d:	90                   	nop
   10e2e:	5d                   	pop    %ebp
   10e2f:	c3                   	ret    

00010e30 <kernel_init>:
#include "tools/klib.h"
#include "core/task.h"
#include "comm/cpu_instr.h"

void kernel_init(boot_info_t *boot_info)
{
   10e30:	55                   	push   %ebp
   10e31:	89 e5                	mov    %esp,%ebp
   10e33:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   10e36:	e8 7a f7 ff ff       	call   105b5 <cpu_init>
    log_init();
   10e3b:	e8 6e 06 00 00       	call   114ae <log_init>
    irq_init();
   10e40:	e8 ea fb ff ff       	call   10a2f <irq_init>
    time_init();
   10e45:	e8 c2 ff ff ff       	call   10e0c <time_init>
}
   10e4a:	90                   	nop
   10e4b:	c9                   	leave  
   10e4c:	c3                   	ret    

00010e4d <init_task_entry>:
static task_t init_task;
static uint32_t init_task_stack[1024];
static task_t first_task;

void init_task_entry(void)
{
   10e4d:	55                   	push   %ebp
   10e4e:	89 e5                	mov    %esp,%ebp
   10e50:	83 ec 18             	sub    $0x18,%esp
    int count = 0;
   10e53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("init_task_entry: %d", count++);
   10e5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e5d:	8d 50 01             	lea    0x1(%eax),%edx
   10e60:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10e63:	83 ec 08             	sub    $0x8,%esp
   10e66:	50                   	push   %eax
   10e67:	68 a9 18 01 00       	push   $0x118a9
   10e6c:	e8 a3 06 00 00       	call   11514 <log_printf>
   10e71:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&init_task, &first_task);
   10e74:	83 ec 08             	sub    $0x8,%esp
   10e77:	68 00 36 01 00       	push   $0x13600
   10e7c:	68 80 25 01 00       	push   $0x12580
   10e81:	e8 5a f5 ff ff       	call   103e0 <task_switch_from_to>
   10e86:	83 c4 10             	add    $0x10,%esp
        log_printf("init_task_entry: %d", count++);
   10e89:	eb cf                	jmp    10e5a <init_task_entry+0xd>

00010e8b <init_main>:
    }
}

void init_main(void)
{
   10e8b:	55                   	push   %ebp
   10e8c:	89 e5                	mov    %esp,%ebp
   10e8e:	83 ec 18             	sub    $0x18,%esp
    log_printf("Kernel is running...");
   10e91:	83 ec 0c             	sub    $0xc,%esp
   10e94:	68 bd 18 01 00       	push   $0x118bd
   10e99:	e8 76 06 00 00       	call   11514 <log_printf>
   10e9e:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   10ea1:	83 ec 08             	sub    $0x8,%esp
   10ea4:	68 d2 18 01 00       	push   $0x118d2
   10ea9:	68 d8 18 01 00       	push   $0x118d8
   10eae:	e8 61 06 00 00       	call   11514 <log_printf>
   10eb3:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 123456, -123, 0x123456, 'a');
   10eb6:	83 ec 0c             	sub    $0xc,%esp
   10eb9:	6a 61                	push   $0x61
   10ebb:	68 56 34 12 00       	push   $0x123456
   10ec0:	6a 85                	push   $0xffffff85
   10ec2:	68 40 e2 01 00       	push   $0x1e240
   10ec7:	68 e4 18 01 00       	push   $0x118e4
   10ecc:	e8 43 06 00 00       	call   11514 <log_printf>
   10ed1:	83 c4 20             	add    $0x20,%esp

    task_init(&init_task, (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]); // 压栈先-4再入栈
   10ed4:	ba 00 36 01 00       	mov    $0x13600,%edx
   10ed9:	b8 4d 0e 01 00       	mov    $0x10e4d,%eax
   10ede:	83 ec 04             	sub    $0x4,%esp
   10ee1:	52                   	push   %edx
   10ee2:	50                   	push   %eax
   10ee3:	68 80 25 01 00       	push   $0x12580
   10ee8:	e8 b7 f4 ff ff       	call   103a4 <task_init>
   10eed:	83 c4 10             	add    $0x10,%esp
    task_init(&first_task, 0, 0);
   10ef0:	83 ec 04             	sub    $0x4,%esp
   10ef3:	6a 00                	push   $0x0
   10ef5:	6a 00                	push   $0x0
   10ef7:	68 00 36 01 00       	push   $0x13600
   10efc:	e8 a3 f4 ff ff       	call   103a4 <task_init>
   10f01:	83 c4 10             	add    $0x10,%esp
    write_tr(first_task.tss_sel);
   10f04:	a1 68 36 01 00       	mov    0x13668,%eax
   10f09:	83 ec 0c             	sub    $0xc,%esp
   10f0c:	50                   	push   %eax
   10f0d:	e8 12 ff ff ff       	call   10e24 <write_tr>
   10f12:	83 c4 10             	add    $0x10,%esp

    int count = 0;
   10f15:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (;;)
    {
        log_printf("init_main: %d", count++);
   10f1c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f1f:	8d 50 01             	lea    0x1(%eax),%edx
   10f22:	89 55 f4             	mov    %edx,-0xc(%ebp)
   10f25:	83 ec 08             	sub    $0x8,%esp
   10f28:	50                   	push   %eax
   10f29:	68 f0 18 01 00       	push   $0x118f0
   10f2e:	e8 e1 05 00 00       	call   11514 <log_printf>
   10f33:	83 c4 10             	add    $0x10,%esp
        task_switch_from_to(&first_task, &init_task);
   10f36:	83 ec 08             	sub    $0x8,%esp
   10f39:	68 80 25 01 00       	push   $0x12580
   10f3e:	68 00 36 01 00       	push   $0x13600
   10f43:	e8 98 f4 ff ff       	call   103e0 <task_switch_from_to>
   10f48:	83 c4 10             	add    $0x10,%esp
        log_printf("init_main: %d", count++);
   10f4b:	eb cf                	jmp    10f1c <init_main+0x91>

00010f4d <hlt>:
{
   10f4d:	55                   	push   %ebp
   10f4e:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10f50:	f4                   	hlt    
}
   10f51:	90                   	nop
   10f52:	5d                   	pop    %ebp
   10f53:	c3                   	ret    

00010f54 <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char *dest, const char *src)
{
   10f54:	55                   	push   %ebp
   10f55:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   10f57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10f5b:	74 3b                	je     10f98 <kernel_strcpy+0x44>
   10f5d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10f61:	74 35                	je     10f98 <kernel_strcpy+0x44>
    {
        return;
    }

    while (*dest && *src)
   10f63:	eb 17                	jmp    10f7c <kernel_strcpy+0x28>
    {
        *dest++ = *src++;
   10f65:	8b 55 0c             	mov    0xc(%ebp),%edx
   10f68:	8d 42 01             	lea    0x1(%edx),%eax
   10f6b:	89 45 0c             	mov    %eax,0xc(%ebp)
   10f6e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f71:	8d 48 01             	lea    0x1(%eax),%ecx
   10f74:	89 4d 08             	mov    %ecx,0x8(%ebp)
   10f77:	0f b6 12             	movzbl (%edx),%edx
   10f7a:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   10f7c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f7f:	0f b6 00             	movzbl (%eax),%eax
   10f82:	84 c0                	test   %al,%al
   10f84:	74 0a                	je     10f90 <kernel_strcpy+0x3c>
   10f86:	8b 45 0c             	mov    0xc(%ebp),%eax
   10f89:	0f b6 00             	movzbl (%eax),%eax
   10f8c:	84 c0                	test   %al,%al
   10f8e:	75 d5                	jne    10f65 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   10f90:	8b 45 08             	mov    0x8(%ebp),%eax
   10f93:	c6 00 00             	movb   $0x0,(%eax)
   10f96:	eb 01                	jmp    10f99 <kernel_strcpy+0x45>
        return;
   10f98:	90                   	nop
}
   10f99:	5d                   	pop    %ebp
   10f9a:	c3                   	ret    

00010f9b <kernel_strncpy>:

void kernel_strncpy(char *dest, const char *src, int size)
{
   10f9b:	55                   	push   %ebp
   10f9c:	89 e5                	mov    %esp,%ebp
   10f9e:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   10fa1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10fa5:	74 61                	je     11008 <kernel_strncpy+0x6d>
   10fa7:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   10fab:	74 5b                	je     11008 <kernel_strncpy+0x6d>
   10fad:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10fb1:	74 55                	je     11008 <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   10fb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   10fb9:	8b 45 0c             	mov    0xc(%ebp),%eax
   10fbc:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   10fbf:	eb 17                	jmp    10fd8 <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   10fc1:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10fc4:	8d 42 01             	lea    0x1(%edx),%eax
   10fc7:	89 45 f8             	mov    %eax,-0x8(%ebp)
   10fca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10fcd:	8d 48 01             	lea    0x1(%eax),%ecx
   10fd0:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   10fd3:	0f b6 12             	movzbl (%edx),%edx
   10fd6:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   10fd8:	8b 45 10             	mov    0x10(%ebp),%eax
   10fdb:	8d 50 ff             	lea    -0x1(%eax),%edx
   10fde:	89 55 10             	mov    %edx,0x10(%ebp)
   10fe1:	85 c0                	test   %eax,%eax
   10fe3:	7e 0a                	jle    10fef <kernel_strncpy+0x54>
   10fe5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   10fe8:	0f b6 00             	movzbl (%eax),%eax
   10feb:	84 c0                	test   %al,%al
   10fed:	75 d2                	jne    10fc1 <kernel_strncpy+0x26>
    }
    if (size == 0)
   10fef:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10ff3:	75 0b                	jne    11000 <kernel_strncpy+0x65>
    {
        *(d - 1) = '\0';
   10ff5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10ff8:	83 e8 01             	sub    $0x1,%eax
   10ffb:	c6 00 00             	movb   $0x0,(%eax)
   10ffe:	eb 09                	jmp    11009 <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   11000:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11003:	c6 00 00             	movb   $0x0,(%eax)
   11006:	eb 01                	jmp    11009 <kernel_strncpy+0x6e>
        return;
   11008:	90                   	nop
    }
}
   11009:	c9                   	leave  
   1100a:	c3                   	ret    

0001100b <kernel_strncmp>:

int kernel_strncmp(const char *s1, const char *s2, int size)
{
   1100b:	55                   	push   %ebp
   1100c:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   1100e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11012:	74 06                	je     1101a <kernel_strncmp+0xf>
   11014:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11018:	75 13                	jne    1102d <kernel_strncmp+0x22>
    {
        return -1;
   1101a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1101f:	eb 66                	jmp    11087 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   11021:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   11025:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   11029:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   1102d:	8b 45 08             	mov    0x8(%ebp),%eax
   11030:	0f b6 00             	movzbl (%eax),%eax
   11033:	84 c0                	test   %al,%al
   11035:	74 20                	je     11057 <kernel_strncmp+0x4c>
   11037:	8b 45 0c             	mov    0xc(%ebp),%eax
   1103a:	0f b6 00             	movzbl (%eax),%eax
   1103d:	84 c0                	test   %al,%al
   1103f:	74 16                	je     11057 <kernel_strncmp+0x4c>
   11041:	8b 45 08             	mov    0x8(%ebp),%eax
   11044:	0f b6 10             	movzbl (%eax),%edx
   11047:	8b 45 0c             	mov    0xc(%ebp),%eax
   1104a:	0f b6 00             	movzbl (%eax),%eax
   1104d:	38 c2                	cmp    %al,%dl
   1104f:	75 06                	jne    11057 <kernel_strncmp+0x4c>
   11051:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11055:	75 ca                	jne    11021 <kernel_strncmp+0x16>
    }
    // 相等返回0
    // s1="abc",s2="abcdef" 也属于相等
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   11057:	8b 45 08             	mov    0x8(%ebp),%eax
   1105a:	0f b6 00             	movzbl (%eax),%eax
   1105d:	84 c0                	test   %al,%al
   1105f:	74 21                	je     11082 <kernel_strncmp+0x77>
   11061:	8b 45 0c             	mov    0xc(%ebp),%eax
   11064:	0f b6 00             	movzbl (%eax),%eax
   11067:	84 c0                	test   %al,%al
   11069:	74 17                	je     11082 <kernel_strncmp+0x77>
   1106b:	8b 45 08             	mov    0x8(%ebp),%eax
   1106e:	0f b6 10             	movzbl (%eax),%edx
   11071:	8b 45 0c             	mov    0xc(%ebp),%eax
   11074:	0f b6 00             	movzbl (%eax),%eax
   11077:	38 c2                	cmp    %al,%dl
   11079:	74 07                	je     11082 <kernel_strncmp+0x77>
   1107b:	b8 01 00 00 00       	mov    $0x1,%eax
   11080:	eb 05                	jmp    11087 <kernel_strncmp+0x7c>
   11082:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11087:	5d                   	pop    %ebp
   11088:	c3                   	ret    

00011089 <kernel_strlen>:

int kernel_strlen(const char *str)
{
   11089:	55                   	push   %ebp
   1108a:	89 e5                	mov    %esp,%ebp
   1108c:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   1108f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11093:	75 07                	jne    1109c <kernel_strlen+0x13>
    {
        return 0;
   11095:	b8 00 00 00 00       	mov    $0x0,%eax
   1109a:	eb 26                	jmp    110c2 <kernel_strlen+0x39>
    }

    const char *c = str;
   1109c:	8b 45 08             	mov    0x8(%ebp),%eax
   1109f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   110a2:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   110a9:	eb 04                	jmp    110af <kernel_strlen+0x26>
    {
        len++;
   110ab:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   110af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   110b2:	8d 50 01             	lea    0x1(%eax),%edx
   110b5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   110b8:	0f b6 00             	movzbl (%eax),%eax
   110bb:	84 c0                	test   %al,%al
   110bd:	75 ec                	jne    110ab <kernel_strlen+0x22>
    }

    return len;
   110bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   110c2:	c9                   	leave  
   110c3:	c3                   	ret    

000110c4 <kernel_memcpy>:

void kernel_memcpy(void *dest, void *src, int size)
{
   110c4:	55                   	push   %ebp
   110c5:	89 e5                	mov    %esp,%ebp
   110c7:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   110ca:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   110ce:	74 40                	je     11110 <kernel_memcpy+0x4c>
   110d0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   110d4:	74 3a                	je     11110 <kernel_memcpy+0x4c>
   110d6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   110da:	74 34                	je     11110 <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   110dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   110df:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   110e2:	8b 45 08             	mov    0x8(%ebp),%eax
   110e5:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   110e8:	eb 17                	jmp    11101 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   110ea:	8b 55 fc             	mov    -0x4(%ebp),%edx
   110ed:	8d 42 01             	lea    0x1(%edx),%eax
   110f0:	89 45 fc             	mov    %eax,-0x4(%ebp)
   110f3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   110f6:	8d 48 01             	lea    0x1(%eax),%ecx
   110f9:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   110fc:	0f b6 12             	movzbl (%edx),%edx
   110ff:	88 10                	mov    %dl,(%eax)
    while (size--)
   11101:	8b 45 10             	mov    0x10(%ebp),%eax
   11104:	8d 50 ff             	lea    -0x1(%eax),%edx
   11107:	89 55 10             	mov    %edx,0x10(%ebp)
   1110a:	85 c0                	test   %eax,%eax
   1110c:	75 dc                	jne    110ea <kernel_memcpy+0x26>
   1110e:	eb 01                	jmp    11111 <kernel_memcpy+0x4d>
        return;
   11110:	90                   	nop
    }
}
   11111:	c9                   	leave  
   11112:	c3                   	ret    

00011113 <kernel_memset>:

// 内存逐字节设置v
void kernel_memset(void *dest, uint8_t v, int size)
{
   11113:	55                   	push   %ebp
   11114:	89 e5                	mov    %esp,%ebp
   11116:	83 ec 14             	sub    $0x14,%esp
   11119:	8b 45 0c             	mov    0xc(%ebp),%eax
   1111c:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   1111f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11123:	74 2c                	je     11151 <kernel_memset+0x3e>
   11125:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11129:	74 26                	je     11151 <kernel_memset+0x3e>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   1112b:	8b 45 08             	mov    0x8(%ebp),%eax
   1112e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   11131:	eb 0f                	jmp    11142 <kernel_memset+0x2f>
    {
        *d++ = v;
   11133:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11136:	8d 50 01             	lea    0x1(%eax),%edx
   11139:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1113c:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   11140:	88 10                	mov    %dl,(%eax)
    while (size--)
   11142:	8b 45 10             	mov    0x10(%ebp),%eax
   11145:	8d 50 ff             	lea    -0x1(%eax),%edx
   11148:	89 55 10             	mov    %edx,0x10(%ebp)
   1114b:	85 c0                	test   %eax,%eax
   1114d:	75 e4                	jne    11133 <kernel_memset+0x20>
   1114f:	eb 01                	jmp    11152 <kernel_memset+0x3f>
        return;
   11151:	90                   	nop
    }
}
   11152:	c9                   	leave  
   11153:	c3                   	ret    

00011154 <kernel_memcmp>:

int kernel_memcmp(void *d1, void *d2, int size)
{
   11154:	55                   	push   %ebp
   11155:	89 e5                	mov    %esp,%ebp
   11157:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   1115a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1115e:	74 06                	je     11166 <kernel_memcmp+0x12>
   11160:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   11164:	75 07                	jne    1116d <kernel_memcmp+0x19>
    {
        return 1;
   11166:	b8 01 00 00 00       	mov    $0x1,%eax
   1116b:	eb 43                	jmp    111b0 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   1116d:	8b 45 08             	mov    0x8(%ebp),%eax
   11170:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   11173:	8b 45 0c             	mov    0xc(%ebp),%eax
   11176:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   11179:	eb 23                	jmp    1119e <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   1117b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1117e:	8d 50 01             	lea    0x1(%eax),%edx
   11181:	89 55 fc             	mov    %edx,-0x4(%ebp)
   11184:	0f b6 08             	movzbl (%eax),%ecx
   11187:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1118a:	8d 50 01             	lea    0x1(%eax),%edx
   1118d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11190:	0f b6 00             	movzbl (%eax),%eax
   11193:	38 c1                	cmp    %al,%cl
   11195:	74 07                	je     1119e <kernel_memcmp+0x4a>
        {
            return 1;
   11197:	b8 01 00 00 00       	mov    $0x1,%eax
   1119c:	eb 12                	jmp    111b0 <kernel_memcmp+0x5c>
    while (size--)
   1119e:	8b 45 10             	mov    0x10(%ebp),%eax
   111a1:	8d 50 ff             	lea    -0x1(%eax),%edx
   111a4:	89 55 10             	mov    %edx,0x10(%ebp)
   111a7:	85 c0                	test   %eax,%eax
   111a9:	75 d0                	jne    1117b <kernel_memcmp+0x27>
        }
    }

    // 内存一样返回0
    return 0;
   111ab:	b8 00 00 00 00       	mov    $0x0,%eax
}
   111b0:	c9                   	leave  
   111b1:	c3                   	ret    

000111b2 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   111b2:	55                   	push   %ebp
   111b3:	89 e5                	mov    %esp,%ebp
   111b5:	53                   	push   %ebx
   111b6:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   111b9:	8b 45 08             	mov    0x8(%ebp),%eax
   111bc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   111bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   111c2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   111c5:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   111c9:	74 1d                	je     111e8 <kernel_itoa+0x36>
   111cb:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   111cf:	74 17                	je     111e8 <kernel_itoa+0x36>
   111d1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   111d5:	74 11                	je     111e8 <kernel_itoa+0x36>
   111d7:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   111db:	74 0b                	je     111e8 <kernel_itoa+0x36>
    {
        *p = '\0';
   111dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111e0:	c6 00 00             	movb   $0x0,(%eax)
        return;
   111e3:	e9 03 01 00 00       	jmp    112eb <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   111e8:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   111ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   111f3:	79 19                	jns    1120e <kernel_itoa+0x5c>
   111f5:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   111f9:	75 13                	jne    1120e <kernel_itoa+0x5c>
    {
        *p++ = '-';
   111fb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   111fe:	8d 50 01             	lea    0x1(%eax),%edx
   11201:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11204:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   11207:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   1120e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11212:	74 3b                	je     1124f <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   11214:	8b 0d 50 19 01 00    	mov    0x11950,%ecx
   1121a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1121d:	99                   	cltd   
   1121e:	f7 7d 10             	idivl  0x10(%ebp)
   11221:	89 d0                	mov    %edx,%eax
   11223:	83 c0 0f             	add    $0xf,%eax
   11226:	01 c8                	add    %ecx,%eax
   11228:	0f b6 00             	movzbl (%eax),%eax
   1122b:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1122e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11231:	8d 50 01             	lea    0x1(%eax),%edx
   11234:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11237:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1123b:	88 10                	mov    %dl,(%eax)
            num /= base;
   1123d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11240:	99                   	cltd   
   11241:	f7 7d 10             	idivl  0x10(%ebp)
   11244:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   11247:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1124b:	75 c7                	jne    11214 <kernel_itoa+0x62>
   1124d:	eb 4b                	jmp    1129a <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   1124f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11252:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   11255:	8b 0d 50 19 01 00    	mov    0x11950,%ecx
   1125b:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1125e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11261:	ba 00 00 00 00       	mov    $0x0,%edx
   11266:	f7 f3                	div    %ebx
   11268:	89 d0                	mov    %edx,%eax
   1126a:	83 c0 0f             	add    $0xf,%eax
   1126d:	01 c8                	add    %ecx,%eax
   1126f:	0f b6 00             	movzbl (%eax),%eax
   11272:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   11275:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11278:	8d 50 01             	lea    0x1(%eax),%edx
   1127b:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1127e:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   11282:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   11284:	8b 5d 10             	mov    0x10(%ebp),%ebx
   11287:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1128a:	ba 00 00 00 00       	mov    $0x0,%edx
   1128f:	f7 f3                	div    %ebx
   11291:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   11294:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11298:	75 bb                	jne    11255 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   1129a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1129d:	8d 50 ff             	lea    -0x1(%eax),%edx
   112a0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112a3:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   112a6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   112aa:	74 08                	je     112b4 <kernel_itoa+0x102>
   112ac:	8b 45 08             	mov    0x8(%ebp),%eax
   112af:	83 c0 01             	add    $0x1,%eax
   112b2:	eb 03                	jmp    112b7 <kernel_itoa+0x105>
   112b4:	8b 45 08             	mov    0x8(%ebp),%eax
   112b7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   112ba:	eb 27                	jmp    112e3 <kernel_itoa+0x131>
    {
        char ch = *start;
   112bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112bf:	0f b6 00             	movzbl (%eax),%eax
   112c2:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   112c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112c8:	0f b6 10             	movzbl (%eax),%edx
   112cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112ce:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   112d0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   112d3:	8d 50 ff             	lea    -0x1(%eax),%edx
   112d6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   112d9:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   112dd:	88 10                	mov    %dl,(%eax)
        start++;
   112df:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   112e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   112e6:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   112e9:	72 d1                	jb     112bc <kernel_itoa+0x10a>
    }
}
   112eb:	83 c4 20             	add    $0x20,%esp
   112ee:	5b                   	pop    %ebx
   112ef:	5d                   	pop    %ebp
   112f0:	c3                   	ret    

000112f1 <kernel_vsprintf>:
// buf 为最终显示的目标
// fmt 为整个字符串
// args 为va_list 可变变量
void kernel_vsprintf(char *buf, const char *fmt, va_list args)
{
   112f1:	55                   	push   %ebp
   112f2:	89 e5                	mov    %esp,%ebp
   112f4:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   112f7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buf;
   112fe:	8b 45 08             	mov    0x8(%ebp),%eax
   11301:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   11304:	e9 17 01 00 00       	jmp    11420 <kernel_vsprintf+0x12f>
    {
        switch (state)
   11309:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1130c:	85 c0                	test   %eax,%eax
   1130e:	74 0a                	je     1131a <kernel_vsprintf+0x29>
   11310:	83 f8 01             	cmp    $0x1,%eax
   11313:	74 2b                	je     11340 <kernel_vsprintf+0x4f>
   11315:	e9 06 01 00 00       	jmp    11420 <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   1131a:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   1131e:	75 0c                	jne    1132c <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   11320:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   11327:	e9 f4 00 00 00       	jmp    11420 <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   1132c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1132f:	8d 50 01             	lea    0x1(%eax),%edx
   11332:	89 55 f8             	mov    %edx,-0x8(%ebp)
   11335:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   11339:	88 10                	mov    %dl,(%eax)
            }
            break;
   1133b:	e9 e0 00 00 00       	jmp    11420 <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   11340:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   11344:	75 31                	jne    11377 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   11346:	8b 45 10             	mov    0x10(%ebp),%eax
   11349:	8d 50 04             	lea    0x4(%eax),%edx
   1134c:	89 55 10             	mov    %edx,0x10(%ebp)
   1134f:	8b 00                	mov    (%eax),%eax
   11351:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   11354:	6a 0a                	push   $0xa
   11356:	ff 75 e4             	pushl  -0x1c(%ebp)
   11359:	ff 75 f8             	pushl  -0x8(%ebp)
   1135c:	e8 51 fe ff ff       	call   111b2 <kernel_itoa>
   11361:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr); // 移动到下一个
   11364:	ff 75 f8             	pushl  -0x8(%ebp)
   11367:	e8 1d fd ff ff       	call   11089 <kernel_strlen>
   1136c:	83 c4 04             	add    $0x4,%esp
   1136f:	01 45 f8             	add    %eax,-0x8(%ebp)
   11372:	e9 a1 00 00 00       	jmp    11418 <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   11377:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1137b:	75 2e                	jne    113ab <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   1137d:	8b 45 10             	mov    0x10(%ebp),%eax
   11380:	8d 50 04             	lea    0x4(%eax),%edx
   11383:	89 55 10             	mov    %edx,0x10(%ebp)
   11386:	8b 00                	mov    (%eax),%eax
   11388:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   1138b:	6a 10                	push   $0x10
   1138d:	ff 75 e8             	pushl  -0x18(%ebp)
   11390:	ff 75 f8             	pushl  -0x8(%ebp)
   11393:	e8 1a fe ff ff       	call   111b2 <kernel_itoa>
   11398:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   1139b:	ff 75 f8             	pushl  -0x8(%ebp)
   1139e:	e8 e6 fc ff ff       	call   11089 <kernel_strlen>
   113a3:	83 c4 04             	add    $0x4,%esp
   113a6:	01 45 f8             	add    %eax,-0x8(%ebp)
   113a9:	eb 6d                	jmp    11418 <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   113ab:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   113af:	75 1f                	jne    113d0 <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   113b1:	8b 45 10             	mov    0x10(%ebp),%eax
   113b4:	8d 50 04             	lea    0x4(%eax),%edx
   113b7:	89 55 10             	mov    %edx,0x10(%ebp)
   113ba:	8b 00                	mov    (%eax),%eax
   113bc:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   113bf:	8b 45 f8             	mov    -0x8(%ebp),%eax
   113c2:	8d 50 01             	lea    0x1(%eax),%edx
   113c5:	89 55 f8             	mov    %edx,-0x8(%ebp)
   113c8:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   113cc:	88 10                	mov    %dl,(%eax)
   113ce:	eb 48                	jmp    11418 <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   113d0:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   113d4:	75 42                	jne    11418 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   113d6:	8b 45 10             	mov    0x10(%ebp),%eax
   113d9:	8d 50 04             	lea    0x4(%eax),%edx
   113dc:	89 55 10             	mov    %edx,0x10(%ebp)
   113df:	8b 00                	mov    (%eax),%eax
   113e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   113e4:	ff 75 f4             	pushl  -0xc(%ebp)
   113e7:	e8 9d fc ff ff       	call   11089 <kernel_strlen>
   113ec:	83 c4 04             	add    $0x4,%esp
   113ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   113f2:	eb 17                	jmp    1140b <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   113f4:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113f7:	8d 42 01             	lea    0x1(%edx),%eax
   113fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
   113fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11400:	8d 48 01             	lea    0x1(%eax),%ecx
   11403:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   11406:	0f b6 12             	movzbl (%edx),%edx
   11409:	88 10                	mov    %dl,(%eax)
                while (len--)
   1140b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1140e:	8d 50 ff             	lea    -0x1(%eax),%edx
   11411:	89 55 f0             	mov    %edx,-0x10(%ebp)
   11414:	85 c0                	test   %eax,%eax
   11416:	75 dc                	jne    113f4 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   11418:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   1141f:	90                   	nop
    while ((ch = *fmt++))
   11420:	8b 45 0c             	mov    0xc(%ebp),%eax
   11423:	8d 50 01             	lea    0x1(%eax),%edx
   11426:	89 55 0c             	mov    %edx,0xc(%ebp)
   11429:	0f b6 00             	movzbl (%eax),%eax
   1142c:	88 45 ef             	mov    %al,-0x11(%ebp)
   1142f:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   11433:	0f 85 d0 fe ff ff    	jne    11309 <kernel_vsprintf+0x18>
        }
    }
}
   11439:	90                   	nop
   1143a:	c9                   	leave  
   1143b:	c3                   	ret    

0001143c <panic>:

void panic(const char *file, int line, const char *func, const char *cond)
{
   1143c:	55                   	push   %ebp
   1143d:	89 e5                	mov    %esp,%ebp
   1143f:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   11442:	83 ec 08             	sub    $0x8,%esp
   11445:	ff 75 14             	pushl  0x14(%ebp)
   11448:	68 00 19 01 00       	push   $0x11900
   1144d:	e8 c2 00 00 00       	call   11514 <log_printf>
   11452:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   11455:	ff 75 10             	pushl  0x10(%ebp)
   11458:	ff 75 0c             	pushl  0xc(%ebp)
   1145b:	ff 75 08             	pushl  0x8(%ebp)
   1145e:	68 12 19 01 00       	push   $0x11912
   11463:	e8 ac 00 00 00       	call   11514 <log_printf>
   11468:	83 c4 10             	add    $0x10,%esp

    for (;;)
    {
        hlt();
   1146b:	e8 dd fa ff ff       	call   10f4d <hlt>
   11470:	eb f9                	jmp    1146b <panic+0x2f>

00011472 <inb>:
{
   11472:	55                   	push   %ebp
   11473:	89 e5                	mov    %esp,%ebp
   11475:	83 ec 14             	sub    $0x14,%esp
   11478:	8b 45 08             	mov    0x8(%ebp),%eax
   1147b:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   1147f:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   11483:	89 c2                	mov    %eax,%edx
   11485:	ec                   	in     (%dx),%al
   11486:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   11489:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1148d:	c9                   	leave  
   1148e:	c3                   	ret    

0001148f <outb>:
{
   1148f:	55                   	push   %ebp
   11490:	89 e5                	mov    %esp,%ebp
   11492:	83 ec 08             	sub    $0x8,%esp
   11495:	8b 55 08             	mov    0x8(%ebp),%edx
   11498:	8b 45 0c             	mov    0xc(%ebp),%eax
   1149b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1149f:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   114a2:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   114a6:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   114aa:	ee                   	out    %al,(%dx)
}
   114ab:	90                   	nop
   114ac:	c9                   	leave  
   114ad:	c3                   	ret    

000114ae <log_init>:
// 目标用串口，参考资料：https://wiki.osdev.org/Serial_Ports
#define LOG_USE_COM 0
#define COM1_PORT 0x3F8 // RS232端口0初始化

void log_init(void)
{
   114ae:	55                   	push   %ebp
   114af:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00); // Disable all interrupts
   114b1:	6a 00                	push   $0x0
   114b3:	68 f9 03 00 00       	push   $0x3f9
   114b8:	e8 d2 ff ff ff       	call   1148f <outb>
   114bd:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80); // Enable DLAB (set baud rate divisor)
   114c0:	68 80 00 00 00       	push   $0x80
   114c5:	68 fb 03 00 00       	push   $0x3fb
   114ca:	e8 c0 ff ff ff       	call   1148f <outb>
   114cf:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x03); // Set divisor to 3 (lo byte) 38400 baud
   114d2:	6a 03                	push   $0x3
   114d4:	68 f8 03 00 00       	push   $0x3f8
   114d9:	e8 b1 ff ff ff       	call   1148f <outb>
   114de:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
   114e1:	6a 00                	push   $0x0
   114e3:	68 f9 03 00 00       	push   $0x3f9
   114e8:	e8 a2 ff ff ff       	call   1148f <outb>
   114ed:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
   114f0:	6a 03                	push   $0x3
   114f2:	68 fb 03 00 00       	push   $0x3fb
   114f7:	e8 93 ff ff ff       	call   1148f <outb>
   114fc:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
   114ff:	68 c7 00 00 00       	push   $0xc7
   11504:	68 fa 03 00 00       	push   $0x3fa
   11509:	e8 81 ff ff ff       	call   1148f <outb>
   1150e:	83 c4 08             	add    $0x8,%esp
}
   11511:	90                   	nop
   11512:	c9                   	leave  
   11513:	c3                   	ret    

00011514 <log_printf>:

void log_printf(const char *fmt, ...)
{
   11514:	55                   	push   %ebp
   11515:	89 e5                	mov    %esp,%ebp
   11517:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   1151d:	83 ec 04             	sub    $0x4,%esp
   11520:	68 80 00 00 00       	push   $0x80
   11525:	6a 00                	push   $0x0
   11527:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   1152d:	50                   	push   %eax
   1152e:	e8 e0 fb ff ff       	call   11113 <kernel_memset>
   11533:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   11536:	8d 45 0c             	lea    0xc(%ebp),%eax
   11539:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   1153f:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   11545:	83 ec 04             	sub    $0x4,%esp
   11548:	50                   	push   %eax
   11549:	ff 75 08             	pushl  0x8(%ebp)
   1154c:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11552:	50                   	push   %eax
   11553:	e8 99 fd ff ff       	call   112f1 <kernel_vsprintf>
   11558:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    const char *p = str_buf;
   1155b:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   11561:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   11564:	eb 3b                	jmp    115a1 <log_printf+0x8d>
    {
        // 检查串口是否忙
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   11566:	90                   	nop
   11567:	83 ec 0c             	sub    $0xc,%esp
   1156a:	68 fd 03 00 00       	push   $0x3fd
   1156f:	e8 fe fe ff ff       	call   11472 <inb>
   11574:	83 c4 10             	add    $0x10,%esp
   11577:	0f b6 c0             	movzbl %al,%eax
   1157a:	83 e0 40             	and    $0x40,%eax
   1157d:	85 c0                	test   %eax,%eax
   1157f:	74 e6                	je     11567 <log_printf+0x53>
        {
        }
        outb(COM1_PORT, *p++);
   11581:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11584:	8d 50 01             	lea    0x1(%eax),%edx
   11587:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1158a:	0f b6 00             	movzbl (%eax),%eax
   1158d:	0f b6 c0             	movzbl %al,%eax
   11590:	83 ec 08             	sub    $0x8,%esp
   11593:	50                   	push   %eax
   11594:	68 f8 03 00 00       	push   $0x3f8
   11599:	e8 f1 fe ff ff       	call   1148f <outb>
   1159e:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   115a1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   115a4:	0f b6 00             	movzbl (%eax),%eax
   115a7:	84 c0                	test   %al,%al
   115a9:	75 bb                	jne    11566 <log_printf+0x52>
    }
    // 增加默认换行
    outb(COM1_PORT, '\r'); // 行号不变，列号归零
   115ab:	83 ec 08             	sub    $0x8,%esp
   115ae:	6a 0d                	push   $0xd
   115b0:	68 f8 03 00 00       	push   $0x3f8
   115b5:	e8 d5 fe ff ff       	call   1148f <outb>
   115ba:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n'); // 列号不变，行号+1
   115bd:	83 ec 08             	sub    $0x8,%esp
   115c0:	6a 0a                	push   $0xa
   115c2:	68 f8 03 00 00       	push   $0x3f8
   115c7:	e8 c3 fe ff ff       	call   1148f <outb>
   115cc:	83 c4 10             	add    $0x10,%esp
   115cf:	90                   	nop
   115d0:	c9                   	leave  
   115d1:	c3                   	ret    
