
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00007084 memsz 0x00007084 flags r-x
    LOAD off    0x00009000 vaddr 0x00018000 paddr 0x00018000 align 2**12
         filesz 0x0000009c memsz 0x0005d67c flags rw-
    LOAD off    0x0000a000 vaddr 0x80000000 paddr 0x0007567c align 2**12
         filesz 0x00000384 memsz 0x00000384 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00006154  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .first_task   00000384  80000000  0007567c  0000a000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  2 .data         0000009c  00018000  00018000  00009000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0005c67c  00019000  00019000  0000909c  2**12
                  ALLOC
  4 .debug_line   0000378b  00000000  00000000  0000a384  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c75c  00000000  00000000  0000db0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002946  00000000  00000000  0001a26b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000002e0  00000000  00000000  0001cbb8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .rodata       00000f24  00016160  00016160  00007160  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_ranges 000000a8  00000000  00000000  0001ce98  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000023be  00000000  00000000  0001cf40  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0001f2fe  2**0
                  CONTENTS, READONLY
 12 .debug_frame  000022dc  00000000  00000000  0001f310  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
80000000 l    d  .first_task	00000000 .first_task
00018000 l    d  .data	00000000 .data
00019000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00016160 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010311 l     F .text	00000017 up2
00010328 l     F .text	0000000d down2
00010335 l     F .text	0000000c write_cr3
00010341 l     F .text	00000014 pde_index
00010355 l     F .text	00000027 pde_paddr
0001037c l     F .text	00000010 pte_index
0001038c l     F .text	00000027 pte_paddr
000103b3 l     F .text	0000000f get_pte_perm
000103c2 l     F .text	00000011 mmu_set_page_dir
0001b000 l     O .bss	00000028 paddr_alloc
0001c000 l     O .bss	00001000 kernel_page_dir
000103d3 l     F .text	00000013 current_page_dir
000103e6 l     F .text	00000058 addr_alloc_init
0001043e l     F .text	00000067 addr_alloc_page
000104a5 l     F .text	00000062 addr_free_page
00010507 l     F .text	00000066 show_mem_info
0001056d l     F .text	0000003c total_mem_size
000162c8 l     O .rodata	00000012 __func__.2384
00018000 l     O .data	00000050 kernel_map.2396
000162dc l     O .rodata	00000013 __func__.2424
000162f0 l     O .rodata	00000011 __func__.2497
00016304 l     O .rodata	0000000c __func__.2509
00016310 l     O .rodata	00000009 __func__.2517
00000000 l    df *ABS*	00000000 syscall.c
00016320 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010f95 l     F .text	0000001b list_node_init
00010fb0 l     F .text	0000000b list_node_next
00010fbb l     F .text	0000000b list_count
00010fc6 l     F .text	0000000a list_first
00010fd0 l     F .text	0000000c write_cr3
00010fdc l     F .text	00000007 hlt
00010fe3 l     F .text	0000000c write_tr
00010fef l     F .text	00000011 mmu_set_page_dir
0001d000 l     O .bss	00001000 idle_task_stack
0001e000 l     O .bss	000005c0 task_manager
0001e5c0 l     O .bss	00016400 task_table
000349c0 l     O .bss	00000014 task_table_mutex
00011000 l     F .text	000001ab tss_init
0001666c l     O .rodata	0000000a __func__.2858
00016678 l     O .rodata	00000010 __func__.2878
0001142e l     F .text	0000000a idle_task_entry
000115ec l     F .text	00000043 task_next_run
00011832 l     F .text	00000069 alloc_task
0001189b l     F .text	00000030 free_task
0001196a l     F .text	00000062 copy_opened_files
00011b68 l     F .text	00000129 load_phdr
00016688 l     O .rodata	0000000a __func__.2982
00011c91 l     F .text	00000213 load_elf_file
00011ea4 l     F .text	00000130 copy_args
00016694 l     O .rodata	0000000a __func__.3017
00000000 l    df *ABS*	00000000 cpu.c
00012506 l     F .text	00000028 lgdt
0001252e l     F .text	0000001a far_jump
000349e0 l     O .bss	00000800 gdt_table
000351e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00012778 l     F .text	0000001d inb
00012795 l     F .text	0000001f outb
000127b4 l     F .text	00000007 cli
000127bb l     F .text	00000007 sti
000127c2 l     F .text	00000028 lidt
000127ea l     F .text	00000011 read_cr2
000127fb l     F .text	00000007 hlt
00012802 l     F .text	00000010 read_eflags
00012812 l     F .text	0000000b write_eflags
00035200 l     O .bss	00000400 idt_table
0001281d l     F .text	000000ff dump_core_regs
0001291c l     F .text	0000004e do_default_handler
00012ceb l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
000130e2 l     F .text	0000001d inb
000130ff l     F .text	0000001f outb
00035600 l     O .bss	00000340 console_buf
00035940 l     O .bss	00000004 curr_console_idx
0001311e l     F .text	00000074 read_cursor_pos
00013192 l     F .text	000000c1 update_cursor_pos
00013253 l     F .text	00000085 clear_display
000132d8 l     F .text	00000091 erase_rows
00013369 l     F .text	00000088 scroll_up
000133f1 l     F .text	00000010 move_to_col0
00013401 l     F .text	00000038 move_next_line
00013439 l     F .text	00000076 move_forward
000134af l     F .text	00000094 show_char
00013666 l     F .text	00000078 move_backword
000136de l     F .text	0000003a erase_backword
00013718 l     F .text	00000073 move_next_tab
0001378b l     F .text	000000b8 write_normal
00013843 l     F .text	00000037 move_left
0001387a l     F .text	00000049 move_right
000138c3 l     F .text	00000033 move_cursor
000138f6 l     F .text	00000029 clear_esc_param
0001391f l     F .text	00000075 write_esc
00013994 l     F .text	00000051 erase_in_display
000139e5 l     F .text	00000099 set_font_style
00016c40 l     O .rodata	00000020 color_table.2407
00013a7e l     F .text	00000107 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
00018050 l     O .data	00000004 dev_desc_tbl
00035960 l     O .bss	00000a00 dev_tbl
00013e22 l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 kbd.c
00014111 l     F .text	0000001d inb
0001412e l     F .text	0000001f outb
00036360 l     O .bss	00000004 kbd_state
00016c60 l     O .rodata	00000200 map_table
0001414d l     F .text	00000015 get_key
00014162 l     F .text	0000001a is_make_code
00014226 l     F .text	00000045 update_led_status
0001426b l     F .text	0000003c do_fx_key
000142a7 l     F .text	000001d0 do_normal_key
00014477 l     F .text	0000008a do_e0_key
00036364 l     O .bss	00000004 recv_state.2126
00036368 l     O .bss	00000004 inited.2136
00000000 l    df *ABS*	00000000 time.c
00014603 l     F .text	0000001f outb
0003636c l     O .bss	00000004 sys_tick
00014622 l     F .text	00000060 init_pic
00000000 l    df *ABS*	00000000 tty.c
00036380 l     O .bss	000022a0 tty_devs
00038620 l     O .bss	00000004 curr_tty
00014802 l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 file.c
00038640 l     O .bss	00024000 file_table
0005c640 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00014de3 l     F .text	0000001d inb
00014e00 l     F .text	0000001f inw
00014e1f l     F .text	0000001f outb
0005c660 l     O .bss	00019000 TEMP_ADDR
00075660 l     O .bss	00000004 temp_pos
00014e3e l     F .text	0000001d is_fd_bad
00014e5b l     F .text	0000012f read_disk
00014f8a l     F .text	00000021 is_path_valid
00000000 l    df *ABS*	00000000 init.c
00017020 l     O .rodata	00000013 __func__.2853
00000000 l    df *ABS*	00000000 mutex.c
000153cc l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00015556 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000158df l     F .text	00000007 hlt
00018098 l     O .data	00000004 num2ch.1927
00000000 l    df *ABS*	00000000 list.c
00015e77 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00075664 l     O .bss	00000004 log_dev_id
00075668 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000cd l     F .first_task	0000004c sys_call
000157d7 g     F .text	0000003a bitmap_get_bit
00015a56 g     F .text	0000004f kernel_memcpy
00015211 g     F .text	0000000a sys_close
00011581 g     F .text	0000000a task_current
800001ce g     F .first_task	0000001b yield
00013083 g     F .text	0000000b irq_enable_global
00015f0e g     F .text	00000064 list_insert_last
000121f2 g     F .text	00000032 task_file
000102b2 g       .text	00000000 exception_handler_kbd
00010dda g     F .text	0000010c sys_sbrk
00012191 g     F .text	00000061 sys_yield
000117ce g     F .text	00000064 sys_msleep
00012a9e g     F .text	0000001c do_handler_segment_not_present
00011522 g     F .text	00000034 task_set_ready
00015811 g     F .text	0000001b bitmap_is_set
00015aa5 g     F .text	00000041 kernel_memset
00013ff6 g     F .text	0000004c dev_write
000151ed g     F .text	00000024 sys_lseek
000145c3 g     F .text	00000040 kbd_init
00010274 g       .text	00000000 exception_handler_virtual_exception
00010f00 g     F .text	00000095 do_handler_syscall
00015e4a g     F .text	0000002d strings_count
00012747 g     F .text	0000001e cpu_init
0001606f g     F .text	0000002f log_init
000119cc g     F .text	0000019c sys_fork
00015376 g     F .text	00000056 init_main
00010219 g       .text	00000000 exception_handler_alignment_check
000125c7 g     F .text	00000039 gdt_free_sel
00010ee6 g     F .text	0000001a sys_print_msg
000158e6 g     F .text	00000047 kernel_strcpy
00018000 g       .data	00000000 s_data
800001a1 g     F .first_task	0000002d execve
80000143 g     F .first_task	0000001b getpid
00012f66 g     F .text	0000008b irq_enable
00010035 g       .text	00000000 exception_handler_unknown
000100b1 g       .text	00000000 exception_handler_breakpoint
000129f6 g     F .text	0000001c do_handler_overflow
00012af2 g     F .text	0000001c do_handler_alignment_check
00010659 g     F .text	0000008c memory_create_map
0001511a g     F .text	00000086 sys_read
000141dd g     F .text	00000035 kbd_wait_recv_ready
00013b85 g     F .text	000000b7 console_select
000101c0 g       .text	00000000 exception_handler_general_protection
00012b62 g     F .text	000000b5 do_handler_general_protection
00013561 g     F .text	0000001e restore_cursor
00015671 g     F .text	00000029 sem_count
80000010 g     F .first_task	000000bd first_task_main
00012986 g     F .text	0000001c do_handler_divider
00015703 g     F .text	000000d4 bitmap_set_bit
00012a66 g     F .text	0000001c do_handler_double_fault
00012c17 g     F .text	000000d4 do_handler_page_fault
800002df g     F .first_task	00000021 isatty
0001014c g       .text	00000000 exception_handler_double_fault
0001308e g     F .text	0000002b pic_send_eoi
00011424 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107a0 g     F .text	00000085 memory_create_uvm
00015584 g     F .text	0000006b sem_wait
00010cd1 g     F .text	00000025 memory_alloc_page_for
00014682 g     F .text	00000028 do_handler_timer
000101a3 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00015225 g     F .text	0000000a sys_fstat
00013faa g     F .text	0000004c dev_read
00012b46 g     F .text	0000001c do_handler_virtual_exception
000100d0 g       .text	00000000 exception_handler_overflow
00012600 g     F .text	00000075 get_alloc_desc
000102d1 g       .text	00000000 simple_switch
8000028b g     F .first_task	0000002d lseek
00019000 g     O .bss	00002000 stack
0001522f g     F .text	0000000e fs_init
00014d7b g     F .text	00000038 file_inc_ref
00010c38 g     F .text	00000099 memory_free_page
0007567c g       *ABS*	00000000 s_first_task
00012277 g     F .text	00000027 task_remove_fd
00014b58 g     F .text	000000ba tty_control
0001357f g     F .text	000000e7 console_init
00014a37 g     F .text	00000121 tty_read
000118e1 g     F .text	00000089 task_uninit
00010b52 g     F .text	000000cc memory_alloc_for_page_dir
000146f9 g     F .text	0000007f tty_fifo_get
000100ef g       .text	00000000 exception_handler_bound_range
00014c18 g     F .text	0000006d tty_in
000155ef g     F .text	00000082 sem_notify
00010acf g     F .text	00000083 memory_copy_uvm_data
00014042 g     F .text	0000004c dev_control
00014501 g     F .text	000000c2 do_handler_kbd
00012a2e g     F .text	0000001c do_handler_invalid_opcode
00010169 g       .text	00000000 exception_handler_invalid_tss
00012ad6 g     F .text	0000001c do_handler_fpu_error
0001133a g     F .text	000000ea task_first_init
00012b0e g     F .text	0000001c do_handler_machine_check
8000023d g     F .first_task	0000002d write
00014fab g     F .text	0000016f sys_open
000129a2 g     F .text	0000001c do_handler_Debug
800002b8 g     F .first_task	00000027 fstat
0001521b g     F .text	0000000a sys_isatty
00015eaf g     F .text	0000005f list_insert_first
00013e60 g     F .text	0000014a dev_open
000117ae g     F .text	00000020 task_set_wakeup
000129be g     F .text	0000001c do_handler_NMI
00010054 g       .text	00000000 exception_handler_divider
000146c2 g     F .text	00000037 tty_fifo_init
0001592d g     F .text	00000070 kernel_strncpy
00013078 g     F .text	0000000b irq_disable_global
0001158b g     F .text	00000061 sys_sched_yield
000151a0 g     F .text	0000004d sys_write
80000342 g     F .first_task	00000021 wait
00075a00 g       *ABS*	00000000 mem_free_start
000141b1 g     F .text	0000002c kbd_write
000152db g     F .text	00000035 kernel_init
00015561 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00015c83 g     F .text	0000014b kernel_vsprintf
00015e04 g     F .text	00000046 get_file_name
0001012d g       .text	00000000 exception_handler_device_unavailable
0001010e g       .text	00000000 exception_handler_invalid_opcode
0001408e g     F .text	00000083 dev_close
00013543 g     F .text	0000001e save_cursor
0007567c g       .bss	00000000 e_data
80000210 g     F .first_task	0000002d read
00015405 g     F .text	00000094 mutex_lock
00012224 g     F .text	00000053 task_alloc_fd
00010236 g       .text	00000000 exception_handler_machine_check
0001494a g     F .text	000000ed tty_write
00012a82 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00014778 g     F .text	0000008a tty_fifo_put
00075a00 g       *ABS*	00000000 e_first_task
00011774 g     F .text	0000003a task_set_sleep
0001523d g     F .text	0000009e sys_dup
00015dce g     F .text	00000036 panic
00010293 g       .text	00000000 exception_handler_timer
00012f2c g     F .text	0000003a irq_install
00012675 g     F .text	0000008b init_gdt
00014851 g     F .text	000000f9 tty_open
80000186 g     F .first_task	0000001b fork
000130b9 g     F .text	00000018 irq_enter_protection
000153d7 g     F .text	0000002e mutex_init
00012ff1 g     F .text	00000087 irq_disable
80000300 g     F .first_task	00000021 sbrk
00010255 g       .text	00000000 exception_handler_smd_exception
00010825 g     F .text	0000010f memory_destroy_uvm
0001569a g     F .text	00000016 bitmap_byte_count
00012a4a g     F .text	0000001c do_handler_device_unavailable
0001162f g     F .text	0000005b task_dispatch
00010934 g     F .text	00000155 memory_copy_uvm
00014c12 g     F .text	00000006 tty_close
00015310 g     F .text	00000066 move_to_first_task
00012765 g     F .text	00000013 switch_to_tss
00013d0c g     F .text	00000110 console_write
0001417c g     F .text	00000035 kbd_wait_send_ready
80000321 g     F .first_task	00000021 dup
00015ae6 g     F .text	0000005e kernel_memcmp
000106e5 g     F .text	000000bb create_kernel_table
00015e8a g     F .text	00000025 list_init
00012b2a g     F .text	0000001c do_handler_smd_exception
000101dd g       .text	00000000 exception_handler_page_fault
00011556 g     F .text	0000002b task_set_block
0001296a g     F .text	0000001c do_handler_unknown
00010c1e g     F .text	0000001a memory_alloc_page
000101fa g       .text	00000000 exception_handler_fpu_error
000112ef g     F .text	0000001e task_switch_from_to
00012d7e g     F .text	000001ae irq_init
00015499 g     F .text	000000bd mutex_unlock
00014db3 g     F .text	00000030 file_table_init
000130d1 g     F .text	00000011 irq_leave_protection
00014d39 g     F .text	00000042 file_free
00014212 g     F .text	00000014 kbd_read
8000015e g     F .first_task	00000028 print_msg
00015a1b g     F .text	0000003b kernel_strlen
00012548 g     F .text	0000007f segment_desc_set
00012a12 g     F .text	0000001c do_handler_bound_range
000102e6 g       .text	00000000 exception_handler_syscall
00015f72 g     F .text	00000078 list_remove_first
00017084 g       .rodata	00000000 e_text
0001599d g     F .text	0000007e kernel_strncmp
000156b0 g     F .text	00000053 bitmap_init
00010186 g       .text	00000000 exception_handler_segment_not_present
00013c3c g     F .text	000000d0 console_set_cursor
00010092 g       .text	00000000 exception_handler_NMI
0001582c g     F .text	000000b3 bitmap_alloc_nbits
00014cae g     F .text	0000008b file_alloc
00011438 g     F .text	000000ea task_manager_init
0001130d g     F .text	0000002d task_start
00010073 g       .text	00000000 exception_handler_Debug
0001168a g     F .text	000000ea task_time_tick
00010cf6 g     F .text	000000e4 memory_init
00011fd4 g     F .text	000001bd sys_execve
0001229e g     F .text	00000115 sys_wait
000123b3 g     F .text	00000153 sys_exit
00014c85 g     F .text	00000029 tty_select
00013e1c g     F .text	00000006 console_close
00010a89 g     F .text	00000046 memory_get_paddr
00012aba g     F .text	0000001c do_handler_stack_segment_fault
000129da g     F .text	0000001c do_handler_breakpoint
80000363 g     F .first_task	00000021 _exit
0001609e g     F .text	000000b6 log_printf
000111ab g     F .text	00000144 task_init
800001e9 g     F .first_task	00000027 open
000118cb g     F .text	00000016 sys_getpid
00015b44 g     F .text	0000013f kernel_itoa
00015fea g     F .text	00000085 list_remove
00012700 g     F .text	00000047 gate_desc_set
80000119 g     F .first_task	0000002a msleep
8000026a g     F .first_task	00000021 close
000105a9 g     F .text	000000b0 find_pte
000146aa g     F .text	00000018 time_init
00018060 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .extern init_main
    .global _start
    # void start (boot_info_t *boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax
    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 cf 52 00 00       	call   152db <kernel_init>
    jmp $KERNEL_SELECTOR_CS, $gdt_reload # 重新加载GDT
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    ; mov $stack, %eax
   10021:	b8 00 90 01 00       	mov    $0x19000,%eax
    ; mov $KERNEL_STACK_SIZE, %ebx
   10026:	bb 00 20 00 00       	mov    $0x2000,%ebx

    mov $(stack + KERNEL_STACK_SIZE), %esp
   1002b:	bc 00 b0 01 00       	mov    $0x1b000,%esp
    jmp init_main
   10030:	e9 41 53 00 00       	jmp    15376 <init_main>

00010035 <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   10035:	6a 00                	push   $0x0
   10037:	6a ff                	push   $0xffffffff
   10039:	60                   	pusha  
   1003a:	1e                   	push   %ds
   1003b:	06                   	push   %es
   1003c:	0f a0                	push   %fs
   1003e:	0f a8                	push   %gs
   10040:	54                   	push   %esp
   10041:	e8 24 29 00 00       	call   1296a <do_handler_unknown>
   10046:	83 c4 04             	add    $0x4,%esp
   10049:	0f a9                	pop    %gs
   1004b:	0f a1                	pop    %fs
   1004d:	07                   	pop    %es
   1004e:	1f                   	pop    %ds
   1004f:	61                   	popa   
   10050:	83 c4 08             	add    $0x8,%esp
   10053:	cf                   	iret   

00010054 <exception_handler_divider>:
exception_handler divider, 0, 0
   10054:	6a 00                	push   $0x0
   10056:	6a 00                	push   $0x0
   10058:	60                   	pusha  
   10059:	1e                   	push   %ds
   1005a:	06                   	push   %es
   1005b:	0f a0                	push   %fs
   1005d:	0f a8                	push   %gs
   1005f:	54                   	push   %esp
   10060:	e8 21 29 00 00       	call   12986 <do_handler_divider>
   10065:	83 c4 04             	add    $0x4,%esp
   10068:	0f a9                	pop    %gs
   1006a:	0f a1                	pop    %fs
   1006c:	07                   	pop    %es
   1006d:	1f                   	pop    %ds
   1006e:	61                   	popa   
   1006f:	83 c4 08             	add    $0x8,%esp
   10072:	cf                   	iret   

00010073 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10073:	6a 00                	push   $0x0
   10075:	6a 01                	push   $0x1
   10077:	60                   	pusha  
   10078:	1e                   	push   %ds
   10079:	06                   	push   %es
   1007a:	0f a0                	push   %fs
   1007c:	0f a8                	push   %gs
   1007e:	54                   	push   %esp
   1007f:	e8 1e 29 00 00       	call   129a2 <do_handler_Debug>
   10084:	83 c4 04             	add    $0x4,%esp
   10087:	0f a9                	pop    %gs
   10089:	0f a1                	pop    %fs
   1008b:	07                   	pop    %es
   1008c:	1f                   	pop    %ds
   1008d:	61                   	popa   
   1008e:	83 c4 08             	add    $0x8,%esp
   10091:	cf                   	iret   

00010092 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10092:	6a 00                	push   $0x0
   10094:	6a 02                	push   $0x2
   10096:	60                   	pusha  
   10097:	1e                   	push   %ds
   10098:	06                   	push   %es
   10099:	0f a0                	push   %fs
   1009b:	0f a8                	push   %gs
   1009d:	54                   	push   %esp
   1009e:	e8 1b 29 00 00       	call   129be <do_handler_NMI>
   100a3:	83 c4 04             	add    $0x4,%esp
   100a6:	0f a9                	pop    %gs
   100a8:	0f a1                	pop    %fs
   100aa:	07                   	pop    %es
   100ab:	1f                   	pop    %ds
   100ac:	61                   	popa   
   100ad:	83 c4 08             	add    $0x8,%esp
   100b0:	cf                   	iret   

000100b1 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100b1:	6a 00                	push   $0x0
   100b3:	6a 03                	push   $0x3
   100b5:	60                   	pusha  
   100b6:	1e                   	push   %ds
   100b7:	06                   	push   %es
   100b8:	0f a0                	push   %fs
   100ba:	0f a8                	push   %gs
   100bc:	54                   	push   %esp
   100bd:	e8 18 29 00 00       	call   129da <do_handler_breakpoint>
   100c2:	83 c4 04             	add    $0x4,%esp
   100c5:	0f a9                	pop    %gs
   100c7:	0f a1                	pop    %fs
   100c9:	07                   	pop    %es
   100ca:	1f                   	pop    %ds
   100cb:	61                   	popa   
   100cc:	83 c4 08             	add    $0x8,%esp
   100cf:	cf                   	iret   

000100d0 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100d0:	6a 00                	push   $0x0
   100d2:	6a 04                	push   $0x4
   100d4:	60                   	pusha  
   100d5:	1e                   	push   %ds
   100d6:	06                   	push   %es
   100d7:	0f a0                	push   %fs
   100d9:	0f a8                	push   %gs
   100db:	54                   	push   %esp
   100dc:	e8 15 29 00 00       	call   129f6 <do_handler_overflow>
   100e1:	83 c4 04             	add    $0x4,%esp
   100e4:	0f a9                	pop    %gs
   100e6:	0f a1                	pop    %fs
   100e8:	07                   	pop    %es
   100e9:	1f                   	pop    %ds
   100ea:	61                   	popa   
   100eb:	83 c4 08             	add    $0x8,%esp
   100ee:	cf                   	iret   

000100ef <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100ef:	6a 00                	push   $0x0
   100f1:	6a 05                	push   $0x5
   100f3:	60                   	pusha  
   100f4:	1e                   	push   %ds
   100f5:	06                   	push   %es
   100f6:	0f a0                	push   %fs
   100f8:	0f a8                	push   %gs
   100fa:	54                   	push   %esp
   100fb:	e8 12 29 00 00       	call   12a12 <do_handler_bound_range>
   10100:	83 c4 04             	add    $0x4,%esp
   10103:	0f a9                	pop    %gs
   10105:	0f a1                	pop    %fs
   10107:	07                   	pop    %es
   10108:	1f                   	pop    %ds
   10109:	61                   	popa   
   1010a:	83 c4 08             	add    $0x8,%esp
   1010d:	cf                   	iret   

0001010e <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   1010e:	6a 00                	push   $0x0
   10110:	6a 06                	push   $0x6
   10112:	60                   	pusha  
   10113:	1e                   	push   %ds
   10114:	06                   	push   %es
   10115:	0f a0                	push   %fs
   10117:	0f a8                	push   %gs
   10119:	54                   	push   %esp
   1011a:	e8 0f 29 00 00       	call   12a2e <do_handler_invalid_opcode>
   1011f:	83 c4 04             	add    $0x4,%esp
   10122:	0f a9                	pop    %gs
   10124:	0f a1                	pop    %fs
   10126:	07                   	pop    %es
   10127:	1f                   	pop    %ds
   10128:	61                   	popa   
   10129:	83 c4 08             	add    $0x8,%esp
   1012c:	cf                   	iret   

0001012d <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   1012d:	6a 00                	push   $0x0
   1012f:	6a 07                	push   $0x7
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 0c 29 00 00       	call   12a4a <do_handler_device_unavailable>
   1013e:	83 c4 04             	add    $0x4,%esp
   10141:	0f a9                	pop    %gs
   10143:	0f a1                	pop    %fs
   10145:	07                   	pop    %es
   10146:	1f                   	pop    %ds
   10147:	61                   	popa   
   10148:	83 c4 08             	add    $0x8,%esp
   1014b:	cf                   	iret   

0001014c <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1014c:	6a 08                	push   $0x8
   1014e:	60                   	pusha  
   1014f:	1e                   	push   %ds
   10150:	06                   	push   %es
   10151:	0f a0                	push   %fs
   10153:	0f a8                	push   %gs
   10155:	54                   	push   %esp
   10156:	e8 0b 29 00 00       	call   12a66 <do_handler_double_fault>
   1015b:	83 c4 04             	add    $0x4,%esp
   1015e:	0f a9                	pop    %gs
   10160:	0f a1                	pop    %fs
   10162:	07                   	pop    %es
   10163:	1f                   	pop    %ds
   10164:	61                   	popa   
   10165:	83 c4 08             	add    $0x8,%esp
   10168:	cf                   	iret   

00010169 <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   10169:	6a 0a                	push   $0xa
   1016b:	60                   	pusha  
   1016c:	1e                   	push   %ds
   1016d:	06                   	push   %es
   1016e:	0f a0                	push   %fs
   10170:	0f a8                	push   %gs
   10172:	54                   	push   %esp
   10173:	e8 0a 29 00 00       	call   12a82 <do_handler_invalid_tss>
   10178:	83 c4 04             	add    $0x4,%esp
   1017b:	0f a9                	pop    %gs
   1017d:	0f a1                	pop    %fs
   1017f:	07                   	pop    %es
   10180:	1f                   	pop    %ds
   10181:	61                   	popa   
   10182:	83 c4 08             	add    $0x8,%esp
   10185:	cf                   	iret   

00010186 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10186:	6a 0b                	push   $0xb
   10188:	60                   	pusha  
   10189:	1e                   	push   %ds
   1018a:	06                   	push   %es
   1018b:	0f a0                	push   %fs
   1018d:	0f a8                	push   %gs
   1018f:	54                   	push   %esp
   10190:	e8 09 29 00 00       	call   12a9e <do_handler_segment_not_present>
   10195:	83 c4 04             	add    $0x4,%esp
   10198:	0f a9                	pop    %gs
   1019a:	0f a1                	pop    %fs
   1019c:	07                   	pop    %es
   1019d:	1f                   	pop    %ds
   1019e:	61                   	popa   
   1019f:	83 c4 08             	add    $0x8,%esp
   101a2:	cf                   	iret   

000101a3 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   101a3:	6a 0c                	push   $0xc
   101a5:	60                   	pusha  
   101a6:	1e                   	push   %ds
   101a7:	06                   	push   %es
   101a8:	0f a0                	push   %fs
   101aa:	0f a8                	push   %gs
   101ac:	54                   	push   %esp
   101ad:	e8 08 29 00 00       	call   12aba <do_handler_stack_segment_fault>
   101b2:	83 c4 04             	add    $0x4,%esp
   101b5:	0f a9                	pop    %gs
   101b7:	0f a1                	pop    %fs
   101b9:	07                   	pop    %es
   101ba:	1f                   	pop    %ds
   101bb:	61                   	popa   
   101bc:	83 c4 08             	add    $0x8,%esp
   101bf:	cf                   	iret   

000101c0 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101c0:	6a 0d                	push   $0xd
   101c2:	60                   	pusha  
   101c3:	1e                   	push   %ds
   101c4:	06                   	push   %es
   101c5:	0f a0                	push   %fs
   101c7:	0f a8                	push   %gs
   101c9:	54                   	push   %esp
   101ca:	e8 93 29 00 00       	call   12b62 <do_handler_general_protection>
   101cf:	83 c4 04             	add    $0x4,%esp
   101d2:	0f a9                	pop    %gs
   101d4:	0f a1                	pop    %fs
   101d6:	07                   	pop    %es
   101d7:	1f                   	pop    %ds
   101d8:	61                   	popa   
   101d9:	83 c4 08             	add    $0x8,%esp
   101dc:	cf                   	iret   

000101dd <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101dd:	6a 0e                	push   $0xe
   101df:	60                   	pusha  
   101e0:	1e                   	push   %ds
   101e1:	06                   	push   %es
   101e2:	0f a0                	push   %fs
   101e4:	0f a8                	push   %gs
   101e6:	54                   	push   %esp
   101e7:	e8 2b 2a 00 00       	call   12c17 <do_handler_page_fault>
   101ec:	83 c4 04             	add    $0x4,%esp
   101ef:	0f a9                	pop    %gs
   101f1:	0f a1                	pop    %fs
   101f3:	07                   	pop    %es
   101f4:	1f                   	pop    %ds
   101f5:	61                   	popa   
   101f6:	83 c4 08             	add    $0x8,%esp
   101f9:	cf                   	iret   

000101fa <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101fa:	6a 00                	push   $0x0
   101fc:	6a 10                	push   $0x10
   101fe:	60                   	pusha  
   101ff:	1e                   	push   %ds
   10200:	06                   	push   %es
   10201:	0f a0                	push   %fs
   10203:	0f a8                	push   %gs
   10205:	54                   	push   %esp
   10206:	e8 cb 28 00 00       	call   12ad6 <do_handler_fpu_error>
   1020b:	83 c4 04             	add    $0x4,%esp
   1020e:	0f a9                	pop    %gs
   10210:	0f a1                	pop    %fs
   10212:	07                   	pop    %es
   10213:	1f                   	pop    %ds
   10214:	61                   	popa   
   10215:	83 c4 08             	add    $0x8,%esp
   10218:	cf                   	iret   

00010219 <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   10219:	6a 11                	push   $0x11
   1021b:	60                   	pusha  
   1021c:	1e                   	push   %ds
   1021d:	06                   	push   %es
   1021e:	0f a0                	push   %fs
   10220:	0f a8                	push   %gs
   10222:	54                   	push   %esp
   10223:	e8 ca 28 00 00       	call   12af2 <do_handler_alignment_check>
   10228:	83 c4 04             	add    $0x4,%esp
   1022b:	0f a9                	pop    %gs
   1022d:	0f a1                	pop    %fs
   1022f:	07                   	pop    %es
   10230:	1f                   	pop    %ds
   10231:	61                   	popa   
   10232:	83 c4 08             	add    $0x8,%esp
   10235:	cf                   	iret   

00010236 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10236:	6a 00                	push   $0x0
   10238:	6a 12                	push   $0x12
   1023a:	60                   	pusha  
   1023b:	1e                   	push   %ds
   1023c:	06                   	push   %es
   1023d:	0f a0                	push   %fs
   1023f:	0f a8                	push   %gs
   10241:	54                   	push   %esp
   10242:	e8 c7 28 00 00       	call   12b0e <do_handler_machine_check>
   10247:	83 c4 04             	add    $0x4,%esp
   1024a:	0f a9                	pop    %gs
   1024c:	0f a1                	pop    %fs
   1024e:	07                   	pop    %es
   1024f:	1f                   	pop    %ds
   10250:	61                   	popa   
   10251:	83 c4 08             	add    $0x8,%esp
   10254:	cf                   	iret   

00010255 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10255:	6a 00                	push   $0x0
   10257:	6a 13                	push   $0x13
   10259:	60                   	pusha  
   1025a:	1e                   	push   %ds
   1025b:	06                   	push   %es
   1025c:	0f a0                	push   %fs
   1025e:	0f a8                	push   %gs
   10260:	54                   	push   %esp
   10261:	e8 c4 28 00 00       	call   12b2a <do_handler_smd_exception>
   10266:	83 c4 04             	add    $0x4,%esp
   10269:	0f a9                	pop    %gs
   1026b:	0f a1                	pop    %fs
   1026d:	07                   	pop    %es
   1026e:	1f                   	pop    %ds
   1026f:	61                   	popa   
   10270:	83 c4 08             	add    $0x8,%esp
   10273:	cf                   	iret   

00010274 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10274:	6a 00                	push   $0x0
   10276:	6a 14                	push   $0x14
   10278:	60                   	pusha  
   10279:	1e                   	push   %ds
   1027a:	06                   	push   %es
   1027b:	0f a0                	push   %fs
   1027d:	0f a8                	push   %gs
   1027f:	54                   	push   %esp
   10280:	e8 c1 28 00 00       	call   12b46 <do_handler_virtual_exception>
   10285:	83 c4 04             	add    $0x4,%esp
   10288:	0f a9                	pop    %gs
   1028a:	0f a1                	pop    %fs
   1028c:	07                   	pop    %es
   1028d:	1f                   	pop    %ds
   1028e:	61                   	popa   
   1028f:	83 c4 08             	add    $0x8,%esp
   10292:	cf                   	iret   

00010293 <exception_handler_timer>:

# 硬件中断
exception_handler timer, 0x20, 0
   10293:	6a 00                	push   $0x0
   10295:	6a 20                	push   $0x20
   10297:	60                   	pusha  
   10298:	1e                   	push   %ds
   10299:	06                   	push   %es
   1029a:	0f a0                	push   %fs
   1029c:	0f a8                	push   %gs
   1029e:	54                   	push   %esp
   1029f:	e8 de 43 00 00       	call   14682 <do_handler_timer>
   102a4:	83 c4 04             	add    $0x4,%esp
   102a7:	0f a9                	pop    %gs
   102a9:	0f a1                	pop    %fs
   102ab:	07                   	pop    %es
   102ac:	1f                   	pop    %ds
   102ad:	61                   	popa   
   102ae:	83 c4 08             	add    $0x8,%esp
   102b1:	cf                   	iret   

000102b2 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102b2:	6a 00                	push   $0x0
   102b4:	6a 21                	push   $0x21
   102b6:	60                   	pusha  
   102b7:	1e                   	push   %ds
   102b8:	06                   	push   %es
   102b9:	0f a0                	push   %fs
   102bb:	0f a8                	push   %gs
   102bd:	54                   	push   %esp
   102be:	e8 3e 42 00 00       	call   14501 <do_handler_kbd>
   102c3:	83 c4 04             	add    $0x4,%esp
   102c6:	0f a9                	pop    %gs
   102c8:	0f a1                	pop    %fs
   102ca:	07                   	pop    %es
   102cb:	1f                   	pop    %ds
   102cc:	61                   	popa   
   102cd:	83 c4 08             	add    $0x8,%esp
   102d0:	cf                   	iret   

000102d1 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
    .text
    .global simple_switch
simple_switch:
    movl 4(%esp), %eax   // 取from->stack
   102d1:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102d5:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102d9:	55                   	push   %ebp
	push %ebx
   102da:	53                   	push   %ebx
	push %esi
   102db:	56                   	push   %esi
	push %edi
   102dc:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102dd:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102df:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102e1:	5f                   	pop    %edi
	pop %esi
   102e2:	5e                   	pop    %esi
	pop %ebx
   102e3:	5b                   	pop    %ebx
	pop %ebp
   102e4:	5d                   	pop    %ebp
  	ret
   102e5:	c3                   	ret    

000102e6 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    # 保存前一任务的状态
	pusha
   102e6:	60                   	pusha  
	push %ds
   102e7:	1e                   	push   %ds
	push %es
   102e8:	06                   	push   %es
	push %fs
   102e9:	0f a0                	push   %fs
	push %gs
   102eb:	0f a8                	push   %gs
	pushf
   102ed:	9c                   	pushf  

    # 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   102ee:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102f3:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102f5:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102f7:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   102f9:	8e e8                	mov    %eax,%gs

    # 调用处理函数
    mov %esp, %eax
   102fb:	89 e0                	mov    %esp,%eax
    push %eax
   102fd:	50                   	push   %eax
	call do_handler_syscall
   102fe:	e8 fd 0b 00 00       	call   10f00 <do_handler_syscall>
	add $4, %esp
   10303:	83 c4 04             	add    $0x4,%esp

    # 再切换回来
	popf
   10306:	9d                   	popf   
	pop %gs
   10307:	0f a9                	pop    %gs
	pop %fs
   10309:	0f a1                	pop    %fs
	pop %es
   1030b:	07                   	pop    %es
	pop %ds
   1030c:	1f                   	pop    %ds
	popa
   1030d:	61                   	popa   
   1030e:	ca 14 00             	lret   $0x14

00010311 <up2>:
#include "comm/types.h"
#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   10311:	55                   	push   %ebp
   10312:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10314:	8b 55 08             	mov    0x8(%ebp),%edx
   10317:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031a:	01 d0                	add    %edx,%eax
   1031c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1031f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10322:	f7 d8                	neg    %eax
   10324:	21 d0                	and    %edx,%eax
}
   10326:	5d                   	pop    %ebp
   10327:	c3                   	ret    

00010328 <down2>:
// size = 0x1010 bound = 0x1000
// bound - 1 = 0x0FFF
// ~(bound-1) = 0xFFFF1000
// size & ~(bound-1) =  0x1010 & 0xFFFF1000 = 0x1000
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   10328:	55                   	push   %ebp
   10329:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1032b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032e:	f7 d8                	neg    %eax
   10330:	23 45 08             	and    0x8(%ebp),%eax
}
   10333:	5d                   	pop    %ebp
   10334:	c3                   	ret    

00010335 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]" : [v] "=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   10335:	55                   	push   %ebp
   10336:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	0f 22 d8             	mov    %eax,%cr3
}
   1033e:	90                   	nop
   1033f:	5d                   	pop    %ebp
   10340:	c3                   	ret    

00010341 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index(uint32_t vaddr)
{
   10341:	55                   	push   %ebp
   10342:	89 e5                	mov    %esp,%ebp
   10344:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10347:	8b 45 08             	mov    0x8(%ebp),%eax
   1034a:	c1 e8 16             	shr    $0x16,%eax
   1034d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10350:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10353:	c9                   	leave  
   10354:	c3                   	ret    

00010355 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr(pde_t *pde)
{
   10355:	55                   	push   %ebp
   10356:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10358:	8b 45 08             	mov    0x8(%ebp),%eax
   1035b:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1035f:	c0 ea 04             	shr    $0x4,%dl
   10362:	0f b6 d2             	movzbl %dl,%edx
   10365:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10369:	c1 e1 04             	shl    $0x4,%ecx
   1036c:	09 ca                	or     %ecx,%edx
   1036e:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10372:	c1 e0 0c             	shl    $0xc,%eax
   10375:	09 d0                	or     %edx,%eax
   10377:	c1 e0 0c             	shl    $0xc,%eax
}
   1037a:	5d                   	pop    %ebp
   1037b:	c3                   	ret    

0001037c <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index(uint32_t vaddr)
{
   1037c:	55                   	push   %ebp
   1037d:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   1037f:	8b 45 08             	mov    0x8(%ebp),%eax
   10382:	c1 e8 0c             	shr    $0xc,%eax
   10385:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr(pte_t *pte)
{
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10396:	c0 ea 04             	shr    $0x4,%dl
   10399:	0f b6 d2             	movzbl %dl,%edx
   1039c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103a0:	c1 e1 04             	shl    $0x4,%ecx
   103a3:	09 ca                	or     %ecx,%edx
   103a5:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103a9:	c1 e0 0c             	shl    $0xc,%eax
   103ac:	09 d0                	or     %edx,%eax
   103ae:	c1 e0 0c             	shl    $0xc,%eax
}
   103b1:	5d                   	pop    %ebp
   103b2:	c3                   	ret    

000103b3 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm(pte_t *pte)
{
   103b3:	55                   	push   %ebp
   103b4:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);
   103b6:	8b 45 08             	mov    0x8(%ebp),%eax
   103b9:	8b 00                	mov    (%eax),%eax
   103bb:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103c0:	5d                   	pop    %ebp
   103c1:	c3                   	ret    

000103c2 <mmu_set_page_dir>:
/**
 * @brief 重新加载整个页表至cr3高20位寄存器
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir(uint32_t paddr)
{
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103c5:	ff 75 08             	pushl  0x8(%ebp)
   103c8:	e8 68 ff ff ff       	call   10335 <write_cr3>
   103cd:	83 c4 04             	add    $0x4,%esp
}
   103d0:	90                   	nop
   103d1:	c9                   	leave  
   103d2:	c3                   	ret    

000103d3 <current_page_dir>:

/**
 * @brief 获取当前页表地址
 */
static pde_t *current_page_dir(void)
{
   103d3:	55                   	push   %ebp
   103d4:	89 e5                	mov    %esp,%ebp
   103d6:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103d9:	e8 a3 11 00 00       	call   11581 <task_current>
   103de:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
}
   103e4:	c9                   	leave  
   103e5:	c3                   	ret    

000103e6 <addr_alloc_init>:
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits,
                            uint32_t start, uint32_t size, uint32_t page_size)
{
   103e6:	55                   	push   %ebp
   103e7:	89 e5                	mov    %esp,%ebp
   103e9:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103ec:	8b 45 08             	mov    0x8(%ebp),%eax
   103ef:	83 ec 0c             	sub    $0xc,%esp
   103f2:	50                   	push   %eax
   103f3:	e8 df 4f 00 00       	call   153d7 <mutex_init>
   103f8:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	8b 55 10             	mov    0x10(%ebp),%edx
   10401:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10404:	8b 45 08             	mov    0x8(%ebp),%eax
   10407:	8b 55 14             	mov    0x14(%ebp),%edx
   1040a:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1040d:	8b 45 08             	mov    0x8(%ebp),%eax
   10410:	8b 55 18             	mov    0x18(%ebp),%edx
   10413:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10416:	8b 45 08             	mov    0x8(%ebp),%eax
   10419:	8b 40 24             	mov    0x24(%eax),%eax
   1041c:	ba 00 00 00 00       	mov    $0x0,%edx
   10421:	f7 75 18             	divl   0x18(%ebp)
   10424:	89 c2                	mov    %eax,%edx
   10426:	8b 45 08             	mov    0x8(%ebp),%eax
   10429:	83 c0 14             	add    $0x14,%eax
   1042c:	6a 00                	push   $0x0
   1042e:	52                   	push   %edx
   1042f:	ff 75 0c             	pushl  0xc(%ebp)
   10432:	50                   	push   %eax
   10433:	e8 78 52 00 00       	call   156b0 <bitmap_init>
   10438:	83 c4 10             	add    $0x10,%esp
}
   1043b:	90                   	nop
   1043c:	c9                   	leave  
   1043d:	c3                   	ret    

0001043e <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1043e:	55                   	push   %ebp
   1043f:	89 e5                	mov    %esp,%ebp
   10441:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10444:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1044b:	8b 45 08             	mov    0x8(%ebp),%eax
   1044e:	83 ec 0c             	sub    $0xc,%esp
   10451:	50                   	push   %eax
   10452:	e8 ae 4f 00 00       	call   15405 <mutex_lock>
   10457:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	83 c0 14             	add    $0x14,%eax
   10460:	83 ec 04             	sub    $0x4,%esp
   10463:	ff 75 0c             	pushl  0xc(%ebp)
   10466:	6a 00                	push   $0x0
   10468:	50                   	push   %eax
   10469:	e8 be 53 00 00       	call   1582c <bitmap_alloc_nbits>
   1046e:	83 c4 10             	add    $0x10,%esp
   10471:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10474:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10478:	78 17                	js     10491 <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	8b 50 20             	mov    0x20(%eax),%edx
   10480:	8b 45 08             	mov    0x8(%ebp),%eax
   10483:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10486:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10489:	0f af c1             	imul   %ecx,%eax
   1048c:	01 d0                	add    %edx,%eax
   1048e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   10491:	8b 45 08             	mov    0x8(%ebp),%eax
   10494:	83 ec 0c             	sub    $0xc,%esp
   10497:	50                   	push   %eax
   10498:	e8 fc 4f 00 00       	call   15499 <mutex_unlock>
   1049d:	83 c4 10             	add    $0x10,%esp
    return addr;
   104a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104a3:	c9                   	leave  
   104a4:	c3                   	ret    

000104a5 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   104a5:	55                   	push   %ebp
   104a6:	89 e5                	mov    %esp,%ebp
   104a8:	53                   	push   %ebx
   104a9:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	50                   	push   %eax
   104b3:	e8 4d 4f 00 00       	call   15405 <mutex_lock>
   104b8:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104bb:	8b 45 08             	mov    0x8(%ebp),%eax
   104be:	8b 40 20             	mov    0x20(%eax),%eax
   104c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   104c4:	89 d1                	mov    %edx,%ecx
   104c6:	29 c1                	sub    %eax,%ecx
   104c8:	8b 45 08             	mov    0x8(%ebp),%eax
   104cb:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104ce:	89 c8                	mov    %ecx,%eax
   104d0:	ba 00 00 00 00       	mov    $0x0,%edx
   104d5:	f7 f3                	div    %ebx
   104d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104da:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104dd:	8b 55 08             	mov    0x8(%ebp),%edx
   104e0:	83 c2 14             	add    $0x14,%edx
   104e3:	6a 00                	push   $0x0
   104e5:	ff 75 10             	pushl  0x10(%ebp)
   104e8:	50                   	push   %eax
   104e9:	52                   	push   %edx
   104ea:	e8 14 52 00 00       	call   15703 <bitmap_set_bit>
   104ef:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   104f2:	8b 45 08             	mov    0x8(%ebp),%eax
   104f5:	83 ec 0c             	sub    $0xc,%esp
   104f8:	50                   	push   %eax
   104f9:	e8 9b 4f 00 00       	call   15499 <mutex_unlock>
   104fe:	83 c4 10             	add    $0x10,%esp
}
   10501:	90                   	nop
   10502:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10505:	c9                   	leave  
   10506:	c3                   	ret    

00010507 <show_mem_info>:

static void show_mem_info(boot_info_t *boot_info)
{
   10507:	55                   	push   %ebp
   10508:	89 e5                	mov    %esp,%ebp
   1050a:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1050d:	83 ec 0c             	sub    $0xc,%esp
   10510:	68 60 61 01 00       	push   $0x16160
   10515:	e8 84 5b 00 00       	call   1609e <log_printf>
   1051a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1051d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10524:	eb 29                	jmp    1054f <show_mem_info+0x48>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   10526:	8b 45 08             	mov    0x8(%ebp),%eax
   10529:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1052c:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10530:	8b 45 08             	mov    0x8(%ebp),%eax
   10533:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10536:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10539:	52                   	push   %edx
   1053a:	50                   	push   %eax
   1053b:	ff 75 f4             	pushl  -0xc(%ebp)
   1053e:	68 6c 61 01 00       	push   $0x1616c
   10543:	e8 56 5b 00 00       	call   1609e <log_printf>
   10548:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1054b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 40 50             	mov    0x50(%eax),%eax
   10555:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10558:	7c cc                	jl     10526 <show_mem_info+0x1f>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1055a:	83 ec 0c             	sub    $0xc,%esp
   1055d:	68 7e 61 01 00       	push   $0x1617e
   10562:	e8 37 5b 00 00       	call   1609e <log_printf>
   10567:	83 c4 10             	add    $0x10,%esp
}
   1056a:	90                   	nop
   1056b:	c9                   	leave  
   1056c:	c3                   	ret    

0001056d <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   1056d:	55                   	push   %ebp
   1056e:	89 e5                	mov    %esp,%ebp
   10570:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10573:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1057a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10581:	eb 16                	jmp    10599 <total_mem_size+0x2c>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   10583:	8b 45 08             	mov    0x8(%ebp),%eax
   10586:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10589:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1058d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10590:	01 d0                	add    %edx,%eax
   10592:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10595:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10599:	8b 45 08             	mov    0x8(%ebp),%eax
   1059c:	8b 40 50             	mov    0x50(%eax),%eax
   1059f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105a2:	7c df                	jl     10583 <total_mem_size+0x16>
    }
    return mem_size;
   105a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105a7:	c9                   	leave  
   105a8:	c3                   	ret    

000105a9 <find_pte>:

pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   105a9:	55                   	push   %ebp
   105aa:	89 e5                	mov    %esp,%ebp
   105ac:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105af:	ff 75 0c             	pushl  0xc(%ebp)
   105b2:	e8 8a fd ff ff       	call   10341 <pde_index>
   105b7:	83 c4 04             	add    $0x4,%esp
   105ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105c1:	8b 45 08             	mov    0x8(%ebp),%eax
   105c4:	01 d0                	add    %edx,%eax
   105c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   105c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105cc:	0f b6 00             	movzbl (%eax),%eax
   105cf:	83 e0 01             	and    $0x1,%eax
   105d2:	84 c0                	test   %al,%al
   105d4:	74 10                	je     105e6 <find_pte+0x3d>
    {
        page_table = (pte_t *)pde_paddr(pde);
   105d6:	ff 75 f0             	pushl  -0x10(%ebp)
   105d9:	e8 77 fd ff ff       	call   10355 <pde_paddr>
   105de:	83 c4 04             	add    $0x4,%esp
   105e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105e4:	eb 57                	jmp    1063d <find_pte+0x94>
    }
    else
    {
        // 如果不存在，则考虑分配一个
        if (alloc == 0)
   105e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105ea:	75 07                	jne    105f3 <find_pte+0x4a>
        {
            return (pte_t *)0;
   105ec:	b8 00 00 00 00       	mov    $0x0,%eax
   105f1:	eb 64                	jmp    10657 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   105f3:	83 ec 08             	sub    $0x8,%esp
   105f6:	6a 01                	push   $0x1
   105f8:	68 00 b0 01 00       	push   $0x1b000
   105fd:	e8 3c fe ff ff       	call   1043e <addr_alloc_page>
   10602:	83 c4 10             	add    $0x10,%esp
   10605:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0)
   10608:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1060c:	75 07                	jne    10615 <find_pte+0x6c>
        {
            return (pte_t *)0;
   1060e:	b8 00 00 00 00       	mov    $0x0,%eax
   10613:	eb 42                	jmp    10657 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10615:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10618:	83 c8 07             	or     $0x7,%eax
   1061b:	89 c2                	mov    %eax,%edx
   1061d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10620:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        // kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10622:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10625:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10628:	83 ec 04             	sub    $0x4,%esp
   1062b:	68 00 10 00 00       	push   $0x1000
   10630:	6a 00                	push   $0x0
   10632:	ff 75 f4             	pushl  -0xc(%ebp)
   10635:	e8 6b 54 00 00       	call   15aa5 <kernel_memset>
   1063a:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1063d:	83 ec 0c             	sub    $0xc,%esp
   10640:	ff 75 0c             	pushl  0xc(%ebp)
   10643:	e8 34 fd ff ff       	call   1037c <pte_index>
   10648:	83 c4 10             	add    $0x10,%esp
   1064b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10652:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10655:	01 d0                	add    %edx,%eax
}
   10657:	c9                   	leave  
   10658:	c3                   	ret    

00010659 <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10659:	55                   	push   %ebp
   1065a:	89 e5                	mov    %esp,%ebp
   1065c:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   1065f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10666:	eb 6e                	jmp    106d6 <memory_create_map+0x7d>
    {
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t *pte = find_pte(page_dir, vaddr, 1);
   10668:	83 ec 04             	sub    $0x4,%esp
   1066b:	6a 01                	push   $0x1
   1066d:	ff 75 0c             	pushl  0xc(%ebp)
   10670:	ff 75 08             	pushl  0x8(%ebp)
   10673:	e8 31 ff ff ff       	call   105a9 <find_pte>
   10678:	83 c4 10             	add    $0x10,%esp
   1067b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   1067e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10682:	75 07                	jne    1068b <memory_create_map+0x32>
        {
            // log_printf("create pte failed. pte == 0");
            return -1;
   10684:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10689:	eb 58                	jmp    106e3 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1068b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068e:	0f b6 00             	movzbl (%eax),%eax
   10691:	83 e0 01             	and    $0x1,%eax
   10694:	84 c0                	test   %al,%al
   10696:	74 1c                	je     106b4 <memory_create_map+0x5b>
   10698:	68 80 61 01 00       	push   $0x16180
   1069d:	68 c8 62 01 00       	push   $0x162c8
   106a2:	68 97 00 00 00       	push   $0x97
   106a7:	68 94 61 01 00       	push   $0x16194
   106ac:	e8 1d 57 00 00       	call   15dce <panic>
   106b1:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106b4:	8b 45 10             	mov    0x10(%ebp),%eax
   106b7:	0b 45 18             	or     0x18(%ebp),%eax
   106ba:	83 c8 01             	or     $0x1,%eax
   106bd:	89 c2                	mov    %eax,%edx
   106bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106c2:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106c4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106cb:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   106d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d9:	3b 45 14             	cmp    0x14(%ebp),%eax
   106dc:	7c 8a                	jl     10668 <memory_create_map+0xf>
    }

    return 0;
   106de:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106e3:	c9                   	leave  
   106e4:	c3                   	ret    

000106e5 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table(void)
{
   106e5:	55                   	push   %ebp
   106e6:	89 e5                	mov    %esp,%ebp
   106e8:	83 ec 28             	sub    $0x28,%esp
        // 1M以上空间扩展V\P一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106eb:	83 ec 04             	sub    $0x4,%esp
   106ee:	68 00 10 00 00       	push   $0x1000
   106f3:	6a 00                	push   $0x0
   106f5:	68 00 c0 01 00       	push   $0x1c000
   106fa:	e8 a6 53 00 00       	call   15aa5 <kernel_memset>
   106ff:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   10702:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10709:	e9 83 00 00 00       	jmp    10791 <create_kernel_table+0xac>
    {
        memory_map_t *map = kernel_map + i;
   1070e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10711:	c1 e0 04             	shl    $0x4,%eax
   10714:	05 00 80 01 00       	add    $0x18000,%eax
   10719:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1071c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1071f:	8b 00                	mov    (%eax),%eax
   10721:	83 ec 08             	sub    $0x8,%esp
   10724:	68 00 10 00 00       	push   $0x1000
   10729:	50                   	push   %eax
   1072a:	e8 f9 fb ff ff       	call   10328 <down2>
   1072f:	83 c4 10             	add    $0x10,%esp
   10732:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10735:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10738:	8b 40 04             	mov    0x4(%eax),%eax
   1073b:	83 ec 08             	sub    $0x8,%esp
   1073e:	68 00 10 00 00       	push   $0x1000
   10743:	50                   	push   %eax
   10744:	e8 c8 fb ff ff       	call   10311 <up2>
   10749:	83 c4 10             	add    $0x10,%esp
   1074c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1074f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10752:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10755:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1075b:	85 c0                	test   %eax,%eax
   1075d:	0f 48 c2             	cmovs  %edx,%eax
   10760:	c1 f8 0c             	sar    $0xc,%eax
   10763:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	8b 50 0c             	mov    0xc(%eax),%edx
   1076c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076f:	8b 40 08             	mov    0x8(%eax),%eax
   10772:	89 c1                	mov    %eax,%ecx
   10774:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10777:	83 ec 0c             	sub    $0xc,%esp
   1077a:	52                   	push   %edx
   1077b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1077e:	51                   	push   %ecx
   1077f:	50                   	push   %eax
   10780:	68 00 c0 01 00       	push   $0x1c000
   10785:	e8 cf fe ff ff       	call   10659 <memory_create_map>
   1078a:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1078d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10791:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10794:	83 f8 04             	cmp    $0x4,%eax
   10797:	0f 86 71 ff ff ff    	jbe    1070e <create_kernel_table+0x29>
    }
}
   1079d:	90                   	nop
   1079e:	c9                   	leave  
   1079f:	c3                   	ret    

000107a0 <memory_create_uvm>:
/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm(void)
{
   107a0:	55                   	push   %ebp
   107a1:	89 e5                	mov    %esp,%ebp
   107a3:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107a6:	83 ec 08             	sub    $0x8,%esp
   107a9:	6a 01                	push   $0x1
   107ab:	68 00 b0 01 00       	push   $0x1b000
   107b0:	e8 89 fc ff ff       	call   1043e <addr_alloc_page>
   107b5:	83 c4 10             	add    $0x10,%esp
   107b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   107bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107bf:	75 07                	jne    107c8 <memory_create_uvm+0x28>
    {
        return 0;
   107c1:	b8 00 00 00 00       	mov    $0x0,%eax
   107c6:	eb 5b                	jmp    10823 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107c8:	83 ec 04             	sub    $0x4,%esp
   107cb:	68 00 10 00 00       	push   $0x1000
   107d0:	6a 00                	push   $0x0
   107d2:	ff 75 f0             	pushl  -0x10(%ebp)
   107d5:	e8 cb 52 00 00       	call   15aa5 <kernel_memset>
   107da:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107dd:	83 ec 0c             	sub    $0xc,%esp
   107e0:	68 00 00 00 80       	push   $0x80000000
   107e5:	e8 57 fb ff ff       	call   10341 <pde_index>
   107ea:	83 c4 10             	add    $0x10,%esp
   107ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   107f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107f7:	eb 1f                	jmp    10818 <memory_create_uvm+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   107f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10803:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10806:	01 c2                	add    %eax,%edx
   10808:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080b:	8b 04 85 00 c0 01 00 	mov    0x1c000(,%eax,4),%eax
   10812:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   10814:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10818:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1081e:	77 d9                	ja     107f9 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10820:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10823:	c9                   	leave  
   10824:	c3                   	ret    

00010825 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm(uint32_t page_dir)
{
   10825:	55                   	push   %ebp
   10826:	89 e5                	mov    %esp,%ebp
   10828:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1082b:	68 00 00 00 80       	push   $0x80000000
   10830:	e8 0c fb ff ff       	call   10341 <pde_index>
   10835:	83 c4 04             	add    $0x4,%esp
   10838:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   1083b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1083e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10845:	8b 45 08             	mov    0x8(%ebp),%eax
   10848:	01 d0                	add    %edx,%eax
   1084a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1084d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10851:	75 1c                	jne    1086f <memory_destroy_uvm+0x4a>
   10853:	68 d0 61 01 00       	push   $0x161d0
   10858:	68 dc 62 01 00       	push   $0x162dc
   1085d:	68 e7 00 00 00       	push   $0xe7
   10862:	68 94 61 01 00       	push   $0x16194
   10867:	e8 62 55 00 00       	call   15dce <panic>
   1086c:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   1086f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10872:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10875:	e9 95 00 00 00       	jmp    1090f <memory_destroy_uvm+0xea>
    {
        if (!pde->present)
   1087a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087d:	0f b6 00             	movzbl (%eax),%eax
   10880:	83 e0 01             	and    $0x1,%eax
   10883:	84 c0                	test   %al,%al
   10885:	74 7f                	je     10906 <memory_destroy_uvm+0xe1>
        {
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   10887:	83 ec 0c             	sub    $0xc,%esp
   1088a:	ff 75 f4             	pushl  -0xc(%ebp)
   1088d:	e8 c3 fa ff ff       	call   10355 <pde_paddr>
   10892:	83 c4 10             	add    $0x10,%esp
   10895:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   10898:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1089f:	eb 39                	jmp    108da <memory_destroy_uvm+0xb5>
        {
            if (!pte->present)
   108a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108a4:	0f b6 00             	movzbl (%eax),%eax
   108a7:	83 e0 01             	and    $0x1,%eax
   108aa:	84 c0                	test   %al,%al
   108ac:	74 23                	je     108d1 <memory_destroy_uvm+0xac>
            {
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108ae:	83 ec 0c             	sub    $0xc,%esp
   108b1:	ff 75 ec             	pushl  -0x14(%ebp)
   108b4:	e8 d3 fa ff ff       	call   1038c <pte_paddr>
   108b9:	83 c4 10             	add    $0x10,%esp
   108bc:	83 ec 04             	sub    $0x4,%esp
   108bf:	6a 01                	push   $0x1
   108c1:	50                   	push   %eax
   108c2:	68 00 b0 01 00       	push   $0x1b000
   108c7:	e8 d9 fb ff ff       	call   104a5 <addr_free_page>
   108cc:	83 c4 10             	add    $0x10,%esp
   108cf:	eb 01                	jmp    108d2 <memory_destroy_uvm+0xad>
                continue;
   108d1:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   108d2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108d6:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108da:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108e1:	7e be                	jle    108a1 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108e3:	83 ec 0c             	sub    $0xc,%esp
   108e6:	ff 75 f4             	pushl  -0xc(%ebp)
   108e9:	e8 67 fa ff ff       	call   10355 <pde_paddr>
   108ee:	83 c4 10             	add    $0x10,%esp
   108f1:	83 ec 04             	sub    $0x4,%esp
   108f4:	6a 01                	push   $0x1
   108f6:	50                   	push   %eax
   108f7:	68 00 b0 01 00       	push   $0x1b000
   108fc:	e8 a4 fb ff ff       	call   104a5 <addr_free_page>
   10901:	83 c4 10             	add    $0x10,%esp
   10904:	eb 01                	jmp    10907 <memory_destroy_uvm+0xe2>
            continue;
   10906:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10907:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1090b:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   1090f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10916:	0f 8e 5e ff ff ff    	jle    1087a <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   1091c:	83 ec 04             	sub    $0x4,%esp
   1091f:	6a 01                	push   $0x1
   10921:	ff 75 08             	pushl  0x8(%ebp)
   10924:	68 00 b0 01 00       	push   $0x1b000
   10929:	e8 77 fb ff ff       	call   104a5 <addr_free_page>
   1092e:	83 c4 10             	add    $0x10,%esp
}
   10931:	90                   	nop
   10932:	c9                   	leave  
   10933:	c3                   	ret    

00010934 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm(uint32_t page_dir)
{
   10934:	55                   	push   %ebp
   10935:	89 e5                	mov    %esp,%ebp
   10937:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   1093a:	e8 61 fe ff ff       	call   107a0 <memory_create_uvm>
   1093f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0)
   10942:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10946:	0f 84 1b 01 00 00    	je     10a67 <memory_copy_uvm+0x133>
    {
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1094c:	83 ec 0c             	sub    $0xc,%esp
   1094f:	68 00 00 00 80       	push   $0x80000000
   10954:	e8 e8 f9 ff ff       	call   10341 <pde_index>
   10959:	83 c4 10             	add    $0x10,%esp
   1095c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   1095f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10962:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10969:	8b 45 08             	mov    0x8(%ebp),%eax
   1096c:	01 d0                	add    %edx,%eax
   1096e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10971:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10974:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10977:	e9 d9 00 00 00       	jmp    10a55 <memory_copy_uvm+0x121>
    {
        if (!pde->present)
   1097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1097f:	0f b6 00             	movzbl (%eax),%eax
   10982:	83 e0 01             	and    $0x1,%eax
   10985:	84 c0                	test   %al,%al
   10987:	0f 84 bf 00 00 00    	je     10a4c <memory_copy_uvm+0x118>
        {
            continue;
        }

        // 遍历页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   1098d:	83 ec 0c             	sub    $0xc,%esp
   10990:	ff 75 f4             	pushl  -0xc(%ebp)
   10993:	e8 bd f9 ff ff       	call   10355 <pde_paddr>
   10998:	83 c4 10             	add    $0x10,%esp
   1099b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   1099e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109a5:	e9 93 00 00 00       	jmp    10a3d <memory_copy_uvm+0x109>
        {
            if (!pte->present)
   109aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109ad:	0f b6 00             	movzbl (%eax),%eax
   109b0:	83 e0 01             	and    $0x1,%eax
   109b3:	84 c0                	test   %al,%al
   109b5:	74 7d                	je     10a34 <memory_copy_uvm+0x100>
            {
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109b7:	83 ec 08             	sub    $0x8,%esp
   109ba:	6a 01                	push   $0x1
   109bc:	68 00 b0 01 00       	push   $0x1b000
   109c1:	e8 78 fa ff ff       	call   1043e <addr_alloc_page>
   109c6:	83 c4 10             	add    $0x10,%esp
   109c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0)
   109cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109d0:	0f 84 94 00 00 00    	je     10a6a <memory_copy_uvm+0x136>
            {
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109d9:	c1 e0 16             	shl    $0x16,%eax
   109dc:	89 c2                	mov    %eax,%edx
   109de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109e1:	c1 e0 0c             	shl    $0xc,%eax
   109e4:	09 d0                	or     %edx,%eax
   109e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109e9:	83 ec 0c             	sub    $0xc,%esp
   109ec:	ff 75 ec             	pushl  -0x14(%ebp)
   109ef:	e8 bf f9 ff ff       	call   103b3 <get_pte_perm>
   109f4:	83 c4 10             	add    $0x10,%esp
   109f7:	89 c2                	mov    %eax,%edx
   109f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109fc:	83 ec 0c             	sub    $0xc,%esp
   109ff:	52                   	push   %edx
   10a00:	6a 01                	push   $0x1
   10a02:	ff 75 dc             	pushl  -0x24(%ebp)
   10a05:	ff 75 d8             	pushl  -0x28(%ebp)
   10a08:	50                   	push   %eax
   10a09:	e8 4b fc ff ff       	call   10659 <memory_create_map>
   10a0e:	83 c4 20             	add    $0x20,%esp
   10a11:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0)
   10a14:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a18:	78 53                	js     10a6d <memory_copy_uvm+0x139>
            {
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a1a:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a20:	83 ec 04             	sub    $0x4,%esp
   10a23:	68 00 10 00 00       	push   $0x1000
   10a28:	52                   	push   %edx
   10a29:	50                   	push   %eax
   10a2a:	e8 27 50 00 00       	call   15a56 <kernel_memcpy>
   10a2f:	83 c4 10             	add    $0x10,%esp
   10a32:	eb 01                	jmp    10a35 <memory_copy_uvm+0x101>
                continue;
   10a34:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   10a35:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a39:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a3d:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a44:	0f 8e 60 ff ff ff    	jle    109aa <memory_copy_uvm+0x76>
   10a4a:	eb 01                	jmp    10a4d <memory_copy_uvm+0x119>
            continue;
   10a4c:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10a4d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a51:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a55:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a5c:	0f 8e 1a ff ff ff    	jle    1097c <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a65:	eb 20                	jmp    10a87 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a67:	90                   	nop
   10a68:	eb 04                	jmp    10a6e <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a6a:	90                   	nop
   10a6b:	eb 01                	jmp    10a6e <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a6d:	90                   	nop

copy_uvm_failed:
    if (to_page_dir)
   10a6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a72:	74 0e                	je     10a82 <memory_copy_uvm+0x14e>
    {
        memory_destroy_uvm(to_page_dir);
   10a74:	83 ec 0c             	sub    $0xc,%esp
   10a77:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a7a:	e8 a6 fd ff ff       	call   10825 <memory_destroy_uvm>
   10a7f:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a87:	c9                   	leave  
   10a88:	c3                   	ret    

00010a89 <memory_get_paddr>:
/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr)
{
   10a89:	55                   	push   %ebp
   10a8a:	89 e5                	mov    %esp,%ebp
   10a8c:	83 ec 18             	sub    $0x18,%esp
    pte_t *pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10a8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a92:	83 ec 04             	sub    $0x4,%esp
   10a95:	6a 00                	push   $0x0
   10a97:	ff 75 0c             	pushl  0xc(%ebp)
   10a9a:	50                   	push   %eax
   10a9b:	e8 09 fb ff ff       	call   105a9 <find_pte>
   10aa0:	83 c4 10             	add    $0x10,%esp
   10aa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0)
   10aa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aaa:	75 07                	jne    10ab3 <memory_get_paddr+0x2a>
    {
        return 0;
   10aac:	b8 00 00 00 00       	mov    $0x0,%eax
   10ab1:	eb 1a                	jmp    10acd <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ab3:	83 ec 0c             	sub    $0xc,%esp
   10ab6:	ff 75 f4             	pushl  -0xc(%ebp)
   10ab9:	e8 ce f8 ff ff       	call   1038c <pte_paddr>
   10abe:	83 c4 10             	add    $0x10,%esp
   10ac1:	89 c2                	mov    %eax,%edx
   10ac3:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ac6:	25 ff 0f 00 00       	and    $0xfff,%eax
   10acb:	01 d0                	add    %edx,%eax
}
   10acd:	c9                   	leave  
   10ace:	c3                   	ret    

00010acf <memory_copy_uvm_data>:
/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size)
{
   10acf:	55                   	push   %ebp
   10ad0:	89 e5                	mov    %esp,%ebp
   10ad2:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while (size > 0)
   10ad5:	eb 6e                	jmp    10b45 <memory_copy_uvm_data+0x76>
    {
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ad7:	83 ec 08             	sub    $0x8,%esp
   10ada:	ff 75 08             	pushl  0x8(%ebp)
   10add:	ff 75 0c             	pushl  0xc(%ebp)
   10ae0:	e8 a4 ff ff ff       	call   10a89 <memory_get_paddr>
   10ae5:	83 c4 10             	add    $0x10,%esp
   10ae8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0)
   10aeb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10aef:	75 07                	jne    10af8 <memory_copy_uvm_data+0x29>
        {
            return -1;
   10af1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10af6:	eb 58                	jmp    10b50 <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10afb:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b00:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b03:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b08:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size)
   10b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b11:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b14:	76 06                	jbe    10b1c <memory_copy_uvm_data+0x4d>
        {
            curr_size = size; // 如果比较大，超过页边界，则只拷贝此页内的
   10b16:	8b 45 14             	mov    0x14(%ebp),%eax
   10b19:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b1c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b1f:	8b 55 10             	mov    0x10(%ebp),%edx
   10b22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b25:	83 ec 04             	sub    $0x4,%esp
   10b28:	51                   	push   %ecx
   10b29:	52                   	push   %edx
   10b2a:	50                   	push   %eax
   10b2b:	e8 26 4f 00 00       	call   15a56 <kernel_memcpy>
   10b30:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b36:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b3c:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b42:	01 45 10             	add    %eax,0x10(%ebp)
    while (size > 0)
   10b45:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b49:	75 8c                	jne    10ad7 <memory_copy_uvm_data+0x8>
    }

    return 0;
   10b4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b50:	c9                   	leave  
   10b51:	c3                   	ret    

00010b52 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm)
{
   10b52:	55                   	push   %ebp
   10b53:	89 e5                	mov    %esp,%ebp
   10b55:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b5e:	68 00 10 00 00       	push   $0x1000
   10b63:	ff 75 10             	pushl  0x10(%ebp)
   10b66:	e8 a6 f7 ff ff       	call   10311 <up2>
   10b6b:	83 c4 08             	add    $0x8,%esp
   10b6e:	c1 e8 0c             	shr    $0xc,%eax
   10b71:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b74:	68 00 10 00 00       	push   $0x1000
   10b79:	ff 75 0c             	pushl  0xc(%ebp)
   10b7c:	e8 a7 f7 ff ff       	call   10328 <down2>
   10b81:	83 c4 08             	add    $0x8,%esp
   10b84:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++)
   10b87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10b8e:	eb 7b                	jmp    10c0b <memory_alloc_for_page_dir+0xb9>
    {
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10b90:	83 ec 08             	sub    $0x8,%esp
   10b93:	6a 01                	push   $0x1
   10b95:	68 00 b0 01 00       	push   $0x1b000
   10b9a:	e8 9f f8 ff ff       	call   1043e <addr_alloc_page>
   10b9f:	83 c4 10             	add    $0x10,%esp
   10ba2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0)
   10ba5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10ba9:	75 17                	jne    10bc2 <memory_alloc_for_page_dir+0x70>
        {
            log_printf("mem alloc failed. no memory");
   10bab:	83 ec 0c             	sub    $0xc,%esp
   10bae:	68 de 61 01 00       	push   $0x161de
   10bb3:	e8 e6 54 00 00       	call   1609e <log_printf>
   10bb8:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bbb:	b8 00 00 00 00       	mov    $0x0,%eax
   10bc0:	eb 5a                	jmp    10c1c <memory_alloc_for_page_dir+0xca>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bc2:	8b 55 14             	mov    0x14(%ebp),%edx
   10bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc8:	83 ec 0c             	sub    $0xc,%esp
   10bcb:	52                   	push   %edx
   10bcc:	6a 01                	push   $0x1
   10bce:	ff 75 e8             	pushl  -0x18(%ebp)
   10bd1:	ff 75 f4             	pushl  -0xc(%ebp)
   10bd4:	50                   	push   %eax
   10bd5:	e8 7f fa ff ff       	call   10659 <memory_create_map>
   10bda:	83 c4 20             	add    $0x20,%esp
   10bdd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   10be0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10be4:	79 1a                	jns    10c00 <memory_alloc_for_page_dir+0xae>
        {
            log_printf("create memory map failed. err = %d", err);
   10be6:	83 ec 08             	sub    $0x8,%esp
   10be9:	ff 75 e4             	pushl  -0x1c(%ebp)
   10bec:	68 fc 61 01 00       	push   $0x161fc
   10bf1:	e8 a8 54 00 00       	call   1609e <log_printf>
   10bf6:	83 c4 10             	add    $0x10,%esp
            // addr_free_page(&paddr_alloc, vaddr, i + 1); 清理之前分配的页
            return -1;
   10bf9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bfe:	eb 1c                	jmp    10c1c <memory_alloc_for_page_dir+0xca>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c00:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++)
   10c07:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c0e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c11:	0f 8c 79 ff ff ff    	jl     10b90 <memory_alloc_for_page_dir+0x3e>
    }

    return 0;
   10c17:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c1c:	c9                   	leave  
   10c1d:	c3                   	ret    

00010c1e <memory_alloc_page>:
/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page(void)
{
   10c1e:	55                   	push   %ebp
   10c1f:	89 e5                	mov    %esp,%ebp
   10c21:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c24:	83 ec 08             	sub    $0x8,%esp
   10c27:	6a 01                	push   $0x1
   10c29:	68 00 b0 01 00       	push   $0x1b000
   10c2e:	e8 0b f8 ff ff       	call   1043e <addr_alloc_page>
   10c33:	83 c4 10             	add    $0x10,%esp
}
   10c36:	c9                   	leave  
   10c37:	c3                   	ret    

00010c38 <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page(uint32_t addr)
{
   10c38:	55                   	push   %ebp
   10c39:	89 e5                	mov    %esp,%ebp
   10c3b:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE)
   10c3e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c41:	85 c0                	test   %eax,%eax
   10c43:	78 17                	js     10c5c <memory_free_page+0x24>
    {
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c45:	83 ec 04             	sub    $0x4,%esp
   10c48:	6a 01                	push   $0x1
   10c4a:	ff 75 08             	pushl  0x8(%ebp)
   10c4d:	68 00 b0 01 00       	push   $0x1b000
   10c52:	e8 4e f8 ff ff       	call   104a5 <addr_free_page>
   10c57:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10c5a:	eb 72                	jmp    10cce <memory_free_page+0x96>
        pte_t *pte = find_pte(current_page_dir(), addr, 0);
   10c5c:	e8 72 f7 ff ff       	call   103d3 <current_page_dir>
   10c61:	83 ec 04             	sub    $0x4,%esp
   10c64:	6a 00                	push   $0x0
   10c66:	ff 75 08             	pushl  0x8(%ebp)
   10c69:	50                   	push   %eax
   10c6a:	e8 3a f9 ff ff       	call   105a9 <find_pte>
   10c6f:	83 c4 10             	add    $0x10,%esp
   10c72:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10c75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c79:	75 0d                	jne    10c88 <memory_free_page+0x50>
   10c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c7e:	0f b6 00             	movzbl (%eax),%eax
   10c81:	83 e0 01             	and    $0x1,%eax
   10c84:	84 c0                	test   %al,%al
   10c86:	75 1c                	jne    10ca4 <memory_free_page+0x6c>
   10c88:	68 20 62 01 00       	push   $0x16220
   10c8d:	68 f0 62 01 00       	push   $0x162f0
   10c92:	68 ac 01 00 00       	push   $0x1ac
   10c97:	68 94 61 01 00       	push   $0x16194
   10c9c:	e8 2d 51 00 00       	call   15dce <panic>
   10ca1:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10ca4:	83 ec 0c             	sub    $0xc,%esp
   10ca7:	ff 75 f4             	pushl  -0xc(%ebp)
   10caa:	e8 dd f6 ff ff       	call   1038c <pte_paddr>
   10caf:	83 c4 10             	add    $0x10,%esp
   10cb2:	83 ec 04             	sub    $0x4,%esp
   10cb5:	6a 01                	push   $0x1
   10cb7:	50                   	push   %eax
   10cb8:	68 00 b0 01 00       	push   $0x1b000
   10cbd:	e8 e3 f7 ff ff       	call   104a5 <addr_free_page>
   10cc2:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10cc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cc8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10cce:	90                   	nop
   10ccf:	c9                   	leave  
   10cd0:	c3                   	ret    

00010cd1 <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm)
{
   10cd1:	55                   	push   %ebp
   10cd2:	89 e5                	mov    %esp,%ebp
   10cd4:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10cd7:	e8 a5 08 00 00       	call   11581 <task_current>
   10cdc:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   10ce2:	ff 75 10             	pushl  0x10(%ebp)
   10ce5:	ff 75 0c             	pushl  0xc(%ebp)
   10ce8:	ff 75 08             	pushl  0x8(%ebp)
   10ceb:	50                   	push   %eax
   10cec:	e8 61 fe ff ff       	call   10b52 <memory_alloc_for_page_dir>
   10cf1:	83 c4 10             	add    $0x10,%esp
}
   10cf4:	c9                   	leave  
   10cf5:	c3                   	ret    

00010cf6 <memory_init>:
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init(boot_info_t *boot_info)
{
   10cf6:	55                   	push   %ebp
   10cf7:	89 e5                	mov    %esp,%ebp
   10cf9:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    log_printf("mem init");
   10cfc:	83 ec 0c             	sub    $0xc,%esp
   10cff:	68 44 62 01 00       	push   $0x16244
   10d04:	e8 95 53 00 00       	call   1609e <log_printf>
   10d09:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d0c:	83 ec 0c             	sub    $0xc,%esp
   10d0f:	ff 75 08             	pushl  0x8(%ebp)
   10d12:	e8 f0 f7 ff ff       	call   10507 <show_mem_info>
   10d17:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10d1a:	c7 45 f4 00 5a 07 00 	movl   $0x75a00,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d21:	83 ec 0c             	sub    $0xc,%esp
   10d24:	ff 75 08             	pushl  0x8(%ebp)
   10d27:	e8 41 f8 ff ff       	call   1056d <total_mem_size>
   10d2c:	83 c4 10             	add    $0x10,%esp
   10d2f:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d34:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10d37:	83 ec 08             	sub    $0x8,%esp
   10d3a:	68 00 10 00 00       	push   $0x1000
   10d3f:	ff 75 f0             	pushl  -0x10(%ebp)
   10d42:	e8 e1 f5 ff ff       	call   10328 <down2>
   10d47:	83 c4 10             	add    $0x10,%esp
   10d4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x, size:0x%x", MEM_EXT_START, mem_up1MB_free);
   10d4d:	83 ec 04             	sub    $0x4,%esp
   10d50:	ff 75 f0             	pushl  -0x10(%ebp)
   10d53:	68 00 00 10 00       	push   $0x100000
   10d58:	68 4d 62 01 00       	push   $0x1624d
   10d5d:	e8 3c 53 00 00       	call   1609e <log_printf>
   10d62:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d65:	83 ec 0c             	sub    $0xc,%esp
   10d68:	68 00 10 00 00       	push   $0x1000
   10d6d:	ff 75 f0             	pushl  -0x10(%ebp)
   10d70:	68 00 00 10 00       	push   $0x100000
   10d75:	ff 75 f4             	pushl  -0xc(%ebp)
   10d78:	68 00 b0 01 00       	push   $0x1b000
   10d7d:	e8 64 f6 ff ff       	call   103e6 <addr_alloc_init>
   10d82:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE); // mem_free 跳过bit的地址
   10d85:	a1 24 b0 01 00       	mov    0x1b024,%eax
   10d8a:	c1 e8 0c             	shr    $0xc,%eax
   10d8d:	83 ec 0c             	sub    $0xc,%esp
   10d90:	50                   	push   %eax
   10d91:	e8 04 49 00 00       	call   1569a <bitmap_byte_count>
   10d96:	83 c4 10             	add    $0x10,%esp
   10d99:	01 45 f4             	add    %eax,-0xc(%ebp)
    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10d9c:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10da3:	76 1c                	jbe    10dc1 <memory_init+0xcb>
   10da5:	68 6c 62 01 00       	push   $0x1626c
   10daa:	68 04 63 01 00       	push   $0x16304
   10daf:	68 d6 01 00 00       	push   $0x1d6
   10db4:	68 94 61 01 00       	push   $0x16194
   10db9:	e8 10 50 00 00       	call   15dce <panic>
   10dbe:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10dc1:	e8 1f f9 ff ff       	call   106e5 <create_kernel_table>
    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10dc6:	b8 00 c0 01 00       	mov    $0x1c000,%eax
   10dcb:	83 ec 0c             	sub    $0xc,%esp
   10dce:	50                   	push   %eax
   10dcf:	e8 ee f5 ff ff       	call   103c2 <mmu_set_page_dir>
   10dd4:	83 c4 10             	add    $0x10,%esp
    // {
    //     addr_free_page(&addr_alloc, addr, 2);
    //     addr += 4096 * 2;
    //     log_printf("alloc addr: 0x%x", addr);
    // }
}
   10dd7:	90                   	nop
   10dd8:	c9                   	leave  
   10dd9:	c3                   	ret    

00010dda <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char *sys_sbrk(int incr)
{
   10dda:	55                   	push   %ebp
   10ddb:	89 e5                	mov    %esp,%ebp
   10ddd:	83 ec 38             	sub    $0x38,%esp
    task_t *task = task_current();
   10de0:	e8 9c 07 00 00       	call   11581 <task_current>
   10de5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char *pre_heap_end = (char *)task->heap_end;
   10de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10deb:	8b 40 30             	mov    0x30(%eax),%eax
   10dee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10df1:	8b 45 08             	mov    0x8(%ebp),%eax
   10df4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    ASSERT(incr >= 0);
   10df7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dfb:	79 1c                	jns    10e19 <sys_sbrk+0x3f>
   10dfd:	68 91 62 01 00       	push   $0x16291
   10e02:	68 10 63 01 00       	push   $0x16310
   10e07:	68 f7 01 00 00       	push   $0x1f7
   10e0c:	68 94 61 01 00       	push   $0x16194
   10e11:	e8 b8 4f 00 00       	call   15dce <panic>
   10e16:	83 c4 10             	add    $0x10,%esp
    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0)
   10e19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e1d:	75 1b                	jne    10e3a <sys_sbrk+0x60>
    {
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e1f:	83 ec 08             	sub    $0x8,%esp
   10e22:	ff 75 ec             	pushl  -0x14(%ebp)
   10e25:	68 9b 62 01 00       	push   $0x1629b
   10e2a:	e8 6f 52 00 00       	call   1609e <log_printf>
   10e2f:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e32:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e35:	e9 aa 00 00 00       	jmp    10ee4 <sys_sbrk+0x10a>
    }
    uint32_t start = task->heap_end;
   10e3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e3d:	8b 40 30             	mov    0x30(%eax),%eax
   10e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e43:	8b 55 08             	mov    0x8(%ebp),%edx
   10e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e49:	01 d0                	add    %edx,%eax
   10e4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e51:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e56:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset)
   10e59:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e5d:	74 37                	je     10e96 <sys_sbrk+0xbc>
    {
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE)
   10e5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	01 d0                	add    %edx,%eax
   10e67:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e6c:	7f 0e                	jg     10e7c <sys_sbrk+0xa2>
        {
            task->heap_end = end;
   10e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10e74:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10e77:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e7a:	eb 68                	jmp    10ee4 <sys_sbrk+0x10a>
        }
        else
        {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10e7c:	b8 00 10 00 00       	mov    $0x1000,%eax
   10e81:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10e84:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10e87:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10e8a:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e90:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10e93:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }
    // 处理其余的，起始对齐的页边界的
    if (incr)
   10e96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e9a:	74 3c                	je     10ed8 <sys_sbrk+0xfe>
    {
        uint32_t curr_size = end - start;
   10e9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e9f:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ea2:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ea5:	83 ec 04             	sub    $0x4,%esp
   10ea8:	6a 07                	push   $0x7
   10eaa:	ff 75 d8             	pushl  -0x28(%ebp)
   10ead:	ff 75 f4             	pushl  -0xc(%ebp)
   10eb0:	e8 1c fe ff ff       	call   10cd1 <memory_alloc_page_for>
   10eb5:	83 c4 10             	add    $0x10,%esp
   10eb8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0)
   10ebb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10ebf:	79 17                	jns    10ed8 <sys_sbrk+0xfe>
        {
            log_printf("sbrk: alloc mem failed.");
   10ec1:	83 ec 0c             	sub    $0xc,%esp
   10ec4:	68 af 62 01 00       	push   $0x162af
   10ec9:	e8 d0 51 00 00       	call   1609e <log_printf>
   10ece:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10ed1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ed6:	eb 0c                	jmp    10ee4 <sys_sbrk+0x10a>
        }
    }

    // log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10ed8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10edb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ede:	89 50 30             	mov    %edx,0x30(%eax)
    return (char *)pre_heap_end;
   10ee1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ee4:	c9                   	leave  
   10ee5:	c3                   	ret    

00010ee6 <sys_print_msg>:

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

void sys_print_msg(char *fmt, int arg)
{
   10ee6:	55                   	push   %ebp
   10ee7:	89 e5                	mov    %esp,%ebp
   10ee9:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10eec:	83 ec 08             	sub    $0x8,%esp
   10eef:	ff 75 0c             	pushl  0xc(%ebp)
   10ef2:	ff 75 08             	pushl  0x8(%ebp)
   10ef5:	e8 a4 51 00 00       	call   1609e <log_printf>
   10efa:	83 c4 10             	add    $0x10,%esp
}
   10efd:	90                   	nop
   10efe:	c9                   	leave  
   10eff:	c3                   	ret    

00010f00 <do_handler_syscall>:

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall(syscall_frame_t *frame)
{
   10f00:	55                   	push   %ebp
   10f01:	89 e5                	mov    %esp,%ebp
   10f03:	53                   	push   %ebx
   10f04:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0]))
   10f07:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0a:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f0d:	83 f8 64             	cmp    $0x64,%eax
   10f10:	77 4e                	ja     10f60 <do_handler_syscall+0x60>
    {
        // 查表取得处理函数，然后调用处理
        syscall_handler_t handler = sys_table[frame->func_id];
   10f12:	8b 45 08             	mov    0x8(%ebp),%eax
   10f15:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f18:	8b 04 85 20 63 01 00 	mov    0x16320(,%eax,4),%eax
   10f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler)
   10f22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f26:	74 38                	je     10f60 <do_handler_syscall+0x60>
        {
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f28:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2b:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f2e:	89 c3                	mov    %eax,%ebx
   10f30:	8b 45 08             	mov    0x8(%ebp),%eax
   10f33:	8b 40 48             	mov    0x48(%eax),%eax
   10f36:	89 c1                	mov    %eax,%ecx
   10f38:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3b:	8b 40 44             	mov    0x44(%eax),%eax
   10f3e:	89 c2                	mov    %eax,%edx
   10f40:	8b 45 08             	mov    0x8(%ebp),%eax
   10f43:	8b 40 40             	mov    0x40(%eax),%eax
   10f46:	53                   	push   %ebx
   10f47:	51                   	push   %ecx
   10f48:	52                   	push   %edx
   10f49:	50                   	push   %eax
   10f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f4d:	ff d0                	call   *%eax
   10f4f:	83 c4 10             	add    $0x10,%esp
   10f52:	89 45 f0             	mov    %eax,-0x10(%ebp)
            frame->eax = ret; // 设置系统调用的返回值，由eax传递
   10f55:	8b 45 08             	mov    0x8(%ebp),%eax
   10f58:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f5b:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f5e:	eb 30                	jmp    10f90 <do_handler_syscall+0x90>
        }
    }
    // 不支持的系统调用，打印出错信息
    task_t *task = task_current();
   10f60:	e8 1c 06 00 00       	call   11581 <task_current>
   10f65:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10f68:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6b:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f71:	83 c2 04             	add    $0x4,%edx
   10f74:	83 ec 04             	sub    $0x4,%esp
   10f77:	50                   	push   %eax
   10f78:	52                   	push   %edx
   10f79:	68 b4 64 01 00       	push   $0x164b4
   10f7e:	e8 1b 51 00 00       	call   1609e <log_printf>
   10f83:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1; // 设置系统调用的返回值，由eax传递
   10f86:	8b 45 08             	mov    0x8(%ebp),%eax
   10f89:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10f90:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f93:	c9                   	leave  
   10f94:	c3                   	ret    

00010f95 <list_node_init>:
/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node)
{
   10f95:	55                   	push   %ebp
   10f96:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10f98:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fa2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa5:	8b 50 04             	mov    0x4(%eax),%edx
   10fa8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fab:	89 10                	mov    %edx,(%eax)
}
   10fad:	90                   	nop
   10fae:	5d                   	pop    %ebp
   10faf:	c3                   	ret    

00010fb0 <list_node_next>:
 * 获取结点的后一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t *list_node_next(list_node_t *node)
{
   10fb0:	55                   	push   %ebp
   10fb1:	89 e5                	mov    %esp,%ebp
    return node->next;
   10fb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb6:	8b 40 04             	mov    0x4(%eax),%eax
}
   10fb9:	5d                   	pop    %ebp
   10fba:	c3                   	ret    

00010fbb <list_count>:
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list)
{
   10fbb:	55                   	push   %ebp
   10fbc:	89 e5                	mov    %esp,%ebp
    return list->count;
   10fbe:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc1:	8b 40 08             	mov    0x8(%eax),%eax
}
   10fc4:	5d                   	pop    %ebp
   10fc5:	c3                   	ret    

00010fc6 <list_first>:
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t *list_first(list_t *list)
{
   10fc6:	55                   	push   %ebp
   10fc7:	89 e5                	mov    %esp,%ebp
    return list->first;
   10fc9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fcc:	8b 00                	mov    (%eax),%eax
}
   10fce:	5d                   	pop    %ebp
   10fcf:	c3                   	ret    

00010fd0 <write_cr3>:
{
   10fd0:	55                   	push   %ebp
   10fd1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd6:	0f 22 d8             	mov    %eax,%cr3
}
   10fd9:	90                   	nop
   10fda:	5d                   	pop    %ebp
   10fdb:	c3                   	ret    

00010fdc <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   10fdc:	55                   	push   %ebp
   10fdd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fdf:	f4                   	hlt    
}
   10fe0:	90                   	nop
   10fe1:	5d                   	pop    %ebp
   10fe2:	c3                   	ret    

00010fe3 <write_tr>:

// 写tss register 当前运行那个进程
static inline void write_tr(uint32_t tss_selector)
{
   10fe3:	55                   	push   %ebp
   10fe4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   10fe6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe9:	0f 00 d8             	ltr    %ax
}
   10fec:	90                   	nop
   10fed:	5d                   	pop    %ebp
   10fee:	c3                   	ret    

00010fef <mmu_set_page_dir>:
{
   10fef:	55                   	push   %ebp
   10ff0:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10ff2:	ff 75 08             	pushl  0x8(%ebp)
   10ff5:	e8 d6 ff ff ff       	call   10fd0 <write_cr3>
   10ffa:	83 c4 04             	add    $0x4,%esp
}
   10ffd:	90                   	nop
   10ffe:	c9                   	leave  
   10fff:	c3                   	ret    

00011000 <tss_init>:
static task_manager_t task_manager; // 任务管理器
static task_t task_table[TASK_NR];
static mutex_t task_table_mutex;

static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   11000:	55                   	push   %ebp
   11001:	89 e5                	mov    %esp,%ebp
   11003:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = get_alloc_desc();
   11006:	e8 f5 15 00 00       	call   12600 <get_alloc_desc>
   1100b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   1100e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11012:	79 1a                	jns    1102e <tss_init+0x2e>
    {
        log_printf("alloc tss failed.\n");
   11014:	83 ec 0c             	sub    $0xc,%esp
   11017:	68 d4 64 01 00       	push   $0x164d4
   1101c:	e8 7d 50 00 00       	call   1609e <log_printf>
   11021:	83 c4 10             	add    $0x10,%esp
        return -1;
   11024:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11029:	e9 7b 01 00 00       	jmp    111a9 <tss_init+0x1a9>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS); // 设置GDT表项内容
   1102e:	8b 45 08             	mov    0x8(%ebp),%eax
   11031:	05 5c 02 00 00       	add    $0x25c,%eax
   11036:	68 89 00 00 00       	push   $0x89
   1103b:	6a 68                	push   $0x68
   1103d:	50                   	push   %eax
   1103e:	ff 75 ec             	pushl  -0x14(%ebp)
   11041:	e8 02 15 00 00       	call   12548 <segment_desc_set>
   11046:	83 c4 10             	add    $0x10,%esp

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11049:	8b 45 08             	mov    0x8(%ebp),%eax
   1104c:	05 5c 02 00 00       	add    $0x25c,%eax
   11051:	83 ec 04             	sub    $0x4,%esp
   11054:	6a 68                	push   $0x68
   11056:	6a 00                	push   $0x0
   11058:	50                   	push   %eax
   11059:	e8 47 4a 00 00       	call   15aa5 <kernel_memset>
   1105e:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   11061:	e8 b8 fb ff ff       	call   10c1e <memory_alloc_page>
   11066:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0)
   11069:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1106d:	0f 84 0b 01 00 00    	je     1117e <tss_init+0x17e>

    int code_sel, data_sel;
    // code_sel = task_manager.app_code_sel | SEG_CPL3;
    // data_sel = task_manager.app_data_sel | SEG_CPL3;
    // 根据不同的权限选择不同的访问选择子
    if (flag & TASK_FLAG_SYSTEM)
   11073:	8b 45 0c             	mov    0xc(%ebp),%eax
   11076:	83 e0 01             	and    $0x1,%eax
   11079:	85 c0                	test   %eax,%eax
   1107b:	74 10                	je     1108d <tss_init+0x8d>
    {
        code_sel = KERNEL_SELECTOR_CS;
   1107d:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   11084:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   1108b:	eb 16                	jmp    110a3 <tss_init+0xa3>
    }
    else
    {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_CPL3;
   1108d:	a1 b8 e5 01 00       	mov    0x1e5b8,%eax
   11092:	83 c8 03             	or     $0x3,%eax
   11095:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3;
   11098:	a1 bc e5 01 00       	mov    0x1e5bc,%eax
   1109d:	83 c8 03             	or     $0x3,%eax
   110a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   110a3:	8b 45 08             	mov    0x8(%ebp),%eax
   110a6:	8b 55 10             	mov    0x10(%ebp),%edx
   110a9:	89 90 7c 02 00 00    	mov    %edx,0x27c(%eax)
    // task->tss.esp = task->tss.esp0 = esp;
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; // 未指定栈则用内核栈，即运行在特权级0的进程
   110af:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110b3:	75 0a                	jne    110bf <tss_init+0xbf>
   110b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110b8:	05 00 10 00 00       	add    $0x1000,%eax
   110bd:	eb 03                	jmp    110c2 <tss_init+0xc2>
   110bf:	8b 45 14             	mov    0x14(%ebp),%eax
   110c2:	8b 55 08             	mov    0x8(%ebp),%edx
   110c5:	89 82 94 02 00 00    	mov    %eax,0x294(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110ce:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   110d4:	8b 45 08             	mov    0x8(%ebp),%eax
   110d7:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    task->tss.ss = data_sel;            // 特权3
   110dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110e0:	8b 45 08             	mov    0x8(%ebp),%eax
   110e3:	89 90 ac 02 00 00    	mov    %edx,0x2ac(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; // 特权0
   110e9:	8b 45 08             	mov    0x8(%ebp),%eax
   110ec:	c7 80 64 02 00 00 10 	movl   $0x10,0x264(%eax)
   110f3:	00 00 00 
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   110f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110f9:	8b 45 08             	mov    0x8(%ebp),%eax
   110fc:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%eax)
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	8b 90 b8 02 00 00    	mov    0x2b8(%eax),%edx
   1110b:	8b 45 08             	mov    0x8(%ebp),%eax
   1110e:	89 90 b4 02 00 00    	mov    %edx,0x2b4(%eax)
   11114:	8b 45 08             	mov    0x8(%ebp),%eax
   11117:	8b 90 b4 02 00 00    	mov    0x2b4(%eax),%edx
   1111d:	8b 45 08             	mov    0x8(%ebp),%eax
   11120:	89 90 b0 02 00 00    	mov    %edx,0x2b0(%eax)
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	8b 90 b0 02 00 00    	mov    0x2b0(%eax),%edx
   1112f:	8b 45 08             	mov    0x8(%ebp),%eax
   11132:	89 90 a4 02 00 00    	mov    %edx,0x2a4(%eax)
    task->tss.cs = code_sel;
   11138:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   11144:	8b 45 08             	mov    0x8(%ebp),%eax
   11147:	c7 80 80 02 00 00 02 	movl   $0x202,0x280(%eax)
   1114e:	02 00 00 

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   11151:	e8 4a f6 ff ff       	call   107a0 <memory_create_uvm>
   11156:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0)
   11159:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1115d:	74 22                	je     11181 <tss_init+0x181>
    {
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   1115f:	8b 45 08             	mov    0x8(%ebp),%eax
   11162:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11165:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
    task->tss_sel = tss_sel;
   1116b:	8b 45 08             	mov    0x8(%ebp),%eax
   1116e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11171:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
    return 0;
   11177:	b8 00 00 00 00       	mov    $0x0,%eax
   1117c:	eb 2b                	jmp    111a9 <tss_init+0x1a9>
        goto tss_init_failed;
   1117e:	90                   	nop
   1117f:	eb 01                	jmp    11182 <tss_init+0x182>
        goto tss_init_failed;
   11181:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   11182:	83 ec 0c             	sub    $0xc,%esp
   11185:	ff 75 ec             	pushl  -0x14(%ebp)
   11188:	e8 3a 14 00 00       	call   125c7 <gdt_free_sel>
   1118d:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack)
   11190:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11194:	74 0e                	je     111a4 <tss_init+0x1a4>
    {
        memory_free_page(kernel_stack);
   11196:	83 ec 0c             	sub    $0xc,%esp
   11199:	ff 75 e8             	pushl  -0x18(%ebp)
   1119c:	e8 97 fa ff ff       	call   10c38 <memory_free_page>
   111a1:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111a9:	c9                   	leave  
   111aa:	c3                   	ret    

000111ab <task_init>:

int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   111ab:	55                   	push   %ebp
   111ac:	89 e5                	mov    %esp,%ebp
   111ae:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   111b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111b5:	75 19                	jne    111d0 <task_init+0x25>
   111b7:	68 e7 64 01 00       	push   $0x164e7
   111bc:	68 6c 66 01 00       	push   $0x1666c
   111c1:	6a 57                	push   $0x57
   111c3:	68 fc 64 01 00       	push   $0x164fc
   111c8:	e8 01 4c 00 00       	call   15dce <panic>
   111cd:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   111d0:	ff 75 18             	pushl  0x18(%ebp)
   111d3:	ff 75 14             	pushl  0x14(%ebp)
   111d6:	ff 75 10             	pushl  0x10(%ebp)
   111d9:	ff 75 08             	pushl  0x8(%ebp)
   111dc:	e8 1f fe ff ff       	call   11000 <tss_init>
   111e1:	83 c4 10             	add    $0x10,%esp
   111e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   111e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111eb:	79 18                	jns    11205 <task_init+0x5a>
    {
        log_printf("init task failed.\n");
   111ed:	83 ec 0c             	sub    $0xc,%esp
   111f0:	68 36 65 01 00       	push   $0x16536
   111f5:	e8 a4 4e 00 00       	call   1609e <log_printf>
   111fa:	83 c4 10             	add    $0x10,%esp
        return err;
   111fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11200:	e9 e8 00 00 00       	jmp    112ed <task_init+0x142>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11205:	8b 45 08             	mov    0x8(%ebp),%eax
   11208:	83 c0 04             	add    $0x4,%eax
   1120b:	83 ec 04             	sub    $0x4,%esp
   1120e:	6a 20                	push   $0x20
   11210:	ff 75 0c             	pushl  0xc(%ebp)
   11213:	50                   	push   %eax
   11214:	e8 14 47 00 00       	call   1592d <kernel_strncpy>
   11219:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1121c:	8b 45 08             	mov    0x8(%ebp),%eax
   1121f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   11225:	8b 45 08             	mov    0x8(%ebp),%eax
   11228:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    task->parent = (task_t *)0;
   1122f:	8b 45 08             	mov    0x8(%ebp),%eax
   11232:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   11239:	8b 45 08             	mov    0x8(%ebp),%eax
   1123c:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   11243:	8b 45 08             	mov    0x8(%ebp),%eax
   11246:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1124d:	8b 45 08             	mov    0x8(%ebp),%eax
   11250:	c7 40 38 0a 00 00 00 	movl   $0xa,0x38(%eax)
    task->slice_ticks = task->time_ticks;
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	8b 50 38             	mov    0x38(%eax),%edx
   1125d:	8b 45 08             	mov    0x8(%ebp),%eax
   11260:	89 50 3c             	mov    %edx,0x3c(%eax)
    list_node_init(&task->all_node);
   11263:	8b 45 08             	mov    0x8(%ebp),%eax
   11266:	83 c0 54             	add    $0x54,%eax
   11269:	83 ec 0c             	sub    $0xc,%esp
   1126c:	50                   	push   %eax
   1126d:	e8 23 fd ff ff       	call   10f95 <list_node_init>
   11272:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11275:	8b 45 08             	mov    0x8(%ebp),%eax
   11278:	83 c0 44             	add    $0x44,%eax
   1127b:	83 ec 0c             	sub    $0xc,%esp
   1127e:	50                   	push   %eax
   1127f:	e8 11 fd ff ff       	call   10f95 <list_node_init>
   11284:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   11287:	8b 45 08             	mov    0x8(%ebp),%eax
   1128a:	83 c0 4c             	add    $0x4c,%eax
   1128d:	83 ec 0c             	sub    $0xc,%esp
   11290:	50                   	push   %eax
   11291:	e8 ff fc ff ff       	call   10f95 <list_node_init>
   11296:	83 c4 10             	add    $0x10,%esp

    // 文件相关
    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   11299:	8b 45 08             	mov    0x8(%ebp),%eax
   1129c:	83 c0 5c             	add    $0x5c,%eax
   1129f:	83 ec 04             	sub    $0x4,%esp
   112a2:	68 00 02 00 00       	push   $0x200
   112a7:	6a 00                	push   $0x0
   112a9:	50                   	push   %eax
   112aa:	e8 f6 47 00 00       	call   15aa5 <kernel_memset>
   112af:	83 c4 10             	add    $0x10,%esp

    // 插入就绪队列中和所有的任务队列中
    irq_state_t state = irq_enter_protection();
   112b2:	e8 02 1e 00 00       	call   130b9 <irq_enter_protection>
   112b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task; // 使用地址，能唯一
   112ba:	8b 55 08             	mov    0x8(%ebp),%edx
   112bd:	8b 45 08             	mov    0x8(%ebp),%eax
   112c0:	89 50 24             	mov    %edx,0x24(%eax)
    // task_set_ready(task);
    list_insert_last(&task_manager.task_list, &task->all_node); // 插入所有task进队尾
   112c3:	8b 45 08             	mov    0x8(%ebp),%eax
   112c6:	83 c0 54             	add    $0x54,%eax
   112c9:	83 ec 08             	sub    $0x8,%esp
   112cc:	50                   	push   %eax
   112cd:	68 10 e0 01 00       	push   $0x1e010
   112d2:	e8 37 4c 00 00       	call   15f0e <list_insert_last>
   112d7:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   112da:	83 ec 0c             	sub    $0xc,%esp
   112dd:	ff 75 f0             	pushl  -0x10(%ebp)
   112e0:	e8 ec 1d 00 00       	call   130d1 <irq_leave_protection>
   112e5:	83 c4 10             	add    $0x10,%esp
    return 0;
   112e8:	b8 00 00 00 00       	mov    $0x0,%eax
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    // }
}
   112ed:	c9                   	leave  
   112ee:	c3                   	ret    

000112ef <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   112ef:	55                   	push   %ebp
   112f0:	89 e5                	mov    %esp,%ebp
   112f2:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   112f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   112f8:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
   112fe:	83 ec 0c             	sub    $0xc,%esp
   11301:	50                   	push   %eax
   11302:	e8 5e 14 00 00       	call   12765 <switch_to_tss>
   11307:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   1130a:	90                   	nop
   1130b:	c9                   	leave  
   1130c:	c3                   	ret    

0001130d <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t *task)
{
   1130d:	55                   	push   %ebp
   1130e:	89 e5                	mov    %esp,%ebp
   11310:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11313:	e8 a1 1d 00 00       	call   130b9 <irq_enter_protection>
   11318:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   1131b:	83 ec 0c             	sub    $0xc,%esp
   1131e:	ff 75 08             	pushl  0x8(%ebp)
   11321:	e8 fc 01 00 00       	call   11522 <task_set_ready>
   11326:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11329:	83 ec 0c             	sub    $0xc,%esp
   1132c:	ff 75 f4             	pushl  -0xc(%ebp)
   1132f:	e8 9d 1d 00 00       	call   130d1 <irq_leave_protection>
   11334:	83 c4 10             	add    $0x10,%esp
}
   11337:	90                   	nop
   11338:	c9                   	leave  
   11339:	c3                   	ret    

0001133a <task_first_init>:
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init(void)
{
   1133a:	55                   	push   %ebp
   1133b:	89 e5                	mov    %esp,%ebp
   1133d:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    // 以下获得的是bin文件在内存中的物理地址，起始和结束
    extern uint8_t s_first_task[], e_first_task[];
    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   11340:	ba 00 5a 07 00       	mov    $0x75a00,%edx
   11345:	b8 7c 56 07 00       	mov    $0x7567c,%eax
   1134a:	29 c2                	sub    %eax,%edx
   1134c:	89 d0                	mov    %edx,%eax
   1134e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   11351:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11358:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1135b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1135e:	72 1c                	jb     1137c <task_first_init+0x42>
   11360:	68 49 65 01 00       	push   $0x16549
   11365:	68 78 66 01 00       	push   $0x16678
   1136a:	68 a3 00 00 00       	push   $0xa3
   1136f:	68 fc 64 01 00       	push   $0x164fc
   11374:	e8 55 4a 00 00       	call   15dce <panic>
   11379:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1137c:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   11383:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11386:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11389:	01 d0                	add    %edx,%eax
   1138b:	83 ec 0c             	sub    $0xc,%esp
   1138e:	50                   	push   %eax
   1138f:	ff 75 ec             	pushl  -0x14(%ebp)
   11392:	6a 00                	push   $0x0
   11394:	68 60 65 01 00       	push   $0x16560
   11399:	68 28 e0 01 00       	push   $0x1e028
   1139e:	e8 08 fe ff ff       	call   111ab <task_init>
   113a3:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task; // 这里不对
   113a6:	b8 00 5a 07 00       	mov    $0x75a00,%eax
   113ab:	a3 54 e0 01 00       	mov    %eax,0x1e054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   113b0:	a1 54 e0 01 00       	mov    0x1e054,%eax
   113b5:	a3 58 e0 01 00       	mov    %eax,0x1e058

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   113ba:	a1 ec e2 01 00       	mov    0x1e2ec,%eax
   113bf:	83 ec 0c             	sub    $0xc,%esp
   113c2:	50                   	push   %eax
   113c3:	e8 1b fc ff ff       	call   10fe3 <write_tr>
   113c8:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   113cb:	c7 05 00 e0 01 00 28 	movl   $0x1e028,0x1e000
   113d2:	e0 01 00 

    // 切换页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   113d5:	a1 a0 e2 01 00       	mov    0x1e2a0,%eax
   113da:	83 ec 0c             	sub    $0xc,%esp
   113dd:	50                   	push   %eax
   113de:	e8 0c fc ff ff       	call   10fef <mmu_set_page_dir>
   113e3:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   113e6:	83 ec 04             	sub    $0x4,%esp
   113e9:	6a 07                	push   $0x7
   113eb:	ff 75 f0             	pushl  -0x10(%ebp)
   113ee:	ff 75 ec             	pushl  -0x14(%ebp)
   113f1:	e8 db f8 ff ff       	call   10cd1 <memory_alloc_page_for>
   113f6:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   113f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   113ff:	83 ec 04             	sub    $0x4,%esp
   11402:	52                   	push   %edx
   11403:	68 7c 56 07 00       	push   $0x7567c
   11408:	50                   	push   %eax
   11409:	e8 48 46 00 00       	call   15a56 <kernel_memcpy>
   1140e:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   11411:	83 ec 0c             	sub    $0xc,%esp
   11414:	68 28 e0 01 00       	push   $0x1e028
   11419:	e8 ef fe ff ff       	call   1130d <task_start>
   1141e:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    // write_tr(task_manager.first_task.tss_sel);
}
   11421:	90                   	nop
   11422:	c9                   	leave  
   11423:	c3                   	ret    

00011424 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t *task_first_task(void)
{
   11424:	55                   	push   %ebp
   11425:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11427:	b8 28 e0 01 00       	mov    $0x1e028,%eax
}
   1142c:	5d                   	pop    %ebp
   1142d:	c3                   	ret    

0001142e <idle_task_entry>:

static void idle_task_entry(void)
{
   1142e:	55                   	push   %ebp
   1142f:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        hlt();
   11431:	e8 a6 fb ff ff       	call   10fdc <hlt>
   11436:	eb f9                	jmp    11431 <idle_task_entry+0x3>

00011438 <task_manager_init>:
    }
}

void task_manager_init(void)
{
   11438:	55                   	push   %ebp
   11439:	89 e5                	mov    %esp,%ebp
   1143b:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1143e:	83 ec 04             	sub    $0x4,%esp
   11441:	68 00 64 01 00       	push   $0x16400
   11446:	6a 00                	push   $0x0
   11448:	68 c0 e5 01 00       	push   $0x1e5c0
   1144d:	e8 53 46 00 00       	call   15aa5 <kernel_memset>
   11452:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11455:	83 ec 0c             	sub    $0xc,%esp
   11458:	68 c0 49 03 00       	push   $0x349c0
   1145d:	e8 75 3f 00 00       	call   153d7 <mutex_init>
   11462:	83 c4 10             	add    $0x10,%esp

    int sel = get_alloc_desc();
   11465:	e8 96 11 00 00       	call   12600 <get_alloc_desc>
   1146a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1146d:	68 f2 40 00 00       	push   $0x40f2
   11472:	6a ff                	push   $0xffffffff
   11474:	6a 00                	push   $0x0
   11476:	ff 75 f4             	pushl  -0xc(%ebp)
   11479:	e8 ca 10 00 00       	call   12548 <segment_desc_set>
   1147e:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   11481:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11484:	a3 bc e5 01 00       	mov    %eax,0x1e5bc

    sel = get_alloc_desc();
   11489:	e8 72 11 00 00       	call   12600 <get_alloc_desc>
   1148e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11491:	68 fa 40 00 00       	push   $0x40fa
   11496:	6a ff                	push   $0xffffffff
   11498:	6a 00                	push   $0x0
   1149a:	ff 75 f4             	pushl  -0xc(%ebp)
   1149d:	e8 a6 10 00 00       	call   12548 <segment_desc_set>
   114a2:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   114a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114a8:	a3 b8 e5 01 00       	mov    %eax,0x1e5b8

    // 各队列初始化
    list_init(&task_manager.ready_list);
   114ad:	83 ec 0c             	sub    $0xc,%esp
   114b0:	68 04 e0 01 00       	push   $0x1e004
   114b5:	e8 d0 49 00 00       	call   15e8a <list_init>
   114ba:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   114bd:	83 ec 0c             	sub    $0xc,%esp
   114c0:	68 10 e0 01 00       	push   $0x1e010
   114c5:	e8 c0 49 00 00       	call   15e8a <list_init>
   114ca:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   114cd:	83 ec 0c             	sub    $0xc,%esp
   114d0:	68 1c e0 01 00       	push   $0x1e01c
   114d5:	e8 b0 49 00 00       	call   15e8a <list_init>
   114da:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   114dd:	c7 05 00 e0 01 00 00 	movl   $0x0,0x1e000
   114e4:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", TASK_FLAG_SYSTEM, (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + 1024);
   114e7:	b8 00 d0 01 00       	mov    $0x1d000,%eax
   114ec:	05 00 04 00 00       	add    $0x400,%eax
   114f1:	ba 2e 14 01 00       	mov    $0x1142e,%edx
   114f6:	83 ec 0c             	sub    $0xc,%esp
   114f9:	50                   	push   %eax
   114fa:	52                   	push   %edx
   114fb:	6a 01                	push   $0x1
   114fd:	68 6b 65 01 00       	push   $0x1656b
   11502:	68 f0 e2 01 00       	push   $0x1e2f0
   11507:	e8 9f fc ff ff       	call   111ab <task_init>
   1150c:	83 c4 20             	add    $0x20,%esp
    task_start(&task_manager.idle_task);
   1150f:	83 ec 0c             	sub    $0xc,%esp
   11512:	68 f0 e2 01 00       	push   $0x1e2f0
   11517:	e8 f1 fd ff ff       	call   1130d <task_start>
   1151c:	83 c4 10             	add    $0x10,%esp
}
   1151f:	90                   	nop
   11520:	c9                   	leave  
   11521:	c3                   	ret    

00011522 <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task)
{
   11522:	55                   	push   %ebp
   11523:	89 e5                	mov    %esp,%ebp
   11525:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   11528:	81 7d 08 f0 e2 01 00 	cmpl   $0x1e2f0,0x8(%ebp)
   1152f:	74 22                	je     11553 <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   11531:	8b 45 08             	mov    0x8(%ebp),%eax
   11534:	83 c0 44             	add    $0x44,%eax
   11537:	83 ec 08             	sub    $0x8,%esp
   1153a:	50                   	push   %eax
   1153b:	68 04 e0 01 00       	push   $0x1e004
   11540:	e8 c9 49 00 00       	call   15f0e <list_insert_last>
   11545:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11548:	8b 45 08             	mov    0x8(%ebp),%eax
   1154b:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   11551:	eb 01                	jmp    11554 <task_set_ready+0x32>
        return;
   11553:	90                   	nop
}
   11554:	c9                   	leave  
   11555:	c3                   	ret    

00011556 <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block(task_t *task)
{
   11556:	55                   	push   %ebp
   11557:	89 e5                	mov    %esp,%ebp
   11559:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   1155c:	81 7d 08 f0 e2 01 00 	cmpl   $0x1e2f0,0x8(%ebp)
   11563:	74 19                	je     1157e <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   11565:	8b 45 08             	mov    0x8(%ebp),%eax
   11568:	83 c0 44             	add    $0x44,%eax
   1156b:	83 ec 08             	sub    $0x8,%esp
   1156e:	50                   	push   %eax
   1156f:	68 04 e0 01 00       	push   $0x1e004
   11574:	e8 71 4a 00 00       	call   15fea <list_remove>
   11579:	83 c4 10             	add    $0x10,%esp
   1157c:	eb 01                	jmp    1157f <task_set_block+0x29>
        return;
   1157e:	90                   	nop
}
   1157f:	c9                   	leave  
   11580:	c3                   	ret    

00011581 <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t *task_current(void)
{
   11581:	55                   	push   %ebp
   11582:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11584:	a1 00 e0 01 00       	mov    0x1e000,%eax
}
   11589:	5d                   	pop    %ebp
   1158a:	c3                   	ret    

0001158b <sys_sched_yield>:

int sys_sched_yield(void)
{
   1158b:	55                   	push   %ebp
   1158c:	89 e5                	mov    %esp,%ebp
   1158e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11591:	e8 23 1b 00 00       	call   130b9 <irq_enter_protection>
   11596:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   11599:	83 ec 0c             	sub    $0xc,%esp
   1159c:	68 04 e0 01 00       	push   $0x1e004
   115a1:	e8 15 fa ff ff       	call   10fbb <list_count>
   115a6:	83 c4 10             	add    $0x10,%esp
   115a9:	83 f8 01             	cmp    $0x1,%eax
   115ac:	7e 29                	jle    115d7 <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current();
   115ae:	e8 ce ff ff ff       	call   11581 <task_current>
   115b3:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   115b6:	83 ec 0c             	sub    $0xc,%esp
   115b9:	ff 75 f0             	pushl  -0x10(%ebp)
   115bc:	e8 95 ff ff ff       	call   11556 <task_set_block>
   115c1:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   115c4:	83 ec 0c             	sub    $0xc,%esp
   115c7:	ff 75 f0             	pushl  -0x10(%ebp)
   115ca:	e8 53 ff ff ff       	call   11522 <task_set_ready>
   115cf:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   115d2:	e8 58 00 00 00       	call   1162f <task_dispatch>
    }
    irq_leave_protection(state);
   115d7:	83 ec 0c             	sub    $0xc,%esp
   115da:	ff 75 f4             	pushl  -0xc(%ebp)
   115dd:	e8 ef 1a 00 00       	call   130d1 <irq_leave_protection>
   115e2:	83 c4 10             	add    $0x10,%esp
    return 0;
   115e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   115ea:	c9                   	leave  
   115eb:	c3                   	ret    

000115ec <task_next_run>:

/**
 * @brief 获取下一将要运行的任务
 */
static task_t *task_next_run(void)
{
   115ec:	55                   	push   %ebp
   115ed:	89 e5                	mov    %esp,%ebp
   115ef:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   115f2:	68 04 e0 01 00       	push   $0x1e004
   115f7:	e8 bf f9 ff ff       	call   10fbb <list_count>
   115fc:	83 c4 04             	add    $0x4,%esp
   115ff:	85 c0                	test   %eax,%eax
   11601:	75 07                	jne    1160a <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   11603:	b8 f0 e2 01 00       	mov    $0x1e2f0,%eax
   11608:	eb 23                	jmp    1162d <task_next_run+0x41>
    }

    // 普通任务
    list_node_t *task_node = list_first(&task_manager.ready_list);
   1160a:	68 04 e0 01 00       	push   $0x1e004
   1160f:	e8 b2 f9 ff ff       	call   10fc6 <list_first>
   11614:	83 c4 04             	add    $0x4,%esp
   11617:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   1161a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1161e:	74 08                	je     11628 <task_next_run+0x3c>
   11620:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11623:	83 e8 44             	sub    $0x44,%eax
   11626:	eb 05                	jmp    1162d <task_next_run+0x41>
   11628:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1162d:	c9                   	leave  
   1162e:	c3                   	ret    

0001162f <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch(void)
{
   1162f:	55                   	push   %ebp
   11630:	89 e5                	mov    %esp,%ebp
   11632:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11635:	e8 7f 1a 00 00       	call   130b9 <irq_enter_protection>
   1163a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   1163d:	e8 aa ff ff ff       	call   115ec <task_next_run>
   11642:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task)
   11645:	a1 00 e0 01 00       	mov    0x1e000,%eax
   1164a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1164d:	74 2a                	je     11679 <task_dispatch+0x4a>
    {
        task_t *from = task_manager.curr_task;
   1164f:	a1 00 e0 01 00       	mov    0x1e000,%eax
   11654:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;
   11657:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1165a:	a3 00 e0 01 00       	mov    %eax,0x1e000
        to->state = TASK_RUNNING;
   1165f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11662:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   11668:	83 ec 08             	sub    $0x8,%esp
   1166b:	ff 75 f0             	pushl  -0x10(%ebp)
   1166e:	ff 75 ec             	pushl  -0x14(%ebp)
   11671:	e8 79 fc ff ff       	call   112ef <task_switch_from_to>
   11676:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   11679:	83 ec 0c             	sub    $0xc,%esp
   1167c:	ff 75 f4             	pushl  -0xc(%ebp)
   1167f:	e8 4d 1a 00 00       	call   130d1 <irq_leave_protection>
   11684:	83 c4 10             	add    $0x10,%esp
}
   11687:	90                   	nop
   11688:	c9                   	leave  
   11689:	c3                   	ret    

0001168a <task_time_tick>:
/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick(void)
{
   1168a:	55                   	push   %ebp
   1168b:	89 e5                	mov    %esp,%ebp
   1168d:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   11690:	e8 ec fe ff ff       	call   11581 <task_current>
   11695:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_state_t state = irq_enter_protection();
   11698:	e8 1c 1a 00 00       	call   130b9 <irq_enter_protection>
   1169d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0)
   116a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116a3:	8b 40 3c             	mov    0x3c(%eax),%eax
   116a6:	8d 50 ff             	lea    -0x1(%eax),%edx
   116a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116ac:	89 50 3c             	mov    %edx,0x3c(%eax)
   116af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116b2:	8b 40 3c             	mov    0x3c(%eax),%eax
   116b5:	85 c0                	test   %eax,%eax
   116b7:	75 28                	jne    116e1 <task_time_tick+0x57>
    {
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_ticks;
   116b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116bc:	8b 50 38             	mov    0x38(%eax),%edx
   116bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116c2:	89 50 3c             	mov    %edx,0x3c(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   116c5:	83 ec 0c             	sub    $0xc,%esp
   116c8:	ff 75 f0             	pushl  -0x10(%ebp)
   116cb:	e8 86 fe ff ff       	call   11556 <task_set_block>
   116d0:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   116d3:	83 ec 0c             	sub    $0xc,%esp
   116d6:	ff 75 f0             	pushl  -0x10(%ebp)
   116d9:	e8 44 fe ff ff       	call   11522 <task_set_ready>
   116de:	83 c4 10             	add    $0x10,%esp
    }

    // 睡眠处理
    list_node_t *curr = list_first(&task_manager.sleep_list);
   116e1:	83 ec 0c             	sub    $0xc,%esp
   116e4:	68 1c e0 01 00       	push   $0x1e01c
   116e9:	e8 d8 f8 ff ff       	call   10fc6 <list_first>
   116ee:	83 c4 10             	add    $0x10,%esp
   116f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   116f4:	eb 62                	jmp    11758 <task_time_tick+0xce>
    {
        list_node_t *next = list_node_next(curr);
   116f6:	83 ec 0c             	sub    $0xc,%esp
   116f9:	ff 75 f4             	pushl  -0xc(%ebp)
   116fc:	e8 af f8 ff ff       	call   10fb0 <list_node_next>
   11701:	83 c4 10             	add    $0x10,%esp
   11704:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t *task = list_node_parent(curr, task_t, run_node);
   11707:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1170b:	74 08                	je     11715 <task_time_tick+0x8b>
   1170d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11710:	83 e8 44             	sub    $0x44,%eax
   11713:	eb 05                	jmp    1171a <task_time_tick+0x90>
   11715:	b8 00 00 00 00       	mov    $0x0,%eax
   1171a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   1171d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11720:	8b 40 34             	mov    0x34(%eax),%eax
   11723:	8d 50 ff             	lea    -0x1(%eax),%edx
   11726:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11729:	89 50 34             	mov    %edx,0x34(%eax)
   1172c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1172f:	8b 40 34             	mov    0x34(%eax),%eax
   11732:	85 c0                	test   %eax,%eax
   11734:	75 1c                	jne    11752 <task_time_tick+0xc8>
        {
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   11736:	83 ec 0c             	sub    $0xc,%esp
   11739:	ff 75 e4             	pushl  -0x1c(%ebp)
   1173c:	e8 6d 00 00 00       	call   117ae <task_set_wakeup>
   11741:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11744:	83 ec 0c             	sub    $0xc,%esp
   11747:	ff 75 e4             	pushl  -0x1c(%ebp)
   1174a:	e8 d3 fd ff ff       	call   11522 <task_set_ready>
   1174f:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11752:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11755:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11758:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1175c:	75 98                	jne    116f6 <task_time_tick+0x6c>
    }
    task_dispatch();
   1175e:	e8 cc fe ff ff       	call   1162f <task_dispatch>
    irq_leave_protection(state);
   11763:	83 ec 0c             	sub    $0xc,%esp
   11766:	ff 75 ec             	pushl  -0x14(%ebp)
   11769:	e8 63 19 00 00       	call   130d1 <irq_leave_protection>
   1176e:	83 c4 10             	add    $0x10,%esp
}
   11771:	90                   	nop
   11772:	c9                   	leave  
   11773:	c3                   	ret    

00011774 <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   11774:	55                   	push   %ebp
   11775:	89 e5                	mov    %esp,%ebp
   11777:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   1177a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1177e:	74 2b                	je     117ab <task_set_sleep+0x37>
    {
        return;
    }

    task->sleep_ticks = ticks;
   11780:	8b 55 0c             	mov    0xc(%ebp),%edx
   11783:	8b 45 08             	mov    0x8(%ebp),%eax
   11786:	89 50 34             	mov    %edx,0x34(%eax)
    task->state = TASK_SLEEP;
   11789:	8b 45 08             	mov    0x8(%ebp),%eax
   1178c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   11792:	8b 45 08             	mov    0x8(%ebp),%eax
   11795:	83 c0 44             	add    $0x44,%eax
   11798:	83 ec 08             	sub    $0x8,%esp
   1179b:	50                   	push   %eax
   1179c:	68 1c e0 01 00       	push   $0x1e01c
   117a1:	e8 68 47 00 00       	call   15f0e <list_insert_last>
   117a6:	83 c4 10             	add    $0x10,%esp
   117a9:	eb 01                	jmp    117ac <task_set_sleep+0x38>
        return;
   117ab:	90                   	nop
}
   117ac:	c9                   	leave  
   117ad:	c3                   	ret    

000117ae <task_set_wakeup>:
 * @brief 将任务从延时队列移除
 *
 * @param task
 */
void task_set_wakeup(task_t *task)
{
   117ae:	55                   	push   %ebp
   117af:	89 e5                	mov    %esp,%ebp
   117b1:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   117b4:	8b 45 08             	mov    0x8(%ebp),%eax
   117b7:	83 c0 44             	add    $0x44,%eax
   117ba:	83 ec 08             	sub    $0x8,%esp
   117bd:	50                   	push   %eax
   117be:	68 1c e0 01 00       	push   $0x1e01c
   117c3:	e8 22 48 00 00       	call   15fea <list_remove>
   117c8:	83 c4 10             	add    $0x10,%esp
}
   117cb:	90                   	nop
   117cc:	c9                   	leave  
   117cd:	c3                   	ret    

000117ce <sys_msleep>:
 * @brief 任务进入睡眠状态
 *
 * @param ms
 */
void sys_msleep(uint32_t ms)
{
   117ce:	55                   	push   %ebp
   117cf:	89 e5                	mov    %esp,%ebp
   117d1:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   117d4:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   117d8:	77 07                	ja     117e1 <sys_msleep+0x13>
    {
        ms = OS_TICK_MS;
   117da:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   117e1:	e8 d3 18 00 00       	call   130b9 <irq_enter_protection>
   117e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   117e9:	a1 00 e0 01 00       	mov    0x1e000,%eax
   117ee:	83 ec 0c             	sub    $0xc,%esp
   117f1:	50                   	push   %eax
   117f2:	e8 5f fd ff ff       	call   11556 <task_set_block>
   117f7:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   117fa:	8b 45 08             	mov    0x8(%ebp),%eax
   117fd:	83 c0 09             	add    $0x9,%eax
   11800:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11805:	f7 e2                	mul    %edx
   11807:	c1 ea 03             	shr    $0x3,%edx
   1180a:	a1 00 e0 01 00       	mov    0x1e000,%eax
   1180f:	83 ec 08             	sub    $0x8,%esp
   11812:	52                   	push   %edx
   11813:	50                   	push   %eax
   11814:	e8 5b ff ff ff       	call   11774 <task_set_sleep>
   11819:	83 c4 10             	add    $0x10,%esp

    // 进行一次调度
    task_dispatch();
   1181c:	e8 0e fe ff ff       	call   1162f <task_dispatch>

    irq_leave_protection(state);
   11821:	83 ec 0c             	sub    $0xc,%esp
   11824:	ff 75 f4             	pushl  -0xc(%ebp)
   11827:	e8 a5 18 00 00       	call   130d1 <irq_leave_protection>
   1182c:	83 c4 10             	add    $0x10,%esp
}
   1182f:	90                   	nop
   11830:	c9                   	leave  
   11831:	c3                   	ret    

00011832 <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t *alloc_task(void)
{
   11832:	55                   	push   %ebp
   11833:	89 e5                	mov    %esp,%ebp
   11835:	83 ec 18             	sub    $0x18,%esp
    task_t *task = (task_t *)0;
   11838:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   1183f:	83 ec 0c             	sub    $0xc,%esp
   11842:	68 c0 49 03 00       	push   $0x349c0
   11847:	e8 b9 3b 00 00       	call   15405 <mutex_lock>
   1184c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++)
   1184f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11856:	eb 28                	jmp    11880 <alloc_task+0x4e>
    {
        task_t *curr = task_table + i;
   11858:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1185b:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11861:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   11866:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == '\0')
   11869:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1186c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   11870:	84 c0                	test   %al,%al
   11872:	75 08                	jne    1187c <alloc_task+0x4a>
        {
            task = curr;
   11874:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11877:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1187a:	eb 0a                	jmp    11886 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++)
   1187c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11880:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11884:	7e d2                	jle    11858 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   11886:	83 ec 0c             	sub    $0xc,%esp
   11889:	68 c0 49 03 00       	push   $0x349c0
   1188e:	e8 06 3c 00 00       	call   15499 <mutex_unlock>
   11893:	83 c4 10             	add    $0x10,%esp

    return task;
   11896:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11899:	c9                   	leave  
   1189a:	c3                   	ret    

0001189b <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task(task_t *task)
{
   1189b:	55                   	push   %ebp
   1189c:	89 e5                	mov    %esp,%ebp
   1189e:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   118a1:	83 ec 0c             	sub    $0xc,%esp
   118a4:	68 c0 49 03 00       	push   $0x349c0
   118a9:	e8 57 3b 00 00       	call   15405 <mutex_lock>
   118ae:	83 c4 10             	add    $0x10,%esp
    task->name[0] = '\0';
   118b1:	8b 45 08             	mov    0x8(%ebp),%eax
   118b4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   118b8:	83 ec 0c             	sub    $0xc,%esp
   118bb:	68 c0 49 03 00       	push   $0x349c0
   118c0:	e8 d4 3b 00 00       	call   15499 <mutex_unlock>
   118c5:	83 c4 10             	add    $0x10,%esp
}
   118c8:	90                   	nop
   118c9:	c9                   	leave  
   118ca:	c3                   	ret    

000118cb <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid(void)
{
   118cb:	55                   	push   %ebp
   118cc:	89 e5                	mov    %esp,%ebp
   118ce:	83 ec 10             	sub    $0x10,%esp
    task_t *curr_task = task_current();
   118d1:	e8 ab fc ff ff       	call   11581 <task_current>
   118d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   118d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118dc:	8b 40 24             	mov    0x24(%eax),%eax
}
   118df:	c9                   	leave  
   118e0:	c3                   	ret    

000118e1 <task_uninit>:

/**
 * @brief 任务初始时分配的各项资源
 */
void task_uninit(task_t *task)
{
   118e1:	55                   	push   %ebp
   118e2:	89 e5                	mov    %esp,%ebp
   118e4:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel)
   118e7:	8b 45 08             	mov    0x8(%ebp),%eax
   118ea:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
   118f0:	85 c0                	test   %eax,%eax
   118f2:	74 15                	je     11909 <task_uninit+0x28>
    {
        gdt_free_sel(task->tss_sel);
   118f4:	8b 45 08             	mov    0x8(%ebp),%eax
   118f7:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
   118fd:	83 ec 0c             	sub    $0xc,%esp
   11900:	50                   	push   %eax
   11901:	e8 c1 0c 00 00       	call   125c7 <gdt_free_sel>
   11906:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0)
   11909:	8b 45 08             	mov    0x8(%ebp),%eax
   1190c:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11912:	85 c0                	test   %eax,%eax
   11914:	74 1a                	je     11930 <task_uninit+0x4f>
    {
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   11916:	8b 45 08             	mov    0x8(%ebp),%eax
   11919:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   1191f:	2d 00 10 00 00       	sub    $0x1000,%eax
   11924:	83 ec 0c             	sub    $0xc,%esp
   11927:	50                   	push   %eax
   11928:	e8 0b f3 ff ff       	call   10c38 <memory_free_page>
   1192d:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3)
   11930:	8b 45 08             	mov    0x8(%ebp),%eax
   11933:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   11939:	85 c0                	test   %eax,%eax
   1193b:	74 15                	je     11952 <task_uninit+0x71>
    {
        memory_destroy_uvm(task->tss.cr3);
   1193d:	8b 45 08             	mov    0x8(%ebp),%eax
   11940:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   11946:	83 ec 0c             	sub    $0xc,%esp
   11949:	50                   	push   %eax
   1194a:	e8 d6 ee ff ff       	call   10825 <memory_destroy_uvm>
   1194f:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   11952:	83 ec 04             	sub    $0x4,%esp
   11955:	68 c8 02 00 00       	push   $0x2c8
   1195a:	6a 00                	push   $0x0
   1195c:	ff 75 08             	pushl  0x8(%ebp)
   1195f:	e8 41 41 00 00       	call   15aa5 <kernel_memset>
   11964:	83 c4 10             	add    $0x10,%esp
}
   11967:	90                   	nop
   11968:	c9                   	leave  
   11969:	c3                   	ret    

0001196a <copy_opened_files>:

/**
 * @brief 从当前进程中拷贝已经打开的文件列表
 */
static void copy_opened_files(task_t *child_task)
{
   1196a:	55                   	push   %ebp
   1196b:	89 e5                	mov    %esp,%ebp
   1196d:	83 ec 18             	sub    $0x18,%esp
    task_t *parent = task_current();
   11970:	e8 0c fc ff ff       	call   11581 <task_current>
   11975:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++)
   11978:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1197f:	eb 42                	jmp    119c3 <copy_opened_files+0x59>
    {
        file_t *file = parent->file_table[i];
   11981:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11984:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11987:	83 c2 14             	add    $0x14,%edx
   1198a:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
   1198e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (file)
   11991:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11995:	74 28                	je     119bf <copy_opened_files+0x55>
        {
            file_inc_ref(file);
   11997:	83 ec 0c             	sub    $0xc,%esp
   1199a:	ff 75 ec             	pushl  -0x14(%ebp)
   1199d:	e8 d9 33 00 00       	call   14d7b <file_inc_ref>
   119a2:	83 c4 10             	add    $0x10,%esp
            child_task->file_table[i] = parent->file_table[i];
   119a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119a8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   119ab:	83 c2 14             	add    $0x14,%edx
   119ae:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
   119b2:	8b 45 08             	mov    0x8(%ebp),%eax
   119b5:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   119b8:	83 c1 14             	add    $0x14,%ecx
   119bb:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
    for (int i = 0; i < TASK_OFILE_NR; i++)
   119bf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   119c3:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   119c7:	7e b8                	jle    11981 <copy_opened_files+0x17>
        }
    }
}
   119c9:	90                   	nop
   119ca:	c9                   	leave  
   119cb:	c3                   	ret    

000119cc <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork(void)
{
   119cc:	55                   	push   %ebp
   119cd:	89 e5                	mov    %esp,%ebp
   119cf:	83 ec 28             	sub    $0x28,%esp
    task_t *parent_task = task_current();
   119d2:	e8 aa fb ff ff       	call   11581 <task_current>
   119d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *child_task = alloc_task();
   119da:	e8 53 fe ff ff       	call   11832 <alloc_task>
   119df:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0)
   119e2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   119e6:	0f 84 4f 01 00 00    	je     11b3b <sys_fork+0x16f>
    {
        goto fork_failed;
    }
    syscall_frame_t *frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t)); // 拿到父进程的寄存器
   119ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119ef:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   119f5:	83 e8 58             	sub    $0x58,%eax
   119f8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT);
   119fb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119fe:	8b 40 50             	mov    0x50(%eax),%eax
   11a01:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
   11a04:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a07:	8b 40 34             	mov    0x34(%eax),%eax
   11a0a:	89 c1                	mov    %eax,%ecx
   11a0c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a0f:	83 c0 04             	add    $0x4,%eax
   11a12:	83 ec 0c             	sub    $0xc,%esp
   11a15:	52                   	push   %edx
   11a16:	51                   	push   %ecx
   11a17:	6a 00                	push   $0x0
   11a19:	50                   	push   %eax
   11a1a:	ff 75 f0             	pushl  -0x10(%ebp)
   11a1d:	e8 89 f7 ff ff       	call   111ab <task_init>
   11a22:	83 c4 20             	add    $0x20,%esp
   11a25:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11a28:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11a2c:	0f 88 0c 01 00 00    	js     11b3e <sys_fork+0x172>
    {
        goto fork_failed;
    }

    // 拷贝打开的文件
    copy_opened_files(child_task);
   11a32:	83 ec 0c             	sub    $0xc,%esp
   11a35:	ff 75 f0             	pushl  -0x10(%ebp)
   11a38:	e8 2d ff ff ff       	call   1196a <copy_opened_files>
   11a3d:	83 c4 10             	add    $0x10,%esp

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t *tss = &child_task->tss;
   11a40:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a43:	05 5c 02 00 00       	add    $0x25c,%eax
   11a48:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0; // 子进程返回0
   11a4b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a4e:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11a55:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a58:	8b 40 24             	mov    0x24(%eax),%eax
   11a5b:	89 c2                	mov    %eax,%edx
   11a5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a60:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11a63:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a66:	8b 40 2c             	mov    0x2c(%eax),%eax
   11a69:	89 c2                	mov    %eax,%edx
   11a6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a6e:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11a71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a74:	8b 40 28             	mov    0x28(%eax),%eax
   11a77:	89 c2                	mov    %eax,%edx
   11a79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a7c:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11a7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a82:	8b 40 18             	mov    0x18(%eax),%eax
   11a85:	89 c2                	mov    %eax,%edx
   11a87:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a8a:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11a8d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a90:	8b 40 14             	mov    0x14(%eax),%eax
   11a93:	89 c2                	mov    %eax,%edx
   11a95:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a98:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11a9b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a9e:	8b 40 1c             	mov    0x1c(%eax),%eax
   11aa1:	89 c2                	mov    %eax,%edx
   11aa3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aa6:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11aa9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aac:	8b 40 38             	mov    0x38(%eax),%eax
   11aaf:	89 c2                	mov    %eax,%edx
   11ab1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ab4:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11ab7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aba:	8b 40 10             	mov    0x10(%eax),%eax
   11abd:	89 c2                	mov    %eax,%edx
   11abf:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ac2:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11ac5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ac8:	8b 40 0c             	mov    0xc(%eax),%eax
   11acb:	89 c2                	mov    %eax,%edx
   11acd:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ad0:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11ad3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ad6:	8b 40 08             	mov    0x8(%eax),%eax
   11ad9:	89 c2                	mov    %eax,%edx
   11adb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ade:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11ae1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ae4:	8b 40 04             	mov    0x4(%eax),%eax
   11ae7:	89 c2                	mov    %eax,%edx
   11ae9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aec:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11aef:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11af2:	8b 00                	mov    (%eax),%eax
   11af4:	89 c2                	mov    %eax,%edx
   11af6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11af9:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11afc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aff:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b02:	89 50 28             	mov    %edx,0x28(%eax)
    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0)
   11b05:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b08:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   11b0e:	83 ec 0c             	sub    $0xc,%esp
   11b11:	50                   	push   %eax
   11b12:	e8 1d ee ff ff       	call   10934 <memory_copy_uvm>
   11b17:	83 c4 10             	add    $0x10,%esp
   11b1a:	89 c2                	mov    %eax,%edx
   11b1c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b1f:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
    {
        goto fork_failed;
    }
    // 创建成功，返回子进程的pid
    task_start(child_task);
   11b25:	83 ec 0c             	sub    $0xc,%esp
   11b28:	ff 75 f0             	pushl  -0x10(%ebp)
   11b2b:	e8 dd f7 ff ff       	call   1130d <task_start>
   11b30:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11b33:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b36:	8b 40 24             	mov    0x24(%eax),%eax
   11b39:	eb 2b                	jmp    11b66 <sys_fork+0x19a>
        goto fork_failed;
   11b3b:	90                   	nop
   11b3c:	eb 01                	jmp    11b3f <sys_fork+0x173>
        goto fork_failed;
   11b3e:	90                   	nop
fork_failed:
    if (child_task)
   11b3f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b43:	74 1c                	je     11b61 <sys_fork+0x195>
    {
        task_uninit(child_task);
   11b45:	83 ec 0c             	sub    $0xc,%esp
   11b48:	ff 75 f0             	pushl  -0x10(%ebp)
   11b4b:	e8 91 fd ff ff       	call   118e1 <task_uninit>
   11b50:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11b53:	83 ec 0c             	sub    $0xc,%esp
   11b56:	ff 75 f0             	pushl  -0x10(%ebp)
   11b59:	e8 3d fd ff ff       	call   1189b <free_task>
   11b5e:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11b61:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11b66:	c9                   	leave  
   11b67:	c3                   	ret    

00011b68 <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr *phdr, uint32_t page_dir)
{
   11b68:	55                   	push   %ebp
   11b69:	89 e5                	mov    %esp,%ebp
   11b6b:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11b6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b71:	8b 40 08             	mov    0x8(%eax),%eax
   11b74:	25 ff 0f 00 00       	and    $0xfff,%eax
   11b79:	85 c0                	test   %eax,%eax
   11b7b:	74 1c                	je     11b99 <load_phdr+0x31>
   11b7d:	68 78 65 01 00       	push   $0x16578
   11b82:	68 88 66 01 00       	push   $0x16688
   11b87:	68 28 02 00 00       	push   $0x228
   11b8c:	68 fc 64 01 00       	push   $0x164fc
   11b91:	e8 38 42 00 00       	call   15dce <panic>
   11b96:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11b99:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b9c:	8b 50 14             	mov    0x14(%eax),%edx
   11b9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ba2:	8b 40 08             	mov    0x8(%eax),%eax
   11ba5:	6a 07                	push   $0x7
   11ba7:	52                   	push   %edx
   11ba8:	50                   	push   %eax
   11ba9:	ff 75 10             	pushl  0x10(%ebp)
   11bac:	e8 a1 ef ff ff       	call   10b52 <memory_alloc_for_page_dir>
   11bb1:	83 c4 10             	add    $0x10,%esp
   11bb4:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   11bb7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11bbb:	79 1a                	jns    11bd7 <load_phdr+0x6f>
    {
        log_printf("no memory");
   11bbd:	83 ec 0c             	sub    $0xc,%esp
   11bc0:	68 a3 65 01 00       	push   $0x165a3
   11bc5:	e8 d4 44 00 00       	call   1609e <log_printf>
   11bca:	83 c4 10             	add    $0x10,%esp
        return -1;
   11bcd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bd2:	e9 b8 00 00 00       	jmp    11c8f <load_phdr+0x127>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0)
   11bd7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bda:	8b 40 04             	mov    0x4(%eax),%eax
   11bdd:	83 ec 04             	sub    $0x4,%esp
   11be0:	6a 00                	push   $0x0
   11be2:	50                   	push   %eax
   11be3:	ff 75 08             	pushl  0x8(%ebp)
   11be6:	e8 02 36 00 00       	call   151ed <sys_lseek>
   11beb:	83 c4 10             	add    $0x10,%esp
   11bee:	85 c0                	test   %eax,%eax
   11bf0:	79 1a                	jns    11c0c <load_phdr+0xa4>
    {
        log_printf("read file failed");
   11bf2:	83 ec 0c             	sub    $0xc,%esp
   11bf5:	68 ad 65 01 00       	push   $0x165ad
   11bfa:	e8 9f 44 00 00       	call   1609e <log_printf>
   11bff:	83 c4 10             	add    $0x10,%esp
        return -1;
   11c02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c07:	e9 83 00 00 00       	jmp    11c8f <load_phdr+0x127>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr; // 内存中的起始地址
   11c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c0f:	8b 40 08             	mov    0x8(%eax),%eax
   11c12:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz; // 文件需要拷贝的数据量
   11c15:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c18:	8b 40 10             	mov    0x10(%eax),%eax
   11c1b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0)
   11c1e:	eb 64                	jmp    11c84 <load_phdr+0x11c>
    {
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size; // 至多copy一页的数据
   11c20:	b8 00 10 00 00       	mov    $0x1000,%eax
   11c25:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11c2c:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11c30:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr); // 拿到物理地址，因为该页还没启用，不能直接copy
   11c33:	83 ec 08             	sub    $0x8,%esp
   11c36:	ff 75 f4             	pushl  -0xc(%ebp)
   11c39:	ff 75 10             	pushl  0x10(%ebp)
   11c3c:	e8 48 ee ff ff       	call   10a89 <memory_get_paddr>
   11c41:	83 c4 10             	add    $0x10,%esp
   11c44:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) < curr_size)
   11c47:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c4a:	83 ec 04             	sub    $0x4,%esp
   11c4d:	ff 75 e8             	pushl  -0x18(%ebp)
   11c50:	50                   	push   %eax
   11c51:	ff 75 08             	pushl  0x8(%ebp)
   11c54:	e8 c1 34 00 00       	call   1511a <sys_read>
   11c59:	83 c4 10             	add    $0x10,%esp
   11c5c:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11c5f:	7e 17                	jle    11c78 <load_phdr+0x110>
        {
            log_printf("read file failed");
   11c61:	83 ec 0c             	sub    $0xc,%esp
   11c64:	68 ad 65 01 00       	push   $0x165ad
   11c69:	e8 30 44 00 00       	call   1609e <log_printf>
   11c6e:	83 c4 10             	add    $0x10,%esp
            return -1;
   11c71:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c76:	eb 17                	jmp    11c8f <load_phdr+0x127>
        }

        size -= curr_size;
   11c78:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c7b:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11c7e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c81:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0)
   11c84:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c88:	75 96                	jne    11c20 <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11c8a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c8f:	c9                   	leave  
   11c90:	c3                   	ret    

00011c91 <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file(task_t *task, const char *name, uint32_t page_dir)
{
   11c91:	55                   	push   %ebp
   11c92:	89 e5                	mov    %esp,%ebp
   11c94:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    int file = sys_open(name, 0);
   11c97:	83 ec 08             	sub    $0x8,%esp
   11c9a:	6a 00                	push   $0x0
   11c9c:	ff 75 0c             	pushl  0xc(%ebp)
   11c9f:	e8 07 33 00 00       	call   14fab <sys_open>
   11ca4:	83 c4 10             	add    $0x10,%esp
   11ca7:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0)
   11caa:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11cae:	79 18                	jns    11cc8 <load_elf_file+0x37>
    {
        log_printf("open failed. %s", name);
   11cb0:	83 ec 08             	sub    $0x8,%esp
   11cb3:	ff 75 0c             	pushl  0xc(%ebp)
   11cb6:	68 be 65 01 00       	push   $0x165be
   11cbb:	e8 de 43 00 00       	call   1609e <log_printf>
   11cc0:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11cc3:	e9 c1 01 00 00       	jmp    11e89 <load_elf_file+0x1f8>
    }
    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11cc8:	83 ec 04             	sub    $0x4,%esp
   11ccb:	6a 34                	push   $0x34
   11ccd:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11cd0:	50                   	push   %eax
   11cd1:	ff 75 ec             	pushl  -0x14(%ebp)
   11cd4:	e8 41 34 00 00       	call   1511a <sys_read>
   11cd9:	83 c4 10             	add    $0x10,%esp
   11cdc:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr))
   11cdf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ce2:	83 f8 33             	cmp    $0x33,%eax
   11ce5:	77 18                	ja     11cff <load_elf_file+0x6e>
    {
        log_printf("elf hdr too small. size=%d", cnt);
   11ce7:	83 ec 08             	sub    $0x8,%esp
   11cea:	ff 75 e8             	pushl  -0x18(%ebp)
   11ced:	68 ce 65 01 00       	push   $0x165ce
   11cf2:	e8 a7 43 00 00       	call   1609e <log_printf>
   11cf7:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11cfa:	e9 8a 01 00 00       	jmp    11e89 <load_elf_file+0x1f8>
    }
    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E') || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F'))
   11cff:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11d03:	3c 7f                	cmp    $0x7f,%al
   11d05:	75 18                	jne    11d1f <load_elf_file+0x8e>
   11d07:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11d0b:	3c 45                	cmp    $0x45,%al
   11d0d:	75 10                	jne    11d1f <load_elf_file+0x8e>
   11d0f:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11d13:	3c 4c                	cmp    $0x4c,%al
   11d15:	75 08                	jne    11d1f <load_elf_file+0x8e>
   11d17:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11d1b:	3c 46                	cmp    $0x46,%al
   11d1d:	74 15                	je     11d34 <load_elf_file+0xa3>
    {
        log_printf("check elf indent failed.");
   11d1f:	83 ec 0c             	sub    $0xc,%esp
   11d22:	68 e9 65 01 00       	push   $0x165e9
   11d27:	e8 72 43 00 00       	call   1609e <log_printf>
   11d2c:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d2f:	e9 55 01 00 00       	jmp    11e89 <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0))
   11d34:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11d38:	66 83 f8 02          	cmp    $0x2,%ax
   11d3c:	75 11                	jne    11d4f <load_elf_file+0xbe>
   11d3e:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11d42:	66 83 f8 03          	cmp    $0x3,%ax
   11d46:	75 07                	jne    11d4f <load_elf_file+0xbe>
   11d48:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11d4b:	85 c0                	test   %eax,%eax
   11d4d:	75 15                	jne    11d64 <load_elf_file+0xd3>
    {
        log_printf("check elf type or entry failed.");
   11d4f:	83 ec 0c             	sub    $0xc,%esp
   11d52:	68 04 66 01 00       	push   $0x16604
   11d57:	e8 42 43 00 00       	call   1609e <log_printf>
   11d5c:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d5f:	e9 25 01 00 00       	jmp    11e89 <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0))
   11d64:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11d68:	66 85 c0             	test   %ax,%ax
   11d6b:	74 07                	je     11d74 <load_elf_file+0xe3>
   11d6d:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11d70:	85 c0                	test   %eax,%eax
   11d72:	75 15                	jne    11d89 <load_elf_file+0xf8>
    {
        log_printf("none programe header");
   11d74:	83 ec 0c             	sub    $0xc,%esp
   11d77:	68 24 66 01 00       	push   $0x16624
   11d7c:	e8 1d 43 00 00       	call   1609e <log_printf>
   11d81:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d84:	e9 00 01 00 00       	jmp    11e89 <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11d89:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11d8c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11d8f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11d96:	e9 cb 00 00 00       	jmp    11e66 <load_elf_file+0x1d5>
    {
        if (sys_lseek(file, e_phoff, 0) < 0)
   11d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d9e:	83 ec 04             	sub    $0x4,%esp
   11da1:	6a 00                	push   $0x0
   11da3:	50                   	push   %eax
   11da4:	ff 75 ec             	pushl  -0x14(%ebp)
   11da7:	e8 41 34 00 00       	call   151ed <sys_lseek>
   11dac:	83 c4 10             	add    $0x10,%esp
   11daf:	85 c0                	test   %eax,%eax
   11db1:	79 15                	jns    11dc8 <load_elf_file+0x137>
        {
            log_printf("read file failed");
   11db3:	83 ec 0c             	sub    $0xc,%esp
   11db6:	68 ad 65 01 00       	push   $0x165ad
   11dbb:	e8 de 42 00 00       	call   1609e <log_printf>
   11dc0:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11dc3:	e9 c1 00 00 00       	jmp    11e89 <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11dc8:	83 ec 04             	sub    $0x4,%esp
   11dcb:	6a 20                	push   $0x20
   11dcd:	8d 45 90             	lea    -0x70(%ebp),%eax
   11dd0:	50                   	push   %eax
   11dd1:	ff 75 ec             	pushl  -0x14(%ebp)
   11dd4:	e8 41 33 00 00       	call   1511a <sys_read>
   11dd9:	83 c4 10             	add    $0x10,%esp
   11ddc:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr))
   11ddf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11de2:	83 f8 1f             	cmp    $0x1f,%eax
   11de5:	77 15                	ja     11dfc <load_elf_file+0x16b>
        {
            log_printf("read file failed");
   11de7:	83 ec 0c             	sub    $0xc,%esp
   11dea:	68 ad 65 01 00       	push   $0x165ad
   11def:	e8 aa 42 00 00       	call   1609e <log_printf>
   11df4:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11df7:	e9 8d 00 00 00       	jmp    11e89 <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE))
   11dfc:	8b 45 90             	mov    -0x70(%ebp),%eax
   11dff:	83 f8 01             	cmp    $0x1,%eax
   11e02:	75 53                	jne    11e57 <load_elf_file+0x1c6>
   11e04:	8b 45 98             	mov    -0x68(%ebp),%eax
   11e07:	85 c0                	test   %eax,%eax
   11e09:	79 4c                	jns    11e57 <load_elf_file+0x1c6>
        {
            continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11e0b:	83 ec 04             	sub    $0x4,%esp
   11e0e:	ff 75 10             	pushl  0x10(%ebp)
   11e11:	8d 45 90             	lea    -0x70(%ebp),%eax
   11e14:	50                   	push   %eax
   11e15:	ff 75 ec             	pushl  -0x14(%ebp)
   11e18:	e8 4b fd ff ff       	call   11b68 <load_phdr>
   11e1d:	83 c4 10             	add    $0x10,%esp
   11e20:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   11e23:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11e27:	79 12                	jns    11e3b <load_elf_file+0x1aa>
        {
            log_printf("load program hdr failed");
   11e29:	83 ec 0c             	sub    $0xc,%esp
   11e2c:	68 39 66 01 00       	push   $0x16639
   11e31:	e8 68 42 00 00       	call   1609e <log_printf>
   11e36:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e39:	eb 4e                	jmp    11e89 <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        // 最后地址是最后一个elf段加载的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11e3b:	8b 55 98             	mov    -0x68(%ebp),%edx
   11e3e:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11e41:	01 c2                	add    %eax,%edx
   11e43:	8b 45 08             	mov    0x8(%ebp),%eax
   11e46:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11e49:	8b 45 08             	mov    0x8(%ebp),%eax
   11e4c:	8b 50 2c             	mov    0x2c(%eax),%edx
   11e4f:	8b 45 08             	mov    0x8(%ebp),%eax
   11e52:	89 50 30             	mov    %edx,0x30(%eax)
   11e55:	eb 01                	jmp    11e58 <load_elf_file+0x1c7>
            continue;
   11e57:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11e58:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11e5c:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e60:	0f b7 c0             	movzwl %ax,%eax
   11e63:	01 45 f4             	add    %eax,-0xc(%ebp)
   11e66:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11e6a:	0f b7 c0             	movzwl %ax,%eax
   11e6d:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e70:	0f 8c 25 ff ff ff    	jl     11d9b <load_elf_file+0x10a>
    }
    sys_close(file);
   11e76:	83 ec 0c             	sub    $0xc,%esp
   11e79:	ff 75 ec             	pushl  -0x14(%ebp)
   11e7c:	e8 90 33 00 00       	call   15211 <sys_close>
   11e81:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11e84:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e87:	eb 19                	jmp    11ea2 <load_elf_file+0x211>
load_failed:
    // 文件已经打开
    if (file >= 0)
   11e89:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e8d:	78 0e                	js     11e9d <load_elf_file+0x20c>
    {
        sys_close(file);
   11e8f:	83 ec 0c             	sub    $0xc,%esp
   11e92:	ff 75 ec             	pushl  -0x14(%ebp)
   11e95:	e8 77 33 00 00       	call   15211 <sys_close>
   11e9a:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   11e9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ea2:	c9                   	leave  
   11ea3:	c3                   	ret    

00011ea4 <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args(char *to, uint32_t page_dir, int argc, char **argv)
{
   11ea4:	55                   	push   %ebp
   11ea5:	89 e5                	mov    %esp,%ebp
   11ea7:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11eaa:	8b 45 10             	mov    0x10(%ebp),%eax
   11ead:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11eb0:	8b 45 08             	mov    0x8(%ebp),%eax
   11eb3:	83 c0 0c             	add    $0xc,%eax
   11eb6:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char *dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1); // 留出结束符
   11eb9:	8b 45 10             	mov    0x10(%ebp),%eax
   11ebc:	83 c0 04             	add    $0x4,%eax
   11ebf:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ec6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ec9:	01 d0                	add    %edx,%eax
   11ecb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // argv表
    char **dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11ece:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed1:	83 c0 0c             	add    $0xc,%eax
   11ed4:	83 ec 08             	sub    $0x8,%esp
   11ed7:	50                   	push   %eax
   11ed8:	ff 75 0c             	pushl  0xc(%ebp)
   11edb:	e8 a9 eb ff ff       	call   10a89 <memory_get_paddr>
   11ee0:	83 c4 10             	add    $0x10,%esp
   11ee3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11ee6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11eea:	75 1c                	jne    11f08 <copy_args+0x64>
   11eec:	68 51 66 01 00       	push   $0x16651
   11ef1:	68 94 66 01 00       	push   $0x16694
   11ef6:	68 c2 02 00 00       	push   $0x2c2
   11efb:	68 fc 64 01 00       	push   $0x164fc
   11f00:	e8 c9 3e 00 00       	call   15dce <panic>
   11f05:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++)
   11f08:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11f0f:	e9 82 00 00 00       	jmp    11f96 <copy_args+0xf2>
    {
        char *from = argv[i];
   11f14:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f17:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f1e:	8b 45 14             	mov    0x14(%ebp),%eax
   11f21:	01 d0                	add    %edx,%eax
   11f23:	8b 00                	mov    (%eax),%eax
   11f25:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1; // 包含结束符
   11f28:	83 ec 0c             	sub    $0xc,%esp
   11f2b:	ff 75 e8             	pushl  -0x18(%ebp)
   11f2e:	e8 e8 3a 00 00       	call   15a1b <kernel_strlen>
   11f33:	83 c4 10             	add    $0x10,%esp
   11f36:	83 c0 01             	add    $0x1,%eax
   11f39:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   11f3c:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11f3f:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11f42:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f45:	51                   	push   %ecx
   11f46:	52                   	push   %edx
   11f47:	ff 75 0c             	pushl  0xc(%ebp)
   11f4a:	50                   	push   %eax
   11f4b:	e8 7f eb ff ff       	call   10acf <memory_copy_uvm_data>
   11f50:	83 c4 10             	add    $0x10,%esp
   11f53:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11f56:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11f5a:	79 1c                	jns    11f78 <copy_args+0xd4>
   11f5c:	68 63 66 01 00       	push   $0x16663
   11f61:	68 94 66 01 00       	push   $0x16694
   11f66:	68 cb 02 00 00       	push   $0x2cb
   11f6b:	68 fc 64 01 00       	push   $0x164fc
   11f70:	e8 59 3e 00 00       	call   15dce <panic>
   11f75:	83 c4 10             	add    $0x10,%esp

        // 关联arg
        dest_argv_tb[i] = dest_arg;
   11f78:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f7b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f82:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f85:	01 c2                	add    %eax,%edx
   11f87:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f8a:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   11f8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11f8f:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++)
   11f92:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f96:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f99:	3b 45 10             	cmp    0x10(%ebp),%eax
   11f9c:	0f 8c 72 ff ff ff    	jl     11f14 <copy_args+0x70>
    }
    // 可能存在无参的情况，此时不需要写入
    if (argc)
   11fa2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11fa6:	74 15                	je     11fbd <copy_args+0x119>
    {
        dest_argv_tb[argc] = '\0';
   11fa8:	8b 45 10             	mov    0x10(%ebp),%eax
   11fab:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fb2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fb5:	01 d0                	add    %edx,%eax
   11fb7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   11fbd:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   11fc0:	8b 45 08             	mov    0x8(%ebp),%eax
   11fc3:	6a 0c                	push   $0xc
   11fc5:	52                   	push   %edx
   11fc6:	ff 75 0c             	pushl  0xc(%ebp)
   11fc9:	50                   	push   %eax
   11fca:	e8 00 eb ff ff       	call   10acf <memory_copy_uvm_data>
   11fcf:	83 c4 10             	add    $0x10,%esp
}
   11fd2:	c9                   	leave  
   11fd3:	c3                   	ret    

00011fd4 <sys_execve>:
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env)
{
   11fd4:	55                   	push   %ebp
   11fd5:	89 e5                	mov    %esp,%ebp
   11fd7:	83 ec 28             	sub    $0x28,%esp
    task_t *task = task_current();
   11fda:	e8 a2 f5 ff ff       	call   11581 <task_current>
   11fdf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   11fe2:	83 ec 0c             	sub    $0xc,%esp
   11fe5:	ff 75 08             	pushl  0x8(%ebp)
   11fe8:	e8 17 3e 00 00       	call   15e04 <get_file_name>
   11fed:	83 c4 10             	add    $0x10,%esp
   11ff0:	89 c2                	mov    %eax,%edx
   11ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ff5:	83 c0 04             	add    $0x4,%eax
   11ff8:	83 ec 04             	sub    $0x4,%esp
   11ffb:	6a 20                	push   $0x20
   11ffd:	52                   	push   %edx
   11ffe:	50                   	push   %eax
   11fff:	e8 29 39 00 00       	call   1592d <kernel_strncpy>
   12004:	83 c4 10             	add    $0x10,%esp
    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   12007:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1200a:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   12010:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   12013:	e8 88 e7 ff ff       	call   107a0 <memory_create_uvm>
   12018:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir)
   1201b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1201f:	0f 84 2d 01 00 00    	je     12152 <sys_execve+0x17e>
    {
        goto exec_failed;
    }
    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir); // 暂时置用task->name表示
   12025:	83 ec 04             	sub    $0x4,%esp
   12028:	ff 75 ec             	pushl  -0x14(%ebp)
   1202b:	ff 75 08             	pushl  0x8(%ebp)
   1202e:	ff 75 f4             	pushl  -0xc(%ebp)
   12031:	e8 5b fc ff ff       	call   11c91 <load_elf_file>
   12036:	83 c4 10             	add    $0x10,%esp
   12039:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0)
   1203c:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   12040:	0f 84 0f 01 00 00    	je     12155 <sys_execve+0x181>
    {
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE; // 预留一部分参数空间
   12046:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   1204d:	6a 07                	push   $0x7
   1204f:	68 00 40 1f 00       	push   $0x1f4000
   12054:	68 00 c0 e0 df       	push   $0xdfe0c000
   12059:	ff 75 ec             	pushl  -0x14(%ebp)
   1205c:	e8 f1 ea ff ff       	call   10b52 <memory_alloc_for_page_dir>
   12061:	83 c4 10             	add    $0x10,%esp
   12064:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                        MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                                        MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0)
   12067:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1206b:	0f 88 e7 00 00 00    	js     12158 <sys_execve+0x184>
    {
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   12071:	83 ec 0c             	sub    $0xc,%esp
   12074:	ff 75 0c             	pushl  0xc(%ebp)
   12077:	e8 ce 3d 00 00       	call   15e4a <strings_count>
   1207c:	83 c4 10             	add    $0x10,%esp
   1207f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   12082:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12085:	ff 75 0c             	pushl  0xc(%ebp)
   12088:	ff 75 dc             	pushl  -0x24(%ebp)
   1208b:	ff 75 ec             	pushl  -0x14(%ebp)
   1208e:	50                   	push   %eax
   1208f:	e8 10 fe ff ff       	call   11ea4 <copy_args>
   12094:	83 c4 10             	add    $0x10,%esp
   12097:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   1209a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1209e:	0f 88 b7 00 00 00    	js     1215b <sys_execve+0x187>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t *frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   120a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120a7:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   120ad:	83 e8 58             	sub    $0x58,%eax
   120b0:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   120b3:	8b 55 e8             	mov    -0x18(%ebp),%edx
   120b6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120b9:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   120bc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120bf:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   120c6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120c9:	8b 50 28             	mov    0x28(%eax),%edx
   120cc:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120cf:	89 50 2c             	mov    %edx,0x2c(%eax)
   120d2:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120d5:	8b 50 2c             	mov    0x2c(%eax),%edx
   120d8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120db:	89 50 24             	mov    %edx,0x24(%eax)
   120de:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120e1:	8b 50 24             	mov    0x24(%eax),%edx
   120e4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120e7:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   120ea:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120ed:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   120f4:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120f7:	8b 50 1c             	mov    0x1c(%eax),%edx
   120fa:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120fd:	89 50 14             	mov    %edx,0x14(%eax)
   12100:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12103:	8b 50 14             	mov    0x14(%eax),%edx
   12106:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12109:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT | EFLAGS_IF; // 段寄存器无需修改
   1210c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1210f:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间
    frame->esp = stack_top - sizeof(uint32_t) * SYSCALL_PARAM_COUNT;
   12115:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12118:	83 e8 14             	sub    $0x14,%eax
   1211b:	89 c2                	mov    %eax,%edx
   1211d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12120:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   12123:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12126:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12129:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
    mmu_set_page_dir(new_page_dir); // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   1212f:	83 ec 0c             	sub    $0xc,%esp
   12132:	ff 75 ec             	pushl  -0x14(%ebp)
   12135:	e8 b5 ee ff ff       	call   10fef <mmu_set_page_dir>
   1213a:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir); // 再释放掉了原进程的内容空间
   1213d:	83 ec 0c             	sub    $0xc,%esp
   12140:	ff 75 f0             	pushl  -0x10(%ebp)
   12143:	e8 dd e6 ff ff       	call   10825 <memory_destroy_uvm>
   12148:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return 0;
   1214b:	b8 00 00 00 00       	mov    $0x0,%eax
   12150:	eb 3d                	jmp    1218f <sys_execve+0x1bb>
        goto exec_failed;
   12152:	90                   	nop
   12153:	eb 07                	jmp    1215c <sys_execve+0x188>
        goto exec_failed;
   12155:	90                   	nop
   12156:	eb 04                	jmp    1215c <sys_execve+0x188>
        goto exec_failed;
   12158:	90                   	nop
   12159:	eb 01                	jmp    1215c <sys_execve+0x188>
        goto exec_failed;
   1215b:	90                   	nop

exec_failed: // 必要的资源释放
    if (new_page_dir)
   1215c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   12160:	74 28                	je     1218a <sys_execve+0x1b6>
    {
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   12162:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12165:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12168:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
        mmu_set_page_dir(old_page_dir);
   1216e:	83 ec 0c             	sub    $0xc,%esp
   12171:	ff 75 f0             	pushl  -0x10(%ebp)
   12174:	e8 76 ee ff ff       	call   10fef <mmu_set_page_dir>
   12179:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1217c:	83 ec 0c             	sub    $0xc,%esp
   1217f:	ff 75 ec             	pushl  -0x14(%ebp)
   12182:	e8 9e e6 ff ff       	call   10825 <memory_destroy_uvm>
   12187:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   1218a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1218f:	c9                   	leave  
   12190:	c3                   	ret    

00012191 <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield(void)
{
   12191:	55                   	push   %ebp
   12192:	89 e5                	mov    %esp,%ebp
   12194:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12197:	e8 1d 0f 00 00       	call   130b9 <irq_enter_protection>
   1219c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1)
   1219f:	83 ec 0c             	sub    $0xc,%esp
   121a2:	68 04 e0 01 00       	push   $0x1e004
   121a7:	e8 0f ee ff ff       	call   10fbb <list_count>
   121ac:	83 c4 10             	add    $0x10,%esp
   121af:	83 f8 01             	cmp    $0x1,%eax
   121b2:	7e 29                	jle    121dd <sys_yield+0x4c>
    {
        task_t *curr_task = task_current();
   121b4:	e8 c8 f3 ff ff       	call   11581 <task_current>
   121b9:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   121bc:	83 ec 0c             	sub    $0xc,%esp
   121bf:	ff 75 f0             	pushl  -0x10(%ebp)
   121c2:	e8 8f f3 ff ff       	call   11556 <task_set_block>
   121c7:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   121ca:	83 ec 0c             	sub    $0xc,%esp
   121cd:	ff 75 f0             	pushl  -0x10(%ebp)
   121d0:	e8 4d f3 ff ff       	call   11522 <task_set_ready>
   121d5:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   121d8:	e8 52 f4 ff ff       	call   1162f <task_dispatch>
    }
    irq_leave_protection(state);
   121dd:	83 ec 0c             	sub    $0xc,%esp
   121e0:	ff 75 f4             	pushl  -0xc(%ebp)
   121e3:	e8 e9 0e 00 00       	call   130d1 <irq_leave_protection>
   121e8:	83 c4 10             	add    $0x10,%esp

    return 0;
   121eb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121f0:	c9                   	leave  
   121f1:	c3                   	ret    

000121f2 <task_file>:

/**
 * @brief 获取当前进程指定的文件描述符
 */
file_t *task_file(int fd)
{
   121f2:	55                   	push   %ebp
   121f3:	89 e5                	mov    %esp,%ebp
   121f5:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   121f8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   121fc:	78 1f                	js     1221d <task_file+0x2b>
   121fe:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12202:	7f 19                	jg     1221d <task_file+0x2b>
    {
        file_t *file = task_current()->file_table[fd];
   12204:	e8 78 f3 ff ff       	call   11581 <task_current>
   12209:	89 c2                	mov    %eax,%edx
   1220b:	8b 45 08             	mov    0x8(%ebp),%eax
   1220e:	83 c0 14             	add    $0x14,%eax
   12211:	8b 44 82 0c          	mov    0xc(%edx,%eax,4),%eax
   12215:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   12218:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1221b:	eb 05                	jmp    12222 <task_file+0x30>
    }

    return (file_t *)0;
   1221d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12222:	c9                   	leave  
   12223:	c3                   	ret    

00012224 <task_alloc_fd>:

/**
 * @brief 为指定的file分配一个新的文件id
 */
int task_alloc_fd(file_t *file)
{
   12224:	55                   	push   %ebp
   12225:	89 e5                	mov    %esp,%ebp
   12227:	83 ec 10             	sub    $0x10,%esp
    task_t *task = task_current();
   1222a:	e8 52 f3 ff ff       	call   11581 <task_current>
   1222f:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++)
   12232:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   12239:	eb 2f                	jmp    1226a <task_alloc_fd+0x46>
    {
        file_t *p = task->file_table[i];
   1223b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1223e:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12241:	83 c2 14             	add    $0x14,%edx
   12244:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
   12248:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0)
   1224b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1224f:	75 15                	jne    12266 <task_alloc_fd+0x42>
        {
            task->file_table[i] = file;
   12251:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12254:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12257:	8d 4a 14             	lea    0x14(%edx),%ecx
   1225a:	8b 55 08             	mov    0x8(%ebp),%edx
   1225d:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
            return i;
   12261:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12264:	eb 0f                	jmp    12275 <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++)
   12266:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1226a:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   1226e:	7e cb                	jle    1223b <task_alloc_fd+0x17>
        }
    }

    return -1;
   12270:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12275:	c9                   	leave  
   12276:	c3                   	ret    

00012277 <task_remove_fd>:

/**
 * @brief 移除任务中打开的文件fd
 */
void task_remove_fd(int fd)
{
   12277:	55                   	push   %ebp
   12278:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   1227a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1227e:	78 1b                	js     1229b <task_remove_fd+0x24>
   12280:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12284:	7f 15                	jg     1229b <task_remove_fd+0x24>
    {
        task_current()->file_table[fd] = (file_t *)0;
   12286:	e8 f6 f2 ff ff       	call   11581 <task_current>
   1228b:	89 c2                	mov    %eax,%edx
   1228d:	8b 45 08             	mov    0x8(%ebp),%eax
   12290:	83 c0 14             	add    $0x14,%eax
   12293:	c7 44 82 0c 00 00 00 	movl   $0x0,0xc(%edx,%eax,4)
   1229a:	00 
    }
}
   1229b:	90                   	nop
   1229c:	5d                   	pop    %ebp
   1229d:	c3                   	ret    

0001229e <sys_wait>:

/**
 * @brief 等待子进程退出
 */
int sys_wait(int *status)
{
   1229e:	55                   	push   %ebp
   1229f:	89 e5                	mov    %esp,%ebp
   122a1:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   122a4:	e8 d8 f2 ff ff       	call   11581 <task_current>
   122a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (;;)
    {
        // 遍历，找僵尸状态的进程，然后回收。如果收不到，则进入睡眠态
        mutex_lock(&task_table_mutex);
   122ac:	83 ec 0c             	sub    $0xc,%esp
   122af:	68 c0 49 03 00       	push   $0x349c0
   122b4:	e8 4c 31 00 00       	call   15405 <mutex_lock>
   122b9:	83 c4 10             	add    $0x10,%esp
        for (int i = 0; i < TASK_NR; i++)
   122bc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122c3:	e9 98 00 00 00       	jmp    12360 <sys_wait+0xc2>
        {
            task_t *task = task_table + i;
   122c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122cb:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   122d1:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   122d6:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (task->parent != curr_task)
   122d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122dc:	8b 40 28             	mov    0x28(%eax),%eax
   122df:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122e2:	75 77                	jne    1235b <sys_wait+0xbd>
            {
                continue;
            }
            if (task->state == TASK_ZOMBIE)
   122e4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122e7:	8b 00                	mov    (%eax),%eax
   122e9:	83 f8 05             	cmp    $0x5,%eax
   122ec:	75 6e                	jne    1235c <sys_wait+0xbe>
            {
                int pid = task->pid;
   122ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122f1:	8b 40 24             	mov    0x24(%eax),%eax
   122f4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                *status = task->status;
   122f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122fa:	8b 50 40             	mov    0x40(%eax),%edx
   122fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12300:	89 10                	mov    %edx,(%eax)

                memory_destroy_uvm(task->tss.cr3);
   12302:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12305:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   1230b:	83 ec 0c             	sub    $0xc,%esp
   1230e:	50                   	push   %eax
   1230f:	e8 11 e5 ff ff       	call   10825 <memory_destroy_uvm>
   12314:	83 c4 10             	add    $0x10,%esp
                memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   12317:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1231a:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   12320:	2d 00 10 00 00       	sub    $0x1000,%eax
   12325:	83 ec 0c             	sub    $0xc,%esp
   12328:	50                   	push   %eax
   12329:	e8 0a e9 ff ff       	call   10c38 <memory_free_page>
   1232e:	83 c4 10             	add    $0x10,%esp
                kernel_memset(task, 0, sizeof(task_t));
   12331:	83 ec 04             	sub    $0x4,%esp
   12334:	68 c8 02 00 00       	push   $0x2c8
   12339:	6a 00                	push   $0x0
   1233b:	ff 75 e8             	pushl  -0x18(%ebp)
   1233e:	e8 62 37 00 00       	call   15aa5 <kernel_memset>
   12343:	83 c4 10             	add    $0x10,%esp

                mutex_unlock(&task_table_mutex);
   12346:	83 ec 0c             	sub    $0xc,%esp
   12349:	68 c0 49 03 00       	push   $0x349c0
   1234e:	e8 46 31 00 00       	call   15499 <mutex_unlock>
   12353:	83 c4 10             	add    $0x10,%esp
                return pid;
   12356:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12359:	eb 56                	jmp    123b1 <sys_wait+0x113>
                continue;
   1235b:	90                   	nop
        for (int i = 0; i < TASK_NR; i++)
   1235c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12360:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12364:	0f 8e 5e ff ff ff    	jle    122c8 <sys_wait+0x2a>
            }
        }
        mutex_unlock(&task_table_mutex);
   1236a:	83 ec 0c             	sub    $0xc,%esp
   1236d:	68 c0 49 03 00       	push   $0x349c0
   12372:	e8 22 31 00 00       	call   15499 <mutex_unlock>
   12377:	83 c4 10             	add    $0x10,%esp

        // 找不到，则等待
        irq_state_t state = irq_enter_protection();
   1237a:	e8 3a 0d 00 00       	call   130b9 <irq_enter_protection>
   1237f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr_task);
   12382:	83 ec 0c             	sub    $0xc,%esp
   12385:	ff 75 f0             	pushl  -0x10(%ebp)
   12388:	e8 c9 f1 ff ff       	call   11556 <task_set_block>
   1238d:	83 c4 10             	add    $0x10,%esp
        curr_task->state = TASK_WAITING;
   12390:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12393:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
        task_dispatch();
   12399:	e8 91 f2 ff ff       	call   1162f <task_dispatch>
        irq_leave_protection(state);
   1239e:	83 ec 0c             	sub    $0xc,%esp
   123a1:	ff 75 ec             	pushl  -0x14(%ebp)
   123a4:	e8 28 0d 00 00       	call   130d1 <irq_leave_protection>
   123a9:	83 c4 10             	add    $0x10,%esp
    {
   123ac:	e9 fb fe ff ff       	jmp    122ac <sys_wait+0xe>
    }

    return 0;
}
   123b1:	c9                   	leave  
   123b2:	c3                   	ret    

000123b3 <sys_exit>:

/**
 * @brief 退出进程
 */
void sys_exit(int status)
{
   123b3:	55                   	push   %ebp
   123b4:	89 e5                	mov    %esp,%ebp
   123b6:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   123b9:	e8 c3 f1 ff ff       	call   11581 <task_current>
   123be:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 关闭所有已经打开的文件, 标准输入输出库会由newlib自行关闭，但这里仍然再处理下
    for (int fd = 0; fd < TASK_OFILE_NR; fd++)
   123c1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123c8:	eb 39                	jmp    12403 <sys_exit+0x50>
    {
        file_t *file = curr_task->file_table[fd];
   123ca:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123cd:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123d0:	83 c2 14             	add    $0x14,%edx
   123d3:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
   123d7:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (file)
   123da:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   123de:	74 1f                	je     123ff <sys_exit+0x4c>
        {
            sys_close(fd);
   123e0:	83 ec 0c             	sub    $0xc,%esp
   123e3:	ff 75 f4             	pushl  -0xc(%ebp)
   123e6:	e8 26 2e 00 00       	call   15211 <sys_close>
   123eb:	83 c4 10             	add    $0x10,%esp
            curr_task->file_table[fd] = (file_t *)0;
   123ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123f4:	83 c2 14             	add    $0x14,%edx
   123f7:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
   123fe:	00 
    for (int fd = 0; fd < TASK_OFILE_NR; fd++)
   123ff:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12403:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12407:	7e c1                	jle    123ca <sys_exit+0x17>
        }
    }

    int move_child = 0;
   12409:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    // 找所有的子进程，将其转交给init进程
    mutex_lock(&task_table_mutex);
   12410:	83 ec 0c             	sub    $0xc,%esp
   12413:	68 c0 49 03 00       	push   $0x349c0
   12418:	e8 e8 2f 00 00       	call   15405 <mutex_lock>
   1241d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_OFILE_NR; i++)
   12420:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12427:	eb 3b                	jmp    12464 <sys_exit+0xb1>
    {
        task_t *task = task_table + i;
   12429:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1242c:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12432:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   12437:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (task->parent == curr_task)
   1243a:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1243d:	8b 40 28             	mov    0x28(%eax),%eax
   12440:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   12443:	75 1b                	jne    12460 <sys_exit+0xad>
        {
            // 有子进程，则转给init_task
            task->parent = &task_manager.first_task;
   12445:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12448:	c7 40 28 28 e0 01 00 	movl   $0x1e028,0x28(%eax)

            // 如果子进程中有僵尸进程，唤醒回收资源
            // 并不由自己回收，因为自己将要退出
            if (task->state == TASK_ZOMBIE)
   1244f:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12452:	8b 00                	mov    (%eax),%eax
   12454:	83 f8 05             	cmp    $0x5,%eax
   12457:	75 07                	jne    12460 <sys_exit+0xad>
            {
                move_child = 1;
   12459:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_NR; i++)
   12460:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12464:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   12468:	7e bf                	jle    12429 <sys_exit+0x76>
            }
        }
    }
    mutex_unlock(&task_table_mutex);
   1246a:	83 ec 0c             	sub    $0xc,%esp
   1246d:	68 c0 49 03 00       	push   $0x349c0
   12472:	e8 22 30 00 00       	call   15499 <mutex_unlock>
   12477:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   1247a:	e8 3a 0c 00 00       	call   130b9 <irq_enter_protection>
   1247f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 如果有移动子进程，则唤醒init进程
    task_t *parent = curr_task->parent;
   12482:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12485:	8b 40 28             	mov    0x28(%eax),%eax
   12488:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (move_child && (parent != &task_manager.first_task))
   1248b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1248f:	74 23                	je     124b4 <sys_exit+0x101>
   12491:	81 7d e0 28 e0 01 00 	cmpl   $0x1e028,-0x20(%ebp)
   12498:	74 1a                	je     124b4 <sys_exit+0x101>
    { // 如果父进程为init进程，在下方唤醒
        if (task_manager.first_task.state == TASK_WAITING)
   1249a:	a1 28 e0 01 00       	mov    0x1e028,%eax
   1249f:	83 f8 04             	cmp    $0x4,%eax
   124a2:	75 10                	jne    124b4 <sys_exit+0x101>
        {
            task_set_ready(&task_manager.first_task);
   124a4:	83 ec 0c             	sub    $0xc,%esp
   124a7:	68 28 e0 01 00       	push   $0x1e028
   124ac:	e8 71 f0 ff ff       	call   11522 <task_set_ready>
   124b1:	83 c4 10             	add    $0x10,%esp
        }
    }

    // 如果有父任务在wait，则唤醒父任务进行回收
    // 如果父进程没有等待，则一直处理僵死状态？
    if (parent->state == TASK_WAITING)
   124b4:	8b 45 e0             	mov    -0x20(%ebp),%eax
   124b7:	8b 00                	mov    (%eax),%eax
   124b9:	83 f8 04             	cmp    $0x4,%eax
   124bc:	75 12                	jne    124d0 <sys_exit+0x11d>
    {
        task_set_ready(curr_task->parent);
   124be:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124c1:	8b 40 28             	mov    0x28(%eax),%eax
   124c4:	83 ec 0c             	sub    $0xc,%esp
   124c7:	50                   	push   %eax
   124c8:	e8 55 f0 ff ff       	call   11522 <task_set_ready>
   124cd:	83 c4 10             	add    $0x10,%esp
    }

    // 保存返回值，进入僵尸状态
    curr_task->status = status;
   124d0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124d3:	8b 55 08             	mov    0x8(%ebp),%edx
   124d6:	89 50 40             	mov    %edx,0x40(%eax)
    curr_task->state = TASK_ZOMBIE;
   124d9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124dc:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    task_set_block(curr_task);
   124e2:	83 ec 0c             	sub    $0xc,%esp
   124e5:	ff 75 e8             	pushl  -0x18(%ebp)
   124e8:	e8 69 f0 ff ff       	call   11556 <task_set_block>
   124ed:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   124f0:	e8 3a f1 ff ff       	call   1162f <task_dispatch>
    irq_leave_protection(state);
   124f5:	83 ec 0c             	sub    $0xc,%esp
   124f8:	ff 75 e4             	pushl  -0x1c(%ebp)
   124fb:	e8 d1 0b 00 00       	call   130d1 <irq_leave_protection>
   12500:	83 c4 10             	add    $0x10,%esp
}
   12503:	90                   	nop
   12504:	c9                   	leave  
   12505:	c3                   	ret    

00012506 <lgdt>:
{
   12506:	55                   	push   %ebp
   12507:	89 e5                	mov    %esp,%ebp
   12509:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   1250c:	8b 45 08             	mov    0x8(%ebp),%eax
   1250f:	c1 e8 10             	shr    $0x10,%eax
   12512:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   12516:	8b 45 08             	mov    0x8(%ebp),%eax
   12519:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   1251d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12520:	83 e8 01             	sub    $0x1,%eax
   12523:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   12527:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1252b:	90                   	nop
   1252c:	c9                   	leave  
   1252d:	c3                   	ret    

0001252e <far_jump>:
{
   1252e:	55                   	push   %ebp
   1252f:	89 e5                	mov    %esp,%ebp
   12531:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   12534:	8b 45 0c             	mov    0xc(%ebp),%eax
   12537:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1253a:	8b 45 08             	mov    0x8(%ebp),%eax
   1253d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   12540:	8d 45 f8             	lea    -0x8(%ebp),%eax
   12543:	ff 28                	ljmp   *(%eax)
}
   12545:	90                   	nop
   12546:	c9                   	leave  
   12547:	c3                   	ret    

00012548 <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   12548:	55                   	push   %ebp
   12549:	89 e5                	mov    %esp,%ebp
   1254b:	83 ec 14             	sub    $0x14,%esp
   1254e:	8b 45 14             	mov    0x14(%ebp),%eax
   12551:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector / sizeof(segment_desc_t)); //
   12555:	8b 45 08             	mov    0x8(%ebp),%eax
   12558:	83 e0 f8             	and    $0xfffffff8,%eax
   1255b:	05 e0 49 03 00       	add    $0x349e0,%eax
   12560:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 设置limit单位为4kB
    if (limit > 0xFFFF)
   12563:	81 7d 10 ff ff 00 00 	cmpl   $0xffff,0x10(%ebp)
   1256a:	76 0f                	jbe    1257b <segment_desc_set+0x33>
    {
        attr |= SEG_G; // G 标志位
   1256c:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   12572:	8b 45 10             	mov    0x10(%ebp),%eax
   12575:	c1 e8 0c             	shr    $0xc,%eax
   12578:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   1257b:	8b 45 10             	mov    0x10(%ebp),%eax
   1257e:	89 c2                	mov    %eax,%edx
   12580:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12583:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   12586:	8b 45 0c             	mov    0xc(%ebp),%eax
   12589:	89 c2                	mov    %eax,%edx
   1258b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1258e:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   12592:	8b 45 0c             	mov    0xc(%ebp),%eax
   12595:	c1 e8 10             	shr    $0x10,%eax
   12598:	89 c2                	mov    %eax,%edx
   1259a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1259d:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   125a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a3:	c1 e8 18             	shr    $0x18,%eax
   125a6:	89 c2                	mov    %eax,%edx
   125a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125ab:	88 50 07             	mov    %dl,0x7(%eax)
    desc->attr = attr | (((limit >> 16) & 0xFF) << 8);
   125ae:	8b 45 10             	mov    0x10(%ebp),%eax
   125b1:	c1 e8 10             	shr    $0x10,%eax
   125b4:	c1 e0 08             	shl    $0x8,%eax
   125b7:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   125bb:	89 c2                	mov    %eax,%edx
   125bd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125c0:	66 89 50 05          	mov    %dx,0x5(%eax)
}
   125c4:	90                   	nop
   125c5:	c9                   	leave  
   125c6:	c3                   	ret    

000125c7 <gdt_free_sel>:

void gdt_free_sel(int sel)
{
   125c7:	55                   	push   %ebp
   125c8:	89 e5                	mov    %esp,%ebp
   125ca:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   125cd:	83 ec 0c             	sub    $0xc,%esp
   125d0:	68 e0 51 03 00       	push   $0x351e0
   125d5:	e8 2b 2e 00 00       	call   15405 <mutex_lock>
   125da:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   125dd:	8b 45 08             	mov    0x8(%ebp),%eax
   125e0:	c1 e8 03             	shr    $0x3,%eax
   125e3:	66 c7 04 c5 e5 49 03 	movw   $0x0,0x349e5(,%eax,8)
   125ea:	00 00 00 
    mutex_unlock(&mutex);
   125ed:	83 ec 0c             	sub    $0xc,%esp
   125f0:	68 e0 51 03 00       	push   $0x351e0
   125f5:	e8 9f 2e 00 00       	call   15499 <mutex_unlock>
   125fa:	83 c4 10             	add    $0x10,%esp
}
   125fd:	90                   	nop
   125fe:	c9                   	leave  
   125ff:	c3                   	ret    

00012600 <get_alloc_desc>:

int get_alloc_desc()
{
   12600:	55                   	push   %ebp
   12601:	89 e5                	mov    %esp,%ebp
   12603:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   12606:	83 ec 0c             	sub    $0xc,%esp
   12609:	68 e0 51 03 00       	push   $0x351e0
   1260e:	e8 f2 2d 00 00       	call   15405 <mutex_lock>
   12613:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   12616:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1261d:	eb 36                	jmp    12655 <get_alloc_desc+0x55>
    {
        segment_desc_t *desc = gdt_table + i;
   1261f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12622:	c1 e0 03             	shl    $0x3,%eax
   12625:	05 e0 49 03 00       	add    $0x349e0,%eax
   1262a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) // 根据属性是否为0判断
   1262d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12630:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12634:	66 85 c0             	test   %ax,%ax
   12637:	75 18                	jne    12651 <get_alloc_desc+0x51>
        {
            // irq_leave_protection(state);
            mutex_unlock(&mutex);
   12639:	83 ec 0c             	sub    $0xc,%esp
   1263c:	68 e0 51 03 00       	push   $0x351e0
   12641:	e8 53 2e 00 00       	call   15499 <mutex_unlock>
   12646:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   12649:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1264c:	c1 e0 03             	shl    $0x3,%eax
   1264f:	eb 22                	jmp    12673 <get_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   12651:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12655:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1265c:	7e c1                	jle    1261f <get_alloc_desc+0x1f>
        }
    }
    // irq_leave_protection(state);
    mutex_unlock(&mutex);
   1265e:	83 ec 0c             	sub    $0xc,%esp
   12661:	68 e0 51 03 00       	push   $0x351e0
   12666:	e8 2e 2e 00 00       	call   15499 <mutex_unlock>
   1266b:	83 c4 10             	add    $0x10,%esp
    return -1;
   1266e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12673:	c9                   	leave  
   12674:	c3                   	ret    

00012675 <init_gdt>:

void init_gdt(void)
{
   12675:	55                   	push   %ebp
   12676:	89 e5                	mov    %esp,%ebp
   12678:	83 ec 18             	sub    $0x18,%esp
    // 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1267b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12682:	eb 19                	jmp    1269d <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0); // 找到第几个GDT表项
   12684:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12687:	c1 e0 03             	shl    $0x3,%eax
   1268a:	6a 00                	push   $0x0
   1268c:	6a 00                	push   $0x0
   1268e:	6a 00                	push   $0x0
   12690:	50                   	push   %eax
   12691:	e8 b2 fe ff ff       	call   12548 <segment_desc_set>
   12696:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   12699:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1269d:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   126a4:	7e de                	jle    12684 <init_gdt+0xf>
    }
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF,
   126a6:	68 92 40 00 00       	push   $0x4092
   126ab:	6a ff                	push   $0xffffffff
   126ad:	6a 00                	push   $0x0
   126af:	6a 10                	push   $0x10
   126b1:	e8 92 fe ff ff       	call   12548 <segment_desc_set>
   126b6:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF,
   126b9:	68 9a 40 00 00       	push   $0x409a
   126be:	6a ff                	push   $0xffffffff
   126c0:	6a 00                	push   $0x0
   126c2:	6a 08                	push   $0x8
   126c4:	e8 7f fe ff ff       	call   12548 <segment_desc_set>
   126c9:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   126cc:	ba e6 02 01 00       	mov    $0x102e6,%edx
   126d1:	b8 f8 49 03 00       	mov    $0x349f8,%eax
   126d6:	68 05 ec 00 00       	push   $0xec05
   126db:	52                   	push   %edx
   126dc:	6a 08                	push   $0x8
   126de:	50                   	push   %eax
   126df:	e8 1c 00 00 00       	call   12700 <gate_desc_set>
   126e4:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS,
                  (uint32_t)exception_handler_syscall,
                  GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    // 重新加载GDT
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   126e7:	b8 e0 49 03 00       	mov    $0x349e0,%eax
   126ec:	83 ec 08             	sub    $0x8,%esp
   126ef:	68 00 08 00 00       	push   $0x800
   126f4:	50                   	push   %eax
   126f5:	e8 0c fe ff ff       	call   12506 <lgdt>
   126fa:	83 c4 10             	add    $0x10,%esp
}
   126fd:	90                   	nop
   126fe:	c9                   	leave  
   126ff:	c3                   	ret    

00012700 <gate_desc_set>:

void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   12700:	55                   	push   %ebp
   12701:	89 e5                	mov    %esp,%ebp
   12703:	83 ec 08             	sub    $0x8,%esp
   12706:	8b 55 0c             	mov    0xc(%ebp),%edx
   12709:	8b 45 14             	mov    0x14(%ebp),%eax
   1270c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12710:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   12714:	8b 45 10             	mov    0x10(%ebp),%eax
   12717:	89 c2                	mov    %eax,%edx
   12719:	8b 45 08             	mov    0x8(%ebp),%eax
   1271c:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1271f:	8b 45 08             	mov    0x8(%ebp),%eax
   12722:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12726:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   1272a:	8b 45 08             	mov    0x8(%ebp),%eax
   1272d:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12731:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFFF;
   12735:	8b 45 10             	mov    0x10(%ebp),%eax
   12738:	c1 e8 10             	shr    $0x10,%eax
   1273b:	89 c2                	mov    %eax,%edx
   1273d:	8b 45 08             	mov    0x8(%ebp),%eax
   12740:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   12744:	90                   	nop
   12745:	c9                   	leave  
   12746:	c3                   	ret    

00012747 <cpu_init>:

void cpu_init(void)
{
   12747:	55                   	push   %ebp
   12748:	89 e5                	mov    %esp,%ebp
   1274a:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1274d:	83 ec 0c             	sub    $0xc,%esp
   12750:	68 e0 51 03 00       	push   $0x351e0
   12755:	e8 7d 2c 00 00       	call   153d7 <mutex_init>
   1275a:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1275d:	e8 13 ff ff ff       	call   12675 <init_gdt>
}
   12762:	90                   	nop
   12763:	c9                   	leave  
   12764:	c3                   	ret    

00012765 <switch_to_tss>:

void switch_to_tss(uint32_t tss_selector)
{
   12765:	55                   	push   %ebp
   12766:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   12768:	6a 00                	push   $0x0
   1276a:	ff 75 08             	pushl  0x8(%ebp)
   1276d:	e8 bc fd ff ff       	call   1252e <far_jump>
   12772:	83 c4 08             	add    $0x8,%esp
   12775:	90                   	nop
   12776:	c9                   	leave  
   12777:	c3                   	ret    

00012778 <inb>:
{
   12778:	55                   	push   %ebp
   12779:	89 e5                	mov    %esp,%ebp
   1277b:	83 ec 14             	sub    $0x14,%esp
   1277e:	8b 45 08             	mov    0x8(%ebp),%eax
   12781:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   12785:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12789:	89 c2                	mov    %eax,%edx
   1278b:	ec                   	in     (%dx),%al
   1278c:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1278f:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12793:	c9                   	leave  
   12794:	c3                   	ret    

00012795 <outb>:
{
   12795:	55                   	push   %ebp
   12796:	89 e5                	mov    %esp,%ebp
   12798:	83 ec 08             	sub    $0x8,%esp
   1279b:	8b 55 08             	mov    0x8(%ebp),%edx
   1279e:	8b 45 0c             	mov    0xc(%ebp),%eax
   127a1:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   127a5:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   127a8:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   127ac:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   127b0:	ee                   	out    %al,(%dx)
}
   127b1:	90                   	nop
   127b2:	c9                   	leave  
   127b3:	c3                   	ret    

000127b4 <cli>:
{
   127b4:	55                   	push   %ebp
   127b5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   127b7:	fa                   	cli    
}
   127b8:	90                   	nop
   127b9:	5d                   	pop    %ebp
   127ba:	c3                   	ret    

000127bb <sti>:
{
   127bb:	55                   	push   %ebp
   127bc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   127be:	fb                   	sti    
}
   127bf:	90                   	nop
   127c0:	5d                   	pop    %ebp
   127c1:	c3                   	ret    

000127c2 <lidt>:
{
   127c2:	55                   	push   %ebp
   127c3:	89 e5                	mov    %esp,%ebp
   127c5:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   127c8:	8b 45 08             	mov    0x8(%ebp),%eax
   127cb:	c1 e8 10             	shr    $0x10,%eax
   127ce:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   127d2:	8b 45 08             	mov    0x8(%ebp),%eax
   127d5:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   127d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   127dc:	83 e8 01             	sub    $0x1,%eax
   127df:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   127e3:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   127e7:	90                   	nop
   127e8:	c9                   	leave  
   127e9:	c3                   	ret    

000127ea <read_cr2>:
{
   127ea:	55                   	push   %ebp
   127eb:	89 e5                	mov    %esp,%ebp
   127ed:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   127f0:	0f 20 d0             	mov    %cr2,%eax
   127f3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   127f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127f9:	c9                   	leave  
   127fa:	c3                   	ret    

000127fb <hlt>:
{
   127fb:	55                   	push   %ebp
   127fc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   127fe:	f4                   	hlt    
}
   127ff:	90                   	nop
   12800:	5d                   	pop    %ebp
   12801:	c3                   	ret    

00012802 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   12802:	55                   	push   %ebp
   12803:	89 e5                	mov    %esp,%ebp
   12805:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax" : "=a"(eflags));
   12808:	9c                   	pushf  
   12809:	58                   	pop    %eax
   1280a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1280d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12810:	c9                   	leave  
   12811:	c3                   	ret    

00012812 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   12812:	55                   	push   %ebp
   12813:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl" ::"a"(eflags));
   12815:	8b 45 08             	mov    0x8(%ebp),%eax
   12818:	50                   	push   %eax
   12819:	9d                   	popf   
}
   1281a:	90                   	nop
   1281b:	5d                   	pop    %ebp
   1281c:	c3                   	ret    

0001281d <dump_core_regs>:
#define IDT_TABLE_NR 128

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs(exception_frame_t *frame)
{
   1281d:	55                   	push   %ebp
   1281e:	89 e5                	mov    %esp,%ebp
   12820:	57                   	push   %edi
   12821:	56                   	push   %esi
   12822:	53                   	push   %ebx
   12823:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t esp, ss;
    if (frame->cs & 0x7)
   12826:	8b 45 08             	mov    0x8(%ebp),%eax
   12829:	8b 40 3c             	mov    0x3c(%eax),%eax
   1282c:	83 e0 07             	and    $0x7,%eax
   1282f:	85 c0                	test   %eax,%eax
   12831:	74 14                	je     12847 <dump_core_regs+0x2a>
    {
        ss = frame->ds;
   12833:	8b 45 08             	mov    0x8(%ebp),%eax
   12836:	8b 40 0c             	mov    0xc(%eax),%eax
   12839:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1283c:	8b 45 08             	mov    0x8(%ebp),%eax
   1283f:	8b 40 1c             	mov    0x1c(%eax),%eax
   12842:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12845:	eb 12                	jmp    12859 <dump_core_regs+0x3c>
    }
    else
    {
        ss = frame->ss3;
   12847:	8b 45 08             	mov    0x8(%ebp),%eax
   1284a:	8b 40 48             	mov    0x48(%eax),%eax
   1284d:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   12850:	8b 45 08             	mov    0x8(%ebp),%eax
   12853:	8b 40 44             	mov    0x44(%eax),%eax
   12856:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->err_code);
   12859:	8b 45 08             	mov    0x8(%ebp),%eax
   1285c:	8b 50 34             	mov    0x34(%eax),%edx
   1285f:	8b 45 08             	mov    0x8(%ebp),%eax
   12862:	8b 40 30             	mov    0x30(%eax),%eax
   12865:	83 ec 04             	sub    $0x4,%esp
   12868:	52                   	push   %edx
   12869:	50                   	push   %eax
   1286a:	68 a0 66 01 00       	push   $0x166a0
   1286f:	e8 2a 38 00 00       	call   1609e <log_printf>
   12874:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   12877:	8b 45 08             	mov    0x8(%ebp),%eax
   1287a:	8b 30                	mov    (%eax),%esi
   1287c:	8b 45 08             	mov    0x8(%ebp),%eax
   1287f:	8b 58 04             	mov    0x4(%eax),%ebx
   12882:	8b 45 08             	mov    0x8(%ebp),%eax
   12885:	8b 48 08             	mov    0x8(%eax),%ecx
   12888:	8b 45 08             	mov    0x8(%ebp),%eax
   1288b:	8b 50 0c             	mov    0xc(%eax),%edx
   1288e:	8b 45 08             	mov    0x8(%ebp),%eax
   12891:	8b 40 3c             	mov    0x3c(%eax),%eax
   12894:	83 ec 04             	sub    $0x4,%esp
   12897:	56                   	push   %esi
   12898:	53                   	push   %ebx
   12899:	ff 75 e0             	pushl  -0x20(%ebp)
   1289c:	51                   	push   %ecx
   1289d:	52                   	push   %edx
   1289e:	50                   	push   %eax
   1289f:	68 bc 66 01 00       	push   $0x166bc
   128a4:	e8 f5 37 00 00       	call   1609e <log_printf>
   128a9:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   128ac:	8b 45 08             	mov    0x8(%ebp),%eax
   128af:	8b 40 18             	mov    0x18(%eax),%eax
   128b2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   128b5:	8b 45 08             	mov    0x8(%ebp),%eax
   128b8:	8b 78 14             	mov    0x14(%eax),%edi
   128bb:	8b 45 08             	mov    0x8(%ebp),%eax
   128be:	8b 70 10             	mov    0x10(%eax),%esi
   128c1:	8b 45 08             	mov    0x8(%ebp),%eax
   128c4:	8b 58 24             	mov    0x24(%eax),%ebx
   128c7:	8b 45 08             	mov    0x8(%ebp),%eax
   128ca:	8b 48 28             	mov    0x28(%eax),%ecx
   128cd:	8b 45 08             	mov    0x8(%ebp),%eax
   128d0:	8b 50 20             	mov    0x20(%eax),%edx
   128d3:	8b 45 08             	mov    0x8(%ebp),%eax
   128d6:	8b 40 2c             	mov    0x2c(%eax),%eax
   128d9:	83 ec 0c             	sub    $0xc,%esp
   128dc:	ff 75 e4             	pushl  -0x1c(%ebp)
   128df:	ff 75 d4             	pushl  -0x2c(%ebp)
   128e2:	57                   	push   %edi
   128e3:	56                   	push   %esi
   128e4:	53                   	push   %ebx
   128e5:	51                   	push   %ecx
   128e6:	52                   	push   %edx
   128e7:	50                   	push   %eax
   128e8:	68 e4 66 01 00       	push   $0x166e4
   128ed:	e8 ac 37 00 00       	call   1609e <log_printf>
   128f2:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   128f5:	8b 45 08             	mov    0x8(%ebp),%eax
   128f8:	8b 50 40             	mov    0x40(%eax),%edx
   128fb:	8b 45 08             	mov    0x8(%ebp),%eax
   128fe:	8b 40 38             	mov    0x38(%eax),%eax
   12901:	83 ec 04             	sub    $0x4,%esp
   12904:	52                   	push   %edx
   12905:	50                   	push   %eax
   12906:	68 2d 67 01 00       	push   $0x1672d
   1290b:	e8 8e 37 00 00       	call   1609e <log_printf>
   12910:	83 c4 10             	add    $0x10,%esp
}
   12913:	90                   	nop
   12914:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12917:	5b                   	pop    %ebx
   12918:	5e                   	pop    %esi
   12919:	5f                   	pop    %edi
   1291a:	5d                   	pop    %ebp
   1291b:	c3                   	ret    

0001291c <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   1291c:	55                   	push   %ebp
   1291d:	89 e5                	mov    %esp,%ebp
   1291f:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12922:	83 ec 0c             	sub    $0xc,%esp
   12925:	68 44 67 01 00       	push   $0x16744
   1292a:	e8 6f 37 00 00       	call   1609e <log_printf>
   1292f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", msg);
   12932:	83 ec 08             	sub    $0x8,%esp
   12935:	ff 75 0c             	pushl  0xc(%ebp)
   12938:	68 65 67 01 00       	push   $0x16765
   1293d:	e8 5c 37 00 00       	call   1609e <log_printf>
   12942:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame); // 打印寄存器
   12945:	83 ec 0c             	sub    $0xc,%esp
   12948:	ff 75 08             	pushl  0x8(%ebp)
   1294b:	e8 cd fe ff ff       	call   1281d <dump_core_regs>
   12950:	83 c4 10             	add    $0x10,%esp
    log_printf("--------------------------------");
   12953:	83 ec 0c             	sub    $0xc,%esp
   12956:	68 44 67 01 00       	push   $0x16744
   1295b:	e8 3e 37 00 00       	call   1609e <log_printf>
   12960:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   12963:	e8 93 fe ff ff       	call   127fb <hlt>
   12968:	eb f9                	jmp    12963 <do_default_handler+0x47>

0001296a <do_handler_unknown>:
    }
}

void do_handler_unknown(exception_frame_t *frame)
{
   1296a:	55                   	push   %ebp
   1296b:	89 e5                	mov    %esp,%ebp
   1296d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   12970:	83 ec 08             	sub    $0x8,%esp
   12973:	68 80 67 01 00       	push   $0x16780
   12978:	ff 75 08             	pushl  0x8(%ebp)
   1297b:	e8 9c ff ff ff       	call   1291c <do_default_handler>
   12980:	83 c4 10             	add    $0x10,%esp
}
   12983:	90                   	nop
   12984:	c9                   	leave  
   12985:	c3                   	ret    

00012986 <do_handler_divider>:

void do_handler_divider(exception_frame_t *frame)
{
   12986:	55                   	push   %ebp
   12987:	89 e5                	mov    %esp,%ebp
   12989:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception");
   1298c:	83 ec 08             	sub    $0x8,%esp
   1298f:	68 92 67 01 00       	push   $0x16792
   12994:	ff 75 08             	pushl  0x8(%ebp)
   12997:	e8 80 ff ff ff       	call   1291c <do_default_handler>
   1299c:	83 c4 10             	add    $0x10,%esp
}
   1299f:	90                   	nop
   129a0:	c9                   	leave  
   129a1:	c3                   	ret    

000129a2 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t *frame)
{
   129a2:	55                   	push   %ebp
   129a3:	89 e5                	mov    %esp,%ebp
   129a5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   129a8:	83 ec 08             	sub    $0x8,%esp
   129ab:	68 a4 67 01 00       	push   $0x167a4
   129b0:	ff 75 08             	pushl  0x8(%ebp)
   129b3:	e8 64 ff ff ff       	call   1291c <do_default_handler>
   129b8:	83 c4 10             	add    $0x10,%esp
}
   129bb:	90                   	nop
   129bc:	c9                   	leave  
   129bd:	c3                   	ret    

000129be <do_handler_NMI>:

void do_handler_NMI(exception_frame_t *frame)
{
   129be:	55                   	push   %ebp
   129bf:	89 e5                	mov    %esp,%ebp
   129c1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   129c4:	83 ec 08             	sub    $0x8,%esp
   129c7:	68 b4 67 01 00       	push   $0x167b4
   129cc:	ff 75 08             	pushl  0x8(%ebp)
   129cf:	e8 48 ff ff ff       	call   1291c <do_default_handler>
   129d4:	83 c4 10             	add    $0x10,%esp
}
   129d7:	90                   	nop
   129d8:	c9                   	leave  
   129d9:	c3                   	ret    

000129da <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t *frame)
{
   129da:	55                   	push   %ebp
   129db:	89 e5                	mov    %esp,%ebp
   129dd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   129e0:	83 ec 08             	sub    $0x8,%esp
   129e3:	68 c3 67 01 00       	push   $0x167c3
   129e8:	ff 75 08             	pushl  0x8(%ebp)
   129eb:	e8 2c ff ff ff       	call   1291c <do_default_handler>
   129f0:	83 c4 10             	add    $0x10,%esp
}
   129f3:	90                   	nop
   129f4:	c9                   	leave  
   129f5:	c3                   	ret    

000129f6 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t *frame)
{
   129f6:	55                   	push   %ebp
   129f7:	89 e5                	mov    %esp,%ebp
   129f9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   129fc:	83 ec 08             	sub    $0x8,%esp
   129ff:	68 cf 67 01 00       	push   $0x167cf
   12a04:	ff 75 08             	pushl  0x8(%ebp)
   12a07:	e8 10 ff ff ff       	call   1291c <do_default_handler>
   12a0c:	83 c4 10             	add    $0x10,%esp
}
   12a0f:	90                   	nop
   12a10:	c9                   	leave  
   12a11:	c3                   	ret    

00012a12 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t *frame)
{
   12a12:	55                   	push   %ebp
   12a13:	89 e5                	mov    %esp,%ebp
   12a15:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   12a18:	83 ec 08             	sub    $0x8,%esp
   12a1b:	68 d9 67 01 00       	push   $0x167d9
   12a20:	ff 75 08             	pushl  0x8(%ebp)
   12a23:	e8 f4 fe ff ff       	call   1291c <do_default_handler>
   12a28:	83 c4 10             	add    $0x10,%esp
}
   12a2b:	90                   	nop
   12a2c:	c9                   	leave  
   12a2d:	c3                   	ret    

00012a2e <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t *frame)
{
   12a2e:	55                   	push   %ebp
   12a2f:	89 e5                	mov    %esp,%ebp
   12a31:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   12a34:	83 ec 08             	sub    $0x8,%esp
   12a37:	68 ef 67 01 00       	push   $0x167ef
   12a3c:	ff 75 08             	pushl  0x8(%ebp)
   12a3f:	e8 d8 fe ff ff       	call   1291c <do_default_handler>
   12a44:	83 c4 10             	add    $0x10,%esp
}
   12a47:	90                   	nop
   12a48:	c9                   	leave  
   12a49:	c3                   	ret    

00012a4a <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t *frame)
{
   12a4a:	55                   	push   %ebp
   12a4b:	89 e5                	mov    %esp,%ebp
   12a4d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   12a50:	83 ec 08             	sub    $0x8,%esp
   12a53:	68 ff 67 01 00       	push   $0x167ff
   12a58:	ff 75 08             	pushl  0x8(%ebp)
   12a5b:	e8 bc fe ff ff       	call   1291c <do_default_handler>
   12a60:	83 c4 10             	add    $0x10,%esp
}
   12a63:	90                   	nop
   12a64:	c9                   	leave  
   12a65:	c3                   	ret    

00012a66 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t *frame)
{
   12a66:	55                   	push   %ebp
   12a67:	89 e5                	mov    %esp,%ebp
   12a69:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   12a6c:	83 ec 08             	sub    $0x8,%esp
   12a6f:	68 15 68 01 00       	push   $0x16815
   12a74:	ff 75 08             	pushl  0x8(%ebp)
   12a77:	e8 a0 fe ff ff       	call   1291c <do_default_handler>
   12a7c:	83 c4 10             	add    $0x10,%esp
}
   12a7f:	90                   	nop
   12a80:	c9                   	leave  
   12a81:	c3                   	ret    

00012a82 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t *frame)
{
   12a82:	55                   	push   %ebp
   12a83:	89 e5                	mov    %esp,%ebp
   12a85:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   12a88:	83 ec 08             	sub    $0x8,%esp
   12a8b:	68 23 68 01 00       	push   $0x16823
   12a90:	ff 75 08             	pushl  0x8(%ebp)
   12a93:	e8 84 fe ff ff       	call   1291c <do_default_handler>
   12a98:	83 c4 10             	add    $0x10,%esp
}
   12a9b:	90                   	nop
   12a9c:	c9                   	leave  
   12a9d:	c3                   	ret    

00012a9e <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t *frame)
{
   12a9e:	55                   	push   %ebp
   12a9f:	89 e5                	mov    %esp,%ebp
   12aa1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   12aa4:	83 ec 08             	sub    $0x8,%esp
   12aa7:	68 2f 68 01 00       	push   $0x1682f
   12aac:	ff 75 08             	pushl  0x8(%ebp)
   12aaf:	e8 68 fe ff ff       	call   1291c <do_default_handler>
   12ab4:	83 c4 10             	add    $0x10,%esp
}
   12ab7:	90                   	nop
   12ab8:	c9                   	leave  
   12ab9:	c3                   	ret    

00012aba <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   12aba:	55                   	push   %ebp
   12abb:	89 e5                	mov    %esp,%ebp
   12abd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   12ac0:	83 ec 08             	sub    $0x8,%esp
   12ac3:	68 44 68 01 00       	push   $0x16844
   12ac8:	ff 75 08             	pushl  0x8(%ebp)
   12acb:	e8 4c fe ff ff       	call   1291c <do_default_handler>
   12ad0:	83 c4 10             	add    $0x10,%esp
}
   12ad3:	90                   	nop
   12ad4:	c9                   	leave  
   12ad5:	c3                   	ret    

00012ad6 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   12ad6:	55                   	push   %ebp
   12ad7:	89 e5                	mov    %esp,%ebp
   12ad9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   12adc:	83 ec 08             	sub    $0x8,%esp
   12adf:	68 59 68 01 00       	push   $0x16859
   12ae4:	ff 75 08             	pushl  0x8(%ebp)
   12ae7:	e8 30 fe ff ff       	call   1291c <do_default_handler>
   12aec:	83 c4 10             	add    $0x10,%esp
}
   12aef:	90                   	nop
   12af0:	c9                   	leave  
   12af1:	c3                   	ret    

00012af2 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   12af2:	55                   	push   %ebp
   12af3:	89 e5                	mov    %esp,%ebp
   12af5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   12af8:	83 ec 08             	sub    $0x8,%esp
   12afb:	68 77 68 01 00       	push   $0x16877
   12b00:	ff 75 08             	pushl  0x8(%ebp)
   12b03:	e8 14 fe ff ff       	call   1291c <do_default_handler>
   12b08:	83 c4 10             	add    $0x10,%esp
}
   12b0b:	90                   	nop
   12b0c:	c9                   	leave  
   12b0d:	c3                   	ret    

00012b0e <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   12b0e:	55                   	push   %ebp
   12b0f:	89 e5                	mov    %esp,%ebp
   12b11:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   12b14:	83 ec 08             	sub    $0x8,%esp
   12b17:	68 88 68 01 00       	push   $0x16888
   12b1c:	ff 75 08             	pushl  0x8(%ebp)
   12b1f:	e8 f8 fd ff ff       	call   1291c <do_default_handler>
   12b24:	83 c4 10             	add    $0x10,%esp
}
   12b27:	90                   	nop
   12b28:	c9                   	leave  
   12b29:	c3                   	ret    

00012b2a <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   12b2a:	55                   	push   %ebp
   12b2b:	89 e5                	mov    %esp,%ebp
   12b2d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   12b30:	83 ec 08             	sub    $0x8,%esp
   12b33:	68 98 68 01 00       	push   $0x16898
   12b38:	ff 75 08             	pushl  0x8(%ebp)
   12b3b:	e8 dc fd ff ff       	call   1291c <do_default_handler>
   12b40:	83 c4 10             	add    $0x10,%esp
}
   12b43:	90                   	nop
   12b44:	c9                   	leave  
   12b45:	c3                   	ret    

00012b46 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   12b46:	55                   	push   %ebp
   12b47:	89 e5                	mov    %esp,%ebp
   12b49:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   12b4c:	83 ec 08             	sub    $0x8,%esp
   12b4f:	68 b7 68 01 00       	push   $0x168b7
   12b54:	ff 75 08             	pushl  0x8(%ebp)
   12b57:	e8 c0 fd ff ff       	call   1291c <do_default_handler>
   12b5c:	83 c4 10             	add    $0x10,%esp
}
   12b5f:	90                   	nop
   12b60:	c9                   	leave  
   12b61:	c3                   	ret    

00012b62 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   12b62:	55                   	push   %ebp
   12b63:	89 e5                	mov    %esp,%ebp
   12b65:	83 ec 08             	sub    $0x8,%esp
    // do_default_handler(frame, "General_protection Exception.");
    log_printf("--------------------------------");
   12b68:	83 ec 0c             	sub    $0xc,%esp
   12b6b:	68 44 67 01 00       	push   $0x16744
   12b70:	e8 29 35 00 00       	call   1609e <log_printf>
   12b75:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12b78:	83 ec 0c             	sub    $0xc,%esp
   12b7b:	68 d4 68 01 00       	push   $0x168d4
   12b80:	e8 19 35 00 00       	call   1609e <log_printf>
   12b85:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_EXT)
   12b88:	8b 45 08             	mov    0x8(%ebp),%eax
   12b8b:	8b 40 34             	mov    0x34(%eax),%eax
   12b8e:	83 e0 01             	and    $0x1,%eax
   12b91:	85 c0                	test   %eax,%eax
   12b93:	74 12                	je     12ba7 <do_handler_general_protection+0x45>
    {
        log_printf("the exception occurred during delivery of an "
   12b95:	83 ec 0c             	sub    $0xc,%esp
   12b98:	68 00 69 01 00       	push   $0x16900
   12b9d:	e8 fc 34 00 00       	call   1609e <log_printf>
   12ba2:	83 c4 10             	add    $0x10,%esp
   12ba5:	eb 10                	jmp    12bb7 <do_handler_general_protection+0x55>
                   "event external to the program, such as an interrupt"
                   "or an earlier exception.");
    }
    else
    {
        log_printf("the exception occurred during delivery of a"
   12ba7:	83 ec 0c             	sub    $0xc,%esp
   12baa:	68 7c 69 01 00       	push   $0x1697c
   12baf:	e8 ea 34 00 00       	call   1609e <log_printf>
   12bb4:	83 c4 10             	add    $0x10,%esp
                   "software interrupt (INT n, INT3, or INTO).");
    }

    if (frame->err_code & ERR_IDT)
   12bb7:	8b 45 08             	mov    0x8(%ebp),%eax
   12bba:	8b 40 34             	mov    0x34(%eax),%eax
   12bbd:	83 e0 02             	and    $0x2,%eax
   12bc0:	85 c0                	test   %eax,%eax
   12bc2:	74 12                	je     12bd6 <do_handler_general_protection+0x74>
    {
        log_printf("the index portion of the error code refers "
   12bc4:	83 ec 0c             	sub    $0xc,%esp
   12bc7:	68 d4 69 01 00       	push   $0x169d4
   12bcc:	e8 cd 34 00 00       	call   1609e <log_printf>
   12bd1:	83 c4 10             	add    $0x10,%esp
   12bd4:	eb 10                	jmp    12be6 <do_handler_general_protection+0x84>
                   "to a gate descriptor in the IDT");
    }
    else
    {
        log_printf("the index refers to a descriptor in the GDT");
   12bd6:	83 ec 0c             	sub    $0xc,%esp
   12bd9:	68 20 6a 01 00       	push   $0x16a20
   12bde:	e8 bb 34 00 00       	call   1609e <log_printf>
   12be3:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("segment index: %d", frame->err_code & 0xFFF8);
   12be6:	8b 45 08             	mov    0x8(%ebp),%eax
   12be9:	8b 40 34             	mov    0x34(%eax),%eax
   12bec:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12bf1:	83 ec 08             	sub    $0x8,%esp
   12bf4:	50                   	push   %eax
   12bf5:	68 4c 6a 01 00       	push   $0x16a4c
   12bfa:	e8 9f 34 00 00       	call   1609e <log_printf>
   12bff:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12c02:	83 ec 0c             	sub    $0xc,%esp
   12c05:	ff 75 08             	pushl  0x8(%ebp)
   12c08:	e8 10 fc ff ff       	call   1281d <dump_core_regs>
   12c0d:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   12c10:	e8 e6 fb ff ff       	call   127fb <hlt>
   12c15:	eb f9                	jmp    12c10 <do_handler_general_protection+0xae>

00012c17 <do_handler_page_fault>:
    //     }
    // }
}

void do_handler_page_fault(exception_frame_t *frame)
{
   12c17:	55                   	push   %ebp
   12c18:	89 e5                	mov    %esp,%ebp
   12c1a:	83 ec 08             	sub    $0x8,%esp

    log_printf("--------------------------------");
   12c1d:	83 ec 0c             	sub    $0xc,%esp
   12c20:	68 44 67 01 00       	push   $0x16744
   12c25:	e8 74 34 00 00       	call   1609e <log_printf>
   12c2a:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12c2d:	83 ec 0c             	sub    $0xc,%esp
   12c30:	68 60 6a 01 00       	push   $0x16a60
   12c35:	e8 64 34 00 00       	call   1609e <log_printf>
   12c3a:	83 c4 10             	add    $0x10,%esp
    // do_default_handler(frame, "Page_fault Exception.");
    if (frame->err_code & ERR_PAGE_P)
   12c3d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c40:	8b 40 34             	mov    0x34(%eax),%eax
   12c43:	83 e0 01             	and    $0x1,%eax
   12c46:	85 c0                	test   %eax,%eax
   12c48:	74 18                	je     12c62 <do_handler_page_fault+0x4b>
    {
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12c4a:	e8 9b fb ff ff       	call   127ea <read_cr2>
   12c4f:	83 ec 08             	sub    $0x8,%esp
   12c52:	50                   	push   %eax
   12c53:	68 84 6a 01 00       	push   $0x16a84
   12c58:	e8 41 34 00 00       	call   1609e <log_printf>
   12c5d:	83 c4 10             	add    $0x10,%esp
   12c60:	eb 16                	jmp    12c78 <do_handler_page_fault+0x61>
    }
    else
    {
        log_printf("\tPage doesn't present 0x%x", read_cr2());
   12c62:	e8 83 fb ff ff       	call   127ea <read_cr2>
   12c67:	83 ec 08             	sub    $0x8,%esp
   12c6a:	50                   	push   %eax
   12c6b:	68 ac 6a 01 00       	push   $0x16aac
   12c70:	e8 29 34 00 00       	call   1609e <log_printf>
   12c75:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_WR)
   12c78:	8b 45 08             	mov    0x8(%ebp),%eax
   12c7b:	8b 40 34             	mov    0x34(%eax),%eax
   12c7e:	83 e0 02             	and    $0x2,%eax
   12c81:	85 c0                	test   %eax,%eax
   12c83:	74 12                	je     12c97 <do_handler_page_fault+0x80>
    {
        log_printf("\tThe access causing the fault was a read.");
   12c85:	83 ec 0c             	sub    $0xc,%esp
   12c88:	68 c8 6a 01 00       	push   $0x16ac8
   12c8d:	e8 0c 34 00 00       	call   1609e <log_printf>
   12c92:	83 c4 10             	add    $0x10,%esp
   12c95:	eb 10                	jmp    12ca7 <do_handler_page_fault+0x90>
    }
    else
    {
        log_printf("\tThe access causing the fault was a write.");
   12c97:	83 ec 0c             	sub    $0xc,%esp
   12c9a:	68 f4 6a 01 00       	push   $0x16af4
   12c9f:	e8 fa 33 00 00       	call   1609e <log_printf>
   12ca4:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_US)
   12ca7:	8b 45 08             	mov    0x8(%ebp),%eax
   12caa:	8b 40 34             	mov    0x34(%eax),%eax
   12cad:	83 e0 02             	and    $0x2,%eax
   12cb0:	85 c0                	test   %eax,%eax
   12cb2:	74 12                	je     12cc6 <do_handler_page_fault+0xaf>
    {
        log_printf("\tA supervisor-mode access caused the fault.");
   12cb4:	83 ec 0c             	sub    $0xc,%esp
   12cb7:	68 20 6b 01 00       	push   $0x16b20
   12cbc:	e8 dd 33 00 00       	call   1609e <log_printf>
   12cc1:	83 c4 10             	add    $0x10,%esp
   12cc4:	eb 10                	jmp    12cd6 <do_handler_page_fault+0xbf>
    }
    else
    {
        log_printf("\tA user-mode access caused the fault.");
   12cc6:	83 ec 0c             	sub    $0xc,%esp
   12cc9:	68 4c 6b 01 00       	push   $0x16b4c
   12cce:	e8 cb 33 00 00       	call   1609e <log_printf>
   12cd3:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12cd6:	83 ec 0c             	sub    $0xc,%esp
   12cd9:	ff 75 08             	pushl  0x8(%ebp)
   12cdc:	e8 3c fb ff ff       	call   1281d <dump_core_regs>
   12ce1:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   12ce4:	e8 12 fb ff ff       	call   127fb <hlt>
   12ce9:	eb f9                	jmp    12ce4 <do_handler_page_fault+0xcd>

00012ceb <init_pic>:
    //     }
    // }
}

static void init_pic(void)
{
   12ceb:	55                   	push   %ebp
   12cec:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12cee:	6a 11                	push   $0x11
   12cf0:	6a 20                	push   $0x20
   12cf2:	e8 9e fa ff ff       	call   12795 <outb>
   12cf7:	83 c4 08             	add    $0x8,%esp
    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12cfa:	6a 20                	push   $0x20
   12cfc:	6a 21                	push   $0x21
   12cfe:	e8 92 fa ff ff       	call   12795 <outb>
   12d03:	83 c4 08             	add    $0x8,%esp
    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   12d06:	6a 04                	push   $0x4
   12d08:	6a 21                	push   $0x21
   12d0a:	e8 86 fa ff ff       	call   12795 <outb>
   12d0f:	83 c4 08             	add    $0x8,%esp
    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12d12:	6a 01                	push   $0x1
   12d14:	6a 21                	push   $0x21
   12d16:	e8 7a fa ff ff       	call   12795 <outb>
   12d1b:	83 c4 08             	add    $0x8,%esp

    // 第二块芯片
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12d1e:	6a 11                	push   $0x11
   12d20:	68 a0 00 00 00       	push   $0xa0
   12d25:	e8 6b fa ff ff       	call   12795 <outb>
   12d2a:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12d2d:	6a 28                	push   $0x28
   12d2f:	68 a1 00 00 00       	push   $0xa1
   12d34:	e8 5c fa ff ff       	call   12795 <outb>
   12d39:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12d3c:	6a 02                	push   $0x2
   12d3e:	68 a1 00 00 00       	push   $0xa1
   12d43:	e8 4d fa ff ff       	call   12795 <outb>
   12d48:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12d4b:	6a 01                	push   $0x1
   12d4d:	68 a1 00 00 00       	push   $0xa1
   12d52:	e8 3e fa ff ff       	call   12795 <outb>
   12d57:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12d5a:	68 fb 00 00 00       	push   $0xfb
   12d5f:	6a 21                	push   $0x21
   12d61:	e8 2f fa ff ff       	call   12795 <outb>
   12d66:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12d69:	68 ff 00 00 00       	push   $0xff
   12d6e:	68 a1 00 00 00       	push   $0xa1
   12d73:	e8 1d fa ff ff       	call   12795 <outb>
   12d78:	83 c4 08             	add    $0x8,%esp
}
   12d7b:	90                   	nop
   12d7c:	c9                   	leave  
   12d7d:	c3                   	ret    

00012d7e <irq_init>:

void irq_init(void)
{
   12d7e:	55                   	push   %ebp
   12d7f:	89 e5                	mov    %esp,%ebp
   12d81:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   12d84:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12d8b:	eb 25                	jmp    12db2 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   12d8d:	ba 35 00 01 00       	mov    $0x10035,%edx
   12d92:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12d95:	c1 e0 03             	shl    $0x3,%eax
   12d98:	05 00 52 03 00       	add    $0x35200,%eax
   12d9d:	68 00 8e 00 00       	push   $0x8e00
   12da2:	52                   	push   %edx
   12da3:	6a 08                	push   $0x8
   12da5:	50                   	push   %eax
   12da6:	e8 55 f9 ff ff       	call   12700 <gate_desc_set>
   12dab:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   12dae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12db2:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12db6:	7e d5                	jle    12d8d <irq_init+0xf>
    }
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   12db8:	83 ec 08             	sub    $0x8,%esp
   12dbb:	68 54 00 01 00       	push   $0x10054
   12dc0:	6a 00                	push   $0x0
   12dc2:	e8 65 01 00 00       	call   12f2c <irq_install>
   12dc7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   12dca:	83 ec 08             	sub    $0x8,%esp
   12dcd:	68 73 00 01 00       	push   $0x10073
   12dd2:	6a 01                	push   $0x1
   12dd4:	e8 53 01 00 00       	call   12f2c <irq_install>
   12dd9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   12ddc:	83 ec 08             	sub    $0x8,%esp
   12ddf:	68 92 00 01 00       	push   $0x10092
   12de4:	6a 02                	push   $0x2
   12de6:	e8 41 01 00 00       	call   12f2c <irq_install>
   12deb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   12dee:	83 ec 08             	sub    $0x8,%esp
   12df1:	68 b1 00 01 00       	push   $0x100b1
   12df6:	6a 03                	push   $0x3
   12df8:	e8 2f 01 00 00       	call   12f2c <irq_install>
   12dfd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   12e00:	83 ec 08             	sub    $0x8,%esp
   12e03:	68 d0 00 01 00       	push   $0x100d0
   12e08:	6a 04                	push   $0x4
   12e0a:	e8 1d 01 00 00       	call   12f2c <irq_install>
   12e0f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   12e12:	83 ec 08             	sub    $0x8,%esp
   12e15:	68 ef 00 01 00       	push   $0x100ef
   12e1a:	6a 05                	push   $0x5
   12e1c:	e8 0b 01 00 00       	call   12f2c <irq_install>
   12e21:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   12e24:	83 ec 08             	sub    $0x8,%esp
   12e27:	68 0e 01 01 00       	push   $0x1010e
   12e2c:	6a 06                	push   $0x6
   12e2e:	e8 f9 00 00 00       	call   12f2c <irq_install>
   12e33:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   12e36:	83 ec 08             	sub    $0x8,%esp
   12e39:	68 2d 01 01 00       	push   $0x1012d
   12e3e:	6a 07                	push   $0x7
   12e40:	e8 e7 00 00 00       	call   12f2c <irq_install>
   12e45:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   12e48:	83 ec 08             	sub    $0x8,%esp
   12e4b:	68 4c 01 01 00       	push   $0x1014c
   12e50:	6a 08                	push   $0x8
   12e52:	e8 d5 00 00 00       	call   12f2c <irq_install>
   12e57:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   12e5a:	83 ec 08             	sub    $0x8,%esp
   12e5d:	68 69 01 01 00       	push   $0x10169
   12e62:	6a 0a                	push   $0xa
   12e64:	e8 c3 00 00 00       	call   12f2c <irq_install>
   12e69:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   12e6c:	83 ec 08             	sub    $0x8,%esp
   12e6f:	68 86 01 01 00       	push   $0x10186
   12e74:	6a 0b                	push   $0xb
   12e76:	e8 b1 00 00 00       	call   12f2c <irq_install>
   12e7b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   12e7e:	83 ec 08             	sub    $0x8,%esp
   12e81:	68 a3 01 01 00       	push   $0x101a3
   12e86:	6a 0c                	push   $0xc
   12e88:	e8 9f 00 00 00       	call   12f2c <irq_install>
   12e8d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   12e90:	83 ec 08             	sub    $0x8,%esp
   12e93:	68 c0 01 01 00       	push   $0x101c0
   12e98:	6a 0d                	push   $0xd
   12e9a:	e8 8d 00 00 00       	call   12f2c <irq_install>
   12e9f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   12ea2:	83 ec 08             	sub    $0x8,%esp
   12ea5:	68 dd 01 01 00       	push   $0x101dd
   12eaa:	6a 0e                	push   $0xe
   12eac:	e8 7b 00 00 00       	call   12f2c <irq_install>
   12eb1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   12eb4:	83 ec 08             	sub    $0x8,%esp
   12eb7:	68 fa 01 01 00       	push   $0x101fa
   12ebc:	6a 10                	push   $0x10
   12ebe:	e8 69 00 00 00       	call   12f2c <irq_install>
   12ec3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   12ec6:	83 ec 08             	sub    $0x8,%esp
   12ec9:	68 19 02 01 00       	push   $0x10219
   12ece:	6a 11                	push   $0x11
   12ed0:	e8 57 00 00 00       	call   12f2c <irq_install>
   12ed5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   12ed8:	83 ec 08             	sub    $0x8,%esp
   12edb:	68 36 02 01 00       	push   $0x10236
   12ee0:	6a 12                	push   $0x12
   12ee2:	e8 45 00 00 00       	call   12f2c <irq_install>
   12ee7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   12eea:	83 ec 08             	sub    $0x8,%esp
   12eed:	68 55 02 01 00       	push   $0x10255
   12ef2:	6a 13                	push   $0x13
   12ef4:	e8 33 00 00 00       	call   12f2c <irq_install>
   12ef9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   12efc:	83 ec 08             	sub    $0x8,%esp
   12eff:	68 74 02 01 00       	push   $0x10274
   12f04:	6a 14                	push   $0x14
   12f06:	e8 21 00 00 00       	call   12f2c <irq_install>
   12f0b:	83 c4 10             	add    $0x10,%esp
    lidt((uint32_t)idt_table, sizeof(idt_table));
   12f0e:	b8 00 52 03 00       	mov    $0x35200,%eax
   12f13:	83 ec 08             	sub    $0x8,%esp
   12f16:	68 00 04 00 00       	push   $0x400
   12f1b:	50                   	push   %eax
   12f1c:	e8 a1 f8 ff ff       	call   127c2 <lidt>
   12f21:	83 c4 10             	add    $0x10,%esp

    init_pic();
   12f24:	e8 c2 fd ff ff       	call   12ceb <init_pic>
}
   12f29:	90                   	nop
   12f2a:	c9                   	leave  
   12f2b:	c3                   	ret    

00012f2c <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   12f2c:	55                   	push   %ebp
   12f2d:	89 e5                	mov    %esp,%ebp
   12f2f:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   12f32:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12f36:	7e 07                	jle    12f3f <irq_install+0x13>
    {
        return -1;
   12f38:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12f3d:	eb 25                	jmp    12f64 <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   12f3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12f42:	8b 55 08             	mov    0x8(%ebp),%edx
   12f45:	c1 e2 03             	shl    $0x3,%edx
   12f48:	81 c2 00 52 03 00    	add    $0x35200,%edx
   12f4e:	68 00 8e 00 00       	push   $0x8e00
   12f53:	50                   	push   %eax
   12f54:	6a 08                	push   $0x8
   12f56:	52                   	push   %edx
   12f57:	e8 a4 f7 ff ff       	call   12700 <gate_desc_set>
   12f5c:	83 c4 10             	add    $0x10,%esp
    return 0;
   12f5f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12f64:	c9                   	leave  
   12f65:	c3                   	ret    

00012f66 <irq_enable>:

void irq_enable(int irq_num)
{
   12f66:	55                   	push   %ebp
   12f67:	89 e5                	mov    %esp,%ebp
   12f69:	53                   	push   %ebx
   12f6a:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12f6d:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12f71:	7e 78                	jle    12feb <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12f73:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12f77:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12f7b:	7f 32                	jg     12faf <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12f7d:	6a 21                	push   $0x21
   12f7f:	e8 f4 f7 ff ff       	call   12778 <inb>
   12f84:	83 c4 04             	add    $0x4,%esp
   12f87:	89 c2                	mov    %eax,%edx
   12f89:	8b 45 08             	mov    0x8(%ebp),%eax
   12f8c:	bb 01 00 00 00       	mov    $0x1,%ebx
   12f91:	89 c1                	mov    %eax,%ecx
   12f93:	d3 e3                	shl    %cl,%ebx
   12f95:	89 d8                	mov    %ebx,%eax
   12f97:	f7 d0                	not    %eax
   12f99:	21 d0                	and    %edx,%eax
   12f9b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12f9e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12fa2:	50                   	push   %eax
   12fa3:	6a 21                	push   $0x21
   12fa5:	e8 eb f7 ff ff       	call   12795 <outb>
   12faa:	83 c4 08             	add    $0x8,%esp
   12fad:	eb 3d                	jmp    12fec <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   12faf:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   12fb3:	68 a1 00 00 00       	push   $0xa1
   12fb8:	e8 bb f7 ff ff       	call   12778 <inb>
   12fbd:	83 c4 04             	add    $0x4,%esp
   12fc0:	89 c2                	mov    %eax,%edx
   12fc2:	8b 45 08             	mov    0x8(%ebp),%eax
   12fc5:	bb 01 00 00 00       	mov    $0x1,%ebx
   12fca:	89 c1                	mov    %eax,%ecx
   12fcc:	d3 e3                	shl    %cl,%ebx
   12fce:	89 d8                	mov    %ebx,%eax
   12fd0:	f7 d0                	not    %eax
   12fd2:	21 d0                	and    %edx,%eax
   12fd4:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   12fd7:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12fdb:	50                   	push   %eax
   12fdc:	68 a1 00 00 00       	push   $0xa1
   12fe1:	e8 af f7 ff ff       	call   12795 <outb>
   12fe6:	83 c4 08             	add    $0x8,%esp
   12fe9:	eb 01                	jmp    12fec <irq_enable+0x86>
        return;
   12feb:	90                   	nop
    }
}
   12fec:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12fef:	c9                   	leave  
   12ff0:	c3                   	ret    

00012ff1 <irq_disable>:

void irq_disable(int irq_num)
{
   12ff1:	55                   	push   %ebp
   12ff2:	89 e5                	mov    %esp,%ebp
   12ff4:	53                   	push   %ebx
   12ff5:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12ff8:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12ffc:	7e 74                	jle    13072 <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12ffe:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   13002:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   13006:	7f 30                	jg     13038 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   13008:	6a 21                	push   $0x21
   1300a:	e8 69 f7 ff ff       	call   12778 <inb>
   1300f:	83 c4 04             	add    $0x4,%esp
   13012:	89 c3                	mov    %eax,%ebx
   13014:	8b 45 08             	mov    0x8(%ebp),%eax
   13017:	ba 01 00 00 00       	mov    $0x1,%edx
   1301c:	89 c1                	mov    %eax,%ecx
   1301e:	d3 e2                	shl    %cl,%edx
   13020:	89 d0                	mov    %edx,%eax
   13022:	09 d8                	or     %ebx,%eax
   13024:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   13027:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1302b:	50                   	push   %eax
   1302c:	6a 21                	push   $0x21
   1302e:	e8 62 f7 ff ff       	call   12795 <outb>
   13033:	83 c4 08             	add    $0x8,%esp
   13036:	eb 3b                	jmp    13073 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   13038:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   1303c:	68 a1 00 00 00       	push   $0xa1
   13041:	e8 32 f7 ff ff       	call   12778 <inb>
   13046:	83 c4 04             	add    $0x4,%esp
   13049:	89 c3                	mov    %eax,%ebx
   1304b:	8b 45 08             	mov    0x8(%ebp),%eax
   1304e:	ba 01 00 00 00       	mov    $0x1,%edx
   13053:	89 c1                	mov    %eax,%ecx
   13055:	d3 e2                	shl    %cl,%edx
   13057:	89 d0                	mov    %edx,%eax
   13059:	09 d8                	or     %ebx,%eax
   1305b:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1305e:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   13062:	50                   	push   %eax
   13063:	68 a1 00 00 00       	push   $0xa1
   13068:	e8 28 f7 ff ff       	call   12795 <outb>
   1306d:	83 c4 08             	add    $0x8,%esp
   13070:	eb 01                	jmp    13073 <irq_disable+0x82>
        return;
   13072:	90                   	nop
    }
}
   13073:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13076:	c9                   	leave  
   13077:	c3                   	ret    

00013078 <irq_disable_global>:

void irq_disable_global(void)
{
   13078:	55                   	push   %ebp
   13079:	89 e5                	mov    %esp,%ebp
    cli();
   1307b:	e8 34 f7 ff ff       	call   127b4 <cli>
}
   13080:	90                   	nop
   13081:	5d                   	pop    %ebp
   13082:	c3                   	ret    

00013083 <irq_enable_global>:

void irq_enable_global(void)
{
   13083:	55                   	push   %ebp
   13084:	89 e5                	mov    %esp,%ebp
    sti();
   13086:	e8 30 f7 ff ff       	call   127bb <sti>
}
   1308b:	90                   	nop
   1308c:	5d                   	pop    %ebp
   1308d:	c3                   	ret    

0001308e <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   1308e:	55                   	push   %ebp
   1308f:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   13091:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    // 从片也可能需要发送EOI
    if (irq_num >= 8)
   13095:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   13099:	7e 0f                	jle    130aa <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   1309b:	6a 20                	push   $0x20
   1309d:	68 a0 00 00 00       	push   $0xa0
   130a2:	e8 ee f6 ff ff       	call   12795 <outb>
   130a7:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   130aa:	6a 20                	push   $0x20
   130ac:	6a 20                	push   $0x20
   130ae:	e8 e2 f6 ff ff       	call   12795 <outb>
   130b3:	83 c4 08             	add    $0x8,%esp
}
   130b6:	90                   	nop
   130b7:	c9                   	leave  
   130b8:	c3                   	ret    

000130b9 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection(void)
{
   130b9:	55                   	push   %ebp
   130ba:	89 e5                	mov    %esp,%ebp
   130bc:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags(); // 保存之前的中断状态
   130bf:	e8 3e f7 ff ff       	call   12802 <read_eflags>
   130c4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   130c7:	e8 ac ff ff ff       	call   13078 <irq_disable_global>
    return state;
   130cc:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   130cf:	c9                   	leave  
   130d0:	c3                   	ret    

000130d1 <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection(irq_state_t state)
{
   130d1:	55                   	push   %ebp
   130d2:	89 e5                	mov    %esp,%ebp
    write_eflags(state); // 恢复之前的中断状态
   130d4:	ff 75 08             	pushl  0x8(%ebp)
   130d7:	e8 36 f7 ff ff       	call   12812 <write_eflags>
   130dc:	83 c4 04             	add    $0x4,%esp
   130df:	90                   	nop
   130e0:	c9                   	leave  
   130e1:	c3                   	ret    

000130e2 <inb>:
{
   130e2:	55                   	push   %ebp
   130e3:	89 e5                	mov    %esp,%ebp
   130e5:	83 ec 14             	sub    $0x14,%esp
   130e8:	8b 45 08             	mov    0x8(%ebp),%eax
   130eb:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   130ef:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   130f3:	89 c2                	mov    %eax,%edx
   130f5:	ec                   	in     (%dx),%al
   130f6:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   130f9:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   130fd:	c9                   	leave  
   130fe:	c3                   	ret    

000130ff <outb>:
{
   130ff:	55                   	push   %ebp
   13100:	89 e5                	mov    %esp,%ebp
   13102:	83 ec 08             	sub    $0x8,%esp
   13105:	8b 55 08             	mov    0x8(%ebp),%edx
   13108:	8b 45 0c             	mov    0xc(%ebp),%eax
   1310b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1310f:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   13112:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13116:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1311a:	ee                   	out    %al,(%dx)
}
   1311b:	90                   	nop
   1311c:	c9                   	leave  
   1311d:	c3                   	ret    

0001311e <read_cursor_pos>:
/**
 * @brief 读取当前光标的位置
 */
static int
read_cursor_pos(void)
{
   1311e:	55                   	push   %ebp
   1311f:	89 e5                	mov    %esp,%ebp
   13121:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   13124:	e8 90 ff ff ff       	call   130b9 <irq_enter_protection>
   13129:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   1312c:	83 ec 08             	sub    $0x8,%esp
   1312f:	6a 0f                	push   $0xf
   13131:	68 d4 03 00 00       	push   $0x3d4
   13136:	e8 c4 ff ff ff       	call   130ff <outb>
   1313b:	83 c4 10             	add    $0x10,%esp
    pos = inb(0x3D5);
   1313e:	83 ec 0c             	sub    $0xc,%esp
   13141:	68 d5 03 00 00       	push   $0x3d5
   13146:	e8 97 ff ff ff       	call   130e2 <inb>
   1314b:	83 c4 10             	add    $0x10,%esp
   1314e:	0f b6 c0             	movzbl %al,%eax
   13151:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0E); // 写高地址
   13154:	83 ec 08             	sub    $0x8,%esp
   13157:	6a 0e                	push   $0xe
   13159:	68 d4 03 00 00       	push   $0x3d4
   1315e:	e8 9c ff ff ff       	call   130ff <outb>
   13163:	83 c4 10             	add    $0x10,%esp
    pos |= inb(0x3D5) << 8;
   13166:	83 ec 0c             	sub    $0xc,%esp
   13169:	68 d5 03 00 00       	push   $0x3d5
   1316e:	e8 6f ff ff ff       	call   130e2 <inb>
   13173:	83 c4 10             	add    $0x10,%esp
   13176:	0f b6 c0             	movzbl %al,%eax
   13179:	c1 e0 08             	shl    $0x8,%eax
   1317c:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   1317f:	83 ec 0c             	sub    $0xc,%esp
   13182:	ff 75 f4             	pushl  -0xc(%ebp)
   13185:	e8 47 ff ff ff       	call   130d1 <irq_leave_protection>
   1318a:	83 c4 10             	add    $0x10,%esp
    return pos;
   1318d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   13190:	c9                   	leave  
   13191:	c3                   	ret    

00013192 <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos(console_t *console)
{
   13192:	55                   	push   %ebp
   13193:	89 e5                	mov    %esp,%ebp
   13195:	83 ec 18             	sub    $0x18,%esp
    uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   13198:	8b 45 08             	mov    0x8(%ebp),%eax
   1319b:	ba 00 56 03 00       	mov    $0x35600,%edx
   131a0:	29 d0                	sub    %edx,%eax
   131a2:	c1 f8 03             	sar    $0x3,%eax
   131a5:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   131ab:	89 c2                	mov    %eax,%edx
   131ad:	8b 45 08             	mov    0x8(%ebp),%eax
   131b0:	8b 40 14             	mov    0x14(%eax),%eax
   131b3:	89 c1                	mov    %eax,%ecx
   131b5:	8b 45 08             	mov    0x8(%ebp),%eax
   131b8:	8b 40 10             	mov    0x10(%eax),%eax
   131bb:	0f af c1             	imul   %ecx,%eax
   131be:	0f af c2             	imul   %edx,%eax
   131c1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row * console->display_cols + console->cursor_col;
   131c5:	8b 45 08             	mov    0x8(%ebp),%eax
   131c8:	8b 40 08             	mov    0x8(%eax),%eax
   131cb:	89 c2                	mov    %eax,%edx
   131cd:	8b 45 08             	mov    0x8(%ebp),%eax
   131d0:	8b 40 14             	mov    0x14(%eax),%eax
   131d3:	0f af d0             	imul   %eax,%edx
   131d6:	8b 45 08             	mov    0x8(%ebp),%eax
   131d9:	8b 40 0c             	mov    0xc(%eax),%eax
   131dc:	01 d0                	add    %edx,%eax
   131de:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   131e2:	e8 d2 fe ff ff       	call   130b9 <irq_enter_protection>
   131e7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   131ea:	83 ec 08             	sub    $0x8,%esp
   131ed:	6a 0f                	push   $0xf
   131ef:	68 d4 03 00 00       	push   $0x3d4
   131f4:	e8 06 ff ff ff       	call   130ff <outb>
   131f9:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)(pos & 0xFF));
   131fc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13200:	0f b6 c0             	movzbl %al,%eax
   13203:	83 ec 08             	sub    $0x8,%esp
   13206:	50                   	push   %eax
   13207:	68 d5 03 00 00       	push   $0x3d5
   1320c:	e8 ee fe ff ff       	call   130ff <outb>
   13211:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 0x0E); // 写高地址
   13214:	83 ec 08             	sub    $0x8,%esp
   13217:	6a 0e                	push   $0xe
   13219:	68 d4 03 00 00       	push   $0x3d4
   1321e:	e8 dc fe ff ff       	call   130ff <outb>
   13223:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
   13226:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1322a:	66 c1 e8 08          	shr    $0x8,%ax
   1322e:	0f b6 c0             	movzbl %al,%eax
   13231:	83 ec 08             	sub    $0x8,%esp
   13234:	50                   	push   %eax
   13235:	68 d5 03 00 00       	push   $0x3d5
   1323a:	e8 c0 fe ff ff       	call   130ff <outb>
   1323f:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   13242:	83 ec 0c             	sub    $0xc,%esp
   13245:	ff 75 f0             	pushl  -0x10(%ebp)
   13248:	e8 84 fe ff ff       	call   130d1 <irq_leave_protection>
   1324d:	83 c4 10             	add    $0x10,%esp
}
   13250:	90                   	nop
   13251:	c9                   	leave  
   13252:	c3                   	ret    

00013253 <clear_display>:

static void clear_display(console_t *console)
{
   13253:	55                   	push   %ebp
   13254:	89 e5                	mov    %esp,%ebp
   13256:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   13259:	8b 45 08             	mov    0x8(%ebp),%eax
   1325c:	8b 50 14             	mov    0x14(%eax),%edx
   1325f:	8b 45 08             	mov    0x8(%ebp),%eax
   13262:	8b 40 10             	mov    0x10(%eax),%eax
   13265:	0f af c2             	imul   %edx,%eax
   13268:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t *start = console->disp_base;
   1326b:	8b 45 08             	mov    0x8(%ebp),%eax
   1326e:	8b 00                	mov    (%eax),%eax
   13270:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++)
   13273:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1327a:	eb 51                	jmp    132cd <clear_display+0x7a>
    {
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   1327c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1327f:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   13282:	8b 45 08             	mov    0x8(%ebp),%eax
   13285:	8b 40 24             	mov    0x24(%eax),%eax
   13288:	c1 e0 05             	shl    $0x5,%eax
   1328b:	c0 f8 05             	sar    $0x5,%al
   1328e:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13291:	83 e0 07             	and    $0x7,%eax
   13294:	c1 e0 04             	shl    $0x4,%eax
   13297:	89 c1                	mov    %eax,%ecx
   13299:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1329d:	83 e0 8f             	and    $0xffffff8f,%eax
   132a0:	09 c8                	or     %ecx,%eax
   132a2:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   132a5:	8b 45 08             	mov    0x8(%ebp),%eax
   132a8:	8b 40 20             	mov    0x20(%eax),%eax
   132ab:	c1 e0 04             	shl    $0x4,%eax
   132ae:	c0 f8 04             	sar    $0x4,%al
   132b1:	8b 55 fc             	mov    -0x4(%ebp),%edx
   132b4:	83 e0 0f             	and    $0xf,%eax
   132b7:	89 c1                	mov    %eax,%ecx
   132b9:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   132bd:	83 e0 f0             	and    $0xfffffff0,%eax
   132c0:	09 c8                	or     %ecx,%eax
   132c2:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++)
   132c5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   132c9:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   132cd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   132d0:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   132d3:	7c a7                	jl     1327c <clear_display+0x29>
    }
}
   132d5:	90                   	nop
   132d6:	c9                   	leave  
   132d7:	c3                   	ret    

000132d8 <erase_rows>:

/**
 * @brief 擦除从start到end的行
 */
static void erase_rows(console_t *console, int start, int end)
{
   132d8:	55                   	push   %ebp
   132d9:	89 e5                	mov    %esp,%ebp
   132db:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   132de:	8b 45 08             	mov    0x8(%ebp),%eax
   132e1:	8b 10                	mov    (%eax),%edx
   132e3:	8b 45 08             	mov    0x8(%ebp),%eax
   132e6:	8b 40 14             	mov    0x14(%eax),%eax
   132e9:	0f af 45 0c          	imul   0xc(%ebp),%eax
   132ed:	01 c0                	add    %eax,%eax
   132ef:	01 d0                	add    %edx,%eax
   132f1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t *disp_end = console->disp_base + console->display_cols * (end + 1);
   132f4:	8b 45 08             	mov    0x8(%ebp),%eax
   132f7:	8b 10                	mov    (%eax),%edx
   132f9:	8b 45 08             	mov    0x8(%ebp),%eax
   132fc:	8b 40 14             	mov    0x14(%eax),%eax
   132ff:	8b 4d 10             	mov    0x10(%ebp),%ecx
   13302:	83 c1 01             	add    $0x1,%ecx
   13305:	0f af c1             	imul   %ecx,%eax
   13308:	01 c0                	add    %eax,%eax
   1330a:	01 d0                	add    %edx,%eax
   1330c:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end)
   1330f:	eb 4d                	jmp    1335e <erase_rows+0x86>
    {
        disp_start->c = ' ';
   13311:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13314:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   13317:	8b 45 08             	mov    0x8(%ebp),%eax
   1331a:	8b 40 20             	mov    0x20(%eax),%eax
   1331d:	c1 e0 04             	shl    $0x4,%eax
   13320:	c0 f8 04             	sar    $0x4,%al
   13323:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13326:	83 e0 0f             	and    $0xf,%eax
   13329:	89 c1                	mov    %eax,%ecx
   1332b:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1332f:	83 e0 f0             	and    $0xfffffff0,%eax
   13332:	09 c8                	or     %ecx,%eax
   13334:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   13337:	8b 45 08             	mov    0x8(%ebp),%eax
   1333a:	8b 40 24             	mov    0x24(%eax),%eax
   1333d:	c1 e0 05             	shl    $0x5,%eax
   13340:	c0 f8 05             	sar    $0x5,%al
   13343:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13346:	83 e0 07             	and    $0x7,%eax
   13349:	c1 e0 04             	shl    $0x4,%eax
   1334c:	89 c1                	mov    %eax,%ecx
   1334e:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13352:	83 e0 8f             	and    $0xffffff8f,%eax
   13355:	09 c8                	or     %ecx,%eax
   13357:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   1335a:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end)
   1335e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13361:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   13364:	72 ab                	jb     13311 <erase_rows+0x39>
    }
}
   13366:	90                   	nop
   13367:	c9                   	leave  
   13368:	c3                   	ret    

00013369 <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t *console, int lines)
{
   13369:	55                   	push   %ebp
   1336a:	89 e5                	mov    %esp,%ebp
   1336c:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t *dest = console->disp_base;
   1336f:	8b 45 08             	mov    0x8(%ebp),%eax
   13372:	8b 00                	mov    (%eax),%eax
   13374:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *src = console->disp_base + console->display_cols * lines;
   13377:	8b 45 08             	mov    0x8(%ebp),%eax
   1337a:	8b 10                	mov    (%eax),%edx
   1337c:	8b 45 08             	mov    0x8(%ebp),%eax
   1337f:	8b 40 14             	mov    0x14(%eax),%eax
   13382:	0f af 45 0c          	imul   0xc(%ebp),%eax
   13386:	01 c0                	add    %eax,%eax
   13388:	01 d0                	add    %edx,%eax
   1338a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   1338d:	8b 45 08             	mov    0x8(%ebp),%eax
   13390:	8b 40 10             	mov    0x10(%eax),%eax
   13393:	2b 45 0c             	sub    0xc(%ebp),%eax
   13396:	89 c2                	mov    %eax,%edx
   13398:	8b 45 08             	mov    0x8(%ebp),%eax
   1339b:	8b 40 14             	mov    0x14(%eax),%eax
   1339e:	0f af c2             	imul   %edx,%eax
   133a1:	01 c0                	add    %eax,%eax
   133a3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   133a6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   133a9:	83 ec 04             	sub    $0x4,%esp
   133ac:	50                   	push   %eax
   133ad:	ff 75 f0             	pushl  -0x10(%ebp)
   133b0:	ff 75 f4             	pushl  -0xc(%ebp)
   133b3:	e8 9e 26 00 00       	call   15a56 <kernel_memcpy>
   133b8:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   133bb:	8b 45 08             	mov    0x8(%ebp),%eax
   133be:	8b 40 10             	mov    0x10(%eax),%eax
   133c1:	8d 50 ff             	lea    -0x1(%eax),%edx
   133c4:	8b 45 08             	mov    0x8(%ebp),%eax
   133c7:	8b 40 10             	mov    0x10(%eax),%eax
   133ca:	2b 45 0c             	sub    0xc(%ebp),%eax
   133cd:	83 ec 04             	sub    $0x4,%esp
   133d0:	52                   	push   %edx
   133d1:	50                   	push   %eax
   133d2:	ff 75 08             	pushl  0x8(%ebp)
   133d5:	e8 fe fe ff ff       	call   132d8 <erase_rows>
   133da:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   133dd:	8b 45 08             	mov    0x8(%ebp),%eax
   133e0:	8b 40 08             	mov    0x8(%eax),%eax
   133e3:	2b 45 0c             	sub    0xc(%ebp),%eax
   133e6:	89 c2                	mov    %eax,%edx
   133e8:	8b 45 08             	mov    0x8(%ebp),%eax
   133eb:	89 50 08             	mov    %edx,0x8(%eax)
}
   133ee:	90                   	nop
   133ef:	c9                   	leave  
   133f0:	c3                   	ret    

000133f1 <move_to_col0>:

static void move_to_col0(console_t *console)
{
   133f1:	55                   	push   %ebp
   133f2:	89 e5                	mov    %esp,%ebp
    console->cursor_col = 0;
   133f4:	8b 45 08             	mov    0x8(%ebp),%eax
   133f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   133fe:	90                   	nop
   133ff:	5d                   	pop    %ebp
   13400:	c3                   	ret    

00013401 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line(console_t *console)
{
   13401:	55                   	push   %ebp
   13402:	89 e5                	mov    %esp,%ebp
   13404:	83 ec 08             	sub    $0x8,%esp
    console->cursor_row++;
   13407:	8b 45 08             	mov    0x8(%ebp),%eax
   1340a:	8b 40 08             	mov    0x8(%eax),%eax
   1340d:	8d 50 01             	lea    0x1(%eax),%edx
   13410:	8b 45 08             	mov    0x8(%ebp),%eax
   13413:	89 50 08             	mov    %edx,0x8(%eax)

    // 超出当前屏幕显示的所有行，上移一行
    if (console->cursor_row >= console->display_rows)
   13416:	8b 45 08             	mov    0x8(%ebp),%eax
   13419:	8b 50 08             	mov    0x8(%eax),%edx
   1341c:	8b 45 08             	mov    0x8(%ebp),%eax
   1341f:	8b 40 10             	mov    0x10(%eax),%eax
   13422:	39 c2                	cmp    %eax,%edx
   13424:	7c 10                	jl     13436 <move_next_line+0x35>
    {
        scroll_up(console, 1);
   13426:	83 ec 08             	sub    $0x8,%esp
   13429:	6a 01                	push   $0x1
   1342b:	ff 75 08             	pushl  0x8(%ebp)
   1342e:	e8 36 ff ff ff       	call   13369 <scroll_up>
   13433:	83 c4 10             	add    $0x10,%esp
    }
}
   13436:	90                   	nop
   13437:	c9                   	leave  
   13438:	c3                   	ret    

00013439 <move_forward>:

/**
 * 将光标往前移n个字符
 */
static void move_forward(console_t *console, int n)
{
   13439:	55                   	push   %ebp
   1343a:	89 e5                	mov    %esp,%ebp
   1343c:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < n; i++)
   1343f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13446:	eb 5c                	jmp    134a4 <move_forward+0x6b>
    {
        // 超过最后一列需要换行
        if (++console->cursor_col >= console->display_cols)
   13448:	8b 45 08             	mov    0x8(%ebp),%eax
   1344b:	8b 40 0c             	mov    0xc(%eax),%eax
   1344e:	8d 50 01             	lea    0x1(%eax),%edx
   13451:	8b 45 08             	mov    0x8(%ebp),%eax
   13454:	89 50 0c             	mov    %edx,0xc(%eax)
   13457:	8b 45 08             	mov    0x8(%ebp),%eax
   1345a:	8b 50 0c             	mov    0xc(%eax),%edx
   1345d:	8b 45 08             	mov    0x8(%ebp),%eax
   13460:	8b 40 14             	mov    0x14(%eax),%eax
   13463:	39 c2                	cmp    %eax,%edx
   13465:	7c 39                	jl     134a0 <move_forward+0x67>
        {
            console->cursor_col = 0;
   13467:	8b 45 08             	mov    0x8(%ebp),%eax
   1346a:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   13471:	8b 45 08             	mov    0x8(%ebp),%eax
   13474:	8b 40 08             	mov    0x8(%eax),%eax
   13477:	8d 50 01             	lea    0x1(%eax),%edx
   1347a:	8b 45 08             	mov    0x8(%ebp),%eax
   1347d:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows)
   13480:	8b 45 08             	mov    0x8(%ebp),%eax
   13483:	8b 50 08             	mov    0x8(%eax),%edx
   13486:	8b 45 08             	mov    0x8(%ebp),%eax
   13489:	8b 40 10             	mov    0x10(%eax),%eax
   1348c:	39 c2                	cmp    %eax,%edx
   1348e:	7c 10                	jl     134a0 <move_forward+0x67>
            {
                // 超出末端，上移
                scroll_up(console, 1);
   13490:	83 ec 08             	sub    $0x8,%esp
   13493:	6a 01                	push   $0x1
   13495:	ff 75 08             	pushl  0x8(%ebp)
   13498:	e8 cc fe ff ff       	call   13369 <scroll_up>
   1349d:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < n; i++)
   134a0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   134a4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   134a7:	3b 45 0c             	cmp    0xc(%ebp),%eax
   134aa:	7c 9c                	jl     13448 <move_forward+0xf>
            }
        }
    }
}
   134ac:	90                   	nop
   134ad:	c9                   	leave  
   134ae:	c3                   	ret    

000134af <show_char>:

static void show_char(console_t *console, char c)
{
   134af:	55                   	push   %ebp
   134b0:	89 e5                	mov    %esp,%ebp
   134b2:	83 ec 28             	sub    $0x28,%esp
   134b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   134b8:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   134bb:	8b 45 08             	mov    0x8(%ebp),%eax
   134be:	8b 50 0c             	mov    0xc(%eax),%edx
   134c1:	8b 45 08             	mov    0x8(%ebp),%eax
   134c4:	8b 48 08             	mov    0x8(%eax),%ecx
   134c7:	8b 45 08             	mov    0x8(%ebp),%eax
   134ca:	8b 40 14             	mov    0x14(%eax),%eax
   134cd:	0f af c1             	imul   %ecx,%eax
   134d0:	01 d0                	add    %edx,%eax
   134d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *p = console->disp_base + offset;
   134d5:	8b 45 08             	mov    0x8(%ebp),%eax
   134d8:	8b 00                	mov    (%eax),%eax
   134da:	8b 55 f4             	mov    -0xc(%ebp),%edx
   134dd:	01 d2                	add    %edx,%edx
   134df:	01 d0                	add    %edx,%eax
   134e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   134e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   134e7:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   134eb:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   134ed:	8b 45 08             	mov    0x8(%ebp),%eax
   134f0:	8b 40 20             	mov    0x20(%eax),%eax
   134f3:	c1 e0 04             	shl    $0x4,%eax
   134f6:	c0 f8 04             	sar    $0x4,%al
   134f9:	8b 55 f0             	mov    -0x10(%ebp),%edx
   134fc:	83 e0 0f             	and    $0xf,%eax
   134ff:	89 c1                	mov    %eax,%ecx
   13501:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13505:	83 e0 f0             	and    $0xfffffff0,%eax
   13508:	09 c8                	or     %ecx,%eax
   1350a:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   1350d:	8b 45 08             	mov    0x8(%ebp),%eax
   13510:	8b 40 24             	mov    0x24(%eax),%eax
   13513:	c1 e0 05             	shl    $0x5,%eax
   13516:	c0 f8 05             	sar    $0x5,%al
   13519:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1351c:	83 e0 07             	and    $0x7,%eax
   1351f:	c1 e0 04             	shl    $0x4,%eax
   13522:	89 c1                	mov    %eax,%ecx
   13524:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13528:	83 e0 8f             	and    $0xffffff8f,%eax
   1352b:	09 c8                	or     %ecx,%eax
   1352d:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   13530:	83 ec 08             	sub    $0x8,%esp
   13533:	6a 01                	push   $0x1
   13535:	ff 75 08             	pushl  0x8(%ebp)
   13538:	e8 fc fe ff ff       	call   13439 <move_forward>
   1353d:	83 c4 10             	add    $0x10,%esp
}
   13540:	90                   	nop
   13541:	c9                   	leave  
   13542:	c3                   	ret    

00013543 <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t *console)
{
   13543:	55                   	push   %ebp
   13544:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   13546:	8b 45 08             	mov    0x8(%ebp),%eax
   13549:	8b 50 0c             	mov    0xc(%eax),%edx
   1354c:	8b 45 08             	mov    0x8(%ebp),%eax
   1354f:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   13552:	8b 45 08             	mov    0x8(%ebp),%eax
   13555:	8b 50 08             	mov    0x8(%eax),%edx
   13558:	8b 45 08             	mov    0x8(%ebp),%eax
   1355b:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   1355e:	90                   	nop
   1355f:	5d                   	pop    %ebp
   13560:	c3                   	ret    

00013561 <restore_cursor>:

void restore_cursor(console_t *console)
{
   13561:	55                   	push   %ebp
   13562:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   13564:	8b 45 08             	mov    0x8(%ebp),%eax
   13567:	8b 50 18             	mov    0x18(%eax),%edx
   1356a:	8b 45 08             	mov    0x8(%ebp),%eax
   1356d:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   13570:	8b 45 08             	mov    0x8(%ebp),%eax
   13573:	8b 50 1c             	mov    0x1c(%eax),%edx
   13576:	8b 45 08             	mov    0x8(%ebp),%eax
   13579:	89 50 08             	mov    %edx,0x8(%eax)
}
   1357c:	90                   	nop
   1357d:	5d                   	pop    %ebp
   1357e:	c3                   	ret    

0001357f <console_init>:

/**
 * 初始化控制台及键盘
 */
int console_init(int idx)
{
   1357f:	55                   	push   %ebp
   13580:	89 e5                	mov    %esp,%ebp
   13582:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13585:	8b 45 08             	mov    0x8(%ebp),%eax
   13588:	6b c0 68             	imul   $0x68,%eax,%eax
   1358b:	05 00 56 03 00       	add    $0x35600,%eax
   13590:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   13593:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13596:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   1359d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135a0:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *)CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   135a7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135aa:	8b 40 14             	mov    0x14(%eax),%eax
   135ad:	0f af 45 08          	imul   0x8(%ebp),%eax
   135b1:	89 c2                	mov    %eax,%edx
   135b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135b6:	8b 40 10             	mov    0x10(%eax),%eax
   135b9:	0f af c2             	imul   %edx,%eax
   135bc:	01 c0                	add    %eax,%eax
   135be:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   135c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135c7:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   135c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135cc:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   135d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135d6:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0)
   135dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   135e1:	75 30                	jne    13613 <console_init+0x94>
    {
        int cursor_pos = read_cursor_pos();
   135e3:	e8 36 fb ff ff       	call   1311e <read_cursor_pos>
   135e8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   135eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135ee:	8b 48 14             	mov    0x14(%eax),%ecx
   135f1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   135f4:	99                   	cltd   
   135f5:	f7 f9                	idiv   %ecx
   135f7:	89 c2                	mov    %eax,%edx
   135f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135fc:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   135ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13602:	8b 48 14             	mov    0x14(%eax),%ecx
   13605:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13608:	99                   	cltd   
   13609:	f7 f9                	idiv   %ecx
   1360b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1360e:	89 50 0c             	mov    %edx,0xc(%eax)
   13611:	eb 22                	jmp    13635 <console_init+0xb6>
    }
    else
    {
        console->cursor_row = 0;
   13613:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13616:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   1361d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13620:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   13627:	83 ec 0c             	sub    $0xc,%esp
   1362a:	ff 75 f4             	pushl  -0xc(%ebp)
   1362d:	e8 21 fc ff ff       	call   13253 <clear_display>
   13632:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   13635:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13638:	8b 50 08             	mov    0x8(%eax),%edx
   1363b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1363e:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   13641:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13644:	8b 50 0c             	mov    0xc(%eax),%edx
   13647:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1364a:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   1364d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13650:	83 c0 54             	add    $0x54,%eax
   13653:	83 ec 0c             	sub    $0xc,%esp
   13656:	50                   	push   %eax
   13657:	e8 7b 1d 00 00       	call   153d7 <mutex_init>
   1365c:	83 c4 10             	add    $0x10,%esp
    return 0;
   1365f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13664:	c9                   	leave  
   13665:	c3                   	ret    

00013666 <move_backword>:
/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword(console_t *console, int n)
{
   13666:	55                   	push   %ebp
   13667:	89 e5                	mov    %esp,%ebp
   13669:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   1366c:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++)
   13673:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1367a:	eb 55                	jmp    136d1 <move_backword+0x6b>
    {
        if (console->cursor_col > 0)
   1367c:	8b 45 08             	mov    0x8(%ebp),%eax
   1367f:	8b 40 0c             	mov    0xc(%eax),%eax
   13682:	85 c0                	test   %eax,%eax
   13684:	7e 18                	jle    1369e <move_backword+0x38>
        {
            // 非列超始处,可回退
            console->cursor_col--;
   13686:	8b 45 08             	mov    0x8(%ebp),%eax
   13689:	8b 40 0c             	mov    0xc(%eax),%eax
   1368c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1368f:	8b 45 08             	mov    0x8(%ebp),%eax
   13692:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   13695:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1369c:	eb 2f                	jmp    136cd <move_backword+0x67>
        }
        else if (console->cursor_row > 0)
   1369e:	8b 45 08             	mov    0x8(%ebp),%eax
   136a1:	8b 40 08             	mov    0x8(%eax),%eax
   136a4:	85 c0                	test   %eax,%eax
   136a6:	7e 25                	jle    136cd <move_backword+0x67>
        {
            // 列起始处，但非首行，可回退
            console->cursor_row--;
   136a8:	8b 45 08             	mov    0x8(%ebp),%eax
   136ab:	8b 40 08             	mov    0x8(%eax),%eax
   136ae:	8d 50 ff             	lea    -0x1(%eax),%edx
   136b1:	8b 45 08             	mov    0x8(%ebp),%eax
   136b4:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   136b7:	8b 45 08             	mov    0x8(%ebp),%eax
   136ba:	8b 40 14             	mov    0x14(%eax),%eax
   136bd:	8d 50 ff             	lea    -0x1(%eax),%edx
   136c0:	8b 45 08             	mov    0x8(%ebp),%eax
   136c3:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   136c6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++)
   136cd:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   136d1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   136d4:	3b 45 0c             	cmp    0xc(%ebp),%eax
   136d7:	7c a3                	jl     1367c <move_backword+0x16>
        }
    }

    return status;
   136d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   136dc:	c9                   	leave  
   136dd:	c3                   	ret    

000136de <erase_backword>:
/**
 * 擦除左边一个字符 光标左移一个，输出空格，再左移一个
 * @param console
 */
static void erase_backword(console_t *console)
{
   136de:	55                   	push   %ebp
   136df:	89 e5                	mov    %esp,%ebp
   136e1:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0)
   136e4:	6a 01                	push   $0x1
   136e6:	ff 75 08             	pushl  0x8(%ebp)
   136e9:	e8 78 ff ff ff       	call   13666 <move_backword>
   136ee:	83 c4 08             	add    $0x8,%esp
   136f1:	85 c0                	test   %eax,%eax
   136f3:	75 20                	jne    13715 <erase_backword+0x37>
    {
        show_char(console, ' ');
   136f5:	83 ec 08             	sub    $0x8,%esp
   136f8:	6a 20                	push   $0x20
   136fa:	ff 75 08             	pushl  0x8(%ebp)
   136fd:	e8 ad fd ff ff       	call   134af <show_char>
   13702:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   13705:	83 ec 08             	sub    $0x8,%esp
   13708:	6a 01                	push   $0x1
   1370a:	ff 75 08             	pushl  0x8(%ebp)
   1370d:	e8 54 ff ff ff       	call   13666 <move_backword>
   13712:	83 c4 10             	add    $0x10,%esp
    }
}
   13715:	90                   	nop
   13716:	c9                   	leave  
   13717:	c3                   	ret    

00013718 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t *console)
{
   13718:	55                   	push   %ebp
   13719:	89 e5                	mov    %esp,%ebp
   1371b:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   1371e:	8b 45 08             	mov    0x8(%ebp),%eax
   13721:	8b 40 0c             	mov    0xc(%eax),%eax
   13724:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8; // 下一显示位置
   13727:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1372a:	83 c0 07             	add    $0x7,%eax
   1372d:	8d 50 07             	lea    0x7(%eax),%edx
   13730:	85 c0                	test   %eax,%eax
   13732:	0f 48 c2             	cmovs  %edx,%eax
   13735:	c1 f8 03             	sar    $0x3,%eax
   13738:	c1 e0 03             	shl    $0x3,%eax
   1373b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols)
   1373e:	8b 45 08             	mov    0x8(%ebp),%eax
   13741:	8b 40 14             	mov    0x14(%eax),%eax
   13744:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13747:	7c 36                	jl     1377f <move_next_tab+0x67>
    {
        col = 0;
   13749:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   13750:	8b 45 08             	mov    0x8(%ebp),%eax
   13753:	8b 40 08             	mov    0x8(%eax),%eax
   13756:	8d 50 01             	lea    0x1(%eax),%edx
   13759:	8b 45 08             	mov    0x8(%ebp),%eax
   1375c:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows)
   1375f:	8b 45 08             	mov    0x8(%ebp),%eax
   13762:	8b 50 08             	mov    0x8(%eax),%edx
   13765:	8b 45 08             	mov    0x8(%ebp),%eax
   13768:	8b 40 10             	mov    0x10(%eax),%eax
   1376b:	39 c2                	cmp    %eax,%edx
   1376d:	7c 10                	jl     1377f <move_next_tab+0x67>
        {
            // 超出末端，上移
            scroll_up(console, 1);
   1376f:	83 ec 08             	sub    $0x8,%esp
   13772:	6a 01                	push   $0x1
   13774:	ff 75 08             	pushl  0x8(%ebp)
   13777:	e8 ed fb ff ff       	call   13369 <scroll_up>
   1377c:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   1377f:	8b 45 08             	mov    0x8(%ebp),%eax
   13782:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13785:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13788:	90                   	nop
   13789:	c9                   	leave  
   1378a:	c3                   	ret    

0001378b <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal(console_t *console, char c)
{
   1378b:	55                   	push   %ebp
   1378c:	89 e5                	mov    %esp,%ebp
   1378e:	83 ec 18             	sub    $0x18,%esp
   13791:	8b 45 0c             	mov    0xc(%ebp),%eax
   13794:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c)
   13797:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   1379b:	83 f8 0a             	cmp    $0xa,%eax
   1379e:	74 70                	je     13810 <write_normal+0x85>
   137a0:	83 f8 0a             	cmp    $0xa,%eax
   137a3:	7f 0c                	jg     137b1 <write_normal+0x26>
   137a5:	83 f8 08             	cmp    $0x8,%eax
   137a8:	74 34                	je     137de <write_normal+0x53>
   137aa:	83 f8 09             	cmp    $0x9,%eax
   137ad:	74 41                	je     137f0 <write_normal+0x65>
   137af:	eb 6f                	jmp    13820 <write_normal+0x95>
   137b1:	83 f8 1b             	cmp    $0x1b,%eax
   137b4:	74 0c                	je     137c2 <write_normal+0x37>
   137b6:	83 f8 7f             	cmp    $0x7f,%eax
   137b9:	74 13                	je     137ce <write_normal+0x43>
   137bb:	83 f8 0d             	cmp    $0xd,%eax
   137be:	74 40                	je     13800 <write_normal+0x75>
   137c0:	eb 5e                	jmp    13820 <write_normal+0x95>
    {
    case ASCII_ESC:
        console->write_state = CONSOLE_WRITE_ESC;
   137c2:	8b 45 08             	mov    0x8(%ebp),%eax
   137c5:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        break;
   137cc:	eb 72                	jmp    13840 <write_normal+0xb5>
    case 0x7F:
        erase_backword(console);
   137ce:	83 ec 0c             	sub    $0xc,%esp
   137d1:	ff 75 08             	pushl  0x8(%ebp)
   137d4:	e8 05 ff ff ff       	call   136de <erase_backword>
   137d9:	83 c4 10             	add    $0x10,%esp
        break;
   137dc:	eb 62                	jmp    13840 <write_normal+0xb5>
    case '\b': // 左移一个字符
        move_backword(console, 1);
   137de:	83 ec 08             	sub    $0x8,%esp
   137e1:	6a 01                	push   $0x1
   137e3:	ff 75 08             	pushl  0x8(%ebp)
   137e6:	e8 7b fe ff ff       	call   13666 <move_backword>
   137eb:	83 c4 10             	add    $0x10,%esp
        break;
   137ee:	eb 50                	jmp    13840 <write_normal+0xb5>
        // 换行处理
    case '\t': // 对齐的下一制表符
        move_next_tab(console);
   137f0:	83 ec 0c             	sub    $0xc,%esp
   137f3:	ff 75 08             	pushl  0x8(%ebp)
   137f6:	e8 1d ff ff ff       	call   13718 <move_next_tab>
   137fb:	83 c4 10             	add    $0x10,%esp
        break;
   137fe:	eb 40                	jmp    13840 <write_normal+0xb5>
    case '\r':
        move_to_col0(console);
   13800:	83 ec 0c             	sub    $0xc,%esp
   13803:	ff 75 08             	pushl  0x8(%ebp)
   13806:	e8 e6 fb ff ff       	call   133f1 <move_to_col0>
   1380b:	83 c4 10             	add    $0x10,%esp
        break;
   1380e:	eb 30                	jmp    13840 <write_normal+0xb5>
    case '\n': // 暂时这样处理
        // move_to_col0(console);
        move_next_line(console);
   13810:	83 ec 0c             	sub    $0xc,%esp
   13813:	ff 75 08             	pushl  0x8(%ebp)
   13816:	e8 e6 fb ff ff       	call   13401 <move_next_line>
   1381b:	83 c4 10             	add    $0x10,%esp
        break;
   1381e:	eb 20                	jmp    13840 <write_normal+0xb5>
        // 普通字符显示
    default:
    {
        if ((c >= ' ') && (c <= '~'))
   13820:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13824:	7e 19                	jle    1383f <write_normal+0xb4>
   13826:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   1382a:	74 13                	je     1383f <write_normal+0xb4>
        {
            show_char(console, c);
   1382c:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13830:	83 ec 08             	sub    $0x8,%esp
   13833:	50                   	push   %eax
   13834:	ff 75 08             	pushl  0x8(%ebp)
   13837:	e8 73 fc ff ff       	call   134af <show_char>
   1383c:	83 c4 10             	add    $0x10,%esp
        }
        break;
   1383f:	90                   	nop
    }
    }
}
   13840:	90                   	nop
   13841:	c9                   	leave  
   13842:	c3                   	ret    

00013843 <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left(console_t *console, int n)
{
   13843:	55                   	push   %ebp
   13844:	89 e5                	mov    %esp,%ebp
   13846:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   13849:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1384d:	75 07                	jne    13856 <move_left+0x13>
    {
        n = 1;
   1384f:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   13856:	8b 45 08             	mov    0x8(%ebp),%eax
   13859:	8b 40 0c             	mov    0xc(%eax),%eax
   1385c:	2b 45 0c             	sub    0xc(%ebp),%eax
   1385f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   13862:	b8 00 00 00 00       	mov    $0x0,%eax
   13867:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1386b:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   1386f:	89 c2                	mov    %eax,%edx
   13871:	8b 45 08             	mov    0x8(%ebp),%eax
   13874:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13877:	90                   	nop
   13878:	c9                   	leave  
   13879:	c3                   	ret    

0001387a <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right(console_t *console, int n)
{
   1387a:	55                   	push   %ebp
   1387b:	89 e5                	mov    %esp,%ebp
   1387d:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   13880:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13884:	75 07                	jne    1388d <move_right+0x13>
    {
        n = 1;
   13886:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   1388d:	8b 45 08             	mov    0x8(%ebp),%eax
   13890:	8b 50 0c             	mov    0xc(%eax),%edx
   13893:	8b 45 0c             	mov    0xc(%ebp),%eax
   13896:	01 d0                	add    %edx,%eax
   13898:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols)
   1389b:	8b 45 08             	mov    0x8(%ebp),%eax
   1389e:	8b 40 14             	mov    0x14(%eax),%eax
   138a1:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   138a4:	7c 11                	jl     138b7 <move_right+0x3d>
    {
        console->cursor_col = console->display_cols - 1;
   138a6:	8b 45 08             	mov    0x8(%ebp),%eax
   138a9:	8b 40 14             	mov    0x14(%eax),%eax
   138ac:	8d 50 ff             	lea    -0x1(%eax),%edx
   138af:	8b 45 08             	mov    0x8(%ebp),%eax
   138b2:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    else
    {
        console->cursor_col = col;
    }
}
   138b5:	eb 09                	jmp    138c0 <move_right+0x46>
        console->cursor_col = col;
   138b7:	8b 45 08             	mov    0x8(%ebp),%eax
   138ba:	8b 55 fc             	mov    -0x4(%ebp),%edx
   138bd:	89 50 0c             	mov    %edx,0xc(%eax)
}
   138c0:	90                   	nop
   138c1:	c9                   	leave  
   138c2:	c3                   	ret    

000138c3 <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t *console)
{
   138c3:	55                   	push   %ebp
   138c4:	89 e5                	mov    %esp,%ebp
    if (console->curr_param_index >= 1)
   138c6:	8b 45 08             	mov    0x8(%ebp),%eax
   138c9:	8b 40 50             	mov    0x50(%eax),%eax
   138cc:	85 c0                	test   %eax,%eax
   138ce:	7e 0c                	jle    138dc <move_cursor+0x19>
    {
        console->cursor_row = console->esc_param[0];
   138d0:	8b 45 08             	mov    0x8(%ebp),%eax
   138d3:	8b 50 28             	mov    0x28(%eax),%edx
   138d6:	8b 45 08             	mov    0x8(%ebp),%eax
   138d9:	89 50 08             	mov    %edx,0x8(%eax)
    }

    if (console->curr_param_index >= 2)
   138dc:	8b 45 08             	mov    0x8(%ebp),%eax
   138df:	8b 40 50             	mov    0x50(%eax),%eax
   138e2:	83 f8 01             	cmp    $0x1,%eax
   138e5:	7e 0c                	jle    138f3 <move_cursor+0x30>
    {
        console->cursor_col = console->esc_param[1];
   138e7:	8b 45 08             	mov    0x8(%ebp),%eax
   138ea:	8b 50 2c             	mov    0x2c(%eax),%edx
   138ed:	8b 45 08             	mov    0x8(%ebp),%eax
   138f0:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
   138f3:	90                   	nop
   138f4:	5d                   	pop    %ebp
   138f5:	c3                   	ret    

000138f6 <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param(console_t *console)
{
   138f6:	55                   	push   %ebp
   138f7:	89 e5                	mov    %esp,%ebp
   138f9:	83 ec 08             	sub    $0x8,%esp
    kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   138fc:	8b 45 08             	mov    0x8(%ebp),%eax
   138ff:	83 c0 28             	add    $0x28,%eax
   13902:	83 ec 04             	sub    $0x4,%esp
   13905:	6a 28                	push   $0x28
   13907:	6a 00                	push   $0x0
   13909:	50                   	push   %eax
   1390a:	e8 96 21 00 00       	call   15aa5 <kernel_memset>
   1390f:	83 c4 10             	add    $0x10,%esp
    console->curr_param_index = 0;
   13912:	8b 45 08             	mov    0x8(%ebp),%eax
   13915:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   1391c:	90                   	nop
   1391d:	c9                   	leave  
   1391e:	c3                   	ret    

0001391f <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc(console_t *console, char c)
{
   1391f:	55                   	push   %ebp
   13920:	89 e5                	mov    %esp,%ebp
   13922:	83 ec 18             	sub    $0x18,%esp
   13925:	8b 45 0c             	mov    0xc(%ebp),%eax
   13928:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c)
   1392b:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   1392f:	83 f8 38             	cmp    $0x38,%eax
   13932:	74 21                	je     13955 <write_esc+0x36>
   13934:	83 f8 5b             	cmp    $0x5b,%eax
   13937:	74 33                	je     1396c <write_esc+0x4d>
   13939:	83 f8 37             	cmp    $0x37,%eax
   1393c:	75 48                	jne    13986 <write_esc+0x67>
    {
    case '7': // ESC 7 保存光标
        save_cursor(console);
   1393e:	ff 75 08             	pushl  0x8(%ebp)
   13941:	e8 fd fb ff ff       	call   13543 <save_cursor>
   13946:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   13949:	8b 45 08             	mov    0x8(%ebp),%eax
   1394c:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   13953:	eb 3c                	jmp    13991 <write_esc+0x72>
    case '8': // ESC 8 恢复光标
        restore_cursor(console);
   13955:	ff 75 08             	pushl  0x8(%ebp)
   13958:	e8 04 fc ff ff       	call   13561 <restore_cursor>
   1395d:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   13960:	8b 45 08             	mov    0x8(%ebp),%eax
   13963:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   1396a:	eb 25                	jmp    13991 <write_esc+0x72>
    case '[':
        clear_esc_param(console);
   1396c:	83 ec 0c             	sub    $0xc,%esp
   1396f:	ff 75 08             	pushl  0x8(%ebp)
   13972:	e8 7f ff ff ff       	call   138f6 <clear_esc_param>
   13977:	83 c4 10             	add    $0x10,%esp
        console->write_state = CONSOLE_WRITE_SQUARE;
   1397a:	8b 45 08             	mov    0x8(%ebp),%eax
   1397d:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
        break;
   13984:	eb 0b                	jmp    13991 <write_esc+0x72>
    default:
        console->write_state = CONSOLE_WRITE_NORMAL;
   13986:	8b 45 08             	mov    0x8(%ebp),%eax
   13989:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   13990:	90                   	nop
    }
}
   13991:	90                   	nop
   13992:	c9                   	leave  
   13993:	c3                   	ret    

00013994 <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t *console)
{
   13994:	55                   	push   %ebp
   13995:	89 e5                	mov    %esp,%ebp
   13997:	83 ec 10             	sub    $0x10,%esp
    if (console->curr_param_index <= 0)
   1399a:	8b 45 08             	mov    0x8(%ebp),%eax
   1399d:	8b 40 50             	mov    0x50(%eax),%eax
   139a0:	85 c0                	test   %eax,%eax
   139a2:	7e 3e                	jle    139e2 <erase_in_display+0x4e>
    {
        return;
    }

    int param = console->esc_param[0];
   139a4:	8b 45 08             	mov    0x8(%ebp),%eax
   139a7:	8b 40 28             	mov    0x28(%eax),%eax
   139aa:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (param == 2)
   139ad:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   139b1:	75 30                	jne    139e3 <erase_in_display+0x4f>
    {
        // 擦除整个屏幕
        erase_rows(console, 0, console->display_rows - 1);
   139b3:	8b 45 08             	mov    0x8(%ebp),%eax
   139b6:	8b 40 10             	mov    0x10(%eax),%eax
   139b9:	83 e8 01             	sub    $0x1,%eax
   139bc:	50                   	push   %eax
   139bd:	6a 00                	push   $0x0
   139bf:	ff 75 08             	pushl  0x8(%ebp)
   139c2:	e8 11 f9 ff ff       	call   132d8 <erase_rows>
   139c7:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   139ca:	8b 45 08             	mov    0x8(%ebp),%eax
   139cd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   139d4:	8b 45 08             	mov    0x8(%ebp),%eax
   139d7:	8b 50 08             	mov    0x8(%eax),%edx
   139da:	8b 45 08             	mov    0x8(%ebp),%eax
   139dd:	89 50 0c             	mov    %edx,0xc(%eax)
   139e0:	eb 01                	jmp    139e3 <erase_in_display+0x4f>
        return;
   139e2:	90                   	nop
    }
}
   139e3:	c9                   	leave  
   139e4:	c3                   	ret    

000139e5 <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style(console_t *console)
{
   139e5:	55                   	push   %ebp
   139e6:	89 e5                	mov    %esp,%ebp
   139e8:	83 ec 10             	sub    $0x10,%esp
    static const cclor_t color_table[] = {
        COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow,  // 0-3
        COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
    };

    for (int i = 0; i < console->curr_param_index; i++)
   139eb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   139f2:	eb 78                	jmp    13a6c <set_font_style+0x87>
    {
        int param = console->esc_param[i];
   139f4:	8b 45 08             	mov    0x8(%ebp),%eax
   139f7:	8b 55 fc             	mov    -0x4(%ebp),%edx
   139fa:	83 c2 08             	add    $0x8,%edx
   139fd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13a01:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if ((param >= 30) && (param <= 37))
   13a04:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13a08:	7e 1b                	jle    13a25 <set_font_style+0x40>
   13a0a:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13a0e:	7f 15                	jg     13a25 <set_font_style+0x40>
        { // 前景色：30-37
            console->foreground = color_table[param - 30];
   13a10:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13a13:	83 e8 1e             	sub    $0x1e,%eax
   13a16:	8b 14 85 40 6c 01 00 	mov    0x16c40(,%eax,4),%edx
   13a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   13a20:	89 50 20             	mov    %edx,0x20(%eax)
   13a23:	eb 43                	jmp    13a68 <set_font_style+0x83>
        }
        else if ((param >= 40) && (param <= 47))
   13a25:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13a29:	7e 1b                	jle    13a46 <set_font_style+0x61>
   13a2b:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13a2f:	7f 15                	jg     13a46 <set_font_style+0x61>
        {
            console->background = color_table[param - 40];
   13a31:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13a34:	83 e8 28             	sub    $0x28,%eax
   13a37:	8b 14 85 40 6c 01 00 	mov    0x16c40(,%eax,4),%edx
   13a3e:	8b 45 08             	mov    0x8(%ebp),%eax
   13a41:	89 50 24             	mov    %edx,0x24(%eax)
   13a44:	eb 22                	jmp    13a68 <set_font_style+0x83>
        }
        else if (param == 39)
   13a46:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13a4a:	75 0c                	jne    13a58 <set_font_style+0x73>
        { // 39=默认前景色
            console->foreground = COLOR_White;
   13a4c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a4f:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13a56:	eb 10                	jmp    13a68 <set_font_style+0x83>
        }
        else if (param == 49)
   13a58:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13a5c:	75 0a                	jne    13a68 <set_font_style+0x83>
        { // 49=默认背景色
            console->background = COLOR_Black;
   13a5e:	8b 45 08             	mov    0x8(%ebp),%eax
   13a61:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    for (int i = 0; i < console->curr_param_index; i++)
   13a68:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13a6c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a6f:	8b 40 50             	mov    0x50(%eax),%eax
   13a72:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13a75:	0f 8c 79 ff ff ff    	jl     139f4 <set_font_style+0xf>
        }
    }
}
   13a7b:	90                   	nop
   13a7c:	c9                   	leave  
   13a7d:	c3                   	ret    

00013a7e <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square(console_t *console, char c)
{
   13a7e:	55                   	push   %ebp
   13a7f:	89 e5                	mov    %esp,%ebp
   13a81:	83 ec 14             	sub    $0x14,%esp
   13a84:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a87:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9'))
   13a8a:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13a8e:	7e 44                	jle    13ad4 <write_esc_square+0x56>
   13a90:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13a94:	7f 3e                	jg     13ad4 <write_esc_square+0x56>
    {
        // 解析当前参数
        int *param = &console->esc_param[console->curr_param_index];
   13a96:	8b 45 08             	mov    0x8(%ebp),%eax
   13a99:	8b 40 50             	mov    0x50(%eax),%eax
   13a9c:	83 c0 08             	add    $0x8,%eax
   13a9f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13aa6:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa9:	01 d0                	add    %edx,%eax
   13aab:	83 c0 08             	add    $0x8,%eax
   13aae:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   13ab1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ab4:	8b 10                	mov    (%eax),%edx
   13ab6:	89 d0                	mov    %edx,%eax
   13ab8:	c1 e0 02             	shl    $0x2,%eax
   13abb:	01 d0                	add    %edx,%eax
   13abd:	01 c0                	add    %eax,%eax
   13abf:	89 c2                	mov    %eax,%edx
   13ac1:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13ac5:	01 d0                	add    %edx,%eax
   13ac7:	8d 50 d0             	lea    -0x30(%eax),%edx
   13aca:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13acd:	89 10                	mov    %edx,(%eax)
    {
   13acf:	e9 ae 00 00 00       	jmp    13b82 <write_esc_square+0x104>
    }
    else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX)
   13ad4:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13ad8:	75 1f                	jne    13af9 <write_esc_square+0x7b>
   13ada:	8b 45 08             	mov    0x8(%ebp),%eax
   13add:	8b 40 50             	mov    0x50(%eax),%eax
   13ae0:	83 f8 09             	cmp    $0x9,%eax
   13ae3:	7f 14                	jg     13af9 <write_esc_square+0x7b>
    {
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   13ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   13ae8:	8b 40 50             	mov    0x50(%eax),%eax
   13aeb:	8d 50 01             	lea    0x1(%eax),%edx
   13aee:	8b 45 08             	mov    0x8(%ebp),%eax
   13af1:	89 50 50             	mov    %edx,0x50(%eax)
   13af4:	e9 89 00 00 00       	jmp    13b82 <write_esc_square+0x104>
    }
    else
    {
        // 结束上一字符的处理
        console->curr_param_index++;
   13af9:	8b 45 08             	mov    0x8(%ebp),%eax
   13afc:	8b 40 50             	mov    0x50(%eax),%eax
   13aff:	8d 50 01             	lea    0x1(%eax),%edx
   13b02:	8b 45 08             	mov    0x8(%ebp),%eax
   13b05:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c)
   13b08:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13b0c:	83 e8 43             	sub    $0x43,%eax
   13b0f:	83 f8 2a             	cmp    $0x2a,%eax
   13b12:	77 64                	ja     13b78 <write_esc_square+0xfa>
   13b14:	8b 04 85 80 6b 01 00 	mov    0x16b80(,%eax,4),%eax
   13b1b:	ff e0                	jmp    *%eax
        {
        case 'm': // 设置字符属性
            set_font_style(console);
   13b1d:	ff 75 08             	pushl  0x8(%ebp)
   13b20:	e8 c0 fe ff ff       	call   139e5 <set_font_style>
   13b25:	83 c4 04             	add    $0x4,%esp
            break;
   13b28:	eb 4e                	jmp    13b78 <write_esc_square+0xfa>
        case 'D': // 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13b2a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b2d:	8b 40 28             	mov    0x28(%eax),%eax
   13b30:	50                   	push   %eax
   13b31:	ff 75 08             	pushl  0x8(%ebp)
   13b34:	e8 0a fd ff ff       	call   13843 <move_left>
   13b39:	83 c4 08             	add    $0x8,%esp
            break;
   13b3c:	eb 3a                	jmp    13b78 <write_esc_square+0xfa>
        case 'C':
            move_right(console, console->esc_param[0]);
   13b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b41:	8b 40 28             	mov    0x28(%eax),%eax
   13b44:	50                   	push   %eax
   13b45:	ff 75 08             	pushl  0x8(%ebp)
   13b48:	e8 2d fd ff ff       	call   1387a <move_right>
   13b4d:	83 c4 08             	add    $0x8,%esp
            break;
   13b50:	eb 26                	jmp    13b78 <write_esc_square+0xfa>
        case 'H':
            move_cursor(console);
   13b52:	ff 75 08             	pushl  0x8(%ebp)
   13b55:	e8 69 fd ff ff       	call   138c3 <move_cursor>
   13b5a:	83 c4 04             	add    $0x4,%esp
            break;
   13b5d:	eb 19                	jmp    13b78 <write_esc_square+0xfa>
        case 'f':
            move_cursor(console);
   13b5f:	ff 75 08             	pushl  0x8(%ebp)
   13b62:	e8 5c fd ff ff       	call   138c3 <move_cursor>
   13b67:	83 c4 04             	add    $0x4,%esp
            break;
   13b6a:	eb 0c                	jmp    13b78 <write_esc_square+0xfa>
        case 'J':
            erase_in_display(console);
   13b6c:	ff 75 08             	pushl  0x8(%ebp)
   13b6f:	e8 20 fe ff ff       	call   13994 <erase_in_display>
   13b74:	83 c4 04             	add    $0x4,%esp
            break;
   13b77:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13b78:	8b 45 08             	mov    0x8(%ebp),%eax
   13b7b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   13b82:	90                   	nop
   13b83:	c9                   	leave  
   13b84:	c3                   	ret    

00013b85 <console_select>:

void console_select(int idx)
{
   13b85:	55                   	push   %ebp
   13b86:	89 e5                	mov    %esp,%ebp
   13b88:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8e:	6b c0 68             	imul   $0x68,%eax,%eax
   13b91:	05 00 56 03 00       	add    $0x35600,%eax
   13b96:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0)
   13b99:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13b9c:	8b 00                	mov    (%eax),%eax
   13b9e:	85 c0                	test   %eax,%eax
   13ba0:	75 0e                	jne    13bb0 <console_select+0x2b>
    {
        // 可能没有初始化，先初始化一下
        console_init(idx);
   13ba2:	83 ec 0c             	sub    $0xc,%esp
   13ba5:	ff 75 08             	pushl  0x8(%ebp)
   13ba8:	e8 d2 f9 ff ff       	call   1357f <console_init>
   13bad:	83 c4 10             	add    $0x10,%esp
    }

    uint16_t pos = idx * console->display_cols * console->display_rows;
   13bb0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13bb3:	8b 40 14             	mov    0x14(%eax),%eax
   13bb6:	89 c2                	mov    %eax,%edx
   13bb8:	8b 45 08             	mov    0x8(%ebp),%eax
   13bbb:	0f af d0             	imul   %eax,%edx
   13bbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13bc1:	8b 40 10             	mov    0x10(%eax),%eax
   13bc4:	0f af c2             	imul   %edx,%eax
   13bc7:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    outb(0x3D4, 0xC); // 写高地址
   13bcb:	83 ec 08             	sub    $0x8,%esp
   13bce:	6a 0c                	push   $0xc
   13bd0:	68 d4 03 00 00       	push   $0x3d4
   13bd5:	e8 25 f5 ff ff       	call   130ff <outb>
   13bda:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
   13bdd:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13be1:	66 c1 e8 08          	shr    $0x8,%ax
   13be5:	0f b6 c0             	movzbl %al,%eax
   13be8:	83 ec 08             	sub    $0x8,%esp
   13beb:	50                   	push   %eax
   13bec:	68 d5 03 00 00       	push   $0x3d5
   13bf1:	e8 09 f5 ff ff       	call   130ff <outb>
   13bf6:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 0xD); // 写低地址
   13bf9:	83 ec 08             	sub    $0x8,%esp
   13bfc:	6a 0d                	push   $0xd
   13bfe:	68 d4 03 00 00       	push   $0x3d4
   13c03:	e8 f7 f4 ff ff       	call   130ff <outb>
   13c08:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)(pos & 0xFF));
   13c0b:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13c0f:	0f b6 c0             	movzbl %al,%eax
   13c12:	83 ec 08             	sub    $0x8,%esp
   13c15:	50                   	push   %eax
   13c16:	68 d5 03 00 00       	push   $0x3d5
   13c1b:	e8 df f4 ff ff       	call   130ff <outb>
   13c20:	83 c4 10             	add    $0x10,%esp

    // 更新光标到当前屏幕
    curr_console_idx = idx;
   13c23:	8b 45 08             	mov    0x8(%ebp),%eax
   13c26:	a3 40 59 03 00       	mov    %eax,0x35940
    update_cursor_pos(console);
   13c2b:	83 ec 0c             	sub    $0xc,%esp
   13c2e:	ff 75 f4             	pushl  -0xc(%ebp)
   13c31:	e8 5c f5 ff ff       	call   13192 <update_cursor_pos>
   13c36:	83 c4 10             	add    $0x10,%esp
}
   13c39:	90                   	nop
   13c3a:	c9                   	leave  
   13c3b:	c3                   	ret    

00013c3c <console_set_cursor>:

void console_set_cursor(int idx, int visiable)
{
   13c3c:	55                   	push   %ebp
   13c3d:	89 e5                	mov    %esp,%ebp
   13c3f:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13c42:	8b 45 08             	mov    0x8(%ebp),%eax
   13c45:	6b c0 68             	imul   $0x68,%eax,%eax
   13c48:	05 00 56 03 00       	add    $0x35600,%eax
   13c4d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   13c50:	e8 64 f4 ff ff       	call   130b9 <irq_enter_protection>
   13c55:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (visiable)
   13c58:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13c5c:	74 79                	je     13cd7 <console_set_cursor+0x9b>
    {
        outb(0x3D4, 0x0A);
   13c5e:	83 ec 08             	sub    $0x8,%esp
   13c61:	6a 0a                	push   $0xa
   13c63:	68 d4 03 00 00       	push   $0x3d4
   13c68:	e8 92 f4 ff ff       	call   130ff <outb>
   13c6d:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xC0) | 0);
   13c70:	83 ec 0c             	sub    $0xc,%esp
   13c73:	68 d5 03 00 00       	push   $0x3d5
   13c78:	e8 65 f4 ff ff       	call   130e2 <inb>
   13c7d:	83 c4 10             	add    $0x10,%esp
   13c80:	0f b6 c0             	movzbl %al,%eax
   13c83:	25 c0 00 00 00       	and    $0xc0,%eax
   13c88:	83 ec 08             	sub    $0x8,%esp
   13c8b:	50                   	push   %eax
   13c8c:	68 d5 03 00 00       	push   $0x3d5
   13c91:	e8 69 f4 ff ff       	call   130ff <outb>
   13c96:	83 c4 10             	add    $0x10,%esp
        outb(0x3D4, 0x0B);
   13c99:	83 ec 08             	sub    $0x8,%esp
   13c9c:	6a 0b                	push   $0xb
   13c9e:	68 d4 03 00 00       	push   $0x3d4
   13ca3:	e8 57 f4 ff ff       	call   130ff <outb>
   13ca8:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xE0) | 15);
   13cab:	83 ec 0c             	sub    $0xc,%esp
   13cae:	68 d5 03 00 00       	push   $0x3d5
   13cb3:	e8 2a f4 ff ff       	call   130e2 <inb>
   13cb8:	83 c4 10             	add    $0x10,%esp
   13cbb:	83 e0 e0             	and    $0xffffffe0,%eax
   13cbe:	83 c8 0f             	or     $0xf,%eax
   13cc1:	0f b6 c0             	movzbl %al,%eax
   13cc4:	83 ec 08             	sub    $0x8,%esp
   13cc7:	50                   	push   %eax
   13cc8:	68 d5 03 00 00       	push   $0x3d5
   13ccd:	e8 2d f4 ff ff       	call   130ff <outb>
   13cd2:	83 c4 10             	add    $0x10,%esp
   13cd5:	eb 24                	jmp    13cfb <console_set_cursor+0xbf>
    }
    else
    {
        outb(0x3D4, 0x0A);
   13cd7:	83 ec 08             	sub    $0x8,%esp
   13cda:	6a 0a                	push   $0xa
   13cdc:	68 d4 03 00 00       	push   $0x3d4
   13ce1:	e8 19 f4 ff ff       	call   130ff <outb>
   13ce6:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, 0x20);
   13ce9:	83 ec 08             	sub    $0x8,%esp
   13cec:	6a 20                	push   $0x20
   13cee:	68 d5 03 00 00       	push   $0x3d5
   13cf3:	e8 07 f4 ff ff       	call   130ff <outb>
   13cf8:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   13cfb:	83 ec 0c             	sub    $0xc,%esp
   13cfe:	ff 75 f0             	pushl  -0x10(%ebp)
   13d01:	e8 cb f3 ff ff       	call   130d1 <irq_leave_protection>
   13d06:	83 c4 10             	add    $0x10,%esp
}
   13d09:	90                   	nop
   13d0a:	c9                   	leave  
   13d0b:	c3                   	ret    

00013d0c <console_write>:
/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write(tty_t *tty)
{
   13d0c:	55                   	push   %ebp
   13d0d:	89 e5                	mov    %esp,%ebp
   13d0f:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + tty->console_idx;
   13d12:	8b 45 08             	mov    0x8(%ebp),%eax
   13d15:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13d1b:	6b c0 68             	imul   $0x68,%eax,%eax
   13d1e:	05 00 56 03 00       	add    $0x35600,%eax
   13d23:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 下面的写序列涉及到状态机，还有多进程同时写，因此加上锁
    mutex_lock(&console->mutex);
   13d26:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d29:	83 c0 54             	add    $0x54,%eax
   13d2c:	83 ec 0c             	sub    $0xc,%esp
   13d2f:	50                   	push   %eax
   13d30:	e8 d0 16 00 00       	call   15405 <mutex_lock>
   13d35:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13d38:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do
    {
        char c;

        // 取字节数据
        int err = tty_fifo_get(&tty->ofifo, &c);
   13d3f:	8b 45 08             	mov    0x8(%ebp),%eax
   13d42:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13d48:	83 ec 08             	sub    $0x8,%esp
   13d4b:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13d4e:	50                   	push   %eax
   13d4f:	52                   	push   %edx
   13d50:	e8 a4 09 00 00       	call   146f9 <tty_fifo_get>
   13d55:	83 c4 10             	add    $0x10,%esp
   13d58:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0)
   13d5b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13d5f:	79 2d                	jns    13d8e <console_write+0x82>
            break;
        }
        len++;
    } while (1);

    mutex_unlock(&console->mutex);
   13d61:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d64:	83 c0 54             	add    $0x54,%eax
   13d67:	83 ec 0c             	sub    $0xc,%esp
   13d6a:	50                   	push   %eax
   13d6b:	e8 29 17 00 00       	call   15499 <mutex_unlock>
   13d70:	83 c4 10             	add    $0x10,%esp
    if (tty->console_idx == curr_console_idx)
   13d73:	8b 45 08             	mov    0x8(%ebp),%eax
   13d76:	8b 90 50 04 00 00    	mov    0x450(%eax),%edx
   13d7c:	a1 40 59 03 00       	mov    0x35940,%eax
   13d81:	39 c2                	cmp    %eax,%edx
   13d83:	0f 84 80 00 00 00    	je     13e09 <console_write+0xfd>
   13d89:	e9 89 00 00 00       	jmp    13e17 <console_write+0x10b>
        sem_notify(&tty->osem);
   13d8e:	8b 45 08             	mov    0x8(%ebp),%eax
   13d91:	05 14 02 00 00       	add    $0x214,%eax
   13d96:	83 ec 0c             	sub    $0xc,%esp
   13d99:	50                   	push   %eax
   13d9a:	e8 50 18 00 00       	call   155ef <sem_notify>
   13d9f:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state)
   13da2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13da5:	8b 40 04             	mov    0x4(%eax),%eax
   13da8:	83 f8 01             	cmp    $0x1,%eax
   13dab:	74 24                	je     13dd1 <console_write+0xc5>
   13dad:	83 f8 01             	cmp    $0x1,%eax
   13db0:	72 07                	jb     13db9 <console_write+0xad>
   13db2:	83 f8 02             	cmp    $0x2,%eax
   13db5:	74 32                	je     13de9 <console_write+0xdd>
   13db7:	eb 47                	jmp    13e00 <console_write+0xf4>
            write_normal(console, c);
   13db9:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13dbd:	0f be c0             	movsbl %al,%eax
   13dc0:	83 ec 08             	sub    $0x8,%esp
   13dc3:	50                   	push   %eax
   13dc4:	ff 75 f0             	pushl  -0x10(%ebp)
   13dc7:	e8 bf f9 ff ff       	call   1378b <write_normal>
   13dcc:	83 c4 10             	add    $0x10,%esp
            break;
   13dcf:	eb 2f                	jmp    13e00 <console_write+0xf4>
            write_esc(console, c);
   13dd1:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13dd5:	0f be c0             	movsbl %al,%eax
   13dd8:	83 ec 08             	sub    $0x8,%esp
   13ddb:	50                   	push   %eax
   13ddc:	ff 75 f0             	pushl  -0x10(%ebp)
   13ddf:	e8 3b fb ff ff       	call   1391f <write_esc>
   13de4:	83 c4 10             	add    $0x10,%esp
            break;
   13de7:	eb 17                	jmp    13e00 <console_write+0xf4>
            write_esc_square(console, c);
   13de9:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13ded:	0f be c0             	movsbl %al,%eax
   13df0:	83 ec 08             	sub    $0x8,%esp
   13df3:	50                   	push   %eax
   13df4:	ff 75 f0             	pushl  -0x10(%ebp)
   13df7:	e8 82 fc ff ff       	call   13a7e <write_esc_square>
   13dfc:	83 c4 10             	add    $0x10,%esp
            break;
   13dff:	90                   	nop
        len++;
   13e00:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    {
   13e04:	e9 36 ff ff ff       	jmp    13d3f <console_write+0x33>
    {
        update_cursor_pos(console);
   13e09:	83 ec 0c             	sub    $0xc,%esp
   13e0c:	ff 75 f0             	pushl  -0x10(%ebp)
   13e0f:	e8 7e f3 ff ff       	call   13192 <update_cursor_pos>
   13e14:	83 c4 10             	add    $0x10,%esp
    }

    return len;
   13e17:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13e1a:	c9                   	leave  
   13e1b:	c3                   	ret    

00013e1c <console_close>:

/**
 * @brief 关闭控制台及键盘
 */
void console_close(int dev)
{
   13e1c:	55                   	push   %ebp
   13e1d:	89 e5                	mov    %esp,%ebp
    // 似乎不太需要做点什么
   13e1f:	90                   	nop
   13e20:	5d                   	pop    %ebp
   13e21:	c3                   	ret    

00013e22 <is_devid_bad>:

// 特定设备表
static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad(int dev_id)
{
   13e22:	55                   	push   %ebp
   13e23:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >= sizeof(dev_tbl) / sizeof(dev_tbl[0])))
   13e25:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e29:	78 08                	js     13e33 <is_devid_bad+0x11>
   13e2b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e2e:	83 f8 7f             	cmp    $0x7f,%eax
   13e31:	76 07                	jbe    13e3a <is_devid_bad+0x18>
    {
        return 1;
   13e33:	b8 01 00 00 00       	mov    $0x1,%eax
   13e38:	eb 24                	jmp    13e5e <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0)
   13e3a:	8b 55 08             	mov    0x8(%ebp),%edx
   13e3d:	89 d0                	mov    %edx,%eax
   13e3f:	c1 e0 02             	shl    $0x2,%eax
   13e42:	01 d0                	add    %edx,%eax
   13e44:	c1 e0 02             	shl    $0x2,%eax
   13e47:	05 60 59 03 00       	add    $0x35960,%eax
   13e4c:	8b 00                	mov    (%eax),%eax
   13e4e:	85 c0                	test   %eax,%eax
   13e50:	75 07                	jne    13e59 <is_devid_bad+0x37>
    {
        return 1;
   13e52:	b8 01 00 00 00       	mov    $0x1,%eax
   13e57:	eb 05                	jmp    13e5e <is_devid_bad+0x3c>
    }

    return 0;
   13e59:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13e5e:	5d                   	pop    %ebp
   13e5f:	c3                   	ret    

00013e60 <dev_open>:

/**
 * @brief 打开指定的设备
 */
int dev_open(int major, int minor, void *data)
{
   13e60:	55                   	push   %ebp
   13e61:	89 e5                	mov    %esp,%ebp
   13e63:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13e66:	e8 4e f2 ff ff       	call   130b9 <irq_enter_protection>
   13e6b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 遍历：遇到已经打开的直接返回；否则找一个空闲项
    device_t *free_dev = (device_t *)0;
   13e6e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++)
   13e75:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13e7c:	eb 68                	jmp    13ee6 <dev_open+0x86>
    {
        device_t *dev = dev_tbl + i;
   13e7e:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13e81:	89 d0                	mov    %edx,%eax
   13e83:	c1 e0 02             	shl    $0x2,%eax
   13e86:	01 d0                	add    %edx,%eax
   13e88:	c1 e0 02             	shl    $0x2,%eax
   13e8b:	05 60 59 03 00       	add    $0x35960,%eax
   13e90:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0)
   13e93:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13e96:	8b 40 10             	mov    0x10(%eax),%eax
   13e99:	85 c0                	test   %eax,%eax
   13e9b:	75 08                	jne    13ea5 <dev_open+0x45>
        {
            // 纪录空闲值
            free_dev = dev;
   13e9d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ea0:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13ea3:	eb 3d                	jmp    13ee2 <dev_open+0x82>
        }
        else if ((dev->desc->major == major) && (dev->minor == minor))
   13ea5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ea8:	8b 00                	mov    (%eax),%eax
   13eaa:	8b 40 20             	mov    0x20(%eax),%eax
   13ead:	39 45 08             	cmp    %eax,0x8(%ebp)
   13eb0:	75 30                	jne    13ee2 <dev_open+0x82>
   13eb2:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13eb5:	8b 40 08             	mov    0x8(%eax),%eax
   13eb8:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13ebb:	75 25                	jne    13ee2 <dev_open+0x82>
        {
            // 找到了已经打开的？直接返回就好
            dev->open_count++;
   13ebd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ec0:	8b 40 10             	mov    0x10(%eax),%eax
   13ec3:	8d 50 01             	lea    0x1(%eax),%edx
   13ec6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ec9:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13ecc:	83 ec 0c             	sub    $0xc,%esp
   13ecf:	ff 75 e4             	pushl  -0x1c(%ebp)
   13ed2:	e8 fa f1 ff ff       	call   130d1 <irq_leave_protection>
   13ed7:	83 c4 10             	add    $0x10,%esp
            return i;
   13eda:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13edd:	e9 c6 00 00 00       	jmp    13fa8 <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++)
   13ee2:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13ee6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13ee9:	83 f8 7f             	cmp    $0x7f,%eax
   13eec:	76 90                	jbe    13e7e <dev_open+0x1e>
        }
    }

    // 新打开设备？查找设备类型描述符, 看看是不是支持的类型
    dev_desc_t *desc = (dev_desc_t *)0;
   13eee:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++)
   13ef5:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13efc:	eb 24                	jmp    13f22 <dev_open+0xc2>
    {
        dev_desc_t *d = dev_desc_tbl[i];
   13efe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f01:	8b 04 85 50 80 01 00 	mov    0x18050(,%eax,4),%eax
   13f08:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major)
   13f0b:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f0e:	8b 40 20             	mov    0x20(%eax),%eax
   13f11:	39 45 08             	cmp    %eax,0x8(%ebp)
   13f14:	75 08                	jne    13f1e <dev_open+0xbe>
        {
            desc = d;
   13f16:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f19:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13f1c:	eb 0a                	jmp    13f28 <dev_open+0xc8>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++)
   13f1e:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13f22:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   13f26:	74 d6                	je     13efe <dev_open+0x9e>
        }
    }

    // 有空闲且有对应的描述项
    if (desc && free_dev)
   13f28:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13f2c:	74 67                	je     13f95 <dev_open+0x135>
   13f2e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13f32:	74 61                	je     13f95 <dev_open+0x135>
    {
        free_dev->minor = minor;
   13f34:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f37:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f3a:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13f3d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f40:	8b 55 10             	mov    0x10(%ebp),%edx
   13f43:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13f46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f49:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13f4c:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13f4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13f51:	8b 40 24             	mov    0x24(%eax),%eax
   13f54:	83 ec 0c             	sub    $0xc,%esp
   13f57:	ff 75 f4             	pushl  -0xc(%ebp)
   13f5a:	ff d0                	call   *%eax
   13f5c:	83 c4 10             	add    $0x10,%esp
   13f5f:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0)
   13f62:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13f66:	75 2d                	jne    13f95 <dev_open+0x135>
        {
            free_dev->open_count = 1;
   13f68:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f6b:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13f72:	83 ec 0c             	sub    $0xc,%esp
   13f75:	ff 75 e4             	pushl  -0x1c(%ebp)
   13f78:	e8 54 f1 ff ff       	call   130d1 <irq_leave_protection>
   13f7d:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   13f80:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f83:	ba 60 59 03 00       	mov    $0x35960,%edx
   13f88:	29 d0                	sub    %edx,%eax
   13f8a:	c1 f8 02             	sar    $0x2,%eax
   13f8d:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13f93:	eb 13                	jmp    13fa8 <dev_open+0x148>
        }
    }

    irq_leave_protection(state);
   13f95:	83 ec 0c             	sub    $0xc,%esp
   13f98:	ff 75 e4             	pushl  -0x1c(%ebp)
   13f9b:	e8 31 f1 ff ff       	call   130d1 <irq_leave_protection>
   13fa0:	83 c4 10             	add    $0x10,%esp
    return -1;
   13fa3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13fa8:	c9                   	leave  
   13fa9:	c3                   	ret    

00013faa <dev_read>:

/**
 * @brief 读取指定字节的数据
 */
int dev_read(int dev_id, int addr, char *buf, int size)
{
   13faa:	55                   	push   %ebp
   13fab:	89 e5                	mov    %esp,%ebp
   13fad:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   13fb0:	ff 75 08             	pushl  0x8(%ebp)
   13fb3:	e8 6a fe ff ff       	call   13e22 <is_devid_bad>
   13fb8:	83 c4 04             	add    $0x4,%esp
   13fbb:	85 c0                	test   %eax,%eax
   13fbd:	74 07                	je     13fc6 <dev_read+0x1c>
    {
        return -1;
   13fbf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13fc4:	eb 2e                	jmp    13ff4 <dev_read+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   13fc6:	8b 55 08             	mov    0x8(%ebp),%edx
   13fc9:	89 d0                	mov    %edx,%eax
   13fcb:	c1 e0 02             	shl    $0x2,%eax
   13fce:	01 d0                	add    %edx,%eax
   13fd0:	c1 e0 02             	shl    $0x2,%eax
   13fd3:	05 60 59 03 00       	add    $0x35960,%eax
   13fd8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   13fdb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fde:	8b 00                	mov    (%eax),%eax
   13fe0:	8b 40 28             	mov    0x28(%eax),%eax
   13fe3:	ff 75 14             	pushl  0x14(%ebp)
   13fe6:	ff 75 10             	pushl  0x10(%ebp)
   13fe9:	ff 75 0c             	pushl  0xc(%ebp)
   13fec:	ff 75 f4             	pushl  -0xc(%ebp)
   13fef:	ff d0                	call   *%eax
   13ff1:	83 c4 10             	add    $0x10,%esp
}
   13ff4:	c9                   	leave  
   13ff5:	c3                   	ret    

00013ff6 <dev_write>:

/**
 * @brief 写指定字节的数据
 */
int dev_write(int dev_id, int addr, char *buf, int size)
{
   13ff6:	55                   	push   %ebp
   13ff7:	89 e5                	mov    %esp,%ebp
   13ff9:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   13ffc:	ff 75 08             	pushl  0x8(%ebp)
   13fff:	e8 1e fe ff ff       	call   13e22 <is_devid_bad>
   14004:	83 c4 04             	add    $0x4,%esp
   14007:	85 c0                	test   %eax,%eax
   14009:	74 07                	je     14012 <dev_write+0x1c>
    {
        return -1;
   1400b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14010:	eb 2e                	jmp    14040 <dev_write+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   14012:	8b 55 08             	mov    0x8(%ebp),%edx
   14015:	89 d0                	mov    %edx,%eax
   14017:	c1 e0 02             	shl    $0x2,%eax
   1401a:	01 d0                	add    %edx,%eax
   1401c:	c1 e0 02             	shl    $0x2,%eax
   1401f:	05 60 59 03 00       	add    $0x35960,%eax
   14024:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   14027:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1402a:	8b 00                	mov    (%eax),%eax
   1402c:	8b 40 2c             	mov    0x2c(%eax),%eax
   1402f:	ff 75 14             	pushl  0x14(%ebp)
   14032:	ff 75 10             	pushl  0x10(%ebp)
   14035:	ff 75 0c             	pushl  0xc(%ebp)
   14038:	ff 75 f4             	pushl  -0xc(%ebp)
   1403b:	ff d0                	call   *%eax
   1403d:	83 c4 10             	add    $0x10,%esp
}
   14040:	c9                   	leave  
   14041:	c3                   	ret    

00014042 <dev_control>:
/**
 * @brief 发送控制命令
 */

int dev_control(int dev_id, int cmd, int arg0, int arg1)
{
   14042:	55                   	push   %ebp
   14043:	89 e5                	mov    %esp,%ebp
   14045:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   14048:	ff 75 08             	pushl  0x8(%ebp)
   1404b:	e8 d2 fd ff ff       	call   13e22 <is_devid_bad>
   14050:	83 c4 04             	add    $0x4,%esp
   14053:	85 c0                	test   %eax,%eax
   14055:	74 07                	je     1405e <dev_control+0x1c>
    {
        return -1;
   14057:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1405c:	eb 2e                	jmp    1408c <dev_control+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   1405e:	8b 55 08             	mov    0x8(%ebp),%edx
   14061:	89 d0                	mov    %edx,%eax
   14063:	c1 e0 02             	shl    $0x2,%eax
   14066:	01 d0                	add    %edx,%eax
   14068:	c1 e0 02             	shl    $0x2,%eax
   1406b:	05 60 59 03 00       	add    $0x35960,%eax
   14070:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   14073:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14076:	8b 00                	mov    (%eax),%eax
   14078:	8b 40 30             	mov    0x30(%eax),%eax
   1407b:	ff 75 14             	pushl  0x14(%ebp)
   1407e:	ff 75 10             	pushl  0x10(%ebp)
   14081:	ff 75 0c             	pushl  0xc(%ebp)
   14084:	ff 75 f4             	pushl  -0xc(%ebp)
   14087:	ff d0                	call   *%eax
   14089:	83 c4 10             	add    $0x10,%esp
}
   1408c:	c9                   	leave  
   1408d:	c3                   	ret    

0001408e <dev_close>:

/**
 * @brief 关闭设备
 */
void dev_close(int dev_id)
{
   1408e:	55                   	push   %ebp
   1408f:	89 e5                	mov    %esp,%ebp
   14091:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   14094:	ff 75 08             	pushl  0x8(%ebp)
   14097:	e8 86 fd ff ff       	call   13e22 <is_devid_bad>
   1409c:	83 c4 04             	add    $0x4,%esp
   1409f:	85 c0                	test   %eax,%eax
   140a1:	75 6b                	jne    1410e <dev_close+0x80>
    {
        return;
    }

    device_t *dev = dev_tbl + dev_id;
   140a3:	8b 55 08             	mov    0x8(%ebp),%edx
   140a6:	89 d0                	mov    %edx,%eax
   140a8:	c1 e0 02             	shl    $0x2,%eax
   140ab:	01 d0                	add    %edx,%eax
   140ad:	c1 e0 02             	shl    $0x2,%eax
   140b0:	05 60 59 03 00       	add    $0x35960,%eax
   140b5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   140b8:	e8 fc ef ff ff       	call   130b9 <irq_enter_protection>
   140bd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0)
   140c0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140c3:	8b 40 10             	mov    0x10(%eax),%eax
   140c6:	8d 50 ff             	lea    -0x1(%eax),%edx
   140c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140cc:	89 50 10             	mov    %edx,0x10(%eax)
   140cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140d2:	8b 40 10             	mov    0x10(%eax),%eax
   140d5:	85 c0                	test   %eax,%eax
   140d7:	75 25                	jne    140fe <dev_close+0x70>
    {
        dev->desc->close(dev);
   140d9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140dc:	8b 00                	mov    (%eax),%eax
   140de:	8b 40 34             	mov    0x34(%eax),%eax
   140e1:	83 ec 0c             	sub    $0xc,%esp
   140e4:	ff 75 f4             	pushl  -0xc(%ebp)
   140e7:	ff d0                	call   *%eax
   140e9:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   140ec:	83 ec 04             	sub    $0x4,%esp
   140ef:	6a 14                	push   $0x14
   140f1:	6a 00                	push   $0x0
   140f3:	ff 75 f4             	pushl  -0xc(%ebp)
   140f6:	e8 aa 19 00 00       	call   15aa5 <kernel_memset>
   140fb:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   140fe:	83 ec 0c             	sub    $0xc,%esp
   14101:	ff 75 f0             	pushl  -0x10(%ebp)
   14104:	e8 c8 ef ff ff       	call   130d1 <irq_leave_protection>
   14109:	83 c4 10             	add    $0x10,%esp
   1410c:	eb 01                	jmp    1410f <dev_close+0x81>
        return;
   1410e:	90                   	nop
   1410f:	c9                   	leave  
   14110:	c3                   	ret    

00014111 <inb>:
{
   14111:	55                   	push   %ebp
   14112:	89 e5                	mov    %esp,%ebp
   14114:	83 ec 14             	sub    $0x14,%esp
   14117:	8b 45 08             	mov    0x8(%ebp),%eax
   1411a:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   1411e:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14122:	89 c2                	mov    %eax,%edx
   14124:	ec                   	in     (%dx),%al
   14125:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   14128:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1412c:	c9                   	leave  
   1412d:	c3                   	ret    

0001412e <outb>:
{
   1412e:	55                   	push   %ebp
   1412f:	89 e5                	mov    %esp,%ebp
   14131:	83 ec 08             	sub    $0x8,%esp
   14134:	8b 55 08             	mov    0x8(%ebp),%edx
   14137:	8b 45 0c             	mov    0xc(%ebp),%eax
   1413a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1413e:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   14141:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14145:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14149:	ee                   	out    %al,(%dx)
}
   1414a:	90                   	nop
   1414b:	c9                   	leave  
   1414c:	c3                   	ret    

0001414d <get_key>:
    [0x35] = {'/', '?'},
    [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code)
{
   1414d:	55                   	push   %ebp
   1414e:	89 e5                	mov    %esp,%ebp
   14150:	83 ec 04             	sub    $0x4,%esp
   14153:	8b 45 08             	mov    0x8(%ebp),%eax
   14156:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   14159:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   1415d:	83 e0 7f             	and    $0x7f,%eax
}
   14160:	c9                   	leave  
   14161:	c3                   	ret    

00014162 <is_make_code>:

static inline int is_make_code(uint8_t key_code)
{
   14162:	55                   	push   %ebp
   14163:	89 e5                	mov    %esp,%ebp
   14165:	83 ec 04             	sub    $0x4,%esp
   14168:	8b 45 08             	mov    0x8(%ebp),%eax
   1416b:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   1416e:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14172:	f7 d0                	not    %eax
   14174:	c0 e8 07             	shr    $0x7,%al
   14177:	0f b6 c0             	movzbl %al,%eax
}
   1417a:	c9                   	leave  
   1417b:	c3                   	ret    

0001417c <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void)
{
   1417c:	55                   	push   %ebp
   1417d:	89 e5                	mov    %esp,%ebp
   1417f:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14182:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   14189:	eb 14                	jmp    1419f <kbd_wait_send_ready+0x23>
    {
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0)
   1418b:	6a 64                	push   $0x64
   1418d:	e8 7f ff ff ff       	call   14111 <inb>
   14192:	83 c4 04             	add    $0x4,%esp
   14195:	0f b6 c0             	movzbl %al,%eax
   14198:	83 e0 02             	and    $0x2,%eax
   1419b:	85 c0                	test   %eax,%eax
   1419d:	74 0f                	je     141ae <kbd_wait_send_ready+0x32>
    while (time_out--)
   1419f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   141a2:	8d 50 ff             	lea    -0x1(%eax),%edx
   141a5:	89 55 fc             	mov    %edx,-0x4(%ebp)
   141a8:	85 c0                	test   %eax,%eax
   141aa:	75 df                	jne    1418b <kbd_wait_send_ready+0xf>
   141ac:	eb 01                	jmp    141af <kbd_wait_send_ready+0x33>
        {
            return;
   141ae:	90                   	nop
        }
    }
}
   141af:	c9                   	leave  
   141b0:	c3                   	ret    

000141b1 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data)
{
   141b1:	55                   	push   %ebp
   141b2:	89 e5                	mov    %esp,%ebp
   141b4:	83 ec 08             	sub    $0x8,%esp
   141b7:	8b 55 08             	mov    0x8(%ebp),%edx
   141ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   141bd:	88 55 fc             	mov    %dl,-0x4(%ebp)
   141c0:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   141c3:	e8 b4 ff ff ff       	call   1417c <kbd_wait_send_ready>
    outb(port, data);
   141c8:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   141cc:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   141d0:	52                   	push   %edx
   141d1:	50                   	push   %eax
   141d2:	e8 57 ff ff ff       	call   1412e <outb>
   141d7:	83 c4 08             	add    $0x8,%esp
}
   141da:	90                   	nop
   141db:	c9                   	leave  
   141dc:	c3                   	ret    

000141dd <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void)
{
   141dd:	55                   	push   %ebp
   141de:	89 e5                	mov    %esp,%ebp
   141e0:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   141e3:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   141ea:	eb 14                	jmp    14200 <kbd_wait_recv_ready+0x23>
    {
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY)
   141ec:	6a 64                	push   $0x64
   141ee:	e8 1e ff ff ff       	call   14111 <inb>
   141f3:	83 c4 04             	add    $0x4,%esp
   141f6:	0f b6 c0             	movzbl %al,%eax
   141f9:	83 e0 01             	and    $0x1,%eax
   141fc:	85 c0                	test   %eax,%eax
   141fe:	75 0f                	jne    1420f <kbd_wait_recv_ready+0x32>
    while (time_out--)
   14200:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14203:	8d 50 ff             	lea    -0x1(%eax),%edx
   14206:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14209:	85 c0                	test   %eax,%eax
   1420b:	75 df                	jne    141ec <kbd_wait_recv_ready+0xf>
   1420d:	eb 01                	jmp    14210 <kbd_wait_recv_ready+0x33>
        {
            return;
   1420f:	90                   	nop
        }
    }
}
   14210:	c9                   	leave  
   14211:	c3                   	ret    

00014212 <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void)
{
   14212:	55                   	push   %ebp
   14213:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   14215:	e8 c3 ff ff ff       	call   141dd <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   1421a:	6a 60                	push   $0x60
   1421c:	e8 f0 fe ff ff       	call   14111 <inb>
   14221:	83 c4 04             	add    $0x4,%esp
}
   14224:	c9                   	leave  
   14225:	c3                   	ret    

00014226 <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status(void)
{
   14226:	55                   	push   %ebp
   14227:	89 e5                	mov    %esp,%ebp
   14229:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   1422c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   14233:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   1423a:	0f b6 c0             	movzbl %al,%eax
   1423d:	83 e0 01             	and    $0x1,%eax
   14240:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   14243:	68 ed 00 00 00       	push   $0xed
   14248:	6a 60                	push   $0x60
   1424a:	e8 62 ff ff ff       	call   141b1 <kbd_write>
   1424f:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   14252:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14255:	0f b6 c0             	movzbl %al,%eax
   14258:	50                   	push   %eax
   14259:	6a 60                	push   $0x60
   1425b:	e8 51 ff ff ff       	call   141b1 <kbd_write>
   14260:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   14263:	e8 aa ff ff ff       	call   14212 <kbd_read>
}
   14268:	90                   	nop
   14269:	c9                   	leave  
   1426a:	c3                   	ret    

0001426b <do_fx_key>:

static void do_fx_key(int key)
{
   1426b:	55                   	push   %ebp
   1426c:	89 e5                	mov    %esp,%ebp
   1426e:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   14271:	8b 45 08             	mov    0x8(%ebp),%eax
   14274:	83 e8 3b             	sub    $0x3b,%eax
   14277:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press)
   1427a:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   14281:	83 e0 20             	and    $0x20,%eax
   14284:	84 c0                	test   %al,%al
   14286:	75 0e                	jne    14296 <do_fx_key+0x2b>
   14288:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   1428f:	83 e0 40             	and    $0x40,%eax
   14292:	84 c0                	test   %al,%al
   14294:	74 0e                	je     142a4 <do_fx_key+0x39>
    {
        tty_select(index);
   14296:	83 ec 0c             	sub    $0xc,%esp
   14299:	ff 75 f4             	pushl  -0xc(%ebp)
   1429c:	e8 e4 09 00 00       	call   14c85 <tty_select>
   142a1:	83 c4 10             	add    $0x10,%esp
    }
}
   142a4:	90                   	nop
   142a5:	c9                   	leave  
   142a6:	c3                   	ret    

000142a7 <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key(uint8_t raw_code)
{
   142a7:	55                   	push   %ebp
   142a8:	89 e5                	mov    %esp,%ebp
   142aa:	83 ec 28             	sub    $0x28,%esp
   142ad:	8b 45 08             	mov    0x8(%ebp),%eax
   142b0:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);         // 去掉最高位
   142b3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   142b7:	50                   	push   %eax
   142b8:	e8 90 fe ff ff       	call   1414d <get_key>
   142bd:	83 c4 04             	add    $0x4,%esp
   142c0:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code); // 是否是按键按下的键值
   142c3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   142c7:	50                   	push   %eax
   142c8:	e8 95 fe ff ff       	call   14162 <is_make_code>
   142cd:	83 c4 04             	add    $0x4,%esp
   142d0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
    switch (key)
   142d3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   142d7:	83 e8 1d             	sub    $0x1d,%eax
   142da:	83 f8 25             	cmp    $0x25,%eax
   142dd:	0f 87 f9 00 00 00    	ja     143dc <do_normal_key+0x135>
   142e3:	8b 04 85 60 6e 01 00 	mov    0x16e60(,%eax,4),%eax
   142ea:	ff e0                	jmp    *%eax
    {
        // shift, alt, ctrl键，记录标志位
    case KEY_RSHIFT:
        kbd_state.rshift_press = is_make; // 仅设置标志位
   142ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   142ef:	c1 e0 07             	shl    $0x7,%eax
   142f2:	c0 f8 07             	sar    $0x7,%al
   142f5:	83 e0 01             	and    $0x1,%eax
   142f8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   142ff:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   14306:	83 e0 fb             	and    $0xfffffffb,%eax
   14309:	09 d0                	or     %edx,%eax
   1430b:	a2 60 63 03 00       	mov    %al,0x36360
        break;
   14310:	e9 5f 01 00 00       	jmp    14474 <do_normal_key+0x1cd>
    case KEY_LSHIFT:
        kbd_state.lshift_press = is_make; // 仅设置标志位
   14315:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14318:	c1 e0 07             	shl    $0x7,%eax
   1431b:	c0 f8 07             	sar    $0x7,%al
   1431e:	83 e0 01             	and    $0x1,%eax
   14321:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14324:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   1432b:	83 e0 fd             	and    $0xfffffffd,%eax
   1432e:	09 d0                	or     %edx,%eax
   14330:	a2 60 63 03 00       	mov    %al,0x36360
        break;
   14335:	e9 3a 01 00 00       	jmp    14474 <do_normal_key+0x1cd>
    case KEY_CAPS: // 大小写键，设置大小写状态
        if (is_make)
   1433a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1433e:	0f 84 2c 01 00 00    	je     14470 <do_normal_key+0x1c9>
        {
            kbd_state.caps_lock = ~kbd_state.caps_lock;
   14344:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   1434b:	c1 e0 07             	shl    $0x7,%eax
   1434e:	c0 f8 07             	sar    $0x7,%al
   14351:	f7 d0                	not    %eax
   14353:	c1 e0 07             	shl    $0x7,%eax
   14356:	c0 f8 07             	sar    $0x7,%al
   14359:	83 e0 01             	and    $0x1,%eax
   1435c:	89 c2                	mov    %eax,%edx
   1435e:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   14365:	83 e0 fe             	and    $0xfffffffe,%eax
   14368:	09 d0                	or     %edx,%eax
   1436a:	a2 60 63 03 00       	mov    %al,0x36360
            update_led_status();
   1436f:	e8 b2 fe ff ff       	call   14226 <update_led_status>
        }
        break;
   14374:	e9 f7 00 00 00       	jmp    14470 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make; // 仅设置标志位
   14379:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1437c:	c1 e0 07             	shl    $0x7,%eax
   1437f:	c0 f8 07             	sar    $0x7,%al
   14382:	83 e0 01             	and    $0x1,%eax
   14385:	c1 e0 04             	shl    $0x4,%eax
   14388:	89 c2                	mov    %eax,%edx
   1438a:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   14391:	83 e0 ef             	and    $0xffffffef,%eax
   14394:	09 d0                	or     %edx,%eax
   14396:	a2 60 63 03 00       	mov    %al,0x36360
        break;
   1439b:	e9 d4 00 00 00       	jmp    14474 <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make; // 仅设置标志位
   143a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   143a3:	c1 e0 07             	shl    $0x7,%eax
   143a6:	c0 f8 07             	sar    $0x7,%al
   143a9:	83 e0 01             	and    $0x1,%eax
   143ac:	c1 e0 05             	shl    $0x5,%eax
   143af:	89 c2                	mov    %eax,%edx
   143b1:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   143b8:	83 e0 df             	and    $0xffffffdf,%eax
   143bb:	09 d0                	or     %edx,%eax
   143bd:	a2 60 63 03 00       	mov    %al,0x36360
        break;
   143c2:	e9 ad 00 00 00       	jmp    14474 <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
        do_fx_key(key);
   143c7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   143cb:	83 ec 0c             	sub    $0xc,%esp
   143ce:	50                   	push   %eax
   143cf:	e8 97 fe ff ff       	call   1426b <do_fx_key>
   143d4:	83 c4 10             	add    $0x10,%esp
        break;
   143d7:	e9 98 00 00 00       	jmp    14474 <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make)
   143dc:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   143e0:	0f 84 8d 00 00 00    	je     14473 <do_normal_key+0x1cc>
        {
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press)
   143e6:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   143ed:	83 e0 04             	and    $0x4,%eax
   143f0:	84 c0                	test   %al,%al
   143f2:	75 0e                	jne    14402 <do_normal_key+0x15b>
   143f4:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   143fb:	83 e0 02             	and    $0x2,%eax
   143fe:	84 c0                	test   %al,%al
   14400:	74 11                	je     14413 <do_normal_key+0x16c>
            {
                key = map_table[key].func; // 第2功能
   14402:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14406:	0f b6 84 00 61 6c 01 	movzbl 0x16c61(%eax,%eax,1),%eax
   1440d:	00 
   1440e:	88 45 f7             	mov    %al,-0x9(%ebp)
   14411:	eb 0f                	jmp    14422 <do_normal_key+0x17b>
            }
            else
            {
                key = map_table[key].normal; // 第1功能
   14413:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14417:	0f b6 84 00 60 6c 01 	movzbl 0x16c60(%eax,%eax,1),%eax
   1441e:	00 
   1441f:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock)
   14422:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   14429:	83 e0 01             	and    $0x1,%eax
   1442c:	84 c0                	test   %al,%al
   1442e:	74 2e                	je     1445e <do_normal_key+0x1b7>
            {
                if ((key >= 'A') && (key <= 'Z'))
   14430:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14434:	7e 12                	jle    14448 <do_normal_key+0x1a1>
   14436:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   1443a:	7f 0c                	jg     14448 <do_normal_key+0x1a1>
                {
                    // 大写转小写
                    key = key - 'A' + 'a';
   1443c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14440:	83 c0 20             	add    $0x20,%eax
   14443:	88 45 f7             	mov    %al,-0x9(%ebp)
   14446:	eb 16                	jmp    1445e <do_normal_key+0x1b7>
                }
                else if ((key >= 'a') && (key <= 'z'))
   14448:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   1444c:	7e 10                	jle    1445e <do_normal_key+0x1b7>
   1444e:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14452:	7f 0a                	jg     1445e <do_normal_key+0x1b7>
                {
                    // 小写转大小
                    key = key - 'a' + 'A';
   14454:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14458:	83 e8 20             	sub    $0x20,%eax
   1445b:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            // log_printf("key=%c", key);
            tty_in(key);
   1445e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14462:	83 ec 0c             	sub    $0xc,%esp
   14465:	50                   	push   %eax
   14466:	e8 ad 07 00 00       	call   14c18 <tty_in>
   1446b:	83 c4 10             	add    $0x10,%esp
        }
        break;
   1446e:	eb 03                	jmp    14473 <do_normal_key+0x1cc>
        break;
   14470:	90                   	nop
   14471:	eb 01                	jmp    14474 <do_normal_key+0x1cd>
        break;
   14473:	90                   	nop
    }
}
   14474:	90                   	nop
   14475:	c9                   	leave  
   14476:	c3                   	ret    

00014477 <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key(uint8_t raw_code)
{
   14477:	55                   	push   %ebp
   14478:	89 e5                	mov    %esp,%ebp
   1447a:	83 ec 14             	sub    $0x14,%esp
   1447d:	8b 45 08             	mov    0x8(%ebp),%eax
   14480:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);          // 去掉最高位
   14483:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14487:	50                   	push   %eax
   14488:	e8 c0 fc ff ff       	call   1414d <get_key>
   1448d:	83 c4 04             	add    $0x4,%esp
   14490:	0f be c0             	movsbl %al,%eax
   14493:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code); // 按下或释放
   14496:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   1449a:	50                   	push   %eax
   1449b:	e8 c2 fc ff ff       	call   14162 <is_make_code>
   144a0:	83 c4 04             	add    $0x4,%esp
   144a3:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key)
   144a6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   144a9:	83 f8 1d             	cmp    $0x1d,%eax
   144ac:	74 07                	je     144b5 <do_e0_key+0x3e>
   144ae:	83 f8 38             	cmp    $0x38,%eax
   144b1:	74 26                	je     144d9 <do_e0_key+0x62>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make; // 仅设置标志位
        break;
    }
}
   144b3:	eb 49                	jmp    144fe <do_e0_key+0x87>
        kbd_state.rctrl_press = is_make; // 仅设置标志位
   144b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   144b8:	c1 e0 07             	shl    $0x7,%eax
   144bb:	c0 f8 07             	sar    $0x7,%al
   144be:	83 e0 01             	and    $0x1,%eax
   144c1:	c1 e0 06             	shl    $0x6,%eax
   144c4:	89 c2                	mov    %eax,%edx
   144c6:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   144cd:	83 e0 bf             	and    $0xffffffbf,%eax
   144d0:	09 d0                	or     %edx,%eax
   144d2:	a2 60 63 03 00       	mov    %al,0x36360
        break;
   144d7:	eb 25                	jmp    144fe <do_e0_key+0x87>
        kbd_state.ralt_press = is_make; // 仅设置标志位
   144d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   144dc:	c1 e0 07             	shl    $0x7,%eax
   144df:	c0 f8 07             	sar    $0x7,%al
   144e2:	83 e0 01             	and    $0x1,%eax
   144e5:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   144ec:	0f b6 05 60 63 03 00 	movzbl 0x36360,%eax
   144f3:	83 e0 f7             	and    $0xfffffff7,%eax
   144f6:	09 d0                	or     %edx,%eax
   144f8:	a2 60 63 03 00       	mov    %al,0x36360
        break;
   144fd:	90                   	nop
}
   144fe:	90                   	nop
   144ff:	c9                   	leave  
   14500:	c3                   	ret    

00014501 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame)
{
   14501:	55                   	push   %ebp
   14502:	89 e5                	mov    %esp,%ebp
   14504:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, // 收到e0字符
        BEGIN_E1, // 收到e1字符
    } recv_state = NORMAL;

    // 检查是否有数据，无数据则退出
    uint8_t status = inb(KBD_PORT_STAT);
   14507:	6a 64                	push   $0x64
   14509:	e8 03 fc ff ff       	call   14111 <inb>
   1450e:	83 c4 04             	add    $0x4,%esp
   14511:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (!(status & KBD_STAT_RECV_READY))
   14514:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14518:	83 e0 01             	and    $0x1,%eax
   1451b:	85 c0                	test   %eax,%eax
   1451d:	75 12                	jne    14531 <do_handler_kbd+0x30>
    {
        pic_send_eoi(IRQ1_KEYBOARD);
   1451f:	83 ec 0c             	sub    $0xc,%esp
   14522:	6a 21                	push   $0x21
   14524:	e8 65 eb ff ff       	call   1308e <pic_send_eoi>
   14529:	83 c4 10             	add    $0x10,%esp
        return;
   1452c:	e9 90 00 00 00       	jmp    145c1 <do_handler_kbd+0xc0>
    }

    // 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   14531:	83 ec 0c             	sub    $0xc,%esp
   14534:	6a 60                	push   $0x60
   14536:	e8 d6 fb ff ff       	call   14111 <inb>
   1453b:	83 c4 10             	add    $0x10,%esp
   1453e:	88 45 f6             	mov    %al,-0xa(%ebp)

    // 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
    // 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   14541:	83 ec 0c             	sub    $0xc,%esp
   14544:	6a 21                	push   $0x21
   14546:	e8 43 eb ff ff       	call   1308e <pic_send_eoi>
   1454b:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
    if (raw_code == KEY_E0)
   1454e:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   14552:	75 0c                	jne    14560 <do_handler_kbd+0x5f>
    {
        // E0字符
        recv_state = BEGIN_E0;
   14554:	c7 05 64 63 03 00 01 	movl   $0x1,0x36364
   1455b:	00 00 00 
   1455e:	eb 61                	jmp    145c1 <do_handler_kbd+0xc0>
    }
    else if (raw_code == KEY_E1)
   14560:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   14564:	75 0c                	jne    14572 <do_handler_kbd+0x71>
    {
        // E1字符，不处理
        recv_state = BEGIN_E1;
   14566:	c7 05 64 63 03 00 02 	movl   $0x2,0x36364
   1456d:	00 00 00 
   14570:	eb 4f                	jmp    145c1 <do_handler_kbd+0xc0>
    }
    else
    {
        switch (recv_state)
   14572:	a1 64 63 03 00       	mov    0x36364,%eax
   14577:	83 f8 01             	cmp    $0x1,%eax
   1457a:	74 1e                	je     1459a <do_handler_kbd+0x99>
   1457c:	83 f8 01             	cmp    $0x1,%eax
   1457f:	72 07                	jb     14588 <do_handler_kbd+0x87>
   14581:	83 f8 02             	cmp    $0x2,%eax
   14584:	74 30                	je     145b6 <do_handler_kbd+0xb5>
   14586:	eb 39                	jmp    145c1 <do_handler_kbd+0xc0>
        {
        case NORMAL:
            do_normal_key(raw_code);
   14588:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   1458c:	83 ec 0c             	sub    $0xc,%esp
   1458f:	50                   	push   %eax
   14590:	e8 12 fd ff ff       	call   142a7 <do_normal_key>
   14595:	83 c4 10             	add    $0x10,%esp
            break;
   14598:	eb 27                	jmp    145c1 <do_handler_kbd+0xc0>
        case BEGIN_E0: // 不处理print scr
            do_e0_key(raw_code);
   1459a:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   1459e:	83 ec 0c             	sub    $0xc,%esp
   145a1:	50                   	push   %eax
   145a2:	e8 d0 fe ff ff       	call   14477 <do_e0_key>
   145a7:	83 c4 10             	add    $0x10,%esp
            recv_state = NORMAL;
   145aa:	c7 05 64 63 03 00 00 	movl   $0x0,0x36364
   145b1:	00 00 00 
            break;
   145b4:	eb 0b                	jmp    145c1 <do_handler_kbd+0xc0>
        case BEGIN_E1: // 不处理pause
            recv_state = NORMAL;
   145b6:	c7 05 64 63 03 00 00 	movl   $0x0,0x36364
   145bd:	00 00 00 
            break;
   145c0:	90                   	nop
        }
    }
}
   145c1:	c9                   	leave  
   145c2:	c3                   	ret    

000145c3 <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void)
{
   145c3:	55                   	push   %ebp
   145c4:	89 e5                	mov    %esp,%ebp
   145c6:	83 ec 08             	sub    $0x8,%esp
    // 限制只调用一次
    static int inited = 0;

    if (!inited)
   145c9:	a1 68 63 03 00       	mov    0x36368,%eax
   145ce:	85 c0                	test   %eax,%eax
   145d0:	75 2e                	jne    14600 <kbd_init+0x3d>
    {
        update_led_status();
   145d2:	e8 4f fc ff ff       	call   14226 <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   145d7:	83 ec 08             	sub    $0x8,%esp
   145da:	68 b2 02 01 00       	push   $0x102b2
   145df:	6a 21                	push   $0x21
   145e1:	e8 46 e9 ff ff       	call   12f2c <irq_install>
   145e6:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   145e9:	83 ec 0c             	sub    $0xc,%esp
   145ec:	6a 21                	push   $0x21
   145ee:	e8 73 e9 ff ff       	call   12f66 <irq_enable>
   145f3:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   145f6:	c7 05 68 63 03 00 01 	movl   $0x1,0x36368
   145fd:	00 00 00 
    }
   14600:	90                   	nop
   14601:	c9                   	leave  
   14602:	c3                   	ret    

00014603 <outb>:
{
   14603:	55                   	push   %ebp
   14604:	89 e5                	mov    %esp,%ebp
   14606:	83 ec 08             	sub    $0x8,%esp
   14609:	8b 55 08             	mov    0x8(%ebp),%edx
   1460c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1460f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14613:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   14616:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1461a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1461e:	ee                   	out    %al,(%dx)
}
   1461f:	90                   	nop
   14620:	c9                   	leave  
   14621:	c3                   	ret    

00014622 <init_pic>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
static void init_pic(void)
{
   14622:	55                   	push   %ebp
   14623:	89 e5                	mov    %esp,%ebp
   14625:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS); // 每隔10ms+1
   14628:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   1462f:	6a 36                	push   $0x36
   14631:	6a 43                	push   $0x43
   14633:	e8 cb ff ff ff       	call   14603 <outb>
   14638:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);        // 加载低8位
   1463b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1463e:	0f b6 c0             	movzbl %al,%eax
   14641:	50                   	push   %eax
   14642:	6a 40                	push   $0x40
   14644:	e8 ba ff ff ff       	call   14603 <outb>
   14649:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   1464c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1464f:	c1 e8 08             	shr    $0x8,%eax
   14652:	0f b6 c0             	movzbl %al,%eax
   14655:	50                   	push   %eax
   14656:	6a 40                	push   $0x40
   14658:	e8 a6 ff ff ff       	call   14603 <outb>
   1465d:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   14660:	83 ec 08             	sub    $0x8,%esp
   14663:	68 93 02 01 00       	push   $0x10293
   14668:	6a 20                	push   $0x20
   1466a:	e8 bd e8 ff ff       	call   12f2c <irq_install>
   1466f:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   14672:	83 ec 0c             	sub    $0xc,%esp
   14675:	6a 20                	push   $0x20
   14677:	e8 ea e8 ff ff       	call   12f66 <irq_enable>
   1467c:	83 c4 10             	add    $0x10,%esp
}
   1467f:	90                   	nop
   14680:	c9                   	leave  
   14681:	c3                   	ret    

00014682 <do_handler_timer>:
void do_handler_timer(exception_frame_t *frame)
{
   14682:	55                   	push   %ebp
   14683:	89 e5                	mov    %esp,%ebp
   14685:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   14688:	a1 6c 63 03 00       	mov    0x3636c,%eax
   1468d:	83 c0 01             	add    $0x1,%eax
   14690:	a3 6c 63 03 00       	mov    %eax,0x3636c
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   14695:	83 ec 0c             	sub    $0xc,%esp
   14698:	6a 20                	push   $0x20
   1469a:	e8 ef e9 ff ff       	call   1308e <pic_send_eoi>
   1469f:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   146a2:	e8 e3 cf ff ff       	call   1168a <task_time_tick>
}
   146a7:	90                   	nop
   146a8:	c9                   	leave  
   146a9:	c3                   	ret    

000146aa <time_init>:
void time_init(void)
{
   146aa:	55                   	push   %ebp
   146ab:	89 e5                	mov    %esp,%ebp
   146ad:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   146b0:	c7 05 6c 63 03 00 00 	movl   $0x0,0x3636c
   146b7:	00 00 00 
    init_pic();
   146ba:	e8 63 ff ff ff       	call   14622 <init_pic>
   146bf:	90                   	nop
   146c0:	c9                   	leave  
   146c1:	c3                   	ret    

000146c2 <tty_fifo_init>:

/**
 * @brief FIFO初始化
 */
void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size)
{
   146c2:	55                   	push   %ebp
   146c3:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   146c5:	8b 45 08             	mov    0x8(%ebp),%eax
   146c8:	8b 55 0c             	mov    0xc(%ebp),%edx
   146cb:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   146cd:	8b 45 08             	mov    0x8(%ebp),%eax
   146d0:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   146d7:	8b 45 08             	mov    0x8(%ebp),%eax
   146da:	8b 55 10             	mov    0x10(%ebp),%edx
   146dd:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   146e0:	8b 45 08             	mov    0x8(%ebp),%eax
   146e3:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   146ea:	8b 45 08             	mov    0x8(%ebp),%eax
   146ed:	8b 50 0c             	mov    0xc(%eax),%edx
   146f0:	8b 45 08             	mov    0x8(%ebp),%eax
   146f3:	89 50 08             	mov    %edx,0x8(%eax)
}
   146f6:	90                   	nop
   146f7:	5d                   	pop    %ebp
   146f8:	c3                   	ret    

000146f9 <tty_fifo_get>:

/**
 * @brief 取一字节数据
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c)
{
   146f9:	55                   	push   %ebp
   146fa:	89 e5                	mov    %esp,%ebp
   146fc:	53                   	push   %ebx
   146fd:	83 ec 14             	sub    $0x14,%esp
    if (fifo->count <= 0)
   14700:	8b 45 08             	mov    0x8(%ebp),%eax
   14703:	8b 40 10             	mov    0x10(%eax),%eax
   14706:	85 c0                	test   %eax,%eax
   14708:	7f 07                	jg     14711 <tty_fifo_get+0x18>
    {
        return -1;
   1470a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1470f:	eb 62                	jmp    14773 <tty_fifo_get+0x7a>
    }

    irq_state_t state = irq_enter_protection();
   14711:	e8 a3 e9 ff ff       	call   130b9 <irq_enter_protection>
   14716:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *c = fifo->buf[fifo->read++];
   14719:	8b 45 08             	mov    0x8(%ebp),%eax
   1471c:	8b 18                	mov    (%eax),%ebx
   1471e:	8b 45 08             	mov    0x8(%ebp),%eax
   14721:	8b 40 08             	mov    0x8(%eax),%eax
   14724:	8d 48 01             	lea    0x1(%eax),%ecx
   14727:	8b 55 08             	mov    0x8(%ebp),%edx
   1472a:	89 4a 08             	mov    %ecx,0x8(%edx)
   1472d:	01 d8                	add    %ebx,%eax
   1472f:	0f b6 10             	movzbl (%eax),%edx
   14732:	8b 45 0c             	mov    0xc(%ebp),%eax
   14735:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size)
   14737:	8b 45 08             	mov    0x8(%ebp),%eax
   1473a:	8b 50 08             	mov    0x8(%eax),%edx
   1473d:	8b 45 08             	mov    0x8(%ebp),%eax
   14740:	8b 40 04             	mov    0x4(%eax),%eax
   14743:	39 c2                	cmp    %eax,%edx
   14745:	7c 0a                	jl     14751 <tty_fifo_get+0x58>
    {
        fifo->read = 0;
   14747:	8b 45 08             	mov    0x8(%ebp),%eax
   1474a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    fifo->count--;
   14751:	8b 45 08             	mov    0x8(%ebp),%eax
   14754:	8b 40 10             	mov    0x10(%eax),%eax
   14757:	8d 50 ff             	lea    -0x1(%eax),%edx
   1475a:	8b 45 08             	mov    0x8(%ebp),%eax
   1475d:	89 50 10             	mov    %edx,0x10(%eax)
    irq_leave_protection(state);
   14760:	83 ec 0c             	sub    $0xc,%esp
   14763:	ff 75 f4             	pushl  -0xc(%ebp)
   14766:	e8 66 e9 ff ff       	call   130d1 <irq_leave_protection>
   1476b:	83 c4 10             	add    $0x10,%esp
    return 0;
   1476e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14773:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14776:	c9                   	leave  
   14777:	c3                   	ret    

00014778 <tty_fifo_put>:

/**
 * @brief 写一字节数据
 */
int tty_fifo_put(tty_fifo_t *fifo, char c)
{
   14778:	55                   	push   %ebp
   14779:	89 e5                	mov    %esp,%ebp
   1477b:	53                   	push   %ebx
   1477c:	83 ec 24             	sub    $0x24,%esp
   1477f:	8b 45 0c             	mov    0xc(%ebp),%eax
   14782:	88 45 e4             	mov    %al,-0x1c(%ebp)
    if (fifo->count >= fifo->size)
   14785:	8b 45 08             	mov    0x8(%ebp),%eax
   14788:	8b 50 10             	mov    0x10(%eax),%edx
   1478b:	8b 45 08             	mov    0x8(%ebp),%eax
   1478e:	8b 40 04             	mov    0x4(%eax),%eax
   14791:	39 c2                	cmp    %eax,%edx
   14793:	7c 07                	jl     1479c <tty_fifo_put+0x24>
    {
        return -1;
   14795:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1479a:	eb 61                	jmp    147fd <tty_fifo_put+0x85>
    }

    irq_state_t state = irq_enter_protection();
   1479c:	e8 18 e9 ff ff       	call   130b9 <irq_enter_protection>
   147a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fifo->buf[fifo->write++] = c;
   147a4:	8b 45 08             	mov    0x8(%ebp),%eax
   147a7:	8b 18                	mov    (%eax),%ebx
   147a9:	8b 45 08             	mov    0x8(%ebp),%eax
   147ac:	8b 40 0c             	mov    0xc(%eax),%eax
   147af:	8d 48 01             	lea    0x1(%eax),%ecx
   147b2:	8b 55 08             	mov    0x8(%ebp),%edx
   147b5:	89 4a 0c             	mov    %ecx,0xc(%edx)
   147b8:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   147bb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   147bf:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size)
   147c1:	8b 45 08             	mov    0x8(%ebp),%eax
   147c4:	8b 50 0c             	mov    0xc(%eax),%edx
   147c7:	8b 45 08             	mov    0x8(%ebp),%eax
   147ca:	8b 40 04             	mov    0x4(%eax),%eax
   147cd:	39 c2                	cmp    %eax,%edx
   147cf:	7c 0a                	jl     147db <tty_fifo_put+0x63>
    {
        fifo->write = 0;
   147d1:	8b 45 08             	mov    0x8(%ebp),%eax
   147d4:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }
    fifo->count++;
   147db:	8b 45 08             	mov    0x8(%ebp),%eax
   147de:	8b 40 10             	mov    0x10(%eax),%eax
   147e1:	8d 50 01             	lea    0x1(%eax),%edx
   147e4:	8b 45 08             	mov    0x8(%ebp),%eax
   147e7:	89 50 10             	mov    %edx,0x10(%eax)
    irq_leave_protection(state);
   147ea:	83 ec 0c             	sub    $0xc,%esp
   147ed:	ff 75 f4             	pushl  -0xc(%ebp)
   147f0:	e8 dc e8 ff ff       	call   130d1 <irq_leave_protection>
   147f5:	83 c4 10             	add    $0x10,%esp

    return 0;
   147f8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   147fd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14800:	c9                   	leave  
   14801:	c3                   	ret    

00014802 <get_tty>:

/**
 * @brief 判断tty是否有效
 */
static inline tty_t *get_tty(device_t *dev)
{
   14802:	55                   	push   %ebp
   14803:	89 e5                	mov    %esp,%ebp
   14805:	83 ec 18             	sub    $0x18,%esp
    int tty = dev->minor;
   14808:	8b 45 08             	mov    0x8(%ebp),%eax
   1480b:	8b 40 08             	mov    0x8(%eax),%eax
   1480e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count))
   14811:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14815:	78 10                	js     14827 <get_tty+0x25>
   14817:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1481b:	7f 0a                	jg     14827 <get_tty+0x25>
   1481d:	8b 45 08             	mov    0x8(%ebp),%eax
   14820:	8b 40 10             	mov    0x10(%eax),%eax
   14823:	85 c0                	test   %eax,%eax
   14825:	75 1a                	jne    14841 <get_tty+0x3f>
    {
        log_printf("tty is not opened. tty = %d", tty);
   14827:	83 ec 08             	sub    $0x8,%esp
   1482a:	ff 75 f4             	pushl  -0xc(%ebp)
   1482d:	68 f8 6e 01 00       	push   $0x16ef8
   14832:	e8 67 18 00 00       	call   1609e <log_printf>
   14837:	83 c4 10             	add    $0x10,%esp
        return (tty_t *)0;
   1483a:	b8 00 00 00 00       	mov    $0x0,%eax
   1483f:	eb 0e                	jmp    1484f <get_tty+0x4d>
    }

    return tty_devs + tty;
   14841:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14844:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1484a:	05 80 63 03 00       	add    $0x36380,%eax
}
   1484f:	c9                   	leave  
   14850:	c3                   	ret    

00014851 <tty_open>:

/**
 * @brief 打开tty设备
 */
int tty_open(device_t *dev)
{
   14851:	55                   	push   %ebp
   14852:	89 e5                	mov    %esp,%ebp
   14854:	83 ec 18             	sub    $0x18,%esp
    int idx = dev->minor;
   14857:	8b 45 08             	mov    0x8(%ebp),%eax
   1485a:	8b 40 08             	mov    0x8(%eax),%eax
   1485d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((idx < 0) || (idx >= TTY_NR))
   14860:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14864:	78 06                	js     1486c <tty_open+0x1b>
   14866:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1486a:	7e 1d                	jle    14889 <tty_open+0x38>
    {
        log_printf("open tty failed. incorrect tty num = %d", idx);
   1486c:	83 ec 08             	sub    $0x8,%esp
   1486f:	ff 75 f4             	pushl  -0xc(%ebp)
   14872:	68 14 6f 01 00       	push   $0x16f14
   14877:	e8 22 18 00 00       	call   1609e <log_printf>
   1487c:	83 c4 10             	add    $0x10,%esp
        return -1;
   1487f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14884:	e9 bf 00 00 00       	jmp    14948 <tty_open+0xf7>
    }

    tty_t *tty = tty_devs + idx;
   14889:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1488c:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14892:	05 80 63 03 00       	add    $0x36380,%eax
   14897:	89 45 f0             	mov    %eax,-0x10(%ebp)
    tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   1489a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1489d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   148a0:	81 c2 00 02 00 00    	add    $0x200,%edx
   148a6:	83 ec 04             	sub    $0x4,%esp
   148a9:	68 00 02 00 00       	push   $0x200
   148ae:	50                   	push   %eax
   148af:	52                   	push   %edx
   148b0:	e8 0d fe ff ff       	call   146c2 <tty_fifo_init>
   148b5:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->osem, TTY_OBUF_SIZE);
   148b8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148bb:	05 14 02 00 00       	add    $0x214,%eax
   148c0:	83 ec 08             	sub    $0x8,%esp
   148c3:	68 00 02 00 00       	push   $0x200
   148c8:	50                   	push   %eax
   148c9:	e8 93 0c 00 00       	call   15561 <sem_init>
   148ce:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   148d1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148d4:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   148da:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148dd:	05 24 04 00 00       	add    $0x424,%eax
   148e2:	83 ec 04             	sub    $0x4,%esp
   148e5:	68 00 02 00 00       	push   $0x200
   148ea:	52                   	push   %edx
   148eb:	50                   	push   %eax
   148ec:	e8 d1 fd ff ff       	call   146c2 <tty_fifo_init>
   148f1:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->isem, 0);
   148f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   148f7:	05 38 04 00 00       	add    $0x438,%eax
   148fc:	83 ec 08             	sub    $0x8,%esp
   148ff:	6a 00                	push   $0x0
   14901:	50                   	push   %eax
   14902:	e8 5a 0c 00 00       	call   15561 <sem_init>
   14907:	83 c4 10             	add    $0x10,%esp

    tty->iflags = TTY_INLCR | TTY_IECHO;
   1490a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1490d:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   14914:	00 00 00 
    tty->oflags = TTY_OCRLF;
   14917:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1491a:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   14921:	00 00 00 

    tty->console_idx = idx;
   14924:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14927:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1492a:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

    kbd_init();
   14930:	e8 8e fc ff ff       	call   145c3 <kbd_init>
    console_init(idx);
   14935:	83 ec 0c             	sub    $0xc,%esp
   14938:	ff 75 f4             	pushl  -0xc(%ebp)
   1493b:	e8 3f ec ff ff       	call   1357f <console_init>
   14940:	83 c4 10             	add    $0x10,%esp
    return 0;
   14943:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14948:	c9                   	leave  
   14949:	c3                   	ret    

0001494a <tty_write>:

/**
 * @brief 向tty写入数据
 */
int tty_write(device_t *dev, int addr, char *buf, int size)
{
   1494a:	55                   	push   %ebp
   1494b:	89 e5                	mov    %esp,%ebp
   1494d:	83 ec 28             	sub    $0x28,%esp
    if (size < 0)
   14950:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14954:	79 0a                	jns    14960 <tty_write+0x16>
    {
        return -1;
   14956:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1495b:	e9 d5 00 00 00       	jmp    14a35 <tty_write+0xeb>
    }

    tty_t *tty = get_tty(dev);
   14960:	83 ec 0c             	sub    $0xc,%esp
   14963:	ff 75 08             	pushl  0x8(%ebp)
   14966:	e8 97 fe ff ff       	call   14802 <get_tty>
   1496b:	83 c4 10             	add    $0x10,%esp
   1496e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int len = 0;
   14971:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    // 先将所有数据写入缓存中
    while (size)
   14978:	e9 a5 00 00 00       	jmp    14a22 <tty_write+0xd8>
    {
        char c = *buf++;
   1497d:	8b 45 10             	mov    0x10(%ebp),%eax
   14980:	8d 50 01             	lea    0x1(%eax),%edx
   14983:	89 55 10             	mov    %edx,0x10(%ebp)
   14986:	0f b6 00             	movzbl (%eax),%eax
   14989:	88 45 ef             	mov    %al,-0x11(%ebp)

        // 如果遇到\n，根据配置决定是否转换成\r\n
        if (c == '\n' && (tty->oflags & TTY_OCRLF))
   1498c:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   14990:	75 43                	jne    149d5 <tty_write+0x8b>
   14992:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14995:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   1499b:	83 e0 01             	and    $0x1,%eax
   1499e:	85 c0                	test   %eax,%eax
   149a0:	74 33                	je     149d5 <tty_write+0x8b>
        {
            sem_wait(&tty->osem);
   149a2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149a5:	05 14 02 00 00       	add    $0x214,%eax
   149aa:	83 ec 0c             	sub    $0xc,%esp
   149ad:	50                   	push   %eax
   149ae:	e8 d1 0b 00 00       	call   15584 <sem_wait>
   149b3:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->ofifo, '\r');
   149b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149b9:	05 00 02 00 00       	add    $0x200,%eax
   149be:	83 ec 08             	sub    $0x8,%esp
   149c1:	6a 0d                	push   $0xd
   149c3:	50                   	push   %eax
   149c4:	e8 af fd ff ff       	call   14778 <tty_fifo_put>
   149c9:	83 c4 10             	add    $0x10,%esp
   149cc:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0)
   149cf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   149d3:	78 59                	js     14a2e <tty_write+0xe4>
                break;
            }
        }

        // 写入当前字符
        sem_wait(&tty->osem);
   149d5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149d8:	05 14 02 00 00       	add    $0x214,%eax
   149dd:	83 ec 0c             	sub    $0xc,%esp
   149e0:	50                   	push   %eax
   149e1:	e8 9e 0b 00 00       	call   15584 <sem_wait>
   149e6:	83 c4 10             	add    $0x10,%esp
        int err = tty_fifo_put(&tty->ofifo, c);
   149e9:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   149ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
   149f0:	81 c2 00 02 00 00    	add    $0x200,%edx
   149f6:	83 ec 08             	sub    $0x8,%esp
   149f9:	50                   	push   %eax
   149fa:	52                   	push   %edx
   149fb:	e8 78 fd ff ff       	call   14778 <tty_fifo_put>
   14a00:	83 c4 10             	add    $0x10,%esp
   14a03:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   14a06:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   14a0a:	78 25                	js     14a31 <tty_write+0xe7>
        {
            break;
        }

        len++;
   14a0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   14a10:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        // 启动输出, 这里是直接由console直接输出，无需中断
        console_write(tty);
   14a14:	83 ec 0c             	sub    $0xc,%esp
   14a17:	ff 75 f0             	pushl  -0x10(%ebp)
   14a1a:	e8 ed f2 ff ff       	call   13d0c <console_write>
   14a1f:	83 c4 10             	add    $0x10,%esp
    while (size)
   14a22:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14a26:	0f 85 51 ff ff ff    	jne    1497d <tty_write+0x33>
   14a2c:	eb 04                	jmp    14a32 <tty_write+0xe8>
                break;
   14a2e:	90                   	nop
   14a2f:	eb 01                	jmp    14a32 <tty_write+0xe8>
            break;
   14a31:	90                   	nop
    }

    return len;
   14a32:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14a35:	c9                   	leave  
   14a36:	c3                   	ret    

00014a37 <tty_read>:

/**
 * @brief 从tty读取数据
 */
int tty_read(device_t *dev, int addr, char *buf, int size)
{
   14a37:	55                   	push   %ebp
   14a38:	89 e5                	mov    %esp,%ebp
   14a3a:	83 ec 18             	sub    $0x18,%esp
    if (size < 0)
   14a3d:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14a41:	79 0a                	jns    14a4d <tty_read+0x16>
    {
        return -1;
   14a43:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a48:	e9 09 01 00 00       	jmp    14b56 <tty_read+0x11f>
    }

    tty_t *tty = get_tty(dev);
   14a4d:	83 ec 0c             	sub    $0xc,%esp
   14a50:	ff 75 08             	pushl  0x8(%ebp)
   14a53:	e8 aa fd ff ff       	call   14802 <get_tty>
   14a58:	83 c4 10             	add    $0x10,%esp
   14a5b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    char *pbuf = buf;
   14a5e:	8b 45 10             	mov    0x10(%ebp),%eax
   14a61:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   14a64:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 不断读取，直到遇到文件结束符或者行结束符
    while (len < size)
   14a6b:	e9 d7 00 00 00       	jmp    14b47 <tty_read+0x110>
    {
        // 等待可用的数据
        sem_wait(&tty->isem);
   14a70:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a73:	05 38 04 00 00       	add    $0x438,%eax
   14a78:	83 ec 0c             	sub    $0xc,%esp
   14a7b:	50                   	push   %eax
   14a7c:	e8 03 0b 00 00       	call   15584 <sem_wait>
   14a81:	83 c4 10             	add    $0x10,%esp

        // 取出数据
        char ch;
        tty_fifo_get(&tty->ififo, &ch);
   14a84:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a87:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   14a8d:	83 ec 08             	sub    $0x8,%esp
   14a90:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14a93:	50                   	push   %eax
   14a94:	52                   	push   %edx
   14a95:	e8 5f fc ff ff       	call   146f9 <tty_fifo_get>
   14a9a:	83 c4 10             	add    $0x10,%esp
        switch (ch)
   14a9d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14aa1:	0f be c0             	movsbl %al,%eax
   14aa4:	83 f8 0a             	cmp    $0xa,%eax
   14aa7:	74 1a                	je     14ac3 <tty_read+0x8c>
   14aa9:	83 f8 7f             	cmp    $0x7f,%eax
   14aac:	75 52                	jne    14b00 <tty_read+0xc9>
        {
        case ASCII_DEL:
            if (len == 0)
   14aae:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ab2:	75 05                	jne    14ab9 <tty_read+0x82>
   14ab4:	e9 8e 00 00 00       	jmp    14b47 <tty_read+0x110>
            {
                continue;
            }
            len--;
   14ab9:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            pbuf--;
   14abd:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
            break;
   14ac1:	eb 51                	jmp    14b14 <tty_read+0xdd>
        case '\n':
            if ((tty->iflags & TTY_INLCR) && (len < size - 1))
   14ac3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ac6:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   14acc:	83 e0 01             	and    $0x1,%eax
   14acf:	85 c0                	test   %eax,%eax
   14ad1:	74 1b                	je     14aee <tty_read+0xb7>
   14ad3:	8b 45 14             	mov    0x14(%ebp),%eax
   14ad6:	83 e8 01             	sub    $0x1,%eax
   14ad9:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14adc:	7d 10                	jge    14aee <tty_read+0xb7>
            { // \n变成\r\n
                *pbuf++ = '\r';
   14ade:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14ae1:	8d 50 01             	lea    0x1(%eax),%edx
   14ae4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14ae7:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   14aea:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *pbuf++ = '\n';
   14aee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14af1:	8d 50 01             	lea    0x1(%eax),%edx
   14af4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14af7:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   14afa:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14afe:	eb 14                	jmp    14b14 <tty_read+0xdd>
        default:
            *pbuf++ = ch;
   14b00:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b03:	8d 50 01             	lea    0x1(%eax),%edx
   14b06:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14b09:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   14b0d:	88 10                	mov    %dl,(%eax)
            len++;
   14b0f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14b13:	90                   	nop
        }

        if (tty->iflags & TTY_IECHO)
   14b14:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b17:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   14b1d:	83 e0 04             	and    $0x4,%eax
   14b20:	85 c0                	test   %eax,%eax
   14b22:	74 13                	je     14b37 <tty_read+0x100>
        {
            tty_write(dev, 0, &ch, 1);
   14b24:	6a 01                	push   $0x1
   14b26:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14b29:	50                   	push   %eax
   14b2a:	6a 00                	push   $0x0
   14b2c:	ff 75 08             	pushl  0x8(%ebp)
   14b2f:	e8 16 fe ff ff       	call   1494a <tty_write>
   14b34:	83 c4 10             	add    $0x10,%esp
            // tty_fifo_put(&tty->ofifo, ch);
        }

        // 遇到一行结束，也直接跳出
        if ((ch == '\r') || (ch == '\n'))
   14b37:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14b3b:	3c 0d                	cmp    $0xd,%al
   14b3d:	74 14                	je     14b53 <tty_read+0x11c>
   14b3f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14b43:	3c 0a                	cmp    $0xa,%al
   14b45:	74 0c                	je     14b53 <tty_read+0x11c>
    while (len < size)
   14b47:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b4a:	3b 45 14             	cmp    0x14(%ebp),%eax
   14b4d:	0f 8c 1d ff ff ff    	jl     14a70 <tty_read+0x39>
        {
            break;
        }
    }

    return len;
   14b53:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   14b56:	c9                   	leave  
   14b57:	c3                   	ret    

00014b58 <tty_control>:

/**
 * @brief 向tty设备发送命令
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1)
{
   14b58:	55                   	push   %ebp
   14b59:	89 e5                	mov    %esp,%ebp
   14b5b:	53                   	push   %ebx
   14b5c:	83 ec 14             	sub    $0x14,%esp
    tty_t *tty = get_tty(dev);
   14b5f:	83 ec 0c             	sub    $0xc,%esp
   14b62:	ff 75 08             	pushl  0x8(%ebp)
   14b65:	e8 98 fc ff ff       	call   14802 <get_tty>
   14b6a:	83 c4 10             	add    $0x10,%esp
   14b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    switch (cmd)
   14b70:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b73:	83 f8 01             	cmp    $0x1,%eax
   14b76:	74 0a                	je     14b82 <tty_control+0x2a>
   14b78:	83 f8 02             	cmp    $0x2,%eax
   14b7b:	74 6b                	je     14be8 <tty_control+0x90>
        {
            *(int *)arg0 = sem_count(&tty->isem);
        }
        break;
    default:
        break;
   14b7d:	e9 86 00 00 00       	jmp    14c08 <tty_control+0xb0>
        if (arg0)
   14b82:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14b86:	74 30                	je     14bb8 <tty_control+0x60>
            tty->iflags |= TTY_IECHO;
   14b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b8b:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   14b91:	83 c8 04             	or     $0x4,%eax
   14b94:	89 c2                	mov    %eax,%edx
   14b96:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b99:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
            console_set_cursor(tty->console_idx, 1);
   14b9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14ba2:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   14ba8:	83 ec 08             	sub    $0x8,%esp
   14bab:	6a 01                	push   $0x1
   14bad:	50                   	push   %eax
   14bae:	e8 89 f0 ff ff       	call   13c3c <console_set_cursor>
   14bb3:	83 c4 10             	add    $0x10,%esp
        break;
   14bb6:	eb 50                	jmp    14c08 <tty_control+0xb0>
            tty->iflags &= ~TTY_IECHO;
   14bb8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bbb:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   14bc1:	83 e0 fb             	and    $0xfffffffb,%eax
   14bc4:	89 c2                	mov    %eax,%edx
   14bc6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bc9:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
            console_set_cursor(tty->console_idx, 0);
   14bcf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bd2:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   14bd8:	83 ec 08             	sub    $0x8,%esp
   14bdb:	6a 00                	push   $0x0
   14bdd:	50                   	push   %eax
   14bde:	e8 59 f0 ff ff       	call   13c3c <console_set_cursor>
   14be3:	83 c4 10             	add    $0x10,%esp
        break;
   14be6:	eb 20                	jmp    14c08 <tty_control+0xb0>
        if (arg0)
   14be8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14bec:	74 19                	je     14c07 <tty_control+0xaf>
            *(int *)arg0 = sem_count(&tty->isem);
   14bee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14bf1:	05 38 04 00 00       	add    $0x438,%eax
   14bf6:	8b 5d 10             	mov    0x10(%ebp),%ebx
   14bf9:	83 ec 0c             	sub    $0xc,%esp
   14bfc:	50                   	push   %eax
   14bfd:	e8 6f 0a 00 00       	call   15671 <sem_count>
   14c02:	83 c4 10             	add    $0x10,%esp
   14c05:	89 03                	mov    %eax,(%ebx)
        break;
   14c07:	90                   	nop
    }
    return 0;
   14c08:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14c0d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14c10:	c9                   	leave  
   14c11:	c3                   	ret    

00014c12 <tty_close>:

/**
 * @brief 关闭tty设备
 */
void tty_close(device_t *dev)
{
   14c12:	55                   	push   %ebp
   14c13:	89 e5                	mov    %esp,%ebp
}
   14c15:	90                   	nop
   14c16:	5d                   	pop    %ebp
   14c17:	c3                   	ret    

00014c18 <tty_in>:

/**
 * @brief 输入tty字符
 */
void tty_in(char ch)
{
   14c18:	55                   	push   %ebp
   14c19:	89 e5                	mov    %esp,%ebp
   14c1b:	83 ec 28             	sub    $0x28,%esp
   14c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   14c21:	88 45 e4             	mov    %al,-0x1c(%ebp)
    tty_t *tty = tty_devs + curr_tty;
   14c24:	a1 20 86 03 00       	mov    0x38620,%eax
   14c29:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14c2f:	05 80 63 03 00       	add    $0x36380,%eax
   14c34:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 辅助队列要有空闲空间可代写入
    if (sem_count(&tty->isem) >= TTY_IBUF_SIZE)
   14c37:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c3a:	05 38 04 00 00       	add    $0x438,%eax
   14c3f:	83 ec 0c             	sub    $0xc,%esp
   14c42:	50                   	push   %eax
   14c43:	e8 29 0a 00 00       	call   15671 <sem_count>
   14c48:	83 c4 10             	add    $0x10,%esp
   14c4b:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   14c50:	7f 30                	jg     14c82 <tty_in+0x6a>
    {
        return;
    }

    // 写入辅助队列，通知数据到达
    tty_fifo_put(&tty->ififo, ch);
   14c52:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   14c56:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14c59:	81 c2 24 04 00 00    	add    $0x424,%edx
   14c5f:	83 ec 08             	sub    $0x8,%esp
   14c62:	50                   	push   %eax
   14c63:	52                   	push   %edx
   14c64:	e8 0f fb ff ff       	call   14778 <tty_fifo_put>
   14c69:	83 c4 10             	add    $0x10,%esp
    sem_notify(&tty->isem);
   14c6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14c6f:	05 38 04 00 00       	add    $0x438,%eax
   14c74:	83 ec 0c             	sub    $0xc,%esp
   14c77:	50                   	push   %eax
   14c78:	e8 72 09 00 00       	call   155ef <sem_notify>
   14c7d:	83 c4 10             	add    $0x10,%esp
   14c80:	eb 01                	jmp    14c83 <tty_in+0x6b>
        return;
   14c82:	90                   	nop
}
   14c83:	c9                   	leave  
   14c84:	c3                   	ret    

00014c85 <tty_select>:

/**
 * @brief 选择tty
 */
void tty_select(int tty)
{
   14c85:	55                   	push   %ebp
   14c86:	89 e5                	mov    %esp,%ebp
   14c88:	83 ec 08             	sub    $0x8,%esp
    if (tty != curr_tty)
   14c8b:	a1 20 86 03 00       	mov    0x38620,%eax
   14c90:	39 45 08             	cmp    %eax,0x8(%ebp)
   14c93:	74 16                	je     14cab <tty_select+0x26>
    {
        console_select(tty);
   14c95:	83 ec 0c             	sub    $0xc,%esp
   14c98:	ff 75 08             	pushl  0x8(%ebp)
   14c9b:	e8 e5 ee ff ff       	call   13b85 <console_select>
   14ca0:	83 c4 10             	add    $0x10,%esp
        curr_tty = tty;
   14ca3:	8b 45 08             	mov    0x8(%ebp),%eax
   14ca6:	a3 20 86 03 00       	mov    %eax,0x38620
    }
}
   14cab:	90                   	nop
   14cac:	c9                   	leave  
   14cad:	c3                   	ret    

00014cae <file_alloc>:

/**
 * @brief 分配一个文件描述符
 */
file_t *file_alloc(void)
{
   14cae:	55                   	push   %ebp
   14caf:	89 e5                	mov    %esp,%ebp
   14cb1:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t *)0;
   14cb4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   14cbb:	83 ec 0c             	sub    $0xc,%esp
   14cbe:	68 40 c6 05 00       	push   $0x5c640
   14cc3:	e8 3d 07 00 00       	call   15405 <mutex_lock>
   14cc8:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++)
   14ccb:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   14cd2:	eb 47                	jmp    14d1b <file_alloc+0x6d>
    {
        file_t *p_file = file_table + i;
   14cd4:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14cd7:	89 d0                	mov    %edx,%eax
   14cd9:	c1 e0 03             	shl    $0x3,%eax
   14cdc:	01 d0                	add    %edx,%eax
   14cde:	c1 e0 03             	shl    $0x3,%eax
   14ce1:	05 40 86 03 00       	add    $0x38640,%eax
   14ce6:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0)
   14ce9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14cec:	8b 40 28             	mov    0x28(%eax),%eax
   14cef:	85 c0                	test   %eax,%eax
   14cf1:	75 24                	jne    14d17 <file_alloc+0x69>
        {
            kernel_memset(p_file, 0, sizeof(file_t));
   14cf3:	83 ec 04             	sub    $0x4,%esp
   14cf6:	6a 48                	push   $0x48
   14cf8:	6a 00                	push   $0x0
   14cfa:	ff 75 ec             	pushl  -0x14(%ebp)
   14cfd:	e8 a3 0d 00 00       	call   15aa5 <kernel_memset>
   14d02:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   14d05:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d08:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
            file = p_file;
   14d0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14d12:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14d15:	eb 0d                	jmp    14d24 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++)
   14d17:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14d1b:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   14d22:	7e b0                	jle    14cd4 <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   14d24:	83 ec 0c             	sub    $0xc,%esp
   14d27:	68 40 c6 05 00       	push   $0x5c640
   14d2c:	e8 68 07 00 00       	call   15499 <mutex_unlock>
   14d31:	83 c4 10             	add    $0x10,%esp
    return file;
   14d34:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14d37:	c9                   	leave  
   14d38:	c3                   	ret    

00014d39 <file_free>:

/**
 * @brief 释放文件描述符
 */
void file_free(file_t *file)
{
   14d39:	55                   	push   %ebp
   14d3a:	89 e5                	mov    %esp,%ebp
   14d3c:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   14d3f:	83 ec 0c             	sub    $0xc,%esp
   14d42:	68 40 c6 05 00       	push   $0x5c640
   14d47:	e8 b9 06 00 00       	call   15405 <mutex_lock>
   14d4c:	83 c4 10             	add    $0x10,%esp
    if (file->ref)
   14d4f:	8b 45 08             	mov    0x8(%ebp),%eax
   14d52:	8b 40 28             	mov    0x28(%eax),%eax
   14d55:	85 c0                	test   %eax,%eax
   14d57:	74 0f                	je     14d68 <file_free+0x2f>
    {
        file->ref--;
   14d59:	8b 45 08             	mov    0x8(%ebp),%eax
   14d5c:	8b 40 28             	mov    0x28(%eax),%eax
   14d5f:	8d 50 ff             	lea    -0x1(%eax),%edx
   14d62:	8b 45 08             	mov    0x8(%ebp),%eax
   14d65:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   14d68:	83 ec 0c             	sub    $0xc,%esp
   14d6b:	68 40 c6 05 00       	push   $0x5c640
   14d70:	e8 24 07 00 00       	call   15499 <mutex_unlock>
   14d75:	83 c4 10             	add    $0x10,%esp
}
   14d78:	90                   	nop
   14d79:	c9                   	leave  
   14d7a:	c3                   	ret    

00014d7b <file_inc_ref>:

/**
 * @brief 增加file的引用计数
 */
void file_inc_ref(file_t *file)
{
   14d7b:	55                   	push   %ebp
   14d7c:	89 e5                	mov    %esp,%ebp
   14d7e:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   14d81:	83 ec 0c             	sub    $0xc,%esp
   14d84:	68 40 c6 05 00       	push   $0x5c640
   14d89:	e8 77 06 00 00       	call   15405 <mutex_lock>
   14d8e:	83 c4 10             	add    $0x10,%esp
    file->ref++;
   14d91:	8b 45 08             	mov    0x8(%ebp),%eax
   14d94:	8b 40 28             	mov    0x28(%eax),%eax
   14d97:	8d 50 01             	lea    0x1(%eax),%edx
   14d9a:	8b 45 08             	mov    0x8(%ebp),%eax
   14d9d:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   14da0:	83 ec 0c             	sub    $0xc,%esp
   14da3:	68 40 c6 05 00       	push   $0x5c640
   14da8:	e8 ec 06 00 00       	call   15499 <mutex_unlock>
   14dad:	83 c4 10             	add    $0x10,%esp
}
   14db0:	90                   	nop
   14db1:	c9                   	leave  
   14db2:	c3                   	ret    

00014db3 <file_table_init>:

/**
 * @brief 文件表初始化
 */
void file_table_init(void)
{
   14db3:	55                   	push   %ebp
   14db4:	89 e5                	mov    %esp,%ebp
   14db6:	83 ec 08             	sub    $0x8,%esp
    // 文件描述符表初始化
    kernel_memset(&file_table, 0, sizeof(file_table));
   14db9:	83 ec 04             	sub    $0x4,%esp
   14dbc:	68 00 40 02 00       	push   $0x24000
   14dc1:	6a 00                	push   $0x0
   14dc3:	68 40 86 03 00       	push   $0x38640
   14dc8:	e8 d8 0c 00 00       	call   15aa5 <kernel_memset>
   14dcd:	83 c4 10             	add    $0x10,%esp
    mutex_init(&file_alloc_mutex);
   14dd0:	83 ec 0c             	sub    $0xc,%esp
   14dd3:	68 40 c6 05 00       	push   $0x5c640
   14dd8:	e8 fa 05 00 00       	call   153d7 <mutex_init>
   14ddd:	83 c4 10             	add    $0x10,%esp
}
   14de0:	90                   	nop
   14de1:	c9                   	leave  
   14de2:	c3                   	ret    

00014de3 <inb>:
{
   14de3:	55                   	push   %ebp
   14de4:	89 e5                	mov    %esp,%ebp
   14de6:	83 ec 14             	sub    $0x14,%esp
   14de9:	8b 45 08             	mov    0x8(%ebp),%eax
   14dec:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   14df0:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14df4:	89 c2                	mov    %eax,%edx
   14df6:	ec                   	in     (%dx),%al
   14df7:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   14dfa:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14dfe:	c9                   	leave  
   14dff:	c3                   	ret    

00014e00 <inw>:
{
   14e00:	55                   	push   %ebp
   14e01:	89 e5                	mov    %esp,%ebp
   14e03:	83 ec 14             	sub    $0x14,%esp
   14e06:	8b 45 08             	mov    0x8(%ebp),%eax
   14e09:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("in %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   14e0d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14e11:	89 c2                	mov    %eax,%edx
   14e13:	66 ed                	in     (%dx),%ax
   14e15:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    return rv;
   14e19:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14e1d:	c9                   	leave  
   14e1e:	c3                   	ret    

00014e1f <outb>:
{
   14e1f:	55                   	push   %ebp
   14e20:	89 e5                	mov    %esp,%ebp
   14e22:	83 ec 08             	sub    $0x8,%esp
   14e25:	8b 55 08             	mov    0x8(%ebp),%edx
   14e28:	8b 45 0c             	mov    0xc(%ebp),%eax
   14e2b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14e2f:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   14e32:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14e36:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14e3a:	ee                   	out    %al,(%dx)
}
   14e3b:	90                   	nop
   14e3c:	c9                   	leave  
   14e3d:	c3                   	ret    

00014e3e <is_fd_bad>:

/**
 * @brief 判断文件描述符是否正确
 */
static int is_fd_bad(int file)
{
   14e3e:	55                   	push   %ebp
   14e3f:	89 e5                	mov    %esp,%ebp
    if ((file < 0) && (file >= TASK_OFILE_NR))
   14e41:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14e45:	79 0d                	jns    14e54 <is_fd_bad+0x16>
   14e47:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   14e4b:	7e 07                	jle    14e54 <is_fd_bad+0x16>
    {
        return 1;
   14e4d:	b8 01 00 00 00       	mov    $0x1,%eax
   14e52:	eb 05                	jmp    14e59 <is_fd_bad+0x1b>
    }

    return 0;
   14e54:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14e59:	5d                   	pop    %ebp
   14e5a:	c3                   	ret    

00014e5b <read_disk>:

static void read_disk(int sector, int sector_count, uint8_t *buf)
{
   14e5b:	55                   	push   %ebp
   14e5c:	89 e5                	mov    %esp,%ebp
   14e5e:	53                   	push   %ebx
   14e5f:	83 ec 10             	sub    $0x10,%esp
    outb(0x1F6, (uint8_t)(0xE0)); // 选择磁盘
   14e62:	68 e0 00 00 00       	push   $0xe0
   14e67:	68 f6 01 00 00       	push   $0x1f6
   14e6c:	e8 ae ff ff ff       	call   14e1f <outb>
   14e71:	83 c4 08             	add    $0x8,%esp
    outb(0x1F2, (uint8_t)(sector_count >> 8));
   14e74:	8b 45 0c             	mov    0xc(%ebp),%eax
   14e77:	c1 f8 08             	sar    $0x8,%eax
   14e7a:	0f b6 c0             	movzbl %al,%eax
   14e7d:	50                   	push   %eax
   14e7e:	68 f2 01 00 00       	push   $0x1f2
   14e83:	e8 97 ff ff ff       	call   14e1f <outb>
   14e88:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector >> 24));
   14e8b:	8b 45 08             	mov    0x8(%ebp),%eax
   14e8e:	c1 f8 18             	sar    $0x18,%eax
   14e91:	0f b6 c0             	movzbl %al,%eax
   14e94:	50                   	push   %eax
   14e95:	68 f3 01 00 00       	push   $0x1f3
   14e9a:	e8 80 ff ff ff       	call   14e1f <outb>
   14e9f:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(0));
   14ea2:	6a 00                	push   $0x0
   14ea4:	68 f4 01 00 00       	push   $0x1f4
   14ea9:	e8 71 ff ff ff       	call   14e1f <outb>
   14eae:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(0));
   14eb1:	6a 00                	push   $0x0
   14eb3:	68 f5 01 00 00       	push   $0x1f5
   14eb8:	e8 62 ff ff ff       	call   14e1f <outb>
   14ebd:	83 c4 08             	add    $0x8,%esp

    outb(0x1F2, (uint8_t)(sector_count));
   14ec0:	8b 45 0c             	mov    0xc(%ebp),%eax
   14ec3:	0f b6 c0             	movzbl %al,%eax
   14ec6:	50                   	push   %eax
   14ec7:	68 f2 01 00 00       	push   $0x1f2
   14ecc:	e8 4e ff ff ff       	call   14e1f <outb>
   14ed1:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector));
   14ed4:	8b 45 08             	mov    0x8(%ebp),%eax
   14ed7:	0f b6 c0             	movzbl %al,%eax
   14eda:	50                   	push   %eax
   14edb:	68 f3 01 00 00       	push   $0x1f3
   14ee0:	e8 3a ff ff ff       	call   14e1f <outb>
   14ee5:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));
   14ee8:	8b 45 08             	mov    0x8(%ebp),%eax
   14eeb:	c1 f8 08             	sar    $0x8,%eax
   14eee:	0f b6 c0             	movzbl %al,%eax
   14ef1:	50                   	push   %eax
   14ef2:	68 f4 01 00 00       	push   $0x1f4
   14ef7:	e8 23 ff ff ff       	call   14e1f <outb>
   14efc:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));
   14eff:	8b 45 08             	mov    0x8(%ebp),%eax
   14f02:	c1 f8 10             	sar    $0x10,%eax
   14f05:	0f b6 c0             	movzbl %al,%eax
   14f08:	50                   	push   %eax
   14f09:	68 f5 01 00 00       	push   $0x1f5
   14f0e:	e8 0c ff ff ff       	call   14e1f <outb>
   14f13:	83 c4 08             	add    $0x8,%esp

    outb(0x1F7, (uint8_t)(0x24));
   14f16:	6a 24                	push   $0x24
   14f18:	68 f7 01 00 00       	push   $0x1f7
   14f1d:	e8 fd fe ff ff       	call   14e1f <outb>
   14f22:	83 c4 08             	add    $0x8,%esp

    uint16_t *data_buf = (uint16_t *)buf;
   14f25:	8b 45 10             	mov    0x10(%ebp),%eax
   14f28:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count-- > 0)
   14f2b:	eb 4a                	jmp    14f77 <read_disk+0x11c>
    {
        while ((inb(0x1F7) & 0x88) != 0x8)
   14f2d:	90                   	nop
   14f2e:	68 f7 01 00 00       	push   $0x1f7
   14f33:	e8 ab fe ff ff       	call   14de3 <inb>
   14f38:	83 c4 04             	add    $0x4,%esp
   14f3b:	0f b6 c0             	movzbl %al,%eax
   14f3e:	25 88 00 00 00       	and    $0x88,%eax
   14f43:	83 f8 08             	cmp    $0x8,%eax
   14f46:	75 e6                	jne    14f2e <read_disk+0xd3>
        {
            /* code */
        }
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   14f48:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14f4f:	eb 1d                	jmp    14f6e <read_disk+0x113>
        {
            *data_buf++ = inw(0x1F0);
   14f51:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14f54:	8d 43 02             	lea    0x2(%ebx),%eax
   14f57:	89 45 f8             	mov    %eax,-0x8(%ebp)
   14f5a:	68 f0 01 00 00       	push   $0x1f0
   14f5f:	e8 9c fe ff ff       	call   14e00 <inw>
   14f64:	83 c4 04             	add    $0x4,%esp
   14f67:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   14f6a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14f6e:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   14f75:	7e da                	jle    14f51 <read_disk+0xf6>
    while (sector_count-- > 0)
   14f77:	8b 45 0c             	mov    0xc(%ebp),%eax
   14f7a:	8d 50 ff             	lea    -0x1(%eax),%edx
   14f7d:	89 55 0c             	mov    %edx,0xc(%ebp)
   14f80:	85 c0                	test   %eax,%eax
   14f82:	7f a9                	jg     14f2d <read_disk+0xd2>
            /* code */
        }
    }
}
   14f84:	90                   	nop
   14f85:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14f88:	c9                   	leave  
   14f89:	c3                   	ret    

00014f8a <is_path_valid>:

static int is_path_valid(const char *path)
{
   14f8a:	55                   	push   %ebp
   14f8b:	89 e5                	mov    %esp,%ebp
    if ((path == (const char *)0) || (path[0] == '\0'))
   14f8d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14f91:	74 0a                	je     14f9d <is_path_valid+0x13>
   14f93:	8b 45 08             	mov    0x8(%ebp),%eax
   14f96:	0f b6 00             	movzbl (%eax),%eax
   14f99:	84 c0                	test   %al,%al
   14f9b:	75 07                	jne    14fa4 <is_path_valid+0x1a>
    {
        return 0;
   14f9d:	b8 00 00 00 00       	mov    $0x0,%eax
   14fa2:	eb 05                	jmp    14fa9 <is_path_valid+0x1f>
    }
    return 1;
   14fa4:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14fa9:	5d                   	pop    %ebp
   14faa:	c3                   	ret    

00014fab <sys_open>:

int sys_open(const char *name, int flags, ...)
{
   14fab:	55                   	push   %ebp
   14fac:	89 e5                	mov    %esp,%ebp
   14fae:	83 ec 18             	sub    $0x18,%esp
    if (kernel_strncmp(name + 5, "tty", 3) == 0)
   14fb1:	8b 45 08             	mov    0x8(%ebp),%eax
   14fb4:	83 c0 05             	add    $0x5,%eax
   14fb7:	83 ec 04             	sub    $0x4,%esp
   14fba:	6a 03                	push   $0x3
   14fbc:	68 3c 6f 01 00       	push   $0x16f3c
   14fc1:	50                   	push   %eax
   14fc2:	e8 d6 09 00 00       	call   1599d <kernel_strncmp>
   14fc7:	83 c4 10             	add    $0x10,%esp
   14fca:	85 c0                	test   %eax,%eax
   14fcc:	0f 85 0f 01 00 00    	jne    150e1 <sys_open+0x136>
    {
        if (!is_path_valid(name))
   14fd2:	83 ec 0c             	sub    $0xc,%esp
   14fd5:	ff 75 08             	pushl  0x8(%ebp)
   14fd8:	e8 ad ff ff ff       	call   14f8a <is_path_valid>
   14fdd:	83 c4 10             	add    $0x10,%esp
   14fe0:	85 c0                	test   %eax,%eax
   14fe2:	75 0a                	jne    14fee <sys_open+0x43>
        {
            return -1;
   14fe4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14fe9:	e9 2a 01 00 00       	jmp    15118 <sys_open+0x16d>
        }
        // 分配文件描述符链接
        file_t *file = file_alloc();
   14fee:	e8 bb fc ff ff       	call   14cae <file_alloc>
   14ff3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!file)
   14ff6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14ffa:	75 0a                	jne    15006 <sys_open+0x5b>
        {
            return -1;
   14ffc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15001:	e9 12 01 00 00       	jmp    15118 <sys_open+0x16d>
        }
        int fd = task_alloc_fd(file);
   15006:	83 ec 0c             	sub    $0xc,%esp
   15009:	ff 75 f4             	pushl  -0xc(%ebp)
   1500c:	e8 13 d2 ff ff       	call   12224 <task_alloc_fd>
   15011:	83 c4 10             	add    $0x10,%esp
   15014:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (fd < 0)
   15017:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1501b:	0f 88 8a 00 00 00    	js     150ab <sys_open+0x100>
        {
            goto sys_open_failed;
        }
        if (kernel_strlen(name) < 5)
   15021:	83 ec 0c             	sub    $0xc,%esp
   15024:	ff 75 08             	pushl  0x8(%ebp)
   15027:	e8 ef 09 00 00       	call   15a1b <kernel_strlen>
   1502c:	83 c4 10             	add    $0x10,%esp
   1502f:	83 f8 04             	cmp    $0x4,%eax
   15032:	7e 7a                	jle    150ae <sys_open+0x103>
        {
            goto sys_open_failed;
        }
        int num = name[8] - '0';
   15034:	8b 45 08             	mov    0x8(%ebp),%eax
   15037:	83 c0 08             	add    $0x8,%eax
   1503a:	0f b6 00             	movzbl (%eax),%eax
   1503d:	0f be c0             	movsbl %al,%eax
   15040:	83 e8 30             	sub    $0x30,%eax
   15043:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int dev_id = dev_open(DEV_TTY, num, 0);
   15046:	83 ec 04             	sub    $0x4,%esp
   15049:	6a 00                	push   $0x0
   1504b:	ff 75 ec             	pushl  -0x14(%ebp)
   1504e:	6a 01                	push   $0x1
   15050:	e8 0b ee ff ff       	call   13e60 <dev_open>
   15055:	83 c4 10             	add    $0x10,%esp
   15058:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (dev_id < 0)
   1505b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1505f:	78 50                	js     150b1 <sys_open+0x106>
        {
            goto sys_open_failed;
        }
        file->dev_id = dev_id;
   15061:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15064:	8b 55 e8             	mov    -0x18(%ebp),%edx
   15067:	89 50 2c             	mov    %edx,0x2c(%eax)
        file->mode = 0;
   1506a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1506d:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
        file->pos = 0;
   15074:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15077:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->ref = 1;
   1507e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15081:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
        file->type = FILE_TTY;
   15088:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1508b:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%eax)
        kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   15092:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15095:	83 ec 04             	sub    $0x4,%esp
   15098:	6a 20                	push   $0x20
   1509a:	ff 75 08             	pushl  0x8(%ebp)
   1509d:	50                   	push   %eax
   1509e:	e8 8a 08 00 00       	call   1592d <kernel_strncpy>
   150a3:	83 c4 10             	add    $0x10,%esp
        return fd;
   150a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   150a9:	eb 6d                	jmp    15118 <sys_open+0x16d>
            goto sys_open_failed;
   150ab:	90                   	nop
   150ac:	eb 04                	jmp    150b2 <sys_open+0x107>
            goto sys_open_failed;
   150ae:	90                   	nop
   150af:	eb 01                	jmp    150b2 <sys_open+0x107>
            goto sys_open_failed;
   150b1:	90                   	nop
    sys_open_failed:
        if (file)
   150b2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   150b6:	74 0e                	je     150c6 <sys_open+0x11b>
        {
            file_free(file);
   150b8:	83 ec 0c             	sub    $0xc,%esp
   150bb:	ff 75 f4             	pushl  -0xc(%ebp)
   150be:	e8 76 fc ff ff       	call   14d39 <file_free>
   150c3:	83 c4 10             	add    $0x10,%esp
        }

        if (fd >= 0)
   150c6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   150ca:	78 0e                	js     150da <sys_open+0x12f>
        {
            task_remove_fd(fd);
   150cc:	83 ec 0c             	sub    $0xc,%esp
   150cf:	ff 75 f0             	pushl  -0x10(%ebp)
   150d2:	e8 a0 d1 ff ff       	call   12277 <task_remove_fd>
   150d7:	83 c4 10             	add    $0x10,%esp
        }
        return -1;
   150da:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   150df:	eb 37                	jmp    15118 <sys_open+0x16d>
    }
    else
    {
        if (name[0] == '/')
   150e1:	8b 45 08             	mov    0x8(%ebp),%eax
   150e4:	0f b6 00             	movzbl (%eax),%eax
   150e7:	3c 2f                	cmp    $0x2f,%al
   150e9:	75 28                	jne    15113 <sys_open+0x168>
        {
            read_disk(5000, 80, (uint8_t *)TEMP_ADDR);
   150eb:	83 ec 04             	sub    $0x4,%esp
   150ee:	68 60 c6 05 00       	push   $0x5c660
   150f3:	6a 50                	push   $0x50
   150f5:	68 88 13 00 00       	push   $0x1388
   150fa:	e8 5c fd ff ff       	call   14e5b <read_disk>
   150ff:	83 c4 10             	add    $0x10,%esp
            temp_pos = (uint8_t *)TEMP_ADDR;
   15102:	c7 05 60 56 07 00 60 	movl   $0x5c660,0x75660
   15109:	c6 05 00 
            return TEMP_FILE_ID;
   1510c:	b8 64 00 00 00       	mov    $0x64,%eax
   15111:	eb 05                	jmp    15118 <sys_open+0x16d>
        }
    }
    return -1;
   15113:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15118:	c9                   	leave  
   15119:	c3                   	ret    

0001511a <sys_read>:

int sys_read(int file, char *ptr, int len)
{
   1511a:	55                   	push   %ebp
   1511b:	89 e5                	mov    %esp,%ebp
   1511d:	83 ec 18             	sub    $0x18,%esp
    if (file == TEMP_FILE_ID)
   15120:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   15124:	75 2c                	jne    15152 <sys_read+0x38>
    {
        kernel_memcpy(ptr, temp_pos, len);
   15126:	a1 60 56 07 00       	mov    0x75660,%eax
   1512b:	83 ec 04             	sub    $0x4,%esp
   1512e:	ff 75 10             	pushl  0x10(%ebp)
   15131:	50                   	push   %eax
   15132:	ff 75 0c             	pushl  0xc(%ebp)
   15135:	e8 1c 09 00 00       	call   15a56 <kernel_memcpy>
   1513a:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   1513d:	8b 15 60 56 07 00    	mov    0x75660,%edx
   15143:	8b 45 10             	mov    0x10(%ebp),%eax
   15146:	01 d0                	add    %edx,%eax
   15148:	a3 60 56 07 00       	mov    %eax,0x75660
        return len;
   1514d:	8b 45 10             	mov    0x10(%ebp),%eax
   15150:	eb 4c                	jmp    1519e <sys_read+0x84>
    }
    else
    {
        file = 0;
   15152:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
        file_t *p_file = task_file(file);
   15159:	83 ec 0c             	sub    $0xc,%esp
   1515c:	ff 75 08             	pushl  0x8(%ebp)
   1515f:	e8 8e d0 ff ff       	call   121f2 <task_file>
   15164:	83 c4 10             	add    $0x10,%esp
   15167:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!p_file)
   1516a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1516e:	75 17                	jne    15187 <sys_read+0x6d>
        {
            log_printf("file not opened");
   15170:	83 ec 0c             	sub    $0xc,%esp
   15173:	68 40 6f 01 00       	push   $0x16f40
   15178:	e8 21 0f 00 00       	call   1609e <log_printf>
   1517d:	83 c4 10             	add    $0x10,%esp
            return -1;
   15180:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15185:	eb 17                	jmp    1519e <sys_read+0x84>
        }
        return dev_read(p_file->dev_id, 0, ptr, len);
   15187:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1518a:	8b 40 2c             	mov    0x2c(%eax),%eax
   1518d:	ff 75 10             	pushl  0x10(%ebp)
   15190:	ff 75 0c             	pushl  0xc(%ebp)
   15193:	6a 00                	push   $0x0
   15195:	50                   	push   %eax
   15196:	e8 0f ee ff ff       	call   13faa <dev_read>
   1519b:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
}
   1519e:	c9                   	leave  
   1519f:	c3                   	ret    

000151a0 <sys_write>:

int sys_write(int file, char *ptr, int len)
{
   151a0:	55                   	push   %ebp
   151a1:	89 e5                	mov    %esp,%ebp
   151a3:	83 ec 18             	sub    $0x18,%esp
    // file = 0; // 临时, dup实现后取消
    file_t *p_file = task_file(file);
   151a6:	83 ec 0c             	sub    $0xc,%esp
   151a9:	ff 75 08             	pushl  0x8(%ebp)
   151ac:	e8 41 d0 ff ff       	call   121f2 <task_file>
   151b1:	83 c4 10             	add    $0x10,%esp
   151b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   151b7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   151bb:	75 17                	jne    151d4 <sys_write+0x34>
    {
        log_printf("file not opened");
   151bd:	83 ec 0c             	sub    $0xc,%esp
   151c0:	68 40 6f 01 00       	push   $0x16f40
   151c5:	e8 d4 0e 00 00       	call   1609e <log_printf>
   151ca:	83 c4 10             	add    $0x10,%esp
        return -1;
   151cd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   151d2:	eb 17                	jmp    151eb <sys_write+0x4b>
    }
    return dev_write(p_file->dev_id, 0, ptr, len);
   151d4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   151d7:	8b 40 2c             	mov    0x2c(%eax),%eax
   151da:	ff 75 10             	pushl  0x10(%ebp)
   151dd:	ff 75 0c             	pushl  0xc(%ebp)
   151e0:	6a 00                	push   $0x0
   151e2:	50                   	push   %eax
   151e3:	e8 0e ee ff ff       	call   13ff6 <dev_write>
   151e8:	83 c4 10             	add    $0x10,%esp
}
   151eb:	c9                   	leave  
   151ec:	c3                   	ret    

000151ed <sys_lseek>:

int sys_lseek(int file, int ptr, int dir)
{
   151ed:	55                   	push   %ebp
   151ee:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID)
   151f0:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   151f4:	75 14                	jne    1520a <sys_lseek+0x1d>
    {
        temp_pos = (uint8_t *)(TEMP_ADDR + ptr);
   151f6:	8b 45 0c             	mov    0xc(%ebp),%eax
   151f9:	05 60 c6 05 00       	add    $0x5c660,%eax
   151fe:	a3 60 56 07 00       	mov    %eax,0x75660
        return 0;
   15203:	b8 00 00 00 00       	mov    $0x0,%eax
   15208:	eb 05                	jmp    1520f <sys_lseek+0x22>
    }

    return -1;
   1520a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1520f:	5d                   	pop    %ebp
   15210:	c3                   	ret    

00015211 <sys_close>:

int sys_close(int file)
{
   15211:	55                   	push   %ebp
   15212:	89 e5                	mov    %esp,%ebp
    return 0;
   15214:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15219:	5d                   	pop    %ebp
   1521a:	c3                   	ret    

0001521b <sys_isatty>:

/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file)
{
   1521b:	55                   	push   %ebp
   1521c:	89 e5                	mov    %esp,%ebp
    return 0;
   1521e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15223:	5d                   	pop    %ebp
   15224:	c3                   	ret    

00015225 <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st)
{
   15225:	55                   	push   %ebp
   15226:	89 e5                	mov    %esp,%ebp
    return 0;
   15228:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1522d:	5d                   	pop    %ebp
   1522e:	c3                   	ret    

0001522f <fs_init>:

/**
 * @brief 文件系统初始化
 */
void fs_init(void)
{
   1522f:	55                   	push   %ebp
   15230:	89 e5                	mov    %esp,%ebp
   15232:	83 ec 08             	sub    $0x8,%esp
    // mount_list_init();
    file_table_init();
   15235:	e8 79 fb ff ff       	call   14db3 <file_table_init>
    // ASSERT(fs != (fs_t *)0);

    // // 挂载根文件系统
    // root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
    // ASSERT(root_fs != (fs_t *)0);
}
   1523a:	90                   	nop
   1523b:	c9                   	leave  
   1523c:	c3                   	ret    

0001523d <sys_dup>:

/**
 * 复制一个文件描述符
 */
int sys_dup(int file)
{
   1523d:	55                   	push   %ebp
   1523e:	89 e5                	mov    %esp,%ebp
   15240:	83 ec 18             	sub    $0x18,%esp
    // 超出进程所能打开的全部，退出
    if (is_fd_bad(file))
   15243:	ff 75 08             	pushl  0x8(%ebp)
   15246:	e8 f3 fb ff ff       	call   14e3e <is_fd_bad>
   1524b:	83 c4 04             	add    $0x4,%esp
   1524e:	85 c0                	test   %eax,%eax
   15250:	74 1a                	je     1526c <sys_dup+0x2f>
    {
        log_printf("file(%d) is not valid.", file);
   15252:	83 ec 08             	sub    $0x8,%esp
   15255:	ff 75 08             	pushl  0x8(%ebp)
   15258:	68 50 6f 01 00       	push   $0x16f50
   1525d:	e8 3c 0e 00 00       	call   1609e <log_printf>
   15262:	83 c4 10             	add    $0x10,%esp
        return -1;
   15265:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1526a:	eb 6d                	jmp    152d9 <sys_dup+0x9c>
    }

    file_t *p_file = task_file(file);
   1526c:	83 ec 0c             	sub    $0xc,%esp
   1526f:	ff 75 08             	pushl  0x8(%ebp)
   15272:	e8 7b cf ff ff       	call   121f2 <task_file>
   15277:	83 c4 10             	add    $0x10,%esp
   1527a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   1527d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15281:	75 17                	jne    1529a <sys_dup+0x5d>
    {
        log_printf("file not opened");
   15283:	83 ec 0c             	sub    $0xc,%esp
   15286:	68 40 6f 01 00       	push   $0x16f40
   1528b:	e8 0e 0e 00 00       	call   1609e <log_printf>
   15290:	83 c4 10             	add    $0x10,%esp
        return -1;
   15293:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15298:	eb 3f                	jmp    152d9 <sys_dup+0x9c>
    }

    int fd = task_alloc_fd(p_file); // 新fd指向同一描述符
   1529a:	83 ec 0c             	sub    $0xc,%esp
   1529d:	ff 75 f4             	pushl  -0xc(%ebp)
   152a0:	e8 7f cf ff ff       	call   12224 <task_alloc_fd>
   152a5:	83 c4 10             	add    $0x10,%esp
   152a8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (fd >= 0)
   152ab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   152af:	78 13                	js     152c4 <sys_dup+0x87>
    {
        file_inc_ref(p_file);
   152b1:	83 ec 0c             	sub    $0xc,%esp
   152b4:	ff 75 f4             	pushl  -0xc(%ebp)
   152b7:	e8 bf fa ff ff       	call   14d7b <file_inc_ref>
   152bc:	83 c4 10             	add    $0x10,%esp
        return fd;
   152bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152c2:	eb 15                	jmp    152d9 <sys_dup+0x9c>
    }

    log_printf("No task file avaliable");
   152c4:	83 ec 0c             	sub    $0xc,%esp
   152c7:	68 67 6f 01 00       	push   $0x16f67
   152cc:	e8 cd 0d 00 00       	call   1609e <log_printf>
   152d1:	83 c4 10             	add    $0x10,%esp
    return -1;
   152d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   152d9:	c9                   	leave  
   152da:	c3                   	ret    

000152db <kernel_init>:
#include "dev/console.h"
#include "dev/kbd.h"
#include "fs/fs.h"

void kernel_init(boot_info_t *boot_info)
{
   152db:	55                   	push   %ebp
   152dc:	89 e5                	mov    %esp,%ebp
   152de:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   152e1:	e8 61 d4 ff ff       	call   12747 <cpu_init>
    irq_init();
   152e6:	e8 93 da ff ff       	call   12d7e <irq_init>
    log_init();
   152eb:	e8 7f 0d 00 00       	call   1606f <log_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   152f0:	83 ec 0c             	sub    $0xc,%esp
   152f3:	ff 75 08             	pushl  0x8(%ebp)
   152f6:	e8 fb b9 ff ff       	call   10cf6 <memory_init>
   152fb:	83 c4 10             	add    $0x10,%esp
    fs_init();
   152fe:	e8 2c ff ff ff       	call   1522f <fs_init>

    time_init();
   15303:	e8 a2 f3 ff ff       	call   146aa <time_init>

    task_manager_init();
   15308:	e8 2b c1 ff ff       	call   11438 <task_manager_init>
}
   1530d:	90                   	nop
   1530e:	c9                   	leave  
   1530f:	c3                   	ret    

00015310 <move_to_first_task>:

/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void)
{
   15310:	55                   	push   %ebp
   15311:	89 e5                	mov    %esp,%ebp
   15313:	56                   	push   %esi
   15314:	53                   	push   %ebx
   15315:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t *curr = task_current();
   15318:	e8 64 c2 ff ff       	call   11581 <task_current>
   1531d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   15320:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15324:	75 19                	jne    1533f <move_to_first_task+0x2f>
   15326:	68 a4 6f 01 00       	push   $0x16fa4
   1532b:	68 20 70 01 00       	push   $0x17020
   15330:	6a 58                	push   $0x58
   15332:	68 b0 6f 01 00       	push   $0x16fb0
   15337:	e8 92 0a 00 00       	call   15dce <panic>
   1533c:	83 c4 10             	add    $0x10,%esp

    tss_t *tss = &(curr->tss);
   1533f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15342:	05 5c 02 00 00       	add    $0x25c,%eax
   15347:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"     // SS
        "push %[esp]\n\t"    // ESP
        "push %[eflags]\n\t" // EFLAGS
        "push %[cs]\n\t"     // CS
        "push %[eip]\n\t"    // ip
        "iret\n\t" ::[ss] "r"(tss->ss),
   1534a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1534d:	8b 40 50             	mov    0x50(%eax),%eax
        [esp] "r"(tss->esp), [eflags] "r"(tss->eflags),
   15350:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15353:	8b 52 38             	mov    0x38(%edx),%edx
   15356:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   15359:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs] "r"(tss->cs), [eip] "r"(tss->eip));
   1535c:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1535f:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   15362:	8b 75 f0             	mov    -0x10(%ebp),%esi
   15365:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   15368:	50                   	push   %eax
   15369:	52                   	push   %edx
   1536a:	51                   	push   %ecx
   1536b:	53                   	push   %ebx
   1536c:	56                   	push   %esi
   1536d:	cf                   	iret   
}
   1536e:	90                   	nop
   1536f:	8d 65 f8             	lea    -0x8(%ebp),%esp
   15372:	5b                   	pop    %ebx
   15373:	5e                   	pop    %esi
   15374:	5d                   	pop    %ebp
   15375:	c3                   	ret    

00015376 <init_main>:

void init_main(void)
{
   15376:	55                   	push   %ebp
   15377:	89 e5                	mov    %esp,%ebp
   15379:	83 ec 08             	sub    $0x8,%esp
    // list_test();

    log_printf("Kernel is running...");
   1537c:	83 ec 0c             	sub    $0xc,%esp
   1537f:	68 ea 6f 01 00       	push   $0x16fea
   15384:	e8 15 0d 00 00       	call   1609e <log_printf>
   15389:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   1538c:	83 ec 08             	sub    $0x8,%esp
   1538f:	68 ff 6f 01 00       	push   $0x16fff
   15394:	68 05 70 01 00       	push   $0x17005
   15399:	e8 00 0d 00 00       	call   1609e <log_printf>
   1539e:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 123456, -123, 0x123456, 'a');
   153a1:	83 ec 0c             	sub    $0xc,%esp
   153a4:	6a 61                	push   $0x61
   153a6:	68 56 34 12 00       	push   $0x123456
   153ab:	6a 85                	push   $0xffffff85
   153ad:	68 40 e2 01 00       	push   $0x1e240
   153b2:	68 11 70 01 00       	push   $0x17011
   153b7:	e8 e2 0c 00 00       	call   1609e <log_printf>
   153bc:	83 c4 20             	add    $0x20,%esp

    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]); // 压栈先-4再入栈
    task_first_init();
   153bf:	e8 76 bf ff ff       	call   1133a <task_first_init>
    move_to_first_task();
   153c4:	e8 47 ff ff ff       	call   15310 <move_to_first_task>
    //     sem_notify(&sem);
    //     // sys_msleep(1000);
    //     // task_switch_from_to(task_first_task(), &init_task);
    //     // sys_sched_yield();
    // }
   153c9:	90                   	nop
   153ca:	c9                   	leave  
   153cb:	c3                   	ret    

000153cc <list_count>:
{
   153cc:	55                   	push   %ebp
   153cd:	89 e5                	mov    %esp,%ebp
    return list->count;
   153cf:	8b 45 08             	mov    0x8(%ebp),%eax
   153d2:	8b 40 08             	mov    0x8(%eax),%eax
}
   153d5:	5d                   	pop    %ebp
   153d6:	c3                   	ret    

000153d7 <mutex_init>:

/**
 * 锁初始化
 */
void mutex_init(mutex_t *mutex)
{
   153d7:	55                   	push   %ebp
   153d8:	89 e5                	mov    %esp,%ebp
   153da:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   153dd:	8b 45 08             	mov    0x8(%ebp),%eax
   153e0:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   153e7:	8b 45 08             	mov    0x8(%ebp),%eax
   153ea:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   153f0:	8b 45 08             	mov    0x8(%ebp),%eax
   153f3:	83 c0 08             	add    $0x8,%eax
   153f6:	83 ec 0c             	sub    $0xc,%esp
   153f9:	50                   	push   %eax
   153fa:	e8 8b 0a 00 00       	call   15e8a <list_init>
   153ff:	83 c4 10             	add    $0x10,%esp
}
   15402:	90                   	nop
   15403:	c9                   	leave  
   15404:	c3                   	ret    

00015405 <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock(mutex_t *mutex)
{
   15405:	55                   	push   %ebp
   15406:	89 e5                	mov    %esp,%ebp
   15408:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1540b:	e8 a9 dc ff ff       	call   130b9 <irq_enter_protection>
   15410:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t *curr = task_current();
   15413:	e8 69 c1 ff ff       	call   11581 <task_current>
   15418:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0)
   1541b:	8b 45 08             	mov    0x8(%ebp),%eax
   1541e:	8b 40 04             	mov    0x4(%eax),%eax
   15421:	85 c0                	test   %eax,%eax
   15423:	75 14                	jne    15439 <mutex_lock+0x34>
    {
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   15425:	8b 45 08             	mov    0x8(%ebp),%eax
   15428:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   1542f:	8b 45 08             	mov    0x8(%ebp),%eax
   15432:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15435:	89 10                	mov    %edx,(%eax)
   15437:	eb 4f                	jmp    15488 <mutex_lock+0x83>
    }
    else if (mutex->owner == curr)
   15439:	8b 45 08             	mov    0x8(%ebp),%eax
   1543c:	8b 00                	mov    (%eax),%eax
   1543e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15441:	75 11                	jne    15454 <mutex_lock+0x4f>
    {
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   15443:	8b 45 08             	mov    0x8(%ebp),%eax
   15446:	8b 40 04             	mov    0x4(%eax),%eax
   15449:	8d 50 01             	lea    0x1(%eax),%edx
   1544c:	8b 45 08             	mov    0x8(%ebp),%eax
   1544f:	89 50 04             	mov    %edx,0x4(%eax)
   15452:	eb 34                	jmp    15488 <mutex_lock+0x83>
    }
    else
    {
        // 有其它任务占用，则进入队列等待
        task_t *curr = task_current();
   15454:	e8 28 c1 ff ff       	call   11581 <task_current>
   15459:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   1545c:	83 ec 0c             	sub    $0xc,%esp
   1545f:	ff 75 ec             	pushl  -0x14(%ebp)
   15462:	e8 ef c0 ff ff       	call   11556 <task_set_block>
   15467:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   1546a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1546d:	8d 50 4c             	lea    0x4c(%eax),%edx
   15470:	8b 45 08             	mov    0x8(%ebp),%eax
   15473:	83 c0 08             	add    $0x8,%eax
   15476:	83 ec 08             	sub    $0x8,%esp
   15479:	52                   	push   %edx
   1547a:	50                   	push   %eax
   1547b:	e8 8e 0a 00 00       	call   15f0e <list_insert_last>
   15480:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   15483:	e8 a7 c1 ff ff       	call   1162f <task_dispatch>
    }

    irq_leave_protection(irq_state);
   15488:	83 ec 0c             	sub    $0xc,%esp
   1548b:	ff 75 f4             	pushl  -0xc(%ebp)
   1548e:	e8 3e dc ff ff       	call   130d1 <irq_leave_protection>
   15493:	83 c4 10             	add    $0x10,%esp
}
   15496:	90                   	nop
   15497:	c9                   	leave  
   15498:	c3                   	ret    

00015499 <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock(mutex_t *mutex)
{
   15499:	55                   	push   %ebp
   1549a:	89 e5                	mov    %esp,%ebp
   1549c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1549f:	e8 15 dc ff ff       	call   130b9 <irq_enter_protection>
   154a4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t *curr = task_current();
   154a7:	e8 d5 c0 ff ff       	call   11581 <task_current>
   154ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr)
   154af:	8b 45 08             	mov    0x8(%ebp),%eax
   154b2:	8b 00                	mov    (%eax),%eax
   154b4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   154b7:	0f 85 88 00 00 00    	jne    15545 <mutex_unlock+0xac>
    {
        if (--mutex->locked_count == 0)
   154bd:	8b 45 08             	mov    0x8(%ebp),%eax
   154c0:	8b 40 04             	mov    0x4(%eax),%eax
   154c3:	8d 50 ff             	lea    -0x1(%eax),%edx
   154c6:	8b 45 08             	mov    0x8(%ebp),%eax
   154c9:	89 50 04             	mov    %edx,0x4(%eax)
   154cc:	8b 45 08             	mov    0x8(%ebp),%eax
   154cf:	8b 40 04             	mov    0x4(%eax),%eax
   154d2:	85 c0                	test   %eax,%eax
   154d4:	75 6f                	jne    15545 <mutex_unlock+0xac>
        {
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   154d6:	8b 45 08             	mov    0x8(%ebp),%eax
   154d9:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list))
   154df:	8b 45 08             	mov    0x8(%ebp),%eax
   154e2:	83 c0 08             	add    $0x8,%eax
   154e5:	83 ec 0c             	sub    $0xc,%esp
   154e8:	50                   	push   %eax
   154e9:	e8 de fe ff ff       	call   153cc <list_count>
   154ee:	83 c4 10             	add    $0x10,%esp
   154f1:	85 c0                	test   %eax,%eax
   154f3:	74 50                	je     15545 <mutex_unlock+0xac>
            {
                list_node_t *task_node = list_remove_first(&mutex->wait_list);
   154f5:	8b 45 08             	mov    0x8(%ebp),%eax
   154f8:	83 c0 08             	add    $0x8,%eax
   154fb:	83 ec 0c             	sub    $0xc,%esp
   154fe:	50                   	push   %eax
   154ff:	e8 6e 0a 00 00       	call   15f72 <list_remove_first>
   15504:	83 c4 10             	add    $0x10,%esp
   15507:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t *task = list_node_parent(task_node, task_t, wait_node);
   1550a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1550e:	74 08                	je     15518 <mutex_unlock+0x7f>
   15510:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15513:	83 e8 4c             	sub    $0x4c,%eax
   15516:	eb 05                	jmp    1551d <mutex_unlock+0x84>
   15518:	b8 00 00 00 00       	mov    $0x0,%eax
   1551d:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   15520:	83 ec 0c             	sub    $0xc,%esp
   15523:	ff 75 e8             	pushl  -0x18(%ebp)
   15526:	e8 f7 bf ff ff       	call   11522 <task_set_ready>
   1552b:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   1552e:	8b 45 08             	mov    0x8(%ebp),%eax
   15531:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   15538:	8b 45 08             	mov    0x8(%ebp),%eax
   1553b:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1553e:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   15540:	e8 ea c0 ff ff       	call   1162f <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   15545:	83 ec 0c             	sub    $0xc,%esp
   15548:	ff 75 f4             	pushl  -0xc(%ebp)
   1554b:	e8 81 db ff ff       	call   130d1 <irq_leave_protection>
   15550:	83 c4 10             	add    $0x10,%esp
   15553:	90                   	nop
   15554:	c9                   	leave  
   15555:	c3                   	ret    

00015556 <list_count>:
{
   15556:	55                   	push   %ebp
   15557:	89 e5                	mov    %esp,%ebp
    return list->count;
   15559:	8b 45 08             	mov    0x8(%ebp),%eax
   1555c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1555f:	5d                   	pop    %ebp
   15560:	c3                   	ret    

00015561 <sem_init>:

/**
 * 信号量初始化
 */
void sem_init(sem_t *sem, int init_count)
{
   15561:	55                   	push   %ebp
   15562:	89 e5                	mov    %esp,%ebp
   15564:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   15567:	8b 45 08             	mov    0x8(%ebp),%eax
   1556a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1556d:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1556f:	8b 45 08             	mov    0x8(%ebp),%eax
   15572:	83 c0 04             	add    $0x4,%eax
   15575:	83 ec 0c             	sub    $0xc,%esp
   15578:	50                   	push   %eax
   15579:	e8 0c 09 00 00       	call   15e8a <list_init>
   1557e:	83 c4 10             	add    $0x10,%esp
}
   15581:	90                   	nop
   15582:	c9                   	leave  
   15583:	c3                   	ret    

00015584 <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait(sem_t *sem)
{
   15584:	55                   	push   %ebp
   15585:	89 e5                	mov    %esp,%ebp
   15587:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1558a:	e8 2a db ff ff       	call   130b9 <irq_enter_protection>
   1558f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0)
   15592:	8b 45 08             	mov    0x8(%ebp),%eax
   15595:	8b 00                	mov    (%eax),%eax
   15597:	85 c0                	test   %eax,%eax
   15599:	7e 0f                	jle    155aa <sem_wait+0x26>
    {
        sem->count--;
   1559b:	8b 45 08             	mov    0x8(%ebp),%eax
   1559e:	8b 00                	mov    (%eax),%eax
   155a0:	8d 50 ff             	lea    -0x1(%eax),%edx
   155a3:	8b 45 08             	mov    0x8(%ebp),%eax
   155a6:	89 10                	mov    %edx,(%eax)
   155a8:	eb 34                	jmp    155de <sem_wait+0x5a>
    }
    else
    {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t *curr = task_current();
   155aa:	e8 d2 bf ff ff       	call   11581 <task_current>
   155af:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   155b2:	83 ec 0c             	sub    $0xc,%esp
   155b5:	ff 75 f0             	pushl  -0x10(%ebp)
   155b8:	e8 99 bf ff ff       	call   11556 <task_set_block>
   155bd:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   155c0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155c3:	8d 50 4c             	lea    0x4c(%eax),%edx
   155c6:	8b 45 08             	mov    0x8(%ebp),%eax
   155c9:	83 c0 04             	add    $0x4,%eax
   155cc:	83 ec 08             	sub    $0x8,%esp
   155cf:	52                   	push   %edx
   155d0:	50                   	push   %eax
   155d1:	e8 38 09 00 00       	call   15f0e <list_insert_last>
   155d6:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   155d9:	e8 51 c0 ff ff       	call   1162f <task_dispatch>
    }

    irq_leave_protection(irq_state);
   155de:	83 ec 0c             	sub    $0xc,%esp
   155e1:	ff 75 f4             	pushl  -0xc(%ebp)
   155e4:	e8 e8 da ff ff       	call   130d1 <irq_leave_protection>
   155e9:	83 c4 10             	add    $0x10,%esp
}
   155ec:	90                   	nop
   155ed:	c9                   	leave  
   155ee:	c3                   	ret    

000155ef <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify(sem_t *sem)
{
   155ef:	55                   	push   %ebp
   155f0:	89 e5                	mov    %esp,%ebp
   155f2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   155f5:	e8 bf da ff ff       	call   130b9 <irq_enter_protection>
   155fa:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list))
   155fd:	8b 45 08             	mov    0x8(%ebp),%eax
   15600:	83 c0 04             	add    $0x4,%eax
   15603:	83 ec 0c             	sub    $0xc,%esp
   15606:	50                   	push   %eax
   15607:	e8 4a ff ff ff       	call   15556 <list_count>
   1560c:	83 c4 10             	add    $0x10,%esp
   1560f:	85 c0                	test   %eax,%eax
   15611:	74 40                	je     15653 <sem_notify+0x64>
    {
        // 有进程等待，则唤醒加入就绪队列
        list_node_t *node = list_remove_first(&sem->wait_list);
   15613:	8b 45 08             	mov    0x8(%ebp),%eax
   15616:	83 c0 04             	add    $0x4,%eax
   15619:	83 ec 0c             	sub    $0xc,%esp
   1561c:	50                   	push   %eax
   1561d:	e8 50 09 00 00       	call   15f72 <list_remove_first>
   15622:	83 c4 10             	add    $0x10,%esp
   15625:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   15628:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1562c:	74 08                	je     15636 <sem_notify+0x47>
   1562e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15631:	83 e8 4c             	sub    $0x4c,%eax
   15634:	eb 05                	jmp    1563b <sem_notify+0x4c>
   15636:	b8 00 00 00 00       	mov    $0x0,%eax
   1563b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1563e:	83 ec 0c             	sub    $0xc,%esp
   15641:	ff 75 ec             	pushl  -0x14(%ebp)
   15644:	e8 d9 be ff ff       	call   11522 <task_set_ready>
   15649:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   1564c:	e8 de bf ff ff       	call   1162f <task_dispatch>
   15651:	eb 0d                	jmp    15660 <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   15653:	8b 45 08             	mov    0x8(%ebp),%eax
   15656:	8b 00                	mov    (%eax),%eax
   15658:	8d 50 01             	lea    0x1(%eax),%edx
   1565b:	8b 45 08             	mov    0x8(%ebp),%eax
   1565e:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   15660:	83 ec 0c             	sub    $0xc,%esp
   15663:	ff 75 f4             	pushl  -0xc(%ebp)
   15666:	e8 66 da ff ff       	call   130d1 <irq_leave_protection>
   1566b:	83 c4 10             	add    $0x10,%esp
}
   1566e:	90                   	nop
   1566f:	c9                   	leave  
   15670:	c3                   	ret    

00015671 <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count(sem_t *sem)
{
   15671:	55                   	push   %ebp
   15672:	89 e5                	mov    %esp,%ebp
   15674:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   15677:	e8 3d da ff ff       	call   130b9 <irq_enter_protection>
   1567c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1567f:	8b 45 08             	mov    0x8(%ebp),%eax
   15682:	8b 00                	mov    (%eax),%eax
   15684:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   15687:	83 ec 0c             	sub    $0xc,%esp
   1568a:	ff 75 f4             	pushl  -0xc(%ebp)
   1568d:	e8 3f da ff ff       	call   130d1 <irq_leave_protection>
   15692:	83 c4 10             	add    $0x10,%esp
    return count;
   15695:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15698:	c9                   	leave  
   15699:	c3                   	ret    

0001569a <bitmap_byte_count>:

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count(int bit_count)
{
   1569a:	55                   	push   %ebp
   1569b:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   1569d:	8b 45 08             	mov    0x8(%ebp),%eax
   156a0:	83 c0 07             	add    $0x7,%eax
   156a3:	8d 50 07             	lea    0x7(%eax),%edx
   156a6:	85 c0                	test   %eax,%eax
   156a8:	0f 48 c2             	cmovs  %edx,%eax
   156ab:	c1 f8 03             	sar    $0x3,%eax
}
   156ae:	5d                   	pop    %ebp
   156af:	c3                   	ret    

000156b0 <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   156b0:	55                   	push   %ebp
   156b1:	89 e5                	mov    %esp,%ebp
   156b3:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   156b6:	8b 45 08             	mov    0x8(%ebp),%eax
   156b9:	8b 55 10             	mov    0x10(%ebp),%edx
   156bc:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   156be:	8b 45 08             	mov    0x8(%ebp),%eax
   156c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   156c4:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   156c7:	8b 45 08             	mov    0x8(%ebp),%eax
   156ca:	8b 00                	mov    (%eax),%eax
   156cc:	50                   	push   %eax
   156cd:	e8 c8 ff ff ff       	call   1569a <bitmap_byte_count>
   156d2:	83 c4 04             	add    $0x4,%esp
   156d5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes); // 将bitmap置位
   156d8:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   156dc:	74 07                	je     156e5 <bitmap_init+0x35>
   156de:	ba ff 00 00 00       	mov    $0xff,%edx
   156e3:	eb 05                	jmp    156ea <bitmap_init+0x3a>
   156e5:	ba 00 00 00 00       	mov    $0x0,%edx
   156ea:	8b 45 08             	mov    0x8(%ebp),%eax
   156ed:	8b 40 04             	mov    0x4(%eax),%eax
   156f0:	83 ec 04             	sub    $0x4,%esp
   156f3:	ff 75 f4             	pushl  -0xc(%ebp)
   156f6:	52                   	push   %edx
   156f7:	50                   	push   %eax
   156f8:	e8 a8 03 00 00       	call   15aa5 <kernel_memset>
   156fd:	83 c4 10             	add    $0x10,%esp
}
   15700:	90                   	nop
   15701:	c9                   	leave  
   15702:	c3                   	ret    

00015703 <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   15703:	55                   	push   %ebp
   15704:	89 e5                	mov    %esp,%ebp
   15706:	56                   	push   %esi
   15707:	53                   	push   %ebx
   15708:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   1570b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15712:	e9 a2 00 00 00       	jmp    157b9 <bitmap_set_bit+0xb6>
    {
        // 可以考虑进行一定程序的优化!!
        if (bit)
   15717:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1571b:	74 4a                	je     15767 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= 1 << (index % 8);
   1571d:	8b 45 08             	mov    0x8(%ebp),%eax
   15720:	8b 50 04             	mov    0x4(%eax),%edx
   15723:	8b 45 0c             	mov    0xc(%ebp),%eax
   15726:	8d 48 07             	lea    0x7(%eax),%ecx
   15729:	85 c0                	test   %eax,%eax
   1572b:	0f 48 c1             	cmovs  %ecx,%eax
   1572e:	c1 f8 03             	sar    $0x3,%eax
   15731:	89 c3                	mov    %eax,%ebx
   15733:	89 d8                	mov    %ebx,%eax
   15735:	01 d0                	add    %edx,%eax
   15737:	0f b6 00             	movzbl (%eax),%eax
   1573a:	89 c6                	mov    %eax,%esi
   1573c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1573f:	99                   	cltd   
   15740:	c1 ea 1d             	shr    $0x1d,%edx
   15743:	01 d0                	add    %edx,%eax
   15745:	83 e0 07             	and    $0x7,%eax
   15748:	29 d0                	sub    %edx,%eax
   1574a:	ba 01 00 00 00       	mov    $0x1,%edx
   1574f:	89 c1                	mov    %eax,%ecx
   15751:	d3 e2                	shl    %cl,%edx
   15753:	89 d0                	mov    %edx,%eax
   15755:	89 f2                	mov    %esi,%edx
   15757:	09 c2                	or     %eax,%edx
   15759:	8b 45 08             	mov    0x8(%ebp),%eax
   1575c:	8b 40 04             	mov    0x4(%eax),%eax
   1575f:	89 d9                	mov    %ebx,%ecx
   15761:	01 c8                	add    %ecx,%eax
   15763:	88 10                	mov    %dl,(%eax)
   15765:	eb 4a                	jmp    157b1 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   15767:	8b 45 08             	mov    0x8(%ebp),%eax
   1576a:	8b 50 04             	mov    0x4(%eax),%edx
   1576d:	8b 45 0c             	mov    0xc(%ebp),%eax
   15770:	8d 48 07             	lea    0x7(%eax),%ecx
   15773:	85 c0                	test   %eax,%eax
   15775:	0f 48 c1             	cmovs  %ecx,%eax
   15778:	c1 f8 03             	sar    $0x3,%eax
   1577b:	89 c3                	mov    %eax,%ebx
   1577d:	89 d8                	mov    %ebx,%eax
   1577f:	01 d0                	add    %edx,%eax
   15781:	0f b6 00             	movzbl (%eax),%eax
   15784:	89 c6                	mov    %eax,%esi
   15786:	8b 45 0c             	mov    0xc(%ebp),%eax
   15789:	99                   	cltd   
   1578a:	c1 ea 1d             	shr    $0x1d,%edx
   1578d:	01 d0                	add    %edx,%eax
   1578f:	83 e0 07             	and    $0x7,%eax
   15792:	29 d0                	sub    %edx,%eax
   15794:	ba 01 00 00 00       	mov    $0x1,%edx
   15799:	89 c1                	mov    %eax,%ecx
   1579b:	d3 e2                	shl    %cl,%edx
   1579d:	89 d0                	mov    %edx,%eax
   1579f:	f7 d0                	not    %eax
   157a1:	89 f2                	mov    %esi,%edx
   157a3:	21 c2                	and    %eax,%edx
   157a5:	8b 45 08             	mov    0x8(%ebp),%eax
   157a8:	8b 40 04             	mov    0x4(%eax),%eax
   157ab:	89 d9                	mov    %ebx,%ecx
   157ad:	01 c8                	add    %ecx,%eax
   157af:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   157b1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   157b5:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   157b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   157bc:	3b 45 10             	cmp    0x10(%ebp),%eax
   157bf:	7d 0e                	jge    157cf <bitmap_set_bit+0xcc>
   157c1:	8b 45 08             	mov    0x8(%ebp),%eax
   157c4:	8b 00                	mov    (%eax),%eax
   157c6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   157c9:	0f 8c 48 ff ff ff    	jl     15717 <bitmap_set_bit+0x14>
        }
    }
}
   157cf:	90                   	nop
   157d0:	83 c4 10             	add    $0x10,%esp
   157d3:	5b                   	pop    %ebx
   157d4:	5e                   	pop    %esi
   157d5:	5d                   	pop    %ebp
   157d6:	c3                   	ret    

000157d7 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   157d7:	55                   	push   %ebp
   157d8:	89 e5                	mov    %esp,%ebp
   157da:	53                   	push   %ebx
    // return bitmap->bits[index / 8] & (1 << (index % 8));
    //  2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   157db:	8b 45 08             	mov    0x8(%ebp),%eax
   157de:	8b 50 04             	mov    0x4(%eax),%edx
   157e1:	8b 45 0c             	mov    0xc(%ebp),%eax
   157e4:	8d 48 07             	lea    0x7(%eax),%ecx
   157e7:	85 c0                	test   %eax,%eax
   157e9:	0f 48 c1             	cmovs  %ecx,%eax
   157ec:	c1 f8 03             	sar    $0x3,%eax
   157ef:	01 d0                	add    %edx,%eax
   157f1:	0f b6 00             	movzbl (%eax),%eax
   157f4:	0f b6 d8             	movzbl %al,%ebx
   157f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   157fa:	99                   	cltd   
   157fb:	c1 ea 1d             	shr    $0x1d,%edx
   157fe:	01 d0                	add    %edx,%eax
   15800:	83 e0 07             	and    $0x7,%eax
   15803:	29 d0                	sub    %edx,%eax
   15805:	89 c1                	mov    %eax,%ecx
   15807:	d3 fb                	sar    %cl,%ebx
   15809:	89 d8                	mov    %ebx,%eax
   1580b:	83 e0 01             	and    $0x1,%eax
}
   1580e:	5b                   	pop    %ebx
   1580f:	5d                   	pop    %ebp
   15810:	c3                   	ret    

00015811 <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   15811:	55                   	push   %ebp
   15812:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   15814:	ff 75 0c             	pushl  0xc(%ebp)
   15817:	ff 75 08             	pushl  0x8(%ebp)
   1581a:	e8 b8 ff ff ff       	call   157d7 <bitmap_get_bit>
   1581f:	83 c4 08             	add    $0x8,%esp
   15822:	85 c0                	test   %eax,%eax
   15824:	0f 95 c0             	setne  %al
   15827:	0f b6 c0             	movzbl %al,%eax
}
   1582a:	c9                   	leave  
   1582b:	c3                   	ret    

0001582c <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   1582c:	55                   	push   %ebp
   1582d:	89 e5                	mov    %esp,%ebp
   1582f:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   15832:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   15839:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count)
   15840:	e9 85 00 00 00       	jmp    158ca <bitmap_alloc_nbits+0x9e>
    {
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   15845:	ff 75 fc             	pushl  -0x4(%ebp)
   15848:	ff 75 08             	pushl  0x8(%ebp)
   1584b:	e8 87 ff ff ff       	call   157d7 <bitmap_get_bit>
   15850:	83 c4 08             	add    $0x8,%esp
   15853:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15856:	74 06                	je     1585e <bitmap_alloc_nbits+0x32>
        {
            // 不同，继续寻找起始的bit
            search_idx++;
   15858:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   1585c:	eb 6c                	jmp    158ca <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   1585e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15861:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   15864:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1586b:	eb 27                	jmp    15894 <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   1586d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15870:	8d 50 01             	lea    0x1(%eax),%edx
   15873:	89 55 fc             	mov    %edx,-0x4(%ebp)
   15876:	50                   	push   %eax
   15877:	ff 75 08             	pushl  0x8(%ebp)
   1587a:	e8 58 ff ff ff       	call   157d7 <bitmap_get_bit>
   1587f:	83 c4 08             	add    $0x8,%esp
   15882:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15885:	74 09                	je     15890 <bitmap_alloc_nbits+0x64>
            {
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   15887:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1588e:	eb 16                	jmp    158a6 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   15890:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15894:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15897:	3b 45 10             	cmp    0x10(%ebp),%eax
   1589a:	7d 0a                	jge    158a6 <bitmap_alloc_nbits+0x7a>
   1589c:	8b 45 08             	mov    0x8(%ebp),%eax
   1589f:	8b 00                	mov    (%eax),%eax
   158a1:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   158a4:	7c c7                	jl     1586d <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count)
   158a6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   158a9:	3b 45 10             	cmp    0x10(%ebp),%eax
   158ac:	7c 1c                	jl     158ca <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   158ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   158b1:	f7 d0                	not    %eax
   158b3:	50                   	push   %eax
   158b4:	ff 75 10             	pushl  0x10(%ebp)
   158b7:	ff 75 f8             	pushl  -0x8(%ebp)
   158ba:	ff 75 08             	pushl  0x8(%ebp)
   158bd:	e8 41 fe ff ff       	call   15703 <bitmap_set_bit>
   158c2:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   158c5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   158c8:	eb 13                	jmp    158dd <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   158ca:	8b 45 08             	mov    0x8(%ebp),%eax
   158cd:	8b 00                	mov    (%eax),%eax
   158cf:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   158d2:	0f 8c 6d ff ff ff    	jl     15845 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   158d8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   158dd:	c9                   	leave  
   158de:	c3                   	ret    

000158df <hlt>:
{
   158df:	55                   	push   %ebp
   158e0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   158e2:	f4                   	hlt    
}
   158e3:	90                   	nop
   158e4:	5d                   	pop    %ebp
   158e5:	c3                   	ret    

000158e6 <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char *dest, const char *src)
{
   158e6:	55                   	push   %ebp
   158e7:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   158e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   158ed:	74 3b                	je     1592a <kernel_strcpy+0x44>
   158ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   158f3:	74 35                	je     1592a <kernel_strcpy+0x44>
    {
        return;
    }

    while (*dest && *src)
   158f5:	eb 17                	jmp    1590e <kernel_strcpy+0x28>
    {
        *dest++ = *src++;
   158f7:	8b 55 0c             	mov    0xc(%ebp),%edx
   158fa:	8d 42 01             	lea    0x1(%edx),%eax
   158fd:	89 45 0c             	mov    %eax,0xc(%ebp)
   15900:	8b 45 08             	mov    0x8(%ebp),%eax
   15903:	8d 48 01             	lea    0x1(%eax),%ecx
   15906:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15909:	0f b6 12             	movzbl (%edx),%edx
   1590c:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   1590e:	8b 45 08             	mov    0x8(%ebp),%eax
   15911:	0f b6 00             	movzbl (%eax),%eax
   15914:	84 c0                	test   %al,%al
   15916:	74 0a                	je     15922 <kernel_strcpy+0x3c>
   15918:	8b 45 0c             	mov    0xc(%ebp),%eax
   1591b:	0f b6 00             	movzbl (%eax),%eax
   1591e:	84 c0                	test   %al,%al
   15920:	75 d5                	jne    158f7 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   15922:	8b 45 08             	mov    0x8(%ebp),%eax
   15925:	c6 00 00             	movb   $0x0,(%eax)
   15928:	eb 01                	jmp    1592b <kernel_strcpy+0x45>
        return;
   1592a:	90                   	nop
}
   1592b:	5d                   	pop    %ebp
   1592c:	c3                   	ret    

0001592d <kernel_strncpy>:

void kernel_strncpy(char *dest, const char *src, int size)
{
   1592d:	55                   	push   %ebp
   1592e:	89 e5                	mov    %esp,%ebp
   15930:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   15933:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15937:	74 61                	je     1599a <kernel_strncpy+0x6d>
   15939:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1593d:	74 5b                	je     1599a <kernel_strncpy+0x6d>
   1593f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15943:	74 55                	je     1599a <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   15945:	8b 45 08             	mov    0x8(%ebp),%eax
   15948:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   1594b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1594e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   15951:	eb 17                	jmp    1596a <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   15953:	8b 55 f8             	mov    -0x8(%ebp),%edx
   15956:	8d 42 01             	lea    0x1(%edx),%eax
   15959:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1595c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1595f:	8d 48 01             	lea    0x1(%eax),%ecx
   15962:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   15965:	0f b6 12             	movzbl (%edx),%edx
   15968:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   1596a:	8b 45 10             	mov    0x10(%ebp),%eax
   1596d:	8d 50 ff             	lea    -0x1(%eax),%edx
   15970:	89 55 10             	mov    %edx,0x10(%ebp)
   15973:	85 c0                	test   %eax,%eax
   15975:	7e 0a                	jle    15981 <kernel_strncpy+0x54>
   15977:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1597a:	0f b6 00             	movzbl (%eax),%eax
   1597d:	84 c0                	test   %al,%al
   1597f:	75 d2                	jne    15953 <kernel_strncpy+0x26>
    }
    if (size == 0)
   15981:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15985:	75 0b                	jne    15992 <kernel_strncpy+0x65>
    {
        *(d - 1) = '\0';
   15987:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1598a:	83 e8 01             	sub    $0x1,%eax
   1598d:	c6 00 00             	movb   $0x0,(%eax)
   15990:	eb 09                	jmp    1599b <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   15992:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15995:	c6 00 00             	movb   $0x0,(%eax)
   15998:	eb 01                	jmp    1599b <kernel_strncpy+0x6e>
        return;
   1599a:	90                   	nop
    }
}
   1599b:	c9                   	leave  
   1599c:	c3                   	ret    

0001599d <kernel_strncmp>:

int kernel_strncmp(const char *s1, const char *s2, int size)
{
   1599d:	55                   	push   %ebp
   1599e:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   159a0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   159a4:	74 06                	je     159ac <kernel_strncmp+0xf>
   159a6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   159aa:	75 13                	jne    159bf <kernel_strncmp+0x22>
    {
        return -1;
   159ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   159b1:	eb 66                	jmp    15a19 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   159b3:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   159b7:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   159bb:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   159bf:	8b 45 08             	mov    0x8(%ebp),%eax
   159c2:	0f b6 00             	movzbl (%eax),%eax
   159c5:	84 c0                	test   %al,%al
   159c7:	74 20                	je     159e9 <kernel_strncmp+0x4c>
   159c9:	8b 45 0c             	mov    0xc(%ebp),%eax
   159cc:	0f b6 00             	movzbl (%eax),%eax
   159cf:	84 c0                	test   %al,%al
   159d1:	74 16                	je     159e9 <kernel_strncmp+0x4c>
   159d3:	8b 45 08             	mov    0x8(%ebp),%eax
   159d6:	0f b6 10             	movzbl (%eax),%edx
   159d9:	8b 45 0c             	mov    0xc(%ebp),%eax
   159dc:	0f b6 00             	movzbl (%eax),%eax
   159df:	38 c2                	cmp    %al,%dl
   159e1:	75 06                	jne    159e9 <kernel_strncmp+0x4c>
   159e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   159e7:	75 ca                	jne    159b3 <kernel_strncmp+0x16>
    }
    // 相等返回0
    // s1="abc",s2="abcdef" 也属于相等
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   159e9:	8b 45 08             	mov    0x8(%ebp),%eax
   159ec:	0f b6 00             	movzbl (%eax),%eax
   159ef:	84 c0                	test   %al,%al
   159f1:	74 21                	je     15a14 <kernel_strncmp+0x77>
   159f3:	8b 45 0c             	mov    0xc(%ebp),%eax
   159f6:	0f b6 00             	movzbl (%eax),%eax
   159f9:	84 c0                	test   %al,%al
   159fb:	74 17                	je     15a14 <kernel_strncmp+0x77>
   159fd:	8b 45 08             	mov    0x8(%ebp),%eax
   15a00:	0f b6 10             	movzbl (%eax),%edx
   15a03:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a06:	0f b6 00             	movzbl (%eax),%eax
   15a09:	38 c2                	cmp    %al,%dl
   15a0b:	74 07                	je     15a14 <kernel_strncmp+0x77>
   15a0d:	b8 01 00 00 00       	mov    $0x1,%eax
   15a12:	eb 05                	jmp    15a19 <kernel_strncmp+0x7c>
   15a14:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15a19:	5d                   	pop    %ebp
   15a1a:	c3                   	ret    

00015a1b <kernel_strlen>:

int kernel_strlen(const char *str)
{
   15a1b:	55                   	push   %ebp
   15a1c:	89 e5                	mov    %esp,%ebp
   15a1e:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   15a21:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15a25:	75 07                	jne    15a2e <kernel_strlen+0x13>
    {
        return 0;
   15a27:	b8 00 00 00 00       	mov    $0x0,%eax
   15a2c:	eb 26                	jmp    15a54 <kernel_strlen+0x39>
    }

    const char *c = str;
   15a2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15a31:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   15a34:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   15a3b:	eb 04                	jmp    15a41 <kernel_strlen+0x26>
    {
        len++;
   15a3d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   15a41:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15a44:	8d 50 01             	lea    0x1(%eax),%edx
   15a47:	89 55 fc             	mov    %edx,-0x4(%ebp)
   15a4a:	0f b6 00             	movzbl (%eax),%eax
   15a4d:	84 c0                	test   %al,%al
   15a4f:	75 ec                	jne    15a3d <kernel_strlen+0x22>
    }

    return len;
   15a51:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   15a54:	c9                   	leave  
   15a55:	c3                   	ret    

00015a56 <kernel_memcpy>:

void kernel_memcpy(void *dest, void *src, int size)
{
   15a56:	55                   	push   %ebp
   15a57:	89 e5                	mov    %esp,%ebp
   15a59:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   15a5c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15a60:	74 40                	je     15aa2 <kernel_memcpy+0x4c>
   15a62:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15a66:	74 3a                	je     15aa2 <kernel_memcpy+0x4c>
   15a68:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15a6c:	74 34                	je     15aa2 <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   15a6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a71:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   15a74:	8b 45 08             	mov    0x8(%ebp),%eax
   15a77:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   15a7a:	eb 17                	jmp    15a93 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   15a7c:	8b 55 fc             	mov    -0x4(%ebp),%edx
   15a7f:	8d 42 01             	lea    0x1(%edx),%eax
   15a82:	89 45 fc             	mov    %eax,-0x4(%ebp)
   15a85:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15a88:	8d 48 01             	lea    0x1(%eax),%ecx
   15a8b:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   15a8e:	0f b6 12             	movzbl (%edx),%edx
   15a91:	88 10                	mov    %dl,(%eax)
    while (size--)
   15a93:	8b 45 10             	mov    0x10(%ebp),%eax
   15a96:	8d 50 ff             	lea    -0x1(%eax),%edx
   15a99:	89 55 10             	mov    %edx,0x10(%ebp)
   15a9c:	85 c0                	test   %eax,%eax
   15a9e:	75 dc                	jne    15a7c <kernel_memcpy+0x26>
   15aa0:	eb 01                	jmp    15aa3 <kernel_memcpy+0x4d>
        return;
   15aa2:	90                   	nop
    }
}
   15aa3:	c9                   	leave  
   15aa4:	c3                   	ret    

00015aa5 <kernel_memset>:

// 内存逐字节设置v
void kernel_memset(void *dest, uint8_t v, int size)
{
   15aa5:	55                   	push   %ebp
   15aa6:	89 e5                	mov    %esp,%ebp
   15aa8:	83 ec 14             	sub    $0x14,%esp
   15aab:	8b 45 0c             	mov    0xc(%ebp),%eax
   15aae:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   15ab1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15ab5:	74 2c                	je     15ae3 <kernel_memset+0x3e>
   15ab7:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15abb:	74 26                	je     15ae3 <kernel_memset+0x3e>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   15abd:	8b 45 08             	mov    0x8(%ebp),%eax
   15ac0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   15ac3:	eb 0f                	jmp    15ad4 <kernel_memset+0x2f>
    {
        *d++ = v;
   15ac5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15ac8:	8d 50 01             	lea    0x1(%eax),%edx
   15acb:	89 55 fc             	mov    %edx,-0x4(%ebp)
   15ace:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   15ad2:	88 10                	mov    %dl,(%eax)
    while (size--)
   15ad4:	8b 45 10             	mov    0x10(%ebp),%eax
   15ad7:	8d 50 ff             	lea    -0x1(%eax),%edx
   15ada:	89 55 10             	mov    %edx,0x10(%ebp)
   15add:	85 c0                	test   %eax,%eax
   15adf:	75 e4                	jne    15ac5 <kernel_memset+0x20>
   15ae1:	eb 01                	jmp    15ae4 <kernel_memset+0x3f>
        return;
   15ae3:	90                   	nop
    }
}
   15ae4:	c9                   	leave  
   15ae5:	c3                   	ret    

00015ae6 <kernel_memcmp>:

int kernel_memcmp(void *d1, void *d2, int size)
{
   15ae6:	55                   	push   %ebp
   15ae7:	89 e5                	mov    %esp,%ebp
   15ae9:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   15aec:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15af0:	74 06                	je     15af8 <kernel_memcmp+0x12>
   15af2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15af6:	75 07                	jne    15aff <kernel_memcmp+0x19>
    {
        return 1;
   15af8:	b8 01 00 00 00       	mov    $0x1,%eax
   15afd:	eb 43                	jmp    15b42 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   15aff:	8b 45 08             	mov    0x8(%ebp),%eax
   15b02:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   15b05:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b08:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   15b0b:	eb 23                	jmp    15b30 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   15b0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15b10:	8d 50 01             	lea    0x1(%eax),%edx
   15b13:	89 55 fc             	mov    %edx,-0x4(%ebp)
   15b16:	0f b6 08             	movzbl (%eax),%ecx
   15b19:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15b1c:	8d 50 01             	lea    0x1(%eax),%edx
   15b1f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15b22:	0f b6 00             	movzbl (%eax),%eax
   15b25:	38 c1                	cmp    %al,%cl
   15b27:	74 07                	je     15b30 <kernel_memcmp+0x4a>
        {
            return 1;
   15b29:	b8 01 00 00 00       	mov    $0x1,%eax
   15b2e:	eb 12                	jmp    15b42 <kernel_memcmp+0x5c>
    while (size--)
   15b30:	8b 45 10             	mov    0x10(%ebp),%eax
   15b33:	8d 50 ff             	lea    -0x1(%eax),%edx
   15b36:	89 55 10             	mov    %edx,0x10(%ebp)
   15b39:	85 c0                	test   %eax,%eax
   15b3b:	75 d0                	jne    15b0d <kernel_memcmp+0x27>
        }
    }

    // 内存一样返回0
    return 0;
   15b3d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15b42:	c9                   	leave  
   15b43:	c3                   	ret    

00015b44 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   15b44:	55                   	push   %ebp
   15b45:	89 e5                	mov    %esp,%ebp
   15b47:	53                   	push   %ebx
   15b48:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   15b4b:	8b 45 08             	mov    0x8(%ebp),%eax
   15b4e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   15b51:	8b 45 0c             	mov    0xc(%ebp),%eax
   15b54:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   15b57:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   15b5b:	74 1d                	je     15b7a <kernel_itoa+0x36>
   15b5d:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   15b61:	74 17                	je     15b7a <kernel_itoa+0x36>
   15b63:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   15b67:	74 11                	je     15b7a <kernel_itoa+0x36>
   15b69:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   15b6d:	74 0b                	je     15b7a <kernel_itoa+0x36>
    {
        *p = '\0';
   15b6f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15b72:	c6 00 00             	movb   $0x0,(%eax)
        return;
   15b75:	e9 03 01 00 00       	jmp    15c7d <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   15b7a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   15b81:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15b85:	79 19                	jns    15ba0 <kernel_itoa+0x5c>
   15b87:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   15b8b:	75 13                	jne    15ba0 <kernel_itoa+0x5c>
    {
        *p++ = '-';
   15b8d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15b90:	8d 50 01             	lea    0x1(%eax),%edx
   15b93:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15b96:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   15b99:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   15ba0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15ba4:	74 3b                	je     15be1 <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   15ba6:	8b 0d 98 80 01 00    	mov    0x18098,%ecx
   15bac:	8b 45 0c             	mov    0xc(%ebp),%eax
   15baf:	99                   	cltd   
   15bb0:	f7 7d 10             	idivl  0x10(%ebp)
   15bb3:	89 d0                	mov    %edx,%eax
   15bb5:	83 c0 0f             	add    $0xf,%eax
   15bb8:	01 c8                	add    %ecx,%eax
   15bba:	0f b6 00             	movzbl (%eax),%eax
   15bbd:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   15bc0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15bc3:	8d 50 01             	lea    0x1(%eax),%edx
   15bc6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15bc9:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   15bcd:	88 10                	mov    %dl,(%eax)
            num /= base;
   15bcf:	8b 45 0c             	mov    0xc(%ebp),%eax
   15bd2:	99                   	cltd   
   15bd3:	f7 7d 10             	idivl  0x10(%ebp)
   15bd6:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   15bd9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15bdd:	75 c7                	jne    15ba6 <kernel_itoa+0x62>
   15bdf:	eb 4b                	jmp    15c2c <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   15be1:	8b 45 0c             	mov    0xc(%ebp),%eax
   15be4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   15be7:	8b 0d 98 80 01 00    	mov    0x18098,%ecx
   15bed:	8b 5d 10             	mov    0x10(%ebp),%ebx
   15bf0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15bf3:	ba 00 00 00 00       	mov    $0x0,%edx
   15bf8:	f7 f3                	div    %ebx
   15bfa:	89 d0                	mov    %edx,%eax
   15bfc:	83 c0 0f             	add    $0xf,%eax
   15bff:	01 c8                	add    %ecx,%eax
   15c01:	0f b6 00             	movzbl (%eax),%eax
   15c04:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   15c07:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15c0a:	8d 50 01             	lea    0x1(%eax),%edx
   15c0d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15c10:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   15c14:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   15c16:	8b 5d 10             	mov    0x10(%ebp),%ebx
   15c19:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15c1c:	ba 00 00 00 00       	mov    $0x0,%edx
   15c21:	f7 f3                	div    %ebx
   15c23:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   15c26:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15c2a:	75 bb                	jne    15be7 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   15c2c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15c2f:	8d 50 ff             	lea    -0x1(%eax),%edx
   15c32:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15c35:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   15c38:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15c3c:	74 08                	je     15c46 <kernel_itoa+0x102>
   15c3e:	8b 45 08             	mov    0x8(%ebp),%eax
   15c41:	83 c0 01             	add    $0x1,%eax
   15c44:	eb 03                	jmp    15c49 <kernel_itoa+0x105>
   15c46:	8b 45 08             	mov    0x8(%ebp),%eax
   15c49:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   15c4c:	eb 27                	jmp    15c75 <kernel_itoa+0x131>
    {
        char ch = *start;
   15c4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15c51:	0f b6 00             	movzbl (%eax),%eax
   15c54:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   15c57:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15c5a:	0f b6 10             	movzbl (%eax),%edx
   15c5d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15c60:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   15c62:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15c65:	8d 50 ff             	lea    -0x1(%eax),%edx
   15c68:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15c6b:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   15c6f:	88 10                	mov    %dl,(%eax)
        start++;
   15c71:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   15c75:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15c78:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   15c7b:	72 d1                	jb     15c4e <kernel_itoa+0x10a>
    }
}
   15c7d:	83 c4 20             	add    $0x20,%esp
   15c80:	5b                   	pop    %ebx
   15c81:	5d                   	pop    %ebp
   15c82:	c3                   	ret    

00015c83 <kernel_vsprintf>:
// buf 为最终显示的目标
// fmt 为整个字符串
// args 为va_list 可变变量
void kernel_vsprintf(char *buf, const char *fmt, va_list args)
{
   15c83:	55                   	push   %ebp
   15c84:	89 e5                	mov    %esp,%ebp
   15c86:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   15c89:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buf;
   15c90:	8b 45 08             	mov    0x8(%ebp),%eax
   15c93:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   15c96:	e9 17 01 00 00       	jmp    15db2 <kernel_vsprintf+0x12f>
    {
        switch (state)
   15c9b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15c9e:	85 c0                	test   %eax,%eax
   15ca0:	74 0a                	je     15cac <kernel_vsprintf+0x29>
   15ca2:	83 f8 01             	cmp    $0x1,%eax
   15ca5:	74 2b                	je     15cd2 <kernel_vsprintf+0x4f>
   15ca7:	e9 06 01 00 00       	jmp    15db2 <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   15cac:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   15cb0:	75 0c                	jne    15cbe <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   15cb2:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   15cb9:	e9 f4 00 00 00       	jmp    15db2 <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   15cbe:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15cc1:	8d 50 01             	lea    0x1(%eax),%edx
   15cc4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15cc7:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   15ccb:	88 10                	mov    %dl,(%eax)
            }
            break;
   15ccd:	e9 e0 00 00 00       	jmp    15db2 <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   15cd2:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   15cd6:	75 31                	jne    15d09 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   15cd8:	8b 45 10             	mov    0x10(%ebp),%eax
   15cdb:	8d 50 04             	lea    0x4(%eax),%edx
   15cde:	89 55 10             	mov    %edx,0x10(%ebp)
   15ce1:	8b 00                	mov    (%eax),%eax
   15ce3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   15ce6:	6a 0a                	push   $0xa
   15ce8:	ff 75 e4             	pushl  -0x1c(%ebp)
   15ceb:	ff 75 f8             	pushl  -0x8(%ebp)
   15cee:	e8 51 fe ff ff       	call   15b44 <kernel_itoa>
   15cf3:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr); // 移动到下一个
   15cf6:	ff 75 f8             	pushl  -0x8(%ebp)
   15cf9:	e8 1d fd ff ff       	call   15a1b <kernel_strlen>
   15cfe:	83 c4 04             	add    $0x4,%esp
   15d01:	01 45 f8             	add    %eax,-0x8(%ebp)
   15d04:	e9 a1 00 00 00       	jmp    15daa <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   15d09:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   15d0d:	75 2e                	jne    15d3d <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   15d0f:	8b 45 10             	mov    0x10(%ebp),%eax
   15d12:	8d 50 04             	lea    0x4(%eax),%edx
   15d15:	89 55 10             	mov    %edx,0x10(%ebp)
   15d18:	8b 00                	mov    (%eax),%eax
   15d1a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   15d1d:	6a 10                	push   $0x10
   15d1f:	ff 75 e8             	pushl  -0x18(%ebp)
   15d22:	ff 75 f8             	pushl  -0x8(%ebp)
   15d25:	e8 1a fe ff ff       	call   15b44 <kernel_itoa>
   15d2a:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   15d2d:	ff 75 f8             	pushl  -0x8(%ebp)
   15d30:	e8 e6 fc ff ff       	call   15a1b <kernel_strlen>
   15d35:	83 c4 04             	add    $0x4,%esp
   15d38:	01 45 f8             	add    %eax,-0x8(%ebp)
   15d3b:	eb 6d                	jmp    15daa <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   15d3d:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   15d41:	75 1f                	jne    15d62 <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   15d43:	8b 45 10             	mov    0x10(%ebp),%eax
   15d46:	8d 50 04             	lea    0x4(%eax),%edx
   15d49:	89 55 10             	mov    %edx,0x10(%ebp)
   15d4c:	8b 00                	mov    (%eax),%eax
   15d4e:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   15d51:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15d54:	8d 50 01             	lea    0x1(%eax),%edx
   15d57:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15d5a:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   15d5e:	88 10                	mov    %dl,(%eax)
   15d60:	eb 48                	jmp    15daa <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   15d62:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   15d66:	75 42                	jne    15daa <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   15d68:	8b 45 10             	mov    0x10(%ebp),%eax
   15d6b:	8d 50 04             	lea    0x4(%eax),%edx
   15d6e:	89 55 10             	mov    %edx,0x10(%ebp)
   15d71:	8b 00                	mov    (%eax),%eax
   15d73:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   15d76:	ff 75 f4             	pushl  -0xc(%ebp)
   15d79:	e8 9d fc ff ff       	call   15a1b <kernel_strlen>
   15d7e:	83 c4 04             	add    $0x4,%esp
   15d81:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   15d84:	eb 17                	jmp    15d9d <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   15d86:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15d89:	8d 42 01             	lea    0x1(%edx),%eax
   15d8c:	89 45 f4             	mov    %eax,-0xc(%ebp)
   15d8f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15d92:	8d 48 01             	lea    0x1(%eax),%ecx
   15d95:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   15d98:	0f b6 12             	movzbl (%edx),%edx
   15d9b:	88 10                	mov    %dl,(%eax)
                while (len--)
   15d9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15da0:	8d 50 ff             	lea    -0x1(%eax),%edx
   15da3:	89 55 f0             	mov    %edx,-0x10(%ebp)
   15da6:	85 c0                	test   %eax,%eax
   15da8:	75 dc                	jne    15d86 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   15daa:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   15db1:	90                   	nop
    while ((ch = *fmt++))
   15db2:	8b 45 0c             	mov    0xc(%ebp),%eax
   15db5:	8d 50 01             	lea    0x1(%eax),%edx
   15db8:	89 55 0c             	mov    %edx,0xc(%ebp)
   15dbb:	0f b6 00             	movzbl (%eax),%eax
   15dbe:	88 45 ef             	mov    %al,-0x11(%ebp)
   15dc1:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   15dc5:	0f 85 d0 fe ff ff    	jne    15c9b <kernel_vsprintf+0x18>
        }
    }
}
   15dcb:	90                   	nop
   15dcc:	c9                   	leave  
   15dcd:	c3                   	ret    

00015dce <panic>:

void panic(const char *file, int line, const char *func, const char *cond)
{
   15dce:	55                   	push   %ebp
   15dcf:	89 e5                	mov    %esp,%ebp
   15dd1:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   15dd4:	83 ec 08             	sub    $0x8,%esp
   15dd7:	ff 75 14             	pushl  0x14(%ebp)
   15dda:	68 34 70 01 00       	push   $0x17034
   15ddf:	e8 ba 02 00 00       	call   1609e <log_printf>
   15de4:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   15de7:	ff 75 10             	pushl  0x10(%ebp)
   15dea:	ff 75 0c             	pushl  0xc(%ebp)
   15ded:	ff 75 08             	pushl  0x8(%ebp)
   15df0:	68 46 70 01 00       	push   $0x17046
   15df5:	e8 a4 02 00 00       	call   1609e <log_printf>
   15dfa:	83 c4 10             	add    $0x10,%esp

    for (;;)
    {
        hlt();
   15dfd:	e8 dd fa ff ff       	call   158df <hlt>
   15e02:	eb f9                	jmp    15dfd <panic+0x2f>

00015e04 <get_file_name>:

/**
 * @brief 从路径中解释文件名
 */
char *get_file_name(char *name)
{
   15e04:	55                   	push   %ebp
   15e05:	89 e5                	mov    %esp,%ebp
   15e07:	83 ec 10             	sub    $0x10,%esp
    char *s = name;
   15e0a:	8b 45 08             	mov    0x8(%ebp),%eax
   15e0d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0')
   15e10:	eb 04                	jmp    15e16 <get_file_name+0x12>
    {
        s++;
   15e12:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0')
   15e16:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e19:	0f b6 00             	movzbl (%eax),%eax
   15e1c:	84 c0                	test   %al,%al
   15e1e:	75 f2                	jne    15e12 <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name))
   15e20:	eb 04                	jmp    15e26 <get_file_name+0x22>
    {
        s--;
   15e22:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name))
   15e26:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e29:	0f b6 00             	movzbl (%eax),%eax
   15e2c:	3c 5c                	cmp    $0x5c,%al
   15e2e:	74 12                	je     15e42 <get_file_name+0x3e>
   15e30:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e33:	0f b6 00             	movzbl (%eax),%eax
   15e36:	3c 2f                	cmp    $0x2f,%al
   15e38:	74 08                	je     15e42 <get_file_name+0x3e>
   15e3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e3d:	3b 45 08             	cmp    0x8(%ebp),%eax
   15e40:	73 e0                	jae    15e22 <get_file_name+0x1e>
    }
    return s + 1;
   15e42:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e45:	83 c0 01             	add    $0x1,%eax
}
   15e48:	c9                   	leave  
   15e49:	c3                   	ret    

00015e4a <strings_count>:

/**
 * @brief 计算字符串的数量
 */
int strings_count(char **start)
{
   15e4a:	55                   	push   %ebp
   15e4b:	89 e5                	mov    %esp,%ebp
   15e4d:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   15e50:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start)
   15e57:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15e5b:	74 15                	je     15e72 <strings_count+0x28>
    {
        while (*start++)
   15e5d:	eb 04                	jmp    15e63 <strings_count+0x19>
        {
            count++;
   15e5f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++)
   15e63:	8b 45 08             	mov    0x8(%ebp),%eax
   15e66:	8d 50 04             	lea    0x4(%eax),%edx
   15e69:	89 55 08             	mov    %edx,0x8(%ebp)
   15e6c:	8b 00                	mov    (%eax),%eax
   15e6e:	85 c0                	test   %eax,%eax
   15e70:	75 ed                	jne    15e5f <strings_count+0x15>
        }
    }
    return count;
   15e72:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15e75:	c9                   	leave  
   15e76:	c3                   	ret    

00015e77 <list_is_empty>:
{
   15e77:	55                   	push   %ebp
   15e78:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   15e7a:	8b 45 08             	mov    0x8(%ebp),%eax
   15e7d:	8b 40 08             	mov    0x8(%eax),%eax
   15e80:	85 c0                	test   %eax,%eax
   15e82:	0f 94 c0             	sete   %al
   15e85:	0f b6 c0             	movzbl %al,%eax
}
   15e88:	5d                   	pop    %ebp
   15e89:	c3                   	ret    

00015e8a <list_init>:
/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list)
{
   15e8a:	55                   	push   %ebp
   15e8b:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   15e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   15e90:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15e97:	8b 45 08             	mov    0x8(%ebp),%eax
   15e9a:	8b 50 04             	mov    0x4(%eax),%edx
   15e9d:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea0:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   15ea2:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   15eac:	90                   	nop
   15ead:	5d                   	pop    %ebp
   15eae:	c3                   	ret    

00015eaf <list_insert_first>:
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node)
{
   15eaf:	55                   	push   %ebp
   15eb0:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   15eb2:	8b 45 08             	mov    0x8(%ebp),%eax
   15eb5:	8b 10                	mov    (%eax),%edx
   15eb7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15eba:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   15ebd:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ec0:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list))
   15ec6:	ff 75 08             	pushl  0x8(%ebp)
   15ec9:	e8 a9 ff ff ff       	call   15e77 <list_is_empty>
   15ece:	83 c4 04             	add    $0x4,%esp
   15ed1:	85 c0                	test   %eax,%eax
   15ed3:	74 15                	je     15eea <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   15ed5:	8b 45 08             	mov    0x8(%ebp),%eax
   15ed8:	8b 55 0c             	mov    0xc(%ebp),%edx
   15edb:	89 10                	mov    %edx,(%eax)
   15edd:	8b 45 08             	mov    0x8(%ebp),%eax
   15ee0:	8b 10                	mov    (%eax),%edx
   15ee2:	8b 45 08             	mov    0x8(%ebp),%eax
   15ee5:	89 50 04             	mov    %edx,0x4(%eax)
   15ee8:	eb 12                	jmp    15efc <list_insert_first+0x4d>
    }
    else
    {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   15eea:	8b 45 08             	mov    0x8(%ebp),%eax
   15eed:	8b 00                	mov    (%eax),%eax
   15eef:	8b 55 0c             	mov    0xc(%ebp),%edx
   15ef2:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   15ef4:	8b 45 08             	mov    0x8(%ebp),%eax
   15ef7:	8b 55 0c             	mov    0xc(%ebp),%edx
   15efa:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   15efc:	8b 45 08             	mov    0x8(%ebp),%eax
   15eff:	8b 40 08             	mov    0x8(%eax),%eax
   15f02:	8d 50 01             	lea    0x1(%eax),%edx
   15f05:	8b 45 08             	mov    0x8(%ebp),%eax
   15f08:	89 50 08             	mov    %edx,0x8(%eax)
}
   15f0b:	90                   	nop
   15f0c:	c9                   	leave  
   15f0d:	c3                   	ret    

00015f0e <list_insert_last>:
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node)
{
   15f0e:	55                   	push   %ebp
   15f0f:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   15f11:	8b 45 08             	mov    0x8(%ebp),%eax
   15f14:	8b 50 04             	mov    0x4(%eax),%edx
   15f17:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f1a:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   15f1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f1f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list))
   15f26:	ff 75 08             	pushl  0x8(%ebp)
   15f29:	e8 49 ff ff ff       	call   15e77 <list_is_empty>
   15f2e:	83 c4 04             	add    $0x4,%esp
   15f31:	85 c0                	test   %eax,%eax
   15f33:	74 16                	je     15f4b <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   15f35:	8b 45 08             	mov    0x8(%ebp),%eax
   15f38:	8b 55 0c             	mov    0xc(%ebp),%edx
   15f3b:	89 50 04             	mov    %edx,0x4(%eax)
   15f3e:	8b 45 08             	mov    0x8(%ebp),%eax
   15f41:	8b 50 04             	mov    0x4(%eax),%edx
   15f44:	8b 45 08             	mov    0x8(%ebp),%eax
   15f47:	89 10                	mov    %edx,(%eax)
   15f49:	eb 15                	jmp    15f60 <list_insert_last+0x52>
    }
    else
    {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   15f4b:	8b 45 08             	mov    0x8(%ebp),%eax
   15f4e:	8b 40 04             	mov    0x4(%eax),%eax
   15f51:	8b 55 0c             	mov    0xc(%ebp),%edx
   15f54:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   15f57:	8b 45 08             	mov    0x8(%ebp),%eax
   15f5a:	8b 55 0c             	mov    0xc(%ebp),%edx
   15f5d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   15f60:	8b 45 08             	mov    0x8(%ebp),%eax
   15f63:	8b 40 08             	mov    0x8(%eax),%eax
   15f66:	8d 50 01             	lea    0x1(%eax),%edx
   15f69:	8b 45 08             	mov    0x8(%ebp),%eax
   15f6c:	89 50 08             	mov    %edx,0x8(%eax)
}
   15f6f:	90                   	nop
   15f70:	c9                   	leave  
   15f71:	c3                   	ret    

00015f72 <list_remove_first>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t *list_remove_first(list_t *list)
{
   15f72:	55                   	push   %ebp
   15f73:	89 e5                	mov    %esp,%ebp
   15f75:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list))
   15f78:	ff 75 08             	pushl  0x8(%ebp)
   15f7b:	e8 f7 fe ff ff       	call   15e77 <list_is_empty>
   15f80:	83 c4 04             	add    $0x4,%esp
   15f83:	85 c0                	test   %eax,%eax
   15f85:	74 07                	je     15f8e <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   15f87:	b8 00 00 00 00       	mov    $0x0,%eax
   15f8c:	eb 5a                	jmp    15fe8 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t *remove_node = list->first;
   15f8e:	8b 45 08             	mov    0x8(%ebp),%eax
   15f91:	8b 00                	mov    (%eax),%eax
   15f93:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   15f96:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15f99:	8b 50 04             	mov    0x4(%eax),%edx
   15f9c:	8b 45 08             	mov    0x8(%ebp),%eax
   15f9f:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0)
   15fa1:	8b 45 08             	mov    0x8(%ebp),%eax
   15fa4:	8b 00                	mov    (%eax),%eax
   15fa6:	85 c0                	test   %eax,%eax
   15fa8:	75 0c                	jne    15fb6 <list_remove_first+0x44>
    {
        // node为最后一个结点
        list->last = (list_node_t *)0;
   15faa:	8b 45 08             	mov    0x8(%ebp),%eax
   15fad:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15fb4:	eb 0c                	jmp    15fc2 <list_remove_first+0x50>
    }
    else
    {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   15fb6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15fb9:	8b 40 04             	mov    0x4(%eax),%eax
   15fbc:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t *)0;
   15fc2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15fc5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   15fcb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15fce:	8b 10                	mov    (%eax),%edx
   15fd0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15fd3:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   15fd6:	8b 45 08             	mov    0x8(%ebp),%eax
   15fd9:	8b 40 08             	mov    0x8(%eax),%eax
   15fdc:	8d 50 ff             	lea    -0x1(%eax),%edx
   15fdf:	8b 45 08             	mov    0x8(%ebp),%eax
   15fe2:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   15fe5:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   15fe8:	c9                   	leave  
   15fe9:	c3                   	ret    

00015fea <list_remove>:
/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t *list_remove(list_t *list, list_node_t *remove_node)
{
   15fea:	55                   	push   %ebp
   15feb:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first)
   15fed:	8b 45 08             	mov    0x8(%ebp),%eax
   15ff0:	8b 00                	mov    (%eax),%eax
   15ff2:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15ff5:	75 0b                	jne    16002 <list_remove+0x18>
    {
        list->first = remove_node->next;
   15ff7:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ffa:	8b 50 04             	mov    0x4(%eax),%edx
   15ffd:	8b 45 08             	mov    0x8(%ebp),%eax
   16000:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last)
   16002:	8b 45 08             	mov    0x8(%ebp),%eax
   16005:	8b 40 04             	mov    0x4(%eax),%eax
   16008:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1600b:	75 0b                	jne    16018 <list_remove+0x2e>
    {
        list->last = remove_node->pre;
   1600d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16010:	8b 10                	mov    (%eax),%edx
   16012:	8b 45 08             	mov    0x8(%ebp),%eax
   16015:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre)
   16018:	8b 45 0c             	mov    0xc(%ebp),%eax
   1601b:	8b 00                	mov    (%eax),%eax
   1601d:	85 c0                	test   %eax,%eax
   1601f:	74 0e                	je     1602f <list_remove+0x45>
    {
        remove_node->pre->next = remove_node->next;
   16021:	8b 45 0c             	mov    0xc(%ebp),%eax
   16024:	8b 00                	mov    (%eax),%eax
   16026:	8b 55 0c             	mov    0xc(%ebp),%edx
   16029:	8b 52 04             	mov    0x4(%edx),%edx
   1602c:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next)
   1602f:	8b 45 0c             	mov    0xc(%ebp),%eax
   16032:	8b 40 04             	mov    0x4(%eax),%eax
   16035:	85 c0                	test   %eax,%eax
   16037:	74 0d                	je     16046 <list_remove+0x5c>
    {
        remove_node->next->pre = remove_node->pre;
   16039:	8b 45 0c             	mov    0xc(%ebp),%eax
   1603c:	8b 40 04             	mov    0x4(%eax),%eax
   1603f:	8b 55 0c             	mov    0xc(%ebp),%edx
   16042:	8b 12                	mov    (%edx),%edx
   16044:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t *)0;
   16046:	8b 45 0c             	mov    0xc(%ebp),%eax
   16049:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   16050:	8b 45 0c             	mov    0xc(%ebp),%eax
   16053:	8b 50 04             	mov    0x4(%eax),%edx
   16056:	8b 45 0c             	mov    0xc(%ebp),%eax
   16059:	89 10                	mov    %edx,(%eax)
    --list->count;
   1605b:	8b 45 08             	mov    0x8(%ebp),%eax
   1605e:	8b 40 08             	mov    0x8(%eax),%eax
   16061:	8d 50 ff             	lea    -0x1(%eax),%edx
   16064:	8b 45 08             	mov    0x8(%ebp),%eax
   16067:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1606a:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   1606d:	5d                   	pop    %ebp
   1606e:	c3                   	ret    

0001606f <log_init>:

static int log_dev_id;
static mutex_t mutex;

void log_init(void)
{
   1606f:	55                   	push   %ebp
   16070:	89 e5                	mov    %esp,%ebp
   16072:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   16075:	83 ec 0c             	sub    $0xc,%esp
   16078:	68 68 56 07 00       	push   $0x75668
   1607d:	e8 55 f3 ff ff       	call   153d7 <mutex_init>
   16082:	83 c4 10             	add    $0x10,%esp
    log_dev_id = dev_open(DEV_TTY, 0, (void *)0);
   16085:	83 ec 04             	sub    $0x4,%esp
   16088:	6a 00                	push   $0x0
   1608a:	6a 00                	push   $0x0
   1608c:	6a 01                	push   $0x1
   1608e:	e8 cd dd ff ff       	call   13e60 <dev_open>
   16093:	83 c4 10             	add    $0x10,%esp
   16096:	a3 64 56 07 00       	mov    %eax,0x75664
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
    mutex_init(&mutex);
#endif
}
   1609b:	90                   	nop
   1609c:	c9                   	leave  
   1609d:	c3                   	ret    

0001609e <log_printf>:

void log_printf(const char *fmt, ...)
{
   1609e:	55                   	push   %ebp
   1609f:	89 e5                	mov    %esp,%ebp
   160a1:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   160a7:	83 ec 04             	sub    $0x4,%esp
   160aa:	68 80 00 00 00       	push   $0x80
   160af:	6a 00                	push   $0x0
   160b1:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   160b7:	50                   	push   %eax
   160b8:	e8 e8 f9 ff ff       	call   15aa5 <kernel_memset>
   160bd:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   160c0:	8d 45 0c             	lea    0xc(%ebp),%eax
   160c3:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   160c9:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   160cf:	83 ec 04             	sub    $0x4,%esp
   160d2:	50                   	push   %eax
   160d3:	ff 75 08             	pushl  0x8(%ebp)
   160d6:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   160dc:	50                   	push   %eax
   160dd:	e8 a1 fb ff ff       	call   15c83 <kernel_vsprintf>
   160e2:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 临界区进入
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   160e5:	83 ec 0c             	sub    $0xc,%esp
   160e8:	68 68 56 07 00       	push   $0x75668
   160ed:	e8 13 f3 ff ff       	call   15405 <mutex_lock>
   160f2:	83 c4 10             	add    $0x10,%esp
    // 增加默认换行
    outb(COM1_PORT, '\r'); // 行号不变，列号归零
    outb(COM1_PORT, '\n'); // 列号不变，行号+1
#else
    // console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   160f5:	83 ec 0c             	sub    $0xc,%esp
   160f8:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   160fe:	50                   	push   %eax
   160ff:	e8 17 f9 ff ff       	call   15a1b <kernel_strlen>
   16104:	83 c4 10             	add    $0x10,%esp
   16107:	89 c2                	mov    %eax,%edx
   16109:	a1 64 56 07 00       	mov    0x75664,%eax
   1610e:	52                   	push   %edx
   1610f:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
   16115:	52                   	push   %edx
   16116:	6a 00                	push   $0x0
   16118:	50                   	push   %eax
   16119:	e8 d8 de ff ff       	call   13ff6 <dev_write>
   1611e:	83 c4 10             	add    $0x10,%esp
    char c = '\n';
   16121:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    // console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   16128:	a1 64 56 07 00       	mov    0x75664,%eax
   1612d:	6a 01                	push   $0x1
   1612f:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   16135:	52                   	push   %edx
   16136:	6a 00                	push   $0x0
   16138:	50                   	push   %eax
   16139:	e8 b8 de ff ff       	call   13ff6 <dev_write>
   1613e:	83 c4 10             	add    $0x10,%esp
#endif
    // irq_leave_protection(state); // 临界区退出
    mutex_unlock(&mutex);
   16141:	83 ec 0c             	sub    $0xc,%esp
   16144:	68 68 56 07 00       	push   $0x75668
   16149:	e8 4b f3 ff ff       	call   15499 <mutex_unlock>
   1614e:	83 c4 10             	add    $0x10,%esp
   16151:	90                   	nop
   16152:	c9                   	leave  
   16153:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include "core/task.h"
#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main(void)
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    {
        print_msg("child task id=%d\n", pid);
        print_msg("parent: %d\n", count);
    }
#endif
    for (int i = 0; i < TTY_NR; i++)
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
    {
        int pid = fork();
80000022:	e8 5f 01 00 00       	call   80000186 <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0)
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
        {
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 7e 6f 01 00       	push   $0x16f7e
8000003a:	e8 1f 01 00 00       	call   8000015e <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        }
        else if (pid == 0)
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
        {
            // 子进程
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char *argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("/shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 97 6f 01 00       	push   $0x16f97
80000082:	e8 1a 01 00 00       	call   800001a1 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 7e 6f 01 00       	push   $0x16f7e
80000094:	e8 c5 00 00 00       	call   8000015e <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1)
            {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 70 00 00 00       	call   80000119 <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++)
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>

    for (;;)
    {
        // 不断收集孤儿进程
        int status;
        wait(&status);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000c2:	50                   	push   %eax
800000c3:	e8 7a 02 00 00       	call   80000342 <wait>
800000c8:	83 c4 10             	add    $0x10,%esp
    {
800000cb:	eb ef                	jmp    800000bc <first_task_main+0xac>

800000cd <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
800000cd:	55                   	push   %ebp
800000ce:	89 e5                	mov    %esp,%ebp
800000d0:	57                   	push   %edi
800000d1:	56                   	push   %esi
800000d2:	53                   	push   %ebx
800000d3:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
800000d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
800000e4:	8b 45 08             	mov    0x8(%ebp),%eax
800000e7:	8b 40 10             	mov    0x10(%eax),%eax
800000ea:	8b 55 08             	mov    0x8(%ebp),%edx
800000ed:	8b 52 0c             	mov    0xc(%edx),%edx
800000f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f3:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
800000f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f9:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fc:	8b 75 08             	mov    0x8(%ebp),%esi
800000ff:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000101:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000104:	50                   	push   %eax
80000105:	52                   	push   %edx
80000106:	51                   	push   %ecx
80000107:	53                   	push   %ebx
80000108:	56                   	push   %esi
80000109:	ff 1f                	lcall  *(%edi)
8000010b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
8000010e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000111:	83 c4 10             	add    $0x10,%esp
80000114:	5b                   	pop    %ebx
80000115:	5e                   	pop    %esi
80000116:	5f                   	pop    %edi
80000117:	5d                   	pop    %ebp
80000118:	c3                   	ret    

80000119 <msleep>:

int msleep(int ms)
{
80000119:	55                   	push   %ebp
8000011a:	89 e5                	mov    %esp,%ebp
8000011c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
8000011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000123:	7e 1b                	jle    80000140 <msleep+0x27>
    {
        return;
    }

    syscall_args_t args;
    args.id = SYS_msleep;
80000125:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000012c:	8b 45 08             	mov    0x8(%ebp),%eax
8000012f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000132:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000135:	50                   	push   %eax
80000136:	e8 92 ff ff ff       	call   800000cd <sys_call>
8000013b:	83 c4 04             	add    $0x4,%esp
8000013e:	eb 01                	jmp    80000141 <msleep+0x28>
        return;
80000140:	90                   	nop
}
80000141:	c9                   	leave  
80000142:	c3                   	ret    

80000143 <getpid>:

int getpid(void)
{
80000143:	55                   	push   %ebp
80000144:	89 e5                	mov    %esp,%ebp
80000146:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
80000149:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000150:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000153:	50                   	push   %eax
80000154:	e8 74 ff ff ff       	call   800000cd <sys_call>
80000159:	83 c4 04             	add    $0x4,%esp
}
8000015c:	c9                   	leave  
8000015d:	c3                   	ret    

8000015e <print_msg>:

void print_msg(const char *fmt, int arg)
{
8000015e:	55                   	push   %ebp
8000015f:	89 e5                	mov    %esp,%ebp
80000161:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000164:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016b:	8b 45 08             	mov    0x8(%ebp),%eax
8000016e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000171:	8b 45 0c             	mov    0xc(%ebp),%eax
80000174:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
80000177:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017a:	50                   	push   %eax
8000017b:	e8 4d ff ff ff       	call   800000cd <sys_call>
80000180:	83 c4 04             	add    $0x4,%esp
}
80000183:	90                   	nop
80000184:	c9                   	leave  
80000185:	c3                   	ret    

80000186 <fork>:

int fork(void)
{
80000186:	55                   	push   %ebp
80000187:	89 e5                	mov    %esp,%ebp
80000189:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018c:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000193:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000196:	50                   	push   %eax
80000197:	e8 31 ff ff ff       	call   800000cd <sys_call>
8000019c:	83 c4 04             	add    $0x4,%esp
}
8000019f:	c9                   	leave  
800001a0:	c3                   	ret    

800001a1 <execve>:

int execve(const char *name, char *const *argv, char *const *env)
{
800001a1:	55                   	push   %ebp
800001a2:	89 e5                	mov    %esp,%ebp
800001a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001a7:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001ae:	8b 45 08             	mov    0x8(%ebp),%eax
800001b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800001b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001ba:	8b 45 10             	mov    0x10(%ebp),%eax
800001bd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c3:	50                   	push   %eax
800001c4:	e8 04 ff ff ff       	call   800000cd <sys_call>
800001c9:	83 c4 04             	add    $0x4,%esp
}
800001cc:	c9                   	leave  
800001cd:	c3                   	ret    

800001ce <yield>:

int yield(void)
{
800001ce:	55                   	push   %ebp
800001cf:	89 e5                	mov    %esp,%ebp
800001d1:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d4:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001db:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001de:	50                   	push   %eax
800001df:	e8 e9 fe ff ff       	call   800000cd <sys_call>
800001e4:	83 c4 04             	add    $0x4,%esp
}
800001e7:	c9                   	leave  
800001e8:	c3                   	ret    

800001e9 <open>:

int open(const char *name, int flags, ...)
{
800001e9:	55                   	push   %ebp
800001ea:	89 e5                	mov    %esp,%ebp
800001ec:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
800001ef:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
800001f6:	8b 45 08             	mov    0x8(%ebp),%eax
800001f9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
800001fc:	8b 45 0c             	mov    0xc(%ebp),%eax
800001ff:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000202:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000205:	50                   	push   %eax
80000206:	e8 c2 fe ff ff       	call   800000cd <sys_call>
8000020b:	83 c4 04             	add    $0x4,%esp
}
8000020e:	c9                   	leave  
8000020f:	c3                   	ret    

80000210 <read>:

int read(int file, char *ptr, int len)
{
80000210:	55                   	push   %ebp
80000211:	89 e5                	mov    %esp,%ebp
80000213:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000216:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
8000021d:	8b 45 08             	mov    0x8(%ebp),%eax
80000220:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000223:	8b 45 0c             	mov    0xc(%ebp),%eax
80000226:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000229:	8b 45 10             	mov    0x10(%ebp),%eax
8000022c:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
8000022f:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000232:	50                   	push   %eax
80000233:	e8 95 fe ff ff       	call   800000cd <sys_call>
80000238:	83 c4 04             	add    $0x4,%esp
}
8000023b:	c9                   	leave  
8000023c:	c3                   	ret    

8000023d <write>:

int write(int file, char *ptr, int len)
{
8000023d:	55                   	push   %ebp
8000023e:	89 e5                	mov    %esp,%ebp
80000240:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000243:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000024a:	8b 45 08             	mov    0x8(%ebp),%eax
8000024d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000250:	8b 45 0c             	mov    0xc(%ebp),%eax
80000253:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000256:	8b 45 10             	mov    0x10(%ebp),%eax
80000259:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
8000025c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000025f:	50                   	push   %eax
80000260:	e8 68 fe ff ff       	call   800000cd <sys_call>
80000265:	83 c4 04             	add    $0x4,%esp
}
80000268:	c9                   	leave  
80000269:	c3                   	ret    

8000026a <close>:

int close(int file)
{
8000026a:	55                   	push   %ebp
8000026b:	89 e5                	mov    %esp,%ebp
8000026d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000270:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
80000277:	8b 45 08             	mov    0x8(%ebp),%eax
8000027a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
8000027d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000280:	50                   	push   %eax
80000281:	e8 47 fe ff ff       	call   800000cd <sys_call>
80000286:	83 c4 04             	add    $0x4,%esp
}
80000289:	c9                   	leave  
8000028a:	c3                   	ret    

8000028b <lseek>:

int lseek(int file, int ptr, int dir)
{
8000028b:	55                   	push   %ebp
8000028c:	89 e5                	mov    %esp,%ebp
8000028e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
80000291:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
80000298:	8b 45 08             	mov    0x8(%ebp),%eax
8000029b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
8000029e:	8b 45 0c             	mov    0xc(%ebp),%eax
800002a1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002a4:	8b 45 10             	mov    0x10(%ebp),%eax
800002a7:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002aa:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002ad:	50                   	push   %eax
800002ae:	e8 1a fe ff ff       	call   800000cd <sys_call>
800002b3:	83 c4 04             	add    $0x4,%esp
}
800002b6:	c9                   	leave  
800002b7:	c3                   	ret    

800002b8 <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st)
{
800002b8:	55                   	push   %ebp
800002b9:	89 e5                	mov    %esp,%ebp
800002bb:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002be:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
800002c5:	8b 45 08             	mov    0x8(%ebp),%eax
800002c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002cb:	8b 45 0c             	mov    0xc(%ebp),%eax
800002ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
800002d1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002d4:	50                   	push   %eax
800002d5:	e8 f3 fd ff ff       	call   800000cd <sys_call>
800002da:	83 c4 04             	add    $0x4,%esp
}
800002dd:	c9                   	leave  
800002de:	c3                   	ret    

800002df <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file)
{
800002df:	55                   	push   %ebp
800002e0:	89 e5                	mov    %esp,%ebp
800002e2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002e5:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
800002ec:	8b 45 08             	mov    0x8(%ebp),%eax
800002ef:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002f2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f5:	50                   	push   %eax
800002f6:	e8 d2 fd ff ff       	call   800000cd <sys_call>
800002fb:	83 c4 04             	add    $0x4,%esp
}
800002fe:	c9                   	leave  
800002ff:	c3                   	ret    

80000300 <sbrk>:

void *sbrk(ptrdiff_t incr)
{
80000300:	55                   	push   %ebp
80000301:	89 e5                	mov    %esp,%ebp
80000303:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000306:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
8000030d:	8b 45 08             	mov    0x8(%ebp),%eax
80000310:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000313:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000316:	50                   	push   %eax
80000317:	e8 b1 fd ff ff       	call   800000cd <sys_call>
8000031c:	83 c4 04             	add    $0x4,%esp
}
8000031f:	c9                   	leave  
80000320:	c3                   	ret    

80000321 <dup>:

int dup(int file)
{
80000321:	55                   	push   %ebp
80000322:	89 e5                	mov    %esp,%ebp
80000324:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000327:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
8000032e:	8b 45 08             	mov    0x8(%ebp),%eax
80000331:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000334:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000337:	50                   	push   %eax
80000338:	e8 90 fd ff ff       	call   800000cd <sys_call>
8000033d:	83 c4 04             	add    $0x4,%esp
}
80000340:	c9                   	leave  
80000341:	c3                   	ret    

80000342 <wait>:

int wait(int *status)
{
80000342:	55                   	push   %ebp
80000343:	89 e5                	mov    %esp,%ebp
80000345:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
80000348:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
8000034f:	8b 45 08             	mov    0x8(%ebp),%eax
80000352:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000355:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000358:	50                   	push   %eax
80000359:	e8 6f fd ff ff       	call   800000cd <sys_call>
8000035e:	83 c4 04             	add    $0x4,%esp
}
80000361:	c9                   	leave  
80000362:	c3                   	ret    

80000363 <_exit>:

void _exit(int status)
{
80000363:	55                   	push   %ebp
80000364:	89 e5                	mov    %esp,%ebp
80000366:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000369:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
80000370:	8b 45 08             	mov    0x8(%ebp),%eax
80000373:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000376:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000379:	50                   	push   %eax
8000037a:	e8 4e fd ff ff       	call   800000cd <sys_call>
8000037f:	83 c4 04             	add    $0x4,%esp
    for (;;)
80000382:	eb fe                	jmp    80000382 <_exit+0x1f>
