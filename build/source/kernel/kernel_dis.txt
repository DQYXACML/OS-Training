
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00003834 memsz 0x00003834 flags r-x
    LOAD off    0x00005000 vaddr 0x00014000 paddr 0x00014000 align 2**12
         filesz 0x00000044 memsz 0x00006dd8 flags rw-
    LOAD off    0x00006000 vaddr 0x80000000 paddr 0x0001add8 align 2**12
         filesz 0x000000f6 memsz 0x000000f6 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002e8c  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .first_task   000000f6  80000000  0001add8  00006000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  2 .data         00000044  00014000  00014000  00005000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00005dd8  00015000  00015000  00005044  2**12
                  ALLOC
  4 .debug_line   00001c38  00000000  00000000  000060f6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000049f8  00000000  00000000  00007d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000014b2  00000000  00000000  0000c726  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000200  00000000  00000000  0000dbd8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .rodata       00000994  00012ea0  00012ea0  00003ea0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_str    00001211  00000000  00000000  0000ddd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .comment      00000011  00000000  00000000  0000efe9  2**0
                  CONTENTS, READONLY
 11 .debug_frame  000013e8  00000000  00000000  0000effc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
80000000 l    d  .first_task	00000000 .first_task
00014000 l    d  .data	00000000 .data
00015000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00012ea0 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
000102f2 l     F .text	00000017 up2
00010309 l     F .text	0000000d down2
00010316 l     F .text	0000000c write_cr3
00010322 l     F .text	00000014 pde_index
00010336 l     F .text	00000027 pde_paddr
0001035d l     F .text	00000010 pte_index
0001036d l     F .text	00000027 pte_paddr
00010394 l     F .text	00000011 mmu_set_page_dir
00017000 l     O .bss	00000028 paddr_alloc
00018000 l     O .bss	00001000 kernel_page_dir
000103a5 l     F .text	00000010 current_page_dir
000103b5 l     F .text	00000058 addr_alloc_init
0001040d l     F .text	00000067 addr_alloc_page
00010474 l     F .text	00000062 addr_free_page
000104d6 l     F .text	00000066 show_mem_info
0001053c l     F .text	0000003c total_mem_size
00012fc4 l     O .rodata	00000012 __func__.2226
00014000 l     O .data	00000040 kernel_map.2238
00012fd8 l     O .rodata	00000011 __func__.2282
00012fec l     O .rodata	0000000c __func__.2294
00000000 l    df *ABS*	00000000 syscall.c
00013000 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010b28 l     F .text	0000001b list_node_init
00010b43 l     F .text	0000000b list_node_next
00010b4e l     F .text	0000000b list_count
00010b59 l     F .text	0000000a list_first
00010b63 l     F .text	0000000c write_cr3
00010b6f l     F .text	00000007 hlt
00010b76 l     F .text	0000000c write_tr
00010b82 l     F .text	00000011 mmu_set_page_dir
00019000 l     O .bss	00001000 idle_task_stack
0001a000 l     O .bss	000001a0 task_manager
00010b93 l     F .text	00000198 tss_init
00013258 l     O .rodata	0000000a __func__.2274
00013264 l     O .rodata	00000010 __func__.2294
00010f61 l     F .text	0000000a idle_task_entry
000110e8 l     F .text	00000043 task_next_run
00000000 l    df *ABS*	00000000 cpu.c
00011344 l     F .text	00000028 lgdt
0001136c l     F .text	0000001a far_jump
0001a1a0 l     O .bss	00000800 gdt_table
0001a9a0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
000115b6 l     F .text	0000001d inb
000115d3 l     F .text	0000001f outb
000115f2 l     F .text	00000007 cli
000115f9 l     F .text	00000007 sti
00011600 l     F .text	00000028 lidt
00011628 l     F .text	00000011 read_cr2
00011639 l     F .text	00000007 hlt
00011640 l     F .text	00000010 read_eflags
00011650 l     F .text	0000000b write_eflags
0001a9c0 l     O .bss	00000400 idt_table
0001165b l     F .text	000000ff dump_core_regs
0001175a l     F .text	0000004e do_default_handler
00011b29 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 time.c
00011f20 l     F .text	0000001f outb
0001adc0 l     O .bss	00000004 sys_tick
00011f3f l     F .text	00000060 init_pic
00000000 l    df *ABS*	00000000 init.c
000137d0 l     O .rodata	00000013 __func__.2225
00000000 l    df *ABS*	00000000 mutex.c
000120c9 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00012253 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
000125dc l     F .text	00000007 hlt
00014040 l     O .data	00000004 num2ch.1923
00000000 l    df *ABS*	00000000 list.c
00012b01 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00012cf9 l     F .text	0000001d inb
00012d16 l     F .text	0000001f outb
0001adc4 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
80000010 l     F .first_task	0000004c sys_call
8000005c l     F .first_task	0000002a msleep
80000086 l     F .first_task	0000001b getpid
800000a1 l     F .first_task	00000028 print_msg
000124d4 g     F .text	0000003a bitmap_get_bit
00012753 g     F .text	0000004f kernel_memcpy
0001107d g     F .text	0000000a task_current
00011ec1 g     F .text	0000000b irq_enable_global
00012b98 g     F .text	00000064 list_insert_last
000112ca g     F .text	00000064 sys_msleep
000118dc g     F .text	0000001c do_handler_segment_not_present
0001101e g     F .text	00000034 task_set_ready
0001250e g     F .text	0000001b bitmap_is_set
000127a2 g     F .text	00000041 kernel_memset
00010274 g       .text	00000000 exception_handler_virtual_exception
00010a93 g     F .text	00000095 do_handler_syscall
00011585 g     F .text	0000001e cpu_init
00012d35 g     F .text	00000079 log_init
00012073 g     F .text	00000056 init_main
00010219 g       .text	00000000 exception_handler_alignment_check
00011405 g     F .text	00000039 gdt_free_sel
00010a79 g     F .text	0000001a sys_print_msg
000125e3 g     F .text	00000047 kernel_strcpy
00014000 g       .data	00000000 s_data
00011da4 g     F .text	0000008b irq_enable
00010035 g       .text	00000000 exception_handler_unknown
000100b1 g       .text	00000000 exception_handler_breakpoint
00011834 g     F .text	0000001c do_handler_overflow
00011930 g     F .text	0000001c do_handler_alignment_check
00010628 g     F .text	0000008c memory_create_map
000101c0 g       .text	00000000 exception_handler_general_protection
000119a0 g     F .text	000000b5 do_handler_general_protection
0001236e g     F .text	00000029 sem_count
800000c9 g     F .first_task	0000002d first_task_main
000117c4 g     F .text	0000001c do_handler_divider
00012400 g     F .text	000000d4 bitmap_set_bit
000118a4 g     F .text	0000001c do_handler_double_fault
00011a55 g     F .text	000000d4 do_handler_page_fault
0001014c g       .text	00000000 exception_handler_double_fault
00011ecc g     F .text	0000002b pic_send_eoi
00010f57 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
0001076f g     F .text	00000085 memory_create_uvm
00012281 g     F .text	0000006b sem_wait
00010973 g     F .text	00000022 memory_alloc_page_for
00011f9f g     F .text	00000028 do_handler_timer
000101a3 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00011984 g     F .text	0000001c do_handler_virtual_exception
000100d0 g       .text	00000000 exception_handler_overflow
0001143e g     F .text	00000075 get_alloc_desc
000102b2 g       .text	00000000 simple_switch
00015000 g     O .bss	00002000 stack
000108da g     F .text	00000099 memory_free_page
0001add8 g       *ABS*	00000000 s_first_task
000107f4 g     F .text	000000cc memory_alloc_for_page_dir
000100ef g       .text	00000000 exception_handler_bound_range
000122ec g     F .text	00000082 sem_notify
0001186c g     F .text	0000001c do_handler_invalid_opcode
00010169 g       .text	00000000 exception_handler_invalid_tss
00011914 g     F .text	0000001c do_handler_fpu_error
00010e91 g     F .text	000000c6 task_first_init
0001194c g     F .text	0000001c do_handler_machine_check
000117e0 g     F .text	0000001c do_handler_Debug
00012b39 g     F .text	0000005f list_insert_first
000112aa g     F .text	00000020 task_set_wakeup
000117fc g     F .text	0000001c do_handler_NMI
00010054 g       .text	00000000 exception_handler_divider
0001262a g     F .text	00000070 kernel_strncpy
00011eb6 g     F .text	0000000b irq_disable_global
00011087 g     F .text	00000061 sys_sched_yield
0001aece g       *ABS*	00000000 mem_free_start
00011fdf g     F .text	00000030 kernel_init
0001225e g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00012980 g     F .text	0000014b kernel_vsprintf
0001012d g       .text	00000000 exception_handler_device_unavailable
0001010e g       .text	00000000 exception_handler_invalid_opcode
0001add8 g       .bss	00000000 e_data
00012102 g     F .text	00000094 mutex_lock
00010236 g       .text	00000000 exception_handler_machine_check
000118c0 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001aece g       *ABS*	00000000 e_first_task
00011270 g     F .text	0000003a task_set_sleep
00012acb g     F .text	00000036 panic
00010293 g       .text	00000000 exception_handler_timer
00011d6a g     F .text	0000003a irq_install
000114b3 g     F .text	0000008b init_gdt
00011ef7 g     F .text	00000018 irq_enter_protection
000120d4 g     F .text	0000002e mutex_init
00011e2f g     F .text	00000087 irq_disable
00010255 g       .text	00000000 exception_handler_smd_exception
00012397 g     F .text	00000016 bitmap_byte_count
00011888 g     F .text	0000001c do_handler_device_unavailable
0001112b g     F .text	0000005b task_dispatch
0001200f g     F .text	00000064 move_to_first_task
000115a3 g     F .text	00000013 switch_to_tss
000127e3 g     F .text	0000005e kernel_memcmp
000106b4 g     F .text	000000bb create_kernel_table
00012b14 g     F .text	00000025 list_init
00011968 g     F .text	0000001c do_handler_smd_exception
000101dd g       .text	00000000 exception_handler_page_fault
00011052 g     F .text	0000002b task_set_block
000117a8 g     F .text	0000001c do_handler_unknown
000108c0 g     F .text	0000001a memory_alloc_page
000101fa g       .text	00000000 exception_handler_fpu_error
00010e46 g     F .text	0000001e task_switch_from_to
00011bbc g     F .text	000001ae irq_init
00012196 g     F .text	000000bd mutex_unlock
00011f0f g     F .text	00000011 irq_leave_protection
00012718 g     F .text	0000003b kernel_strlen
00011386 g     F .text	0000007f segment_desc_set
00011850 g     F .text	0000001c do_handler_bound_range
000102c7 g       .text	00000000 exception_handler_syscall
00012bfc g     F .text	00000078 list_remove_first
00013834 g       .rodata	00000000 e_text
0001269a g     F .text	0000007e kernel_strncmp
000123ad g     F .text	00000053 bitmap_init
00010186 g       .text	00000000 exception_handler_segment_not_present
00010092 g       .text	00000000 exception_handler_NMI
00012529 g     F .text	000000b3 bitmap_alloc_nbits
00010f6b g     F .text	000000b3 task_manager_init
00010e64 g     F .text	0000002d task_start
00010073 g       .text	00000000 exception_handler_Debug
00011186 g     F .text	000000ea task_time_tick
00010995 g     F .text	000000e4 memory_init
000118f8 g     F .text	0000001c do_handler_stack_segment_fault
00011818 g     F .text	0000001c do_handler_breakpoint
00012dae g     F .text	000000de log_printf
00010d2b g     F .text	0000011b task_init
0001132e g     F .text	00000016 sys_getpid
00012841 g     F .text	0000013f kernel_itoa
00012c74 g     F .text	00000085 list_remove
0001153e g     F .text	00000047 gate_desc_set
00010578 g     F .text	000000b0 find_pte
00011fc7 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .extern init_main
    .global _start
    # void start (boot_info_t *boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax
    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 d3 1f 00 00       	call   11fdf <kernel_init>
    jmp $KERNEL_SELECTOR_CS, $gdt_reload # 重新加载GDT
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    ; mov $stack, %eax
   10021:	b8 00 50 01 00       	mov    $0x15000,%eax
    ; mov $KERNEL_STACK_SIZE, %ebx
   10026:	bb 00 20 00 00       	mov    $0x2000,%ebx

    mov $(stack + KERNEL_STACK_SIZE), %esp
   1002b:	bc 00 70 01 00       	mov    $0x17000,%esp
    jmp init_main
   10030:	e9 3e 20 00 00       	jmp    12073 <init_main>

00010035 <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   10035:	6a 00                	push   $0x0
   10037:	6a ff                	push   $0xffffffff
   10039:	60                   	pusha  
   1003a:	1e                   	push   %ds
   1003b:	06                   	push   %es
   1003c:	0f a0                	push   %fs
   1003e:	0f a8                	push   %gs
   10040:	54                   	push   %esp
   10041:	e8 62 17 00 00       	call   117a8 <do_handler_unknown>
   10046:	83 c4 04             	add    $0x4,%esp
   10049:	0f a9                	pop    %gs
   1004b:	0f a1                	pop    %fs
   1004d:	07                   	pop    %es
   1004e:	1f                   	pop    %ds
   1004f:	61                   	popa   
   10050:	83 c4 08             	add    $0x8,%esp
   10053:	cf                   	iret   

00010054 <exception_handler_divider>:
exception_handler divider, 0, 0
   10054:	6a 00                	push   $0x0
   10056:	6a 00                	push   $0x0
   10058:	60                   	pusha  
   10059:	1e                   	push   %ds
   1005a:	06                   	push   %es
   1005b:	0f a0                	push   %fs
   1005d:	0f a8                	push   %gs
   1005f:	54                   	push   %esp
   10060:	e8 5f 17 00 00       	call   117c4 <do_handler_divider>
   10065:	83 c4 04             	add    $0x4,%esp
   10068:	0f a9                	pop    %gs
   1006a:	0f a1                	pop    %fs
   1006c:	07                   	pop    %es
   1006d:	1f                   	pop    %ds
   1006e:	61                   	popa   
   1006f:	83 c4 08             	add    $0x8,%esp
   10072:	cf                   	iret   

00010073 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10073:	6a 00                	push   $0x0
   10075:	6a 01                	push   $0x1
   10077:	60                   	pusha  
   10078:	1e                   	push   %ds
   10079:	06                   	push   %es
   1007a:	0f a0                	push   %fs
   1007c:	0f a8                	push   %gs
   1007e:	54                   	push   %esp
   1007f:	e8 5c 17 00 00       	call   117e0 <do_handler_Debug>
   10084:	83 c4 04             	add    $0x4,%esp
   10087:	0f a9                	pop    %gs
   10089:	0f a1                	pop    %fs
   1008b:	07                   	pop    %es
   1008c:	1f                   	pop    %ds
   1008d:	61                   	popa   
   1008e:	83 c4 08             	add    $0x8,%esp
   10091:	cf                   	iret   

00010092 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10092:	6a 00                	push   $0x0
   10094:	6a 02                	push   $0x2
   10096:	60                   	pusha  
   10097:	1e                   	push   %ds
   10098:	06                   	push   %es
   10099:	0f a0                	push   %fs
   1009b:	0f a8                	push   %gs
   1009d:	54                   	push   %esp
   1009e:	e8 59 17 00 00       	call   117fc <do_handler_NMI>
   100a3:	83 c4 04             	add    $0x4,%esp
   100a6:	0f a9                	pop    %gs
   100a8:	0f a1                	pop    %fs
   100aa:	07                   	pop    %es
   100ab:	1f                   	pop    %ds
   100ac:	61                   	popa   
   100ad:	83 c4 08             	add    $0x8,%esp
   100b0:	cf                   	iret   

000100b1 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100b1:	6a 00                	push   $0x0
   100b3:	6a 03                	push   $0x3
   100b5:	60                   	pusha  
   100b6:	1e                   	push   %ds
   100b7:	06                   	push   %es
   100b8:	0f a0                	push   %fs
   100ba:	0f a8                	push   %gs
   100bc:	54                   	push   %esp
   100bd:	e8 56 17 00 00       	call   11818 <do_handler_breakpoint>
   100c2:	83 c4 04             	add    $0x4,%esp
   100c5:	0f a9                	pop    %gs
   100c7:	0f a1                	pop    %fs
   100c9:	07                   	pop    %es
   100ca:	1f                   	pop    %ds
   100cb:	61                   	popa   
   100cc:	83 c4 08             	add    $0x8,%esp
   100cf:	cf                   	iret   

000100d0 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100d0:	6a 00                	push   $0x0
   100d2:	6a 04                	push   $0x4
   100d4:	60                   	pusha  
   100d5:	1e                   	push   %ds
   100d6:	06                   	push   %es
   100d7:	0f a0                	push   %fs
   100d9:	0f a8                	push   %gs
   100db:	54                   	push   %esp
   100dc:	e8 53 17 00 00       	call   11834 <do_handler_overflow>
   100e1:	83 c4 04             	add    $0x4,%esp
   100e4:	0f a9                	pop    %gs
   100e6:	0f a1                	pop    %fs
   100e8:	07                   	pop    %es
   100e9:	1f                   	pop    %ds
   100ea:	61                   	popa   
   100eb:	83 c4 08             	add    $0x8,%esp
   100ee:	cf                   	iret   

000100ef <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100ef:	6a 00                	push   $0x0
   100f1:	6a 05                	push   $0x5
   100f3:	60                   	pusha  
   100f4:	1e                   	push   %ds
   100f5:	06                   	push   %es
   100f6:	0f a0                	push   %fs
   100f8:	0f a8                	push   %gs
   100fa:	54                   	push   %esp
   100fb:	e8 50 17 00 00       	call   11850 <do_handler_bound_range>
   10100:	83 c4 04             	add    $0x4,%esp
   10103:	0f a9                	pop    %gs
   10105:	0f a1                	pop    %fs
   10107:	07                   	pop    %es
   10108:	1f                   	pop    %ds
   10109:	61                   	popa   
   1010a:	83 c4 08             	add    $0x8,%esp
   1010d:	cf                   	iret   

0001010e <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   1010e:	6a 00                	push   $0x0
   10110:	6a 06                	push   $0x6
   10112:	60                   	pusha  
   10113:	1e                   	push   %ds
   10114:	06                   	push   %es
   10115:	0f a0                	push   %fs
   10117:	0f a8                	push   %gs
   10119:	54                   	push   %esp
   1011a:	e8 4d 17 00 00       	call   1186c <do_handler_invalid_opcode>
   1011f:	83 c4 04             	add    $0x4,%esp
   10122:	0f a9                	pop    %gs
   10124:	0f a1                	pop    %fs
   10126:	07                   	pop    %es
   10127:	1f                   	pop    %ds
   10128:	61                   	popa   
   10129:	83 c4 08             	add    $0x8,%esp
   1012c:	cf                   	iret   

0001012d <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   1012d:	6a 00                	push   $0x0
   1012f:	6a 07                	push   $0x7
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 4a 17 00 00       	call   11888 <do_handler_device_unavailable>
   1013e:	83 c4 04             	add    $0x4,%esp
   10141:	0f a9                	pop    %gs
   10143:	0f a1                	pop    %fs
   10145:	07                   	pop    %es
   10146:	1f                   	pop    %ds
   10147:	61                   	popa   
   10148:	83 c4 08             	add    $0x8,%esp
   1014b:	cf                   	iret   

0001014c <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1014c:	6a 08                	push   $0x8
   1014e:	60                   	pusha  
   1014f:	1e                   	push   %ds
   10150:	06                   	push   %es
   10151:	0f a0                	push   %fs
   10153:	0f a8                	push   %gs
   10155:	54                   	push   %esp
   10156:	e8 49 17 00 00       	call   118a4 <do_handler_double_fault>
   1015b:	83 c4 04             	add    $0x4,%esp
   1015e:	0f a9                	pop    %gs
   10160:	0f a1                	pop    %fs
   10162:	07                   	pop    %es
   10163:	1f                   	pop    %ds
   10164:	61                   	popa   
   10165:	83 c4 08             	add    $0x8,%esp
   10168:	cf                   	iret   

00010169 <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   10169:	6a 0a                	push   $0xa
   1016b:	60                   	pusha  
   1016c:	1e                   	push   %ds
   1016d:	06                   	push   %es
   1016e:	0f a0                	push   %fs
   10170:	0f a8                	push   %gs
   10172:	54                   	push   %esp
   10173:	e8 48 17 00 00       	call   118c0 <do_handler_invalid_tss>
   10178:	83 c4 04             	add    $0x4,%esp
   1017b:	0f a9                	pop    %gs
   1017d:	0f a1                	pop    %fs
   1017f:	07                   	pop    %es
   10180:	1f                   	pop    %ds
   10181:	61                   	popa   
   10182:	83 c4 08             	add    $0x8,%esp
   10185:	cf                   	iret   

00010186 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10186:	6a 0b                	push   $0xb
   10188:	60                   	pusha  
   10189:	1e                   	push   %ds
   1018a:	06                   	push   %es
   1018b:	0f a0                	push   %fs
   1018d:	0f a8                	push   %gs
   1018f:	54                   	push   %esp
   10190:	e8 47 17 00 00       	call   118dc <do_handler_segment_not_present>
   10195:	83 c4 04             	add    $0x4,%esp
   10198:	0f a9                	pop    %gs
   1019a:	0f a1                	pop    %fs
   1019c:	07                   	pop    %es
   1019d:	1f                   	pop    %ds
   1019e:	61                   	popa   
   1019f:	83 c4 08             	add    $0x8,%esp
   101a2:	cf                   	iret   

000101a3 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   101a3:	6a 0c                	push   $0xc
   101a5:	60                   	pusha  
   101a6:	1e                   	push   %ds
   101a7:	06                   	push   %es
   101a8:	0f a0                	push   %fs
   101aa:	0f a8                	push   %gs
   101ac:	54                   	push   %esp
   101ad:	e8 46 17 00 00       	call   118f8 <do_handler_stack_segment_fault>
   101b2:	83 c4 04             	add    $0x4,%esp
   101b5:	0f a9                	pop    %gs
   101b7:	0f a1                	pop    %fs
   101b9:	07                   	pop    %es
   101ba:	1f                   	pop    %ds
   101bb:	61                   	popa   
   101bc:	83 c4 08             	add    $0x8,%esp
   101bf:	cf                   	iret   

000101c0 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101c0:	6a 0d                	push   $0xd
   101c2:	60                   	pusha  
   101c3:	1e                   	push   %ds
   101c4:	06                   	push   %es
   101c5:	0f a0                	push   %fs
   101c7:	0f a8                	push   %gs
   101c9:	54                   	push   %esp
   101ca:	e8 d1 17 00 00       	call   119a0 <do_handler_general_protection>
   101cf:	83 c4 04             	add    $0x4,%esp
   101d2:	0f a9                	pop    %gs
   101d4:	0f a1                	pop    %fs
   101d6:	07                   	pop    %es
   101d7:	1f                   	pop    %ds
   101d8:	61                   	popa   
   101d9:	83 c4 08             	add    $0x8,%esp
   101dc:	cf                   	iret   

000101dd <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101dd:	6a 0e                	push   $0xe
   101df:	60                   	pusha  
   101e0:	1e                   	push   %ds
   101e1:	06                   	push   %es
   101e2:	0f a0                	push   %fs
   101e4:	0f a8                	push   %gs
   101e6:	54                   	push   %esp
   101e7:	e8 69 18 00 00       	call   11a55 <do_handler_page_fault>
   101ec:	83 c4 04             	add    $0x4,%esp
   101ef:	0f a9                	pop    %gs
   101f1:	0f a1                	pop    %fs
   101f3:	07                   	pop    %es
   101f4:	1f                   	pop    %ds
   101f5:	61                   	popa   
   101f6:	83 c4 08             	add    $0x8,%esp
   101f9:	cf                   	iret   

000101fa <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101fa:	6a 00                	push   $0x0
   101fc:	6a 10                	push   $0x10
   101fe:	60                   	pusha  
   101ff:	1e                   	push   %ds
   10200:	06                   	push   %es
   10201:	0f a0                	push   %fs
   10203:	0f a8                	push   %gs
   10205:	54                   	push   %esp
   10206:	e8 09 17 00 00       	call   11914 <do_handler_fpu_error>
   1020b:	83 c4 04             	add    $0x4,%esp
   1020e:	0f a9                	pop    %gs
   10210:	0f a1                	pop    %fs
   10212:	07                   	pop    %es
   10213:	1f                   	pop    %ds
   10214:	61                   	popa   
   10215:	83 c4 08             	add    $0x8,%esp
   10218:	cf                   	iret   

00010219 <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   10219:	6a 11                	push   $0x11
   1021b:	60                   	pusha  
   1021c:	1e                   	push   %ds
   1021d:	06                   	push   %es
   1021e:	0f a0                	push   %fs
   10220:	0f a8                	push   %gs
   10222:	54                   	push   %esp
   10223:	e8 08 17 00 00       	call   11930 <do_handler_alignment_check>
   10228:	83 c4 04             	add    $0x4,%esp
   1022b:	0f a9                	pop    %gs
   1022d:	0f a1                	pop    %fs
   1022f:	07                   	pop    %es
   10230:	1f                   	pop    %ds
   10231:	61                   	popa   
   10232:	83 c4 08             	add    $0x8,%esp
   10235:	cf                   	iret   

00010236 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10236:	6a 00                	push   $0x0
   10238:	6a 12                	push   $0x12
   1023a:	60                   	pusha  
   1023b:	1e                   	push   %ds
   1023c:	06                   	push   %es
   1023d:	0f a0                	push   %fs
   1023f:	0f a8                	push   %gs
   10241:	54                   	push   %esp
   10242:	e8 05 17 00 00       	call   1194c <do_handler_machine_check>
   10247:	83 c4 04             	add    $0x4,%esp
   1024a:	0f a9                	pop    %gs
   1024c:	0f a1                	pop    %fs
   1024e:	07                   	pop    %es
   1024f:	1f                   	pop    %ds
   10250:	61                   	popa   
   10251:	83 c4 08             	add    $0x8,%esp
   10254:	cf                   	iret   

00010255 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10255:	6a 00                	push   $0x0
   10257:	6a 13                	push   $0x13
   10259:	60                   	pusha  
   1025a:	1e                   	push   %ds
   1025b:	06                   	push   %es
   1025c:	0f a0                	push   %fs
   1025e:	0f a8                	push   %gs
   10260:	54                   	push   %esp
   10261:	e8 02 17 00 00       	call   11968 <do_handler_smd_exception>
   10266:	83 c4 04             	add    $0x4,%esp
   10269:	0f a9                	pop    %gs
   1026b:	0f a1                	pop    %fs
   1026d:	07                   	pop    %es
   1026e:	1f                   	pop    %ds
   1026f:	61                   	popa   
   10270:	83 c4 08             	add    $0x8,%esp
   10273:	cf                   	iret   

00010274 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10274:	6a 00                	push   $0x0
   10276:	6a 14                	push   $0x14
   10278:	60                   	pusha  
   10279:	1e                   	push   %ds
   1027a:	06                   	push   %es
   1027b:	0f a0                	push   %fs
   1027d:	0f a8                	push   %gs
   1027f:	54                   	push   %esp
   10280:	e8 ff 16 00 00       	call   11984 <do_handler_virtual_exception>
   10285:	83 c4 04             	add    $0x4,%esp
   10288:	0f a9                	pop    %gs
   1028a:	0f a1                	pop    %fs
   1028c:	07                   	pop    %es
   1028d:	1f                   	pop    %ds
   1028e:	61                   	popa   
   1028f:	83 c4 08             	add    $0x8,%esp
   10292:	cf                   	iret   

00010293 <exception_handler_timer>:

# 硬件中断
exception_handler timer, 0x20, 0
   10293:	6a 00                	push   $0x0
   10295:	6a 20                	push   $0x20
   10297:	60                   	pusha  
   10298:	1e                   	push   %ds
   10299:	06                   	push   %es
   1029a:	0f a0                	push   %fs
   1029c:	0f a8                	push   %gs
   1029e:	54                   	push   %esp
   1029f:	e8 fb 1c 00 00       	call   11f9f <do_handler_timer>
   102a4:	83 c4 04             	add    $0x4,%esp
   102a7:	0f a9                	pop    %gs
   102a9:	0f a1                	pop    %fs
   102ab:	07                   	pop    %es
   102ac:	1f                   	pop    %ds
   102ad:	61                   	popa   
   102ae:	83 c4 08             	add    $0x8,%esp
   102b1:	cf                   	iret   

000102b2 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
    .text
    .global simple_switch
simple_switch:
    movl 4(%esp), %eax   // 取from->stack
   102b2:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102b6:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102ba:	55                   	push   %ebp
	push %ebx
   102bb:	53                   	push   %ebx
	push %esi
   102bc:	56                   	push   %esi
	push %edi
   102bd:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102be:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102c0:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102c2:	5f                   	pop    %edi
	pop %esi
   102c3:	5e                   	pop    %esi
	pop %ebx
   102c4:	5b                   	pop    %ebx
	pop %ebp
   102c5:	5d                   	pop    %ebp
  	ret
   102c6:	c3                   	ret    

000102c7 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    # 保存前一任务的状态
	pusha
   102c7:	60                   	pusha  
	push %ds
   102c8:	1e                   	push   %ds
	push %es
   102c9:	06                   	push   %es
	push %fs
   102ca:	0f a0                	push   %fs
	push %gs
   102cc:	0f a8                	push   %gs
	pushf
   102ce:	9c                   	pushf  

    # 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   102cf:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102d4:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102d6:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102d8:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   102da:	8e e8                	mov    %eax,%gs

    # 调用处理函数
    mov %esp, %eax
   102dc:	89 e0                	mov    %esp,%eax
    push %eax
   102de:	50                   	push   %eax
	call do_handler_syscall
   102df:	e8 af 07 00 00       	call   10a93 <do_handler_syscall>
	add $4, %esp
   102e4:	83 c4 04             	add    $0x4,%esp

    # 再切换回来
	popf
   102e7:	9d                   	popf   
	pop %gs
   102e8:	0f a9                	pop    %gs
	pop %fs
   102ea:	0f a1                	pop    %fs
	pop %es
   102ec:	07                   	pop    %es
	pop %ds
   102ed:	1f                   	pop    %ds
	popa
   102ee:	61                   	popa   
   102ef:	ca 14 00             	lret   $0x14

000102f2 <up2>:
#include "comm/types.h"
#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   102f2:	55                   	push   %ebp
   102f3:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   102f5:	8b 55 08             	mov    0x8(%ebp),%edx
   102f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   102fb:	01 d0                	add    %edx,%eax
   102fd:	8d 50 ff             	lea    -0x1(%eax),%edx
   10300:	8b 45 0c             	mov    0xc(%ebp),%eax
   10303:	f7 d8                	neg    %eax
   10305:	21 d0                	and    %edx,%eax
}
   10307:	5d                   	pop    %ebp
   10308:	c3                   	ret    

00010309 <down2>:
// size = 0x1010 bound = 0x1000
// bound - 1 = 0x0FFF
// ~(bound-1) = 0xFFFF1000
// size & ~(bound-1) =  0x1010 & 0xFFFF1000 = 0x1000
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   10309:	55                   	push   %ebp
   1030a:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1030c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1030f:	f7 d8                	neg    %eax
   10311:	23 45 08             	and    0x8(%ebp),%eax
}
   10314:	5d                   	pop    %ebp
   10315:	c3                   	ret    

00010316 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]" : [v] "=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   10316:	55                   	push   %ebp
   10317:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10319:	8b 45 08             	mov    0x8(%ebp),%eax
   1031c:	0f 22 d8             	mov    %eax,%cr3
}
   1031f:	90                   	nop
   10320:	5d                   	pop    %ebp
   10321:	c3                   	ret    

00010322 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index(uint32_t vaddr)
{
   10322:	55                   	push   %ebp
   10323:	89 e5                	mov    %esp,%ebp
   10325:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10328:	8b 45 08             	mov    0x8(%ebp),%eax
   1032b:	c1 e8 16             	shr    $0x16,%eax
   1032e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10331:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10334:	c9                   	leave  
   10335:	c3                   	ret    

00010336 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr(pde_t *pde)
{
   10336:	55                   	push   %ebp
   10337:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10339:	8b 45 08             	mov    0x8(%ebp),%eax
   1033c:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10340:	c0 ea 04             	shr    $0x4,%dl
   10343:	0f b6 d2             	movzbl %dl,%edx
   10346:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1034a:	c1 e1 04             	shl    $0x4,%ecx
   1034d:	09 ca                	or     %ecx,%edx
   1034f:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10353:	c1 e0 0c             	shl    $0xc,%eax
   10356:	09 d0                	or     %edx,%eax
   10358:	c1 e0 0c             	shl    $0xc,%eax
}
   1035b:	5d                   	pop    %ebp
   1035c:	c3                   	ret    

0001035d <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index(uint32_t vaddr)
{
   1035d:	55                   	push   %ebp
   1035e:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   10360:	8b 45 08             	mov    0x8(%ebp),%eax
   10363:	c1 e8 0c             	shr    $0xc,%eax
   10366:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1036b:	5d                   	pop    %ebp
   1036c:	c3                   	ret    

0001036d <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr(pte_t *pte)
{
   1036d:	55                   	push   %ebp
   1036e:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   10370:	8b 45 08             	mov    0x8(%ebp),%eax
   10373:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10377:	c0 ea 04             	shr    $0x4,%dl
   1037a:	0f b6 d2             	movzbl %dl,%edx
   1037d:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10381:	c1 e1 04             	shl    $0x4,%ecx
   10384:	09 ca                	or     %ecx,%edx
   10386:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   1038a:	c1 e0 0c             	shl    $0xc,%eax
   1038d:	09 d0                	or     %edx,%eax
   1038f:	c1 e0 0c             	shl    $0xc,%eax
}
   10392:	5d                   	pop    %ebp
   10393:	c3                   	ret    

00010394 <mmu_set_page_dir>:
/**
 * @brief 重新加载整个页表至cr3高20位寄存器
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir(uint32_t paddr)
{
   10394:	55                   	push   %ebp
   10395:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   10397:	ff 75 08             	pushl  0x8(%ebp)
   1039a:	e8 77 ff ff ff       	call   10316 <write_cr3>
   1039f:	83 c4 04             	add    $0x4,%esp
}
   103a2:	90                   	nop
   103a3:	c9                   	leave  
   103a4:	c3                   	ret    

000103a5 <current_page_dir>:

/**
 * @brief 获取当前页表地址
 */
static pde_t *current_page_dir(void)
{
   103a5:	55                   	push   %ebp
   103a6:	89 e5                	mov    %esp,%ebp
   103a8:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103ab:	e8 cd 0c 00 00       	call   1107d <task_current>
   103b0:	8b 40 68             	mov    0x68(%eax),%eax
}
   103b3:	c9                   	leave  
   103b4:	c3                   	ret    

000103b5 <addr_alloc_init>:
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits,
                            uint32_t start, uint32_t size, uint32_t page_size)
{
   103b5:	55                   	push   %ebp
   103b6:	89 e5                	mov    %esp,%ebp
   103b8:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103bb:	8b 45 08             	mov    0x8(%ebp),%eax
   103be:	83 ec 0c             	sub    $0xc,%esp
   103c1:	50                   	push   %eax
   103c2:	e8 0d 1d 00 00       	call   120d4 <mutex_init>
   103c7:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103ca:	8b 45 08             	mov    0x8(%ebp),%eax
   103cd:	8b 55 10             	mov    0x10(%ebp),%edx
   103d0:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   103d3:	8b 45 08             	mov    0x8(%ebp),%eax
   103d6:	8b 55 14             	mov    0x14(%ebp),%edx
   103d9:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   103dc:	8b 45 08             	mov    0x8(%ebp),%eax
   103df:	8b 55 18             	mov    0x18(%ebp),%edx
   103e2:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   103e5:	8b 45 08             	mov    0x8(%ebp),%eax
   103e8:	8b 40 24             	mov    0x24(%eax),%eax
   103eb:	ba 00 00 00 00       	mov    $0x0,%edx
   103f0:	f7 75 18             	divl   0x18(%ebp)
   103f3:	89 c2                	mov    %eax,%edx
   103f5:	8b 45 08             	mov    0x8(%ebp),%eax
   103f8:	83 c0 14             	add    $0x14,%eax
   103fb:	6a 00                	push   $0x0
   103fd:	52                   	push   %edx
   103fe:	ff 75 0c             	pushl  0xc(%ebp)
   10401:	50                   	push   %eax
   10402:	e8 a6 1f 00 00       	call   123ad <bitmap_init>
   10407:	83 c4 10             	add    $0x10,%esp
}
   1040a:	90                   	nop
   1040b:	c9                   	leave  
   1040c:	c3                   	ret    

0001040d <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1040d:	55                   	push   %ebp
   1040e:	89 e5                	mov    %esp,%ebp
   10410:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10413:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1041a:	8b 45 08             	mov    0x8(%ebp),%eax
   1041d:	83 ec 0c             	sub    $0xc,%esp
   10420:	50                   	push   %eax
   10421:	e8 dc 1c 00 00       	call   12102 <mutex_lock>
   10426:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10429:	8b 45 08             	mov    0x8(%ebp),%eax
   1042c:	83 c0 14             	add    $0x14,%eax
   1042f:	83 ec 04             	sub    $0x4,%esp
   10432:	ff 75 0c             	pushl  0xc(%ebp)
   10435:	6a 00                	push   $0x0
   10437:	50                   	push   %eax
   10438:	e8 ec 20 00 00       	call   12529 <bitmap_alloc_nbits>
   1043d:	83 c4 10             	add    $0x10,%esp
   10440:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10443:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10447:	78 17                	js     10460 <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   10449:	8b 45 08             	mov    0x8(%ebp),%eax
   1044c:	8b 50 20             	mov    0x20(%eax),%edx
   1044f:	8b 45 08             	mov    0x8(%ebp),%eax
   10452:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10455:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10458:	0f af c1             	imul   %ecx,%eax
   1045b:	01 d0                	add    %edx,%eax
   1045d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   10460:	8b 45 08             	mov    0x8(%ebp),%eax
   10463:	83 ec 0c             	sub    $0xc,%esp
   10466:	50                   	push   %eax
   10467:	e8 2a 1d 00 00       	call   12196 <mutex_unlock>
   1046c:	83 c4 10             	add    $0x10,%esp
    return addr;
   1046f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   10472:	c9                   	leave  
   10473:	c3                   	ret    

00010474 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   10474:	55                   	push   %ebp
   10475:	89 e5                	mov    %esp,%ebp
   10477:	53                   	push   %ebx
   10478:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   1047b:	8b 45 08             	mov    0x8(%ebp),%eax
   1047e:	83 ec 0c             	sub    $0xc,%esp
   10481:	50                   	push   %eax
   10482:	e8 7b 1c 00 00       	call   12102 <mutex_lock>
   10487:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   1048a:	8b 45 08             	mov    0x8(%ebp),%eax
   1048d:	8b 40 20             	mov    0x20(%eax),%eax
   10490:	8b 55 0c             	mov    0xc(%ebp),%edx
   10493:	89 d1                	mov    %edx,%ecx
   10495:	29 c1                	sub    %eax,%ecx
   10497:	8b 45 08             	mov    0x8(%ebp),%eax
   1049a:	8b 58 1c             	mov    0x1c(%eax),%ebx
   1049d:	89 c8                	mov    %ecx,%eax
   1049f:	ba 00 00 00 00       	mov    $0x0,%edx
   104a4:	f7 f3                	div    %ebx
   104a6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104a9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ac:	8b 55 08             	mov    0x8(%ebp),%edx
   104af:	83 c2 14             	add    $0x14,%edx
   104b2:	6a 00                	push   $0x0
   104b4:	ff 75 10             	pushl  0x10(%ebp)
   104b7:	50                   	push   %eax
   104b8:	52                   	push   %edx
   104b9:	e8 42 1f 00 00       	call   12400 <bitmap_set_bit>
   104be:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   104c1:	8b 45 08             	mov    0x8(%ebp),%eax
   104c4:	83 ec 0c             	sub    $0xc,%esp
   104c7:	50                   	push   %eax
   104c8:	e8 c9 1c 00 00       	call   12196 <mutex_unlock>
   104cd:	83 c4 10             	add    $0x10,%esp
}
   104d0:	90                   	nop
   104d1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   104d4:	c9                   	leave  
   104d5:	c3                   	ret    

000104d6 <show_mem_info>:

static void show_mem_info(boot_info_t *boot_info)
{
   104d6:	55                   	push   %ebp
   104d7:	89 e5                	mov    %esp,%ebp
   104d9:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   104dc:	83 ec 0c             	sub    $0xc,%esp
   104df:	68 a0 2e 01 00       	push   $0x12ea0
   104e4:	e8 c5 28 00 00       	call   12dae <log_printf>
   104e9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   104ec:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   104f3:	eb 29                	jmp    1051e <show_mem_info+0x48>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   104f5:	8b 45 08             	mov    0x8(%ebp),%eax
   104f8:	8b 55 f4             	mov    -0xc(%ebp),%edx
   104fb:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   104ff:	8b 45 08             	mov    0x8(%ebp),%eax
   10502:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10505:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10508:	52                   	push   %edx
   10509:	50                   	push   %eax
   1050a:	ff 75 f4             	pushl  -0xc(%ebp)
   1050d:	68 ac 2e 01 00       	push   $0x12eac
   10512:	e8 97 28 00 00       	call   12dae <log_printf>
   10517:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1051a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1051e:	8b 45 08             	mov    0x8(%ebp),%eax
   10521:	8b 40 50             	mov    0x50(%eax),%eax
   10524:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10527:	7c cc                	jl     104f5 <show_mem_info+0x1f>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10529:	83 ec 0c             	sub    $0xc,%esp
   1052c:	68 be 2e 01 00       	push   $0x12ebe
   10531:	e8 78 28 00 00       	call   12dae <log_printf>
   10536:	83 c4 10             	add    $0x10,%esp
}
   10539:	90                   	nop
   1053a:	c9                   	leave  
   1053b:	c3                   	ret    

0001053c <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   1053c:	55                   	push   %ebp
   1053d:	89 e5                	mov    %esp,%ebp
   1053f:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10542:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10549:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10550:	eb 16                	jmp    10568 <total_mem_size+0x2c>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   10552:	8b 45 08             	mov    0x8(%ebp),%eax
   10555:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10558:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1055c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1055f:	01 d0                	add    %edx,%eax
   10561:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10564:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10568:	8b 45 08             	mov    0x8(%ebp),%eax
   1056b:	8b 40 50             	mov    0x50(%eax),%eax
   1056e:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   10571:	7c df                	jl     10552 <total_mem_size+0x16>
    }
    return mem_size;
   10573:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10576:	c9                   	leave  
   10577:	c3                   	ret    

00010578 <find_pte>:

pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   10578:	55                   	push   %ebp
   10579:	89 e5                	mov    %esp,%ebp
   1057b:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   1057e:	ff 75 0c             	pushl  0xc(%ebp)
   10581:	e8 9c fd ff ff       	call   10322 <pde_index>
   10586:	83 c4 04             	add    $0x4,%esp
   10589:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10590:	8b 45 08             	mov    0x8(%ebp),%eax
   10593:	01 d0                	add    %edx,%eax
   10595:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   10598:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1059b:	0f b6 00             	movzbl (%eax),%eax
   1059e:	83 e0 01             	and    $0x1,%eax
   105a1:	84 c0                	test   %al,%al
   105a3:	74 10                	je     105b5 <find_pte+0x3d>
    {
        page_table = (pte_t *)pde_paddr(pde);
   105a5:	ff 75 f0             	pushl  -0x10(%ebp)
   105a8:	e8 89 fd ff ff       	call   10336 <pde_paddr>
   105ad:	83 c4 04             	add    $0x4,%esp
   105b0:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105b3:	eb 57                	jmp    1060c <find_pte+0x94>
    }
    else
    {
        // 如果不存在，则考虑分配一个
        if (alloc == 0)
   105b5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105b9:	75 07                	jne    105c2 <find_pte+0x4a>
        {
            return (pte_t *)0;
   105bb:	b8 00 00 00 00       	mov    $0x0,%eax
   105c0:	eb 64                	jmp    10626 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   105c2:	83 ec 08             	sub    $0x8,%esp
   105c5:	6a 01                	push   $0x1
   105c7:	68 00 70 01 00       	push   $0x17000
   105cc:	e8 3c fe ff ff       	call   1040d <addr_alloc_page>
   105d1:	83 c4 10             	add    $0x10,%esp
   105d4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0)
   105d7:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   105db:	75 07                	jne    105e4 <find_pte+0x6c>
        {
            return (pte_t *)0;
   105dd:	b8 00 00 00 00       	mov    $0x0,%eax
   105e2:	eb 42                	jmp    10626 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   105e4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105e7:	83 c8 07             	or     $0x7,%eax
   105ea:	89 c2                	mov    %eax,%edx
   105ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105ef:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        // kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   105f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   105f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   105f7:	83 ec 04             	sub    $0x4,%esp
   105fa:	68 00 10 00 00       	push   $0x1000
   105ff:	6a 00                	push   $0x0
   10601:	ff 75 f4             	pushl  -0xc(%ebp)
   10604:	e8 99 21 00 00       	call   127a2 <kernel_memset>
   10609:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1060c:	83 ec 0c             	sub    $0xc,%esp
   1060f:	ff 75 0c             	pushl  0xc(%ebp)
   10612:	e8 46 fd ff ff       	call   1035d <pte_index>
   10617:	83 c4 10             	add    $0x10,%esp
   1061a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10621:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10624:	01 d0                	add    %edx,%eax
}
   10626:	c9                   	leave  
   10627:	c3                   	ret    

00010628 <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10628:	55                   	push   %ebp
   10629:	89 e5                	mov    %esp,%ebp
   1062b:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   1062e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10635:	eb 6e                	jmp    106a5 <memory_create_map+0x7d>
    {
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t *pte = find_pte(page_dir, vaddr, 1);
   10637:	83 ec 04             	sub    $0x4,%esp
   1063a:	6a 01                	push   $0x1
   1063c:	ff 75 0c             	pushl  0xc(%ebp)
   1063f:	ff 75 08             	pushl  0x8(%ebp)
   10642:	e8 31 ff ff ff       	call   10578 <find_pte>
   10647:	83 c4 10             	add    $0x10,%esp
   1064a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   1064d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10651:	75 07                	jne    1065a <memory_create_map+0x32>
        {
            // log_printf("create pte failed. pte == 0");
            return -1;
   10653:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10658:	eb 58                	jmp    106b2 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1065a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1065d:	0f b6 00             	movzbl (%eax),%eax
   10660:	83 e0 01             	and    $0x1,%eax
   10663:	84 c0                	test   %al,%al
   10665:	74 1c                	je     10683 <memory_create_map+0x5b>
   10667:	68 c0 2e 01 00       	push   $0x12ec0
   1066c:	68 c4 2f 01 00       	push   $0x12fc4
   10671:	68 96 00 00 00       	push   $0x96
   10676:	68 d4 2e 01 00       	push   $0x12ed4
   1067b:	e8 4b 24 00 00       	call   12acb <panic>
   10680:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   10683:	8b 45 10             	mov    0x10(%ebp),%eax
   10686:	0b 45 18             	or     0x18(%ebp),%eax
   10689:	83 c8 01             	or     $0x1,%eax
   1068c:	89 c2                	mov    %eax,%edx
   1068e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10691:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   10693:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   1069a:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   106a1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106a8:	3b 45 14             	cmp    0x14(%ebp),%eax
   106ab:	7c 8a                	jl     10637 <memory_create_map+0xf>
    }

    return 0;
   106ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106b2:	c9                   	leave  
   106b3:	c3                   	ret    

000106b4 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table(void)
{
   106b4:	55                   	push   %ebp
   106b5:	89 e5                	mov    %esp,%ebp
   106b7:	83 ec 28             	sub    $0x28,%esp
        // 1M以上空间扩展V\P一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106ba:	83 ec 04             	sub    $0x4,%esp
   106bd:	68 00 10 00 00       	push   $0x1000
   106c2:	6a 00                	push   $0x0
   106c4:	68 00 80 01 00       	push   $0x18000
   106c9:	e8 d4 20 00 00       	call   127a2 <kernel_memset>
   106ce:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   106d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   106d8:	e9 83 00 00 00       	jmp    10760 <create_kernel_table+0xac>
    {
        memory_map_t *map = kernel_map + i;
   106dd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106e0:	c1 e0 04             	shl    $0x4,%eax
   106e3:	05 00 40 01 00       	add    $0x14000,%eax
   106e8:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   106eb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ee:	8b 00                	mov    (%eax),%eax
   106f0:	83 ec 08             	sub    $0x8,%esp
   106f3:	68 00 10 00 00       	push   $0x1000
   106f8:	50                   	push   %eax
   106f9:	e8 0b fc ff ff       	call   10309 <down2>
   106fe:	83 c4 10             	add    $0x10,%esp
   10701:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10704:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10707:	8b 40 04             	mov    0x4(%eax),%eax
   1070a:	83 ec 08             	sub    $0x8,%esp
   1070d:	68 00 10 00 00       	push   $0x1000
   10712:	50                   	push   %eax
   10713:	e8 da fb ff ff       	call   102f2 <up2>
   10718:	83 c4 10             	add    $0x10,%esp
   1071b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1071e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10721:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10724:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1072a:	85 c0                	test   %eax,%eax
   1072c:	0f 48 c2             	cmovs  %edx,%eax
   1072f:	c1 f8 0c             	sar    $0xc,%eax
   10732:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10735:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10738:	8b 50 0c             	mov    0xc(%eax),%edx
   1073b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1073e:	8b 40 08             	mov    0x8(%eax),%eax
   10741:	89 c1                	mov    %eax,%ecx
   10743:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10746:	83 ec 0c             	sub    $0xc,%esp
   10749:	52                   	push   %edx
   1074a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1074d:	51                   	push   %ecx
   1074e:	50                   	push   %eax
   1074f:	68 00 80 01 00       	push   $0x18000
   10754:	e8 cf fe ff ff       	call   10628 <memory_create_map>
   10759:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1075c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10760:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10763:	83 f8 03             	cmp    $0x3,%eax
   10766:	0f 86 71 ff ff ff    	jbe    106dd <create_kernel_table+0x29>
    }
}
   1076c:	90                   	nop
   1076d:	c9                   	leave  
   1076e:	c3                   	ret    

0001076f <memory_create_uvm>:
/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm(void)
{
   1076f:	55                   	push   %ebp
   10770:	89 e5                	mov    %esp,%ebp
   10772:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   10775:	83 ec 08             	sub    $0x8,%esp
   10778:	6a 01                	push   $0x1
   1077a:	68 00 70 01 00       	push   $0x17000
   1077f:	e8 89 fc ff ff       	call   1040d <addr_alloc_page>
   10784:	83 c4 10             	add    $0x10,%esp
   10787:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   1078a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1078e:	75 07                	jne    10797 <memory_create_uvm+0x28>
    {
        return 0;
   10790:	b8 00 00 00 00       	mov    $0x0,%eax
   10795:	eb 5b                	jmp    107f2 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   10797:	83 ec 04             	sub    $0x4,%esp
   1079a:	68 00 10 00 00       	push   $0x1000
   1079f:	6a 00                	push   $0x0
   107a1:	ff 75 f0             	pushl  -0x10(%ebp)
   107a4:	e8 f9 1f 00 00       	call   127a2 <kernel_memset>
   107a9:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107ac:	83 ec 0c             	sub    $0xc,%esp
   107af:	68 00 00 00 80       	push   $0x80000000
   107b4:	e8 69 fb ff ff       	call   10322 <pde_index>
   107b9:	83 c4 10             	add    $0x10,%esp
   107bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   107bf:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107c6:	eb 1f                	jmp    107e7 <memory_create_uvm+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   107c8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107cb:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   107d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   107d5:	01 c2                	add    %eax,%edx
   107d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107da:	8b 04 85 00 80 01 00 	mov    0x18000(,%eax,4),%eax
   107e1:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   107e3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107ea:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   107ed:	77 d9                	ja     107c8 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   107ef:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   107f2:	c9                   	leave  
   107f3:	c3                   	ret    

000107f4 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm)
{
   107f4:	55                   	push   %ebp
   107f5:	89 e5                	mov    %esp,%ebp
   107f7:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   107fa:	8b 45 0c             	mov    0xc(%ebp),%eax
   107fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10800:	68 00 10 00 00       	push   $0x1000
   10805:	ff 75 10             	pushl  0x10(%ebp)
   10808:	e8 e5 fa ff ff       	call   102f2 <up2>
   1080d:	83 c4 08             	add    $0x8,%esp
   10810:	c1 e8 0c             	shr    $0xc,%eax
   10813:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10816:	68 00 10 00 00       	push   $0x1000
   1081b:	ff 75 0c             	pushl  0xc(%ebp)
   1081e:	e8 e6 fa ff ff       	call   10309 <down2>
   10823:	83 c4 08             	add    $0x8,%esp
   10826:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++)
   10829:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10830:	eb 7b                	jmp    108ad <memory_alloc_for_page_dir+0xb9>
    {
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10832:	83 ec 08             	sub    $0x8,%esp
   10835:	6a 01                	push   $0x1
   10837:	68 00 70 01 00       	push   $0x17000
   1083c:	e8 cc fb ff ff       	call   1040d <addr_alloc_page>
   10841:	83 c4 10             	add    $0x10,%esp
   10844:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0)
   10847:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1084b:	75 17                	jne    10864 <memory_alloc_for_page_dir+0x70>
        {
            log_printf("mem alloc failed. no memory");
   1084d:	83 ec 0c             	sub    $0xc,%esp
   10850:	68 10 2f 01 00       	push   $0x12f10
   10855:	e8 54 25 00 00       	call   12dae <log_printf>
   1085a:	83 c4 10             	add    $0x10,%esp
            return 0;
   1085d:	b8 00 00 00 00       	mov    $0x0,%eax
   10862:	eb 5a                	jmp    108be <memory_alloc_for_page_dir+0xca>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10864:	8b 55 14             	mov    0x14(%ebp),%edx
   10867:	8b 45 08             	mov    0x8(%ebp),%eax
   1086a:	83 ec 0c             	sub    $0xc,%esp
   1086d:	52                   	push   %edx
   1086e:	6a 01                	push   $0x1
   10870:	ff 75 e8             	pushl  -0x18(%ebp)
   10873:	ff 75 f4             	pushl  -0xc(%ebp)
   10876:	50                   	push   %eax
   10877:	e8 ac fd ff ff       	call   10628 <memory_create_map>
   1087c:	83 c4 20             	add    $0x20,%esp
   1087f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   10882:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10886:	79 1a                	jns    108a2 <memory_alloc_for_page_dir+0xae>
        {
            log_printf("create memory map failed. err = %d", err);
   10888:	83 ec 08             	sub    $0x8,%esp
   1088b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1088e:	68 2c 2f 01 00       	push   $0x12f2c
   10893:	e8 16 25 00 00       	call   12dae <log_printf>
   10898:	83 c4 10             	add    $0x10,%esp
            // addr_free_page(&paddr_alloc, vaddr, i + 1); 清理之前分配的页
            return -1;
   1089b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   108a0:	eb 1c                	jmp    108be <memory_alloc_for_page_dir+0xca>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   108a2:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++)
   108a9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   108ad:	8b 45 f0             	mov    -0x10(%ebp),%eax
   108b0:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   108b3:	0f 8c 79 ff ff ff    	jl     10832 <memory_alloc_for_page_dir+0x3e>
    }

    return 0;
   108b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   108be:	c9                   	leave  
   108bf:	c3                   	ret    

000108c0 <memory_alloc_page>:
/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page(void)
{
   108c0:	55                   	push   %ebp
   108c1:	89 e5                	mov    %esp,%ebp
   108c3:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   108c6:	83 ec 08             	sub    $0x8,%esp
   108c9:	6a 01                	push   $0x1
   108cb:	68 00 70 01 00       	push   $0x17000
   108d0:	e8 38 fb ff ff       	call   1040d <addr_alloc_page>
   108d5:	83 c4 10             	add    $0x10,%esp
}
   108d8:	c9                   	leave  
   108d9:	c3                   	ret    

000108da <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page(uint32_t addr)
{
   108da:	55                   	push   %ebp
   108db:	89 e5                	mov    %esp,%ebp
   108dd:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE)
   108e0:	8b 45 08             	mov    0x8(%ebp),%eax
   108e3:	85 c0                	test   %eax,%eax
   108e5:	78 17                	js     108fe <memory_free_page+0x24>
    {
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   108e7:	83 ec 04             	sub    $0x4,%esp
   108ea:	6a 01                	push   $0x1
   108ec:	ff 75 08             	pushl  0x8(%ebp)
   108ef:	68 00 70 01 00       	push   $0x17000
   108f4:	e8 7b fb ff ff       	call   10474 <addr_free_page>
   108f9:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   108fc:	eb 72                	jmp    10970 <memory_free_page+0x96>
        pte_t *pte = find_pte(current_page_dir(), addr, 0);
   108fe:	e8 a2 fa ff ff       	call   103a5 <current_page_dir>
   10903:	83 ec 04             	sub    $0x4,%esp
   10906:	6a 00                	push   $0x0
   10908:	ff 75 08             	pushl  0x8(%ebp)
   1090b:	50                   	push   %eax
   1090c:	e8 67 fc ff ff       	call   10578 <find_pte>
   10911:	83 c4 10             	add    $0x10,%esp
   10914:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10917:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1091b:	75 0d                	jne    1092a <memory_free_page+0x50>
   1091d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10920:	0f b6 00             	movzbl (%eax),%eax
   10923:	83 e0 01             	and    $0x1,%eax
   10926:	84 c0                	test   %al,%al
   10928:	75 1c                	jne    10946 <memory_free_page+0x6c>
   1092a:	68 50 2f 01 00       	push   $0x12f50
   1092f:	68 d8 2f 01 00       	push   $0x12fd8
   10934:	68 15 01 00 00       	push   $0x115
   10939:	68 d4 2e 01 00       	push   $0x12ed4
   1093e:	e8 88 21 00 00       	call   12acb <panic>
   10943:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10946:	83 ec 0c             	sub    $0xc,%esp
   10949:	ff 75 f4             	pushl  -0xc(%ebp)
   1094c:	e8 1c fa ff ff       	call   1036d <pte_paddr>
   10951:	83 c4 10             	add    $0x10,%esp
   10954:	83 ec 04             	sub    $0x4,%esp
   10957:	6a 01                	push   $0x1
   10959:	50                   	push   %eax
   1095a:	68 00 70 01 00       	push   $0x17000
   1095f:	e8 10 fb ff ff       	call   10474 <addr_free_page>
   10964:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10967:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1096a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10970:	90                   	nop
   10971:	c9                   	leave  
   10972:	c3                   	ret    

00010973 <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm)
{
   10973:	55                   	push   %ebp
   10974:	89 e5                	mov    %esp,%ebp
   10976:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10979:	e8 ff 06 00 00       	call   1107d <task_current>
   1097e:	8b 40 68             	mov    0x68(%eax),%eax
   10981:	ff 75 10             	pushl  0x10(%ebp)
   10984:	ff 75 0c             	pushl  0xc(%ebp)
   10987:	ff 75 08             	pushl  0x8(%ebp)
   1098a:	50                   	push   %eax
   1098b:	e8 64 fe ff ff       	call   107f4 <memory_alloc_for_page_dir>
   10990:	83 c4 10             	add    $0x10,%esp
}
   10993:	c9                   	leave  
   10994:	c3                   	ret    

00010995 <memory_init>:
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init(boot_info_t *boot_info)
{
   10995:	55                   	push   %ebp
   10996:	89 e5                	mov    %esp,%ebp
   10998:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    log_printf("mem init");
   1099b:	83 ec 0c             	sub    $0xc,%esp
   1099e:	68 74 2f 01 00       	push   $0x12f74
   109a3:	e8 06 24 00 00       	call   12dae <log_printf>
   109a8:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   109ab:	83 ec 0c             	sub    $0xc,%esp
   109ae:	ff 75 08             	pushl  0x8(%ebp)
   109b1:	e8 20 fb ff ff       	call   104d6 <show_mem_info>
   109b6:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   109b9:	c7 45 f4 ce ae 01 00 	movl   $0x1aece,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   109c0:	83 ec 0c             	sub    $0xc,%esp
   109c3:	ff 75 08             	pushl  0x8(%ebp)
   109c6:	e8 71 fb ff ff       	call   1053c <total_mem_size>
   109cb:	83 c4 10             	add    $0x10,%esp
   109ce:	2d 00 00 10 00       	sub    $0x100000,%eax
   109d3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   109d6:	83 ec 08             	sub    $0x8,%esp
   109d9:	68 00 10 00 00       	push   $0x1000
   109de:	ff 75 f0             	pushl  -0x10(%ebp)
   109e1:	e8 23 f9 ff ff       	call   10309 <down2>
   109e6:	83 c4 10             	add    $0x10,%esp
   109e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x, size:0x%x", MEM_EXT_START, mem_up1MB_free);
   109ec:	83 ec 04             	sub    $0x4,%esp
   109ef:	ff 75 f0             	pushl  -0x10(%ebp)
   109f2:	68 00 00 10 00       	push   $0x100000
   109f7:	68 7d 2f 01 00       	push   $0x12f7d
   109fc:	e8 ad 23 00 00       	call   12dae <log_printf>
   10a01:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10a04:	83 ec 0c             	sub    $0xc,%esp
   10a07:	68 00 10 00 00       	push   $0x1000
   10a0c:	ff 75 f0             	pushl  -0x10(%ebp)
   10a0f:	68 00 00 10 00       	push   $0x100000
   10a14:	ff 75 f4             	pushl  -0xc(%ebp)
   10a17:	68 00 70 01 00       	push   $0x17000
   10a1c:	e8 94 f9 ff ff       	call   103b5 <addr_alloc_init>
   10a21:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE); // mem_free 跳过bit的地址
   10a24:	a1 24 70 01 00       	mov    0x17024,%eax
   10a29:	c1 e8 0c             	shr    $0xc,%eax
   10a2c:	83 ec 0c             	sub    $0xc,%esp
   10a2f:	50                   	push   %eax
   10a30:	e8 62 19 00 00       	call   12397 <bitmap_byte_count>
   10a35:	83 c4 10             	add    $0x10,%esp
   10a38:	01 45 f4             	add    %eax,-0xc(%ebp)
    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10a3b:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10a42:	76 1c                	jbe    10a60 <memory_init+0xcb>
   10a44:	68 9c 2f 01 00       	push   $0x12f9c
   10a49:	68 ec 2f 01 00       	push   $0x12fec
   10a4e:	68 3f 01 00 00       	push   $0x13f
   10a53:	68 d4 2e 01 00       	push   $0x12ed4
   10a58:	e8 6e 20 00 00       	call   12acb <panic>
   10a5d:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10a60:	e8 4f fc ff ff       	call   106b4 <create_kernel_table>
    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10a65:	b8 00 80 01 00       	mov    $0x18000,%eax
   10a6a:	83 ec 0c             	sub    $0xc,%esp
   10a6d:	50                   	push   %eax
   10a6e:	e8 21 f9 ff ff       	call   10394 <mmu_set_page_dir>
   10a73:	83 c4 10             	add    $0x10,%esp
    // {
    //     addr_free_page(&addr_alloc, addr, 2);
    //     addr += 4096 * 2;
    //     log_printf("alloc addr: 0x%x", addr);
    // }
   10a76:	90                   	nop
   10a77:	c9                   	leave  
   10a78:	c3                   	ret    

00010a79 <sys_print_msg>:

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

void sys_print_msg(char *fmt, int arg)
{
   10a79:	55                   	push   %ebp
   10a7a:	89 e5                	mov    %esp,%ebp
   10a7c:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10a7f:	83 ec 08             	sub    $0x8,%esp
   10a82:	ff 75 0c             	pushl  0xc(%ebp)
   10a85:	ff 75 08             	pushl  0x8(%ebp)
   10a88:	e8 21 23 00 00       	call   12dae <log_printf>
   10a8d:	83 c4 10             	add    $0x10,%esp
}
   10a90:	90                   	nop
   10a91:	c9                   	leave  
   10a92:	c3                   	ret    

00010a93 <do_handler_syscall>:

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall(syscall_frame_t *frame)
{
   10a93:	55                   	push   %ebp
   10a94:	89 e5                	mov    %esp,%ebp
   10a96:	53                   	push   %ebx
   10a97:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0]))
   10a9a:	8b 45 08             	mov    0x8(%ebp),%eax
   10a9d:	8b 40 3c             	mov    0x3c(%eax),%eax
   10aa0:	83 f8 64             	cmp    $0x64,%eax
   10aa3:	77 4e                	ja     10af3 <do_handler_syscall+0x60>
    {
        // 查表取得处理函数，然后调用处理
        syscall_handler_t handler = sys_table[frame->func_id];
   10aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa8:	8b 40 3c             	mov    0x3c(%eax),%eax
   10aab:	8b 04 85 00 30 01 00 	mov    0x13000(,%eax,4),%eax
   10ab2:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler)
   10ab5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ab9:	74 38                	je     10af3 <do_handler_syscall+0x60>
        {
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10abb:	8b 45 08             	mov    0x8(%ebp),%eax
   10abe:	8b 40 4c             	mov    0x4c(%eax),%eax
   10ac1:	89 c3                	mov    %eax,%ebx
   10ac3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ac6:	8b 40 48             	mov    0x48(%eax),%eax
   10ac9:	89 c1                	mov    %eax,%ecx
   10acb:	8b 45 08             	mov    0x8(%ebp),%eax
   10ace:	8b 40 44             	mov    0x44(%eax),%eax
   10ad1:	89 c2                	mov    %eax,%edx
   10ad3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ad6:	8b 40 40             	mov    0x40(%eax),%eax
   10ad9:	53                   	push   %ebx
   10ada:	51                   	push   %ecx
   10adb:	52                   	push   %edx
   10adc:	50                   	push   %eax
   10add:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ae0:	ff d0                	call   *%eax
   10ae2:	83 c4 10             	add    $0x10,%esp
   10ae5:	89 45 f0             	mov    %eax,-0x10(%ebp)
            frame->eax = ret; // 设置系统调用的返回值，由eax传递
   10ae8:	8b 45 08             	mov    0x8(%ebp),%eax
   10aeb:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10aee:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10af1:	eb 30                	jmp    10b23 <do_handler_syscall+0x90>
        }
    }
    // 不支持的系统调用，打印出错信息
    task_t *task = task_current();
   10af3:	e8 85 05 00 00       	call   1107d <task_current>
   10af8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10afb:	8b 45 08             	mov    0x8(%ebp),%eax
   10afe:	8b 40 3c             	mov    0x3c(%eax),%eax
   10b01:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10b04:	83 c2 04             	add    $0x4,%edx
   10b07:	83 ec 04             	sub    $0x4,%esp
   10b0a:	50                   	push   %eax
   10b0b:	52                   	push   %edx
   10b0c:	68 94 31 01 00       	push   $0x13194
   10b11:	e8 98 22 00 00       	call   12dae <log_printf>
   10b16:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1; // 设置系统调用的返回值，由eax传递
   10b19:	8b 45 08             	mov    0x8(%ebp),%eax
   10b1c:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10b23:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10b26:	c9                   	leave  
   10b27:	c3                   	ret    

00010b28 <list_node_init>:
/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node)
{
   10b28:	55                   	push   %ebp
   10b29:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10b2b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b2e:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10b35:	8b 45 08             	mov    0x8(%ebp),%eax
   10b38:	8b 50 04             	mov    0x4(%eax),%edx
   10b3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10b3e:	89 10                	mov    %edx,(%eax)
}
   10b40:	90                   	nop
   10b41:	5d                   	pop    %ebp
   10b42:	c3                   	ret    

00010b43 <list_node_next>:
 * 获取结点的后一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t *list_node_next(list_node_t *node)
{
   10b43:	55                   	push   %ebp
   10b44:	89 e5                	mov    %esp,%ebp
    return node->next;
   10b46:	8b 45 08             	mov    0x8(%ebp),%eax
   10b49:	8b 40 04             	mov    0x4(%eax),%eax
}
   10b4c:	5d                   	pop    %ebp
   10b4d:	c3                   	ret    

00010b4e <list_count>:
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list)
{
   10b4e:	55                   	push   %ebp
   10b4f:	89 e5                	mov    %esp,%ebp
    return list->count;
   10b51:	8b 45 08             	mov    0x8(%ebp),%eax
   10b54:	8b 40 08             	mov    0x8(%eax),%eax
}
   10b57:	5d                   	pop    %ebp
   10b58:	c3                   	ret    

00010b59 <list_first>:
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t *list_first(list_t *list)
{
   10b59:	55                   	push   %ebp
   10b5a:	89 e5                	mov    %esp,%ebp
    return list->first;
   10b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10b5f:	8b 00                	mov    (%eax),%eax
}
   10b61:	5d                   	pop    %ebp
   10b62:	c3                   	ret    

00010b63 <write_cr3>:
{
   10b63:	55                   	push   %ebp
   10b64:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10b66:	8b 45 08             	mov    0x8(%ebp),%eax
   10b69:	0f 22 d8             	mov    %eax,%cr3
}
   10b6c:	90                   	nop
   10b6d:	5d                   	pop    %ebp
   10b6e:	c3                   	ret    

00010b6f <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   10b6f:	55                   	push   %ebp
   10b70:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10b72:	f4                   	hlt    
}
   10b73:	90                   	nop
   10b74:	5d                   	pop    %ebp
   10b75:	c3                   	ret    

00010b76 <write_tr>:

// 写tss register 当前运行那个进程
static inline void write_tr(uint32_t tss_selector)
{
   10b76:	55                   	push   %ebp
   10b77:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   10b79:	8b 45 08             	mov    0x8(%ebp),%eax
   10b7c:	0f 00 d8             	ltr    %ax
}
   10b7f:	90                   	nop
   10b80:	5d                   	pop    %ebp
   10b81:	c3                   	ret    

00010b82 <mmu_set_page_dir>:
{
   10b82:	55                   	push   %ebp
   10b83:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10b85:	ff 75 08             	pushl  0x8(%ebp)
   10b88:	e8 d6 ff ff ff       	call   10b63 <write_cr3>
   10b8d:	83 c4 04             	add    $0x4,%esp
}
   10b90:	90                   	nop
   10b91:	c9                   	leave  
   10b92:	c3                   	ret    

00010b93 <tss_init>:

static uint32_t idle_task_stack[1024];
static task_manager_t task_manager; // 任务管理器

static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   10b93:	55                   	push   %ebp
   10b94:	89 e5                	mov    %esp,%ebp
   10b96:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = get_alloc_desc();
   10b99:	e8 a0 08 00 00       	call   1143e <get_alloc_desc>
   10b9e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   10ba1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10ba5:	79 1a                	jns    10bc1 <tss_init+0x2e>
    {
        log_printf("alloc tss failed.\n");
   10ba7:	83 ec 0c             	sub    $0xc,%esp
   10baa:	68 b4 31 01 00       	push   $0x131b4
   10baf:	e8 fa 21 00 00       	call   12dae <log_printf>
   10bb4:	83 c4 10             	add    $0x10,%esp
        return -1;
   10bb7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bbc:	e9 68 01 00 00       	jmp    10d29 <tss_init+0x196>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS); // 设置GDT表项内容
   10bc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc4:	83 c0 4c             	add    $0x4c,%eax
   10bc7:	68 89 00 00 00       	push   $0x89
   10bcc:	6a 68                	push   $0x68
   10bce:	50                   	push   %eax
   10bcf:	ff 75 ec             	pushl  -0x14(%ebp)
   10bd2:	e8 af 07 00 00       	call   11386 <segment_desc_set>
   10bd7:	83 c4 10             	add    $0x10,%esp

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   10bda:	8b 45 08             	mov    0x8(%ebp),%eax
   10bdd:	83 c0 4c             	add    $0x4c,%eax
   10be0:	83 ec 04             	sub    $0x4,%esp
   10be3:	6a 68                	push   $0x68
   10be5:	6a 00                	push   $0x0
   10be7:	50                   	push   %eax
   10be8:	e8 b5 1b 00 00       	call   127a2 <kernel_memset>
   10bed:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   10bf0:	e8 cb fc ff ff       	call   108c0 <memory_alloc_page>
   10bf5:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0)
   10bf8:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bfc:	0f 84 fc 00 00 00    	je     10cfe <tss_init+0x16b>

    int code_sel, data_sel;
    // code_sel = task_manager.app_code_sel | SEG_CPL3;
    // data_sel = task_manager.app_data_sel | SEG_CPL3;
    // 根据不同的权限选择不同的访问选择子
    if (flag & TASK_FLAG_SYSTEM)
   10c02:	8b 45 0c             	mov    0xc(%ebp),%eax
   10c05:	83 e0 01             	and    $0x1,%eax
   10c08:	85 c0                	test   %eax,%eax
   10c0a:	74 10                	je     10c1c <tss_init+0x89>
    {
        code_sel = KERNEL_SELECTOR_CS;
   10c0c:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   10c13:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   10c1a:	eb 16                	jmp    10c32 <tss_init+0x9f>
    }
    else
    {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_CPL3;
   10c1c:	a1 98 a1 01 00       	mov    0x1a198,%eax
   10c21:	83 c8 03             	or     $0x3,%eax
   10c24:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3;
   10c27:	a1 9c a1 01 00       	mov    0x1a19c,%eax
   10c2c:	83 c8 03             	or     $0x3,%eax
   10c2f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   10c32:	8b 45 08             	mov    0x8(%ebp),%eax
   10c35:	8b 55 10             	mov    0x10(%ebp),%edx
   10c38:	89 50 6c             	mov    %edx,0x6c(%eax)
    // task->tss.esp = task->tss.esp0 = esp;
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; // 未指定栈则用内核栈，即运行在特权级0的进程
   10c3b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10c3f:	75 0a                	jne    10c4b <tss_init+0xb8>
   10c41:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c44:	05 00 10 00 00       	add    $0x1000,%eax
   10c49:	eb 03                	jmp    10c4e <tss_init+0xbb>
   10c4b:	8b 45 14             	mov    0x14(%ebp),%eax
   10c4e:	8b 55 08             	mov    0x8(%ebp),%edx
   10c51:	89 82 84 00 00 00    	mov    %eax,0x84(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   10c57:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10c5a:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   10c60:	8b 45 08             	mov    0x8(%ebp),%eax
   10c63:	89 50 50             	mov    %edx,0x50(%eax)
    task->tss.ss = data_sel;            // 特权3
   10c66:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10c69:	8b 45 08             	mov    0x8(%ebp),%eax
   10c6c:	89 90 9c 00 00 00    	mov    %edx,0x9c(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; // 特权0
   10c72:	8b 45 08             	mov    0x8(%ebp),%eax
   10c75:	c7 40 54 10 00 00 00 	movl   $0x10,0x54(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   10c7c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10c7f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c82:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
   10c88:	8b 45 08             	mov    0x8(%ebp),%eax
   10c8b:	8b 90 a8 00 00 00    	mov    0xa8(%eax),%edx
   10c91:	8b 45 08             	mov    0x8(%ebp),%eax
   10c94:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
   10c9a:	8b 45 08             	mov    0x8(%ebp),%eax
   10c9d:	8b 90 a4 00 00 00    	mov    0xa4(%eax),%edx
   10ca3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ca6:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
   10cac:	8b 45 08             	mov    0x8(%ebp),%eax
   10caf:	8b 90 a0 00 00 00    	mov    0xa0(%eax),%edx
   10cb5:	8b 45 08             	mov    0x8(%ebp),%eax
   10cb8:	89 90 94 00 00 00    	mov    %edx,0x94(%eax)
    task->tss.cs = code_sel;
   10cbe:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10cc4:	89 90 98 00 00 00    	mov    %edx,0x98(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   10cca:	8b 45 08             	mov    0x8(%ebp),%eax
   10ccd:	c7 40 70 02 02 00 00 	movl   $0x202,0x70(%eax)

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   10cd4:	e8 96 fa ff ff       	call   1076f <memory_create_uvm>
   10cd9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0)
   10cdc:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10ce0:	74 1f                	je     10d01 <tss_init+0x16e>
    {
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   10ce2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ce5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ce8:	89 50 68             	mov    %edx,0x68(%eax)
    task->tss_sel = tss_sel;
   10ceb:	8b 45 08             	mov    0x8(%ebp),%eax
   10cee:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10cf1:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
    return 0;
   10cf7:	b8 00 00 00 00       	mov    $0x0,%eax
   10cfc:	eb 2b                	jmp    10d29 <tss_init+0x196>
        goto tss_init_failed;
   10cfe:	90                   	nop
   10cff:	eb 01                	jmp    10d02 <tss_init+0x16f>
        goto tss_init_failed;
   10d01:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   10d02:	83 ec 0c             	sub    $0xc,%esp
   10d05:	ff 75 ec             	pushl  -0x14(%ebp)
   10d08:	e8 f8 06 00 00       	call   11405 <gdt_free_sel>
   10d0d:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack)
   10d10:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10d14:	74 0e                	je     10d24 <tss_init+0x191>
    {
        memory_free_page(kernel_stack);
   10d16:	83 ec 0c             	sub    $0xc,%esp
   10d19:	ff 75 e8             	pushl  -0x18(%ebp)
   10d1c:	e8 b9 fb ff ff       	call   108da <memory_free_page>
   10d21:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10d24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10d29:	c9                   	leave  
   10d2a:	c3                   	ret    

00010d2b <task_init>:

int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   10d2b:	55                   	push   %ebp
   10d2c:	89 e5                	mov    %esp,%ebp
   10d2e:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   10d31:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10d35:	75 19                	jne    10d50 <task_init+0x25>
   10d37:	68 c7 31 01 00       	push   $0x131c7
   10d3c:	68 58 32 01 00       	push   $0x13258
   10d41:	6a 52                	push   $0x52
   10d43:	68 dc 31 01 00       	push   $0x131dc
   10d48:	e8 7e 1d 00 00       	call   12acb <panic>
   10d4d:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   10d50:	ff 75 18             	pushl  0x18(%ebp)
   10d53:	ff 75 14             	pushl  0x14(%ebp)
   10d56:	ff 75 10             	pushl  0x10(%ebp)
   10d59:	ff 75 08             	pushl  0x8(%ebp)
   10d5c:	e8 32 fe ff ff       	call   10b93 <tss_init>
   10d61:	83 c4 10             	add    $0x10,%esp
   10d64:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   10d67:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10d6b:	79 18                	jns    10d85 <task_init+0x5a>
    {
        log_printf("init task failed.\n");
   10d6d:	83 ec 0c             	sub    $0xc,%esp
   10d70:	68 16 32 01 00       	push   $0x13216
   10d75:	e8 34 20 00 00       	call   12dae <log_printf>
   10d7a:	83 c4 10             	add    $0x10,%esp
        return err;
   10d7d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d80:	e9 bf 00 00 00       	jmp    10e44 <task_init+0x119>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   10d85:	8b 45 08             	mov    0x8(%ebp),%eax
   10d88:	83 c0 04             	add    $0x4,%eax
   10d8b:	83 ec 04             	sub    $0x4,%esp
   10d8e:	6a 20                	push   $0x20
   10d90:	ff 75 0c             	pushl  0xc(%ebp)
   10d93:	50                   	push   %eax
   10d94:	e8 91 18 00 00       	call   1262a <kernel_strncpy>
   10d99:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   10d9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10d9f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   10da5:	8b 45 08             	mov    0x8(%ebp),%eax
   10da8:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   10daf:	8b 45 08             	mov    0x8(%ebp),%eax
   10db2:	c7 40 2c 0a 00 00 00 	movl   $0xa,0x2c(%eax)
    task->slice_ticks = task->time_ticks;
   10db9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dbc:	8b 50 2c             	mov    0x2c(%eax),%edx
   10dbf:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc2:	89 50 30             	mov    %edx,0x30(%eax)
    list_node_init(&task->all_node);
   10dc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10dc8:	83 c0 44             	add    $0x44,%eax
   10dcb:	83 ec 0c             	sub    $0xc,%esp
   10dce:	50                   	push   %eax
   10dcf:	e8 54 fd ff ff       	call   10b28 <list_node_init>
   10dd4:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   10dd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10dda:	83 c0 34             	add    $0x34,%eax
   10ddd:	83 ec 0c             	sub    $0xc,%esp
   10de0:	50                   	push   %eax
   10de1:	e8 42 fd ff ff       	call   10b28 <list_node_init>
   10de6:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   10de9:	8b 45 08             	mov    0x8(%ebp),%eax
   10dec:	83 c0 3c             	add    $0x3c,%eax
   10def:	83 ec 0c             	sub    $0xc,%esp
   10df2:	50                   	push   %eax
   10df3:	e8 30 fd ff ff       	call   10b28 <list_node_init>
   10df8:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   10dfb:	e8 f7 10 00 00       	call   11ef7 <irq_enter_protection>
   10e00:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task;
   10e03:	8b 55 08             	mov    0x8(%ebp),%edx
   10e06:	8b 45 08             	mov    0x8(%ebp),%eax
   10e09:	89 50 24             	mov    %edx,0x24(%eax)
    task_set_ready(task);
   10e0c:	83 ec 0c             	sub    $0xc,%esp
   10e0f:	ff 75 08             	pushl  0x8(%ebp)
   10e12:	e8 07 02 00 00       	call   1101e <task_set_ready>
   10e17:	83 c4 10             	add    $0x10,%esp
    list_insert_last(&task_manager.task_list, &task->all_node); // 插入所有task进队尾
   10e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   10e1d:	83 c0 44             	add    $0x44,%eax
   10e20:	83 ec 08             	sub    $0x8,%esp
   10e23:	50                   	push   %eax
   10e24:	68 10 a0 01 00       	push   $0x1a010
   10e29:	e8 6a 1d 00 00       	call   12b98 <list_insert_last>
   10e2e:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10e31:	83 ec 0c             	sub    $0xc,%esp
   10e34:	ff 75 f0             	pushl  -0x10(%ebp)
   10e37:	e8 d3 10 00 00       	call   11f0f <irq_leave_protection>
   10e3c:	83 c4 10             	add    $0x10,%esp
    return 0;
   10e3f:	b8 00 00 00 00       	mov    $0x0,%eax
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    // }
}
   10e44:	c9                   	leave  
   10e45:	c3                   	ret    

00010e46 <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   10e46:	55                   	push   %ebp
   10e47:	89 e5                	mov    %esp,%ebp
   10e49:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   10e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   10e4f:	8b 80 b4 00 00 00    	mov    0xb4(%eax),%eax
   10e55:	83 ec 0c             	sub    $0xc,%esp
   10e58:	50                   	push   %eax
   10e59:	e8 45 07 00 00       	call   115a3 <switch_to_tss>
   10e5e:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   10e61:	90                   	nop
   10e62:	c9                   	leave  
   10e63:	c3                   	ret    

00010e64 <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t *task)
{
   10e64:	55                   	push   %ebp
   10e65:	89 e5                	mov    %esp,%ebp
   10e67:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   10e6a:	e8 88 10 00 00       	call   11ef7 <irq_enter_protection>
   10e6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   10e72:	83 ec 0c             	sub    $0xc,%esp
   10e75:	ff 75 08             	pushl  0x8(%ebp)
   10e78:	e8 a1 01 00 00       	call   1101e <task_set_ready>
   10e7d:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   10e80:	83 ec 0c             	sub    $0xc,%esp
   10e83:	ff 75 f4             	pushl  -0xc(%ebp)
   10e86:	e8 84 10 00 00       	call   11f0f <irq_leave_protection>
   10e8b:	83 c4 10             	add    $0x10,%esp
}
   10e8e:	90                   	nop
   10e8f:	c9                   	leave  
   10e90:	c3                   	ret    

00010e91 <task_first_init>:
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init(void)
{
   10e91:	55                   	push   %ebp
   10e92:	89 e5                	mov    %esp,%ebp
   10e94:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    // 以下获得的是bin文件在内存中的物理地址，起始和结束
    extern uint8_t s_first_task[], e_first_task[];
    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   10e97:	ba ce ae 01 00       	mov    $0x1aece,%edx
   10e9c:	b8 d8 ad 01 00       	mov    $0x1add8,%eax
   10ea1:	29 c2                	sub    %eax,%edx
   10ea3:	89 d0                	mov    %edx,%eax
   10ea5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   10ea8:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   10eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10eb2:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   10eb5:	72 1c                	jb     10ed3 <task_first_init+0x42>
   10eb7:	68 29 32 01 00       	push   $0x13229
   10ebc:	68 64 32 01 00       	push   $0x13264
   10ec1:	68 97 00 00 00       	push   $0x97
   10ec6:	68 dc 31 01 00       	push   $0x131dc
   10ecb:	e8 fb 1b 00 00       	call   12acb <panic>
   10ed0:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   10ed3:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   10eda:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10edd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ee0:	01 d0                	add    %edx,%eax
   10ee2:	83 ec 0c             	sub    $0xc,%esp
   10ee5:	50                   	push   %eax
   10ee6:	ff 75 ec             	pushl  -0x14(%ebp)
   10ee9:	6a 00                	push   $0x0
   10eeb:	68 40 32 01 00       	push   $0x13240
   10ef0:	68 28 a0 01 00       	push   $0x1a028
   10ef5:	e8 31 fe ff ff       	call   10d2b <task_init>
   10efa:	83 c4 20             	add    $0x20,%esp
    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   10efd:	a1 dc a0 01 00       	mov    0x1a0dc,%eax
   10f02:	83 ec 0c             	sub    $0xc,%esp
   10f05:	50                   	push   %eax
   10f06:	e8 6b fc ff ff       	call   10b76 <write_tr>
   10f0b:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   10f0e:	c7 05 00 a0 01 00 28 	movl   $0x1a028,0x1a000
   10f15:	a0 01 00 

    // 切换页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   10f18:	a1 90 a0 01 00       	mov    0x1a090,%eax
   10f1d:	83 ec 0c             	sub    $0xc,%esp
   10f20:	50                   	push   %eax
   10f21:	e8 5c fc ff ff       	call   10b82 <mmu_set_page_dir>
   10f26:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   10f29:	83 ec 04             	sub    $0x4,%esp
   10f2c:	6a 07                	push   $0x7
   10f2e:	ff 75 f0             	pushl  -0x10(%ebp)
   10f31:	ff 75 ec             	pushl  -0x14(%ebp)
   10f34:	e8 3a fa ff ff       	call   10973 <memory_alloc_page_for>
   10f39:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   10f3c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10f3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10f42:	83 ec 04             	sub    $0x4,%esp
   10f45:	52                   	push   %edx
   10f46:	68 d8 ad 01 00       	push   $0x1add8
   10f4b:	50                   	push   %eax
   10f4c:	e8 02 18 00 00       	call   12753 <kernel_memcpy>
   10f51:	83 c4 10             	add    $0x10,%esp
    // 启动进程
    // task_start(&task_manager.first_task);

    // 写TR寄存器，指示当前运行的第一个任务
    // write_tr(task_manager.first_task.tss_sel);
}
   10f54:	90                   	nop
   10f55:	c9                   	leave  
   10f56:	c3                   	ret    

00010f57 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t *task_first_task(void)
{
   10f57:	55                   	push   %ebp
   10f58:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   10f5a:	b8 28 a0 01 00       	mov    $0x1a028,%eax
}
   10f5f:	5d                   	pop    %ebp
   10f60:	c3                   	ret    

00010f61 <idle_task_entry>:

static void idle_task_entry(void)
{
   10f61:	55                   	push   %ebp
   10f62:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        hlt();
   10f64:	e8 06 fc ff ff       	call   10b6f <hlt>
   10f69:	eb f9                	jmp    10f64 <idle_task_entry+0x3>

00010f6b <task_manager_init>:
    }
}

void task_manager_init(void)
{
   10f6b:	55                   	push   %ebp
   10f6c:	89 e5                	mov    %esp,%ebp
   10f6e:	83 ec 18             	sub    $0x18,%esp
    int sel = get_alloc_desc();
   10f71:	e8 c8 04 00 00       	call   1143e <get_alloc_desc>
   10f76:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f79:	68 f2 40 00 00       	push   $0x40f2
   10f7e:	6a ff                	push   $0xffffffff
   10f80:	6a 00                	push   $0x0
   10f82:	ff 75 f4             	pushl  -0xc(%ebp)
   10f85:	e8 fc 03 00 00       	call   11386 <segment_desc_set>
   10f8a:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   10f8d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f90:	a3 9c a1 01 00       	mov    %eax,0x1a19c

    sel = get_alloc_desc();
   10f95:	e8 a4 04 00 00       	call   1143e <get_alloc_desc>
   10f9a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   10f9d:	68 fa 40 00 00       	push   $0x40fa
   10fa2:	6a ff                	push   $0xffffffff
   10fa4:	6a 00                	push   $0x0
   10fa6:	ff 75 f4             	pushl  -0xc(%ebp)
   10fa9:	e8 d8 03 00 00       	call   11386 <segment_desc_set>
   10fae:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   10fb1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10fb4:	a3 98 a1 01 00       	mov    %eax,0x1a198

    // 各队列初始化
    list_init(&task_manager.ready_list);
   10fb9:	83 ec 0c             	sub    $0xc,%esp
   10fbc:	68 04 a0 01 00       	push   $0x1a004
   10fc1:	e8 4e 1b 00 00       	call   12b14 <list_init>
   10fc6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   10fc9:	83 ec 0c             	sub    $0xc,%esp
   10fcc:	68 10 a0 01 00       	push   $0x1a010
   10fd1:	e8 3e 1b 00 00       	call   12b14 <list_init>
   10fd6:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   10fd9:	83 ec 0c             	sub    $0xc,%esp
   10fdc:	68 1c a0 01 00       	push   $0x1a01c
   10fe1:	e8 2e 1b 00 00       	call   12b14 <list_init>
   10fe6:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   10fe9:	c7 05 00 a0 01 00 00 	movl   $0x0,0x1a000
   10ff0:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", TASK_FLAG_SYSTEM, (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + 1024);
   10ff3:	b8 00 90 01 00       	mov    $0x19000,%eax
   10ff8:	05 00 04 00 00       	add    $0x400,%eax
   10ffd:	ba 61 0f 01 00       	mov    $0x10f61,%edx
   11002:	83 ec 0c             	sub    $0xc,%esp
   11005:	50                   	push   %eax
   11006:	52                   	push   %edx
   11007:	6a 01                	push   $0x1
   11009:	68 4b 32 01 00       	push   $0x1324b
   1100e:	68 e0 a0 01 00       	push   $0x1a0e0
   11013:	e8 13 fd ff ff       	call   10d2b <task_init>
   11018:	83 c4 20             	add    $0x20,%esp
}
   1101b:	90                   	nop
   1101c:	c9                   	leave  
   1101d:	c3                   	ret    

0001101e <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task)
{
   1101e:	55                   	push   %ebp
   1101f:	89 e5                	mov    %esp,%ebp
   11021:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   11024:	81 7d 08 e0 a0 01 00 	cmpl   $0x1a0e0,0x8(%ebp)
   1102b:	74 22                	je     1104f <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   1102d:	8b 45 08             	mov    0x8(%ebp),%eax
   11030:	83 c0 34             	add    $0x34,%eax
   11033:	83 ec 08             	sub    $0x8,%esp
   11036:	50                   	push   %eax
   11037:	68 04 a0 01 00       	push   $0x1a004
   1103c:	e8 57 1b 00 00       	call   12b98 <list_insert_last>
   11041:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11044:	8b 45 08             	mov    0x8(%ebp),%eax
   11047:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1104d:	eb 01                	jmp    11050 <task_set_ready+0x32>
        return;
   1104f:	90                   	nop
}
   11050:	c9                   	leave  
   11051:	c3                   	ret    

00011052 <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block(task_t *task)
{
   11052:	55                   	push   %ebp
   11053:	89 e5                	mov    %esp,%ebp
   11055:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   11058:	81 7d 08 e0 a0 01 00 	cmpl   $0x1a0e0,0x8(%ebp)
   1105f:	74 19                	je     1107a <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   11061:	8b 45 08             	mov    0x8(%ebp),%eax
   11064:	83 c0 34             	add    $0x34,%eax
   11067:	83 ec 08             	sub    $0x8,%esp
   1106a:	50                   	push   %eax
   1106b:	68 04 a0 01 00       	push   $0x1a004
   11070:	e8 ff 1b 00 00       	call   12c74 <list_remove>
   11075:	83 c4 10             	add    $0x10,%esp
   11078:	eb 01                	jmp    1107b <task_set_block+0x29>
        return;
   1107a:	90                   	nop
}
   1107b:	c9                   	leave  
   1107c:	c3                   	ret    

0001107d <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t *task_current(void)
{
   1107d:	55                   	push   %ebp
   1107e:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11080:	a1 00 a0 01 00       	mov    0x1a000,%eax
}
   11085:	5d                   	pop    %ebp
   11086:	c3                   	ret    

00011087 <sys_sched_yield>:

int sys_sched_yield(void)
{
   11087:	55                   	push   %ebp
   11088:	89 e5                	mov    %esp,%ebp
   1108a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1108d:	e8 65 0e 00 00       	call   11ef7 <irq_enter_protection>
   11092:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   11095:	83 ec 0c             	sub    $0xc,%esp
   11098:	68 04 a0 01 00       	push   $0x1a004
   1109d:	e8 ac fa ff ff       	call   10b4e <list_count>
   110a2:	83 c4 10             	add    $0x10,%esp
   110a5:	83 f8 01             	cmp    $0x1,%eax
   110a8:	7e 29                	jle    110d3 <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current();
   110aa:	e8 ce ff ff ff       	call   1107d <task_current>
   110af:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   110b2:	83 ec 0c             	sub    $0xc,%esp
   110b5:	ff 75 f0             	pushl  -0x10(%ebp)
   110b8:	e8 95 ff ff ff       	call   11052 <task_set_block>
   110bd:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   110c0:	83 ec 0c             	sub    $0xc,%esp
   110c3:	ff 75 f0             	pushl  -0x10(%ebp)
   110c6:	e8 53 ff ff ff       	call   1101e <task_set_ready>
   110cb:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   110ce:	e8 58 00 00 00       	call   1112b <task_dispatch>
    }
    irq_leave_protection(state);
   110d3:	83 ec 0c             	sub    $0xc,%esp
   110d6:	ff 75 f4             	pushl  -0xc(%ebp)
   110d9:	e8 31 0e 00 00       	call   11f0f <irq_leave_protection>
   110de:	83 c4 10             	add    $0x10,%esp
    return 0;
   110e1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   110e6:	c9                   	leave  
   110e7:	c3                   	ret    

000110e8 <task_next_run>:

/**
 * @brief 获取下一将要运行的任务
 */
static task_t *task_next_run(void)
{
   110e8:	55                   	push   %ebp
   110e9:	89 e5                	mov    %esp,%ebp
   110eb:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   110ee:	68 04 a0 01 00       	push   $0x1a004
   110f3:	e8 56 fa ff ff       	call   10b4e <list_count>
   110f8:	83 c4 04             	add    $0x4,%esp
   110fb:	85 c0                	test   %eax,%eax
   110fd:	75 07                	jne    11106 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   110ff:	b8 e0 a0 01 00       	mov    $0x1a0e0,%eax
   11104:	eb 23                	jmp    11129 <task_next_run+0x41>
    }

    // 普通任务
    list_node_t *task_node = list_first(&task_manager.ready_list);
   11106:	68 04 a0 01 00       	push   $0x1a004
   1110b:	e8 49 fa ff ff       	call   10b59 <list_first>
   11110:	83 c4 04             	add    $0x4,%esp
   11113:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11116:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1111a:	74 08                	je     11124 <task_next_run+0x3c>
   1111c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1111f:	83 e8 34             	sub    $0x34,%eax
   11122:	eb 05                	jmp    11129 <task_next_run+0x41>
   11124:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11129:	c9                   	leave  
   1112a:	c3                   	ret    

0001112b <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch(void)
{
   1112b:	55                   	push   %ebp
   1112c:	89 e5                	mov    %esp,%ebp
   1112e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11131:	e8 c1 0d 00 00       	call   11ef7 <irq_enter_protection>
   11136:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   11139:	e8 aa ff ff ff       	call   110e8 <task_next_run>
   1113e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task)
   11141:	a1 00 a0 01 00       	mov    0x1a000,%eax
   11146:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11149:	74 2a                	je     11175 <task_dispatch+0x4a>
    {
        task_t *from = task_manager.curr_task;
   1114b:	a1 00 a0 01 00       	mov    0x1a000,%eax
   11150:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;
   11153:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11156:	a3 00 a0 01 00       	mov    %eax,0x1a000
        to->state = TASK_RUNNING;
   1115b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1115e:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   11164:	83 ec 08             	sub    $0x8,%esp
   11167:	ff 75 f0             	pushl  -0x10(%ebp)
   1116a:	ff 75 ec             	pushl  -0x14(%ebp)
   1116d:	e8 d4 fc ff ff       	call   10e46 <task_switch_from_to>
   11172:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   11175:	83 ec 0c             	sub    $0xc,%esp
   11178:	ff 75 f4             	pushl  -0xc(%ebp)
   1117b:	e8 8f 0d 00 00       	call   11f0f <irq_leave_protection>
   11180:	83 c4 10             	add    $0x10,%esp
}
   11183:	90                   	nop
   11184:	c9                   	leave  
   11185:	c3                   	ret    

00011186 <task_time_tick>:
/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick(void)
{
   11186:	55                   	push   %ebp
   11187:	89 e5                	mov    %esp,%ebp
   11189:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   1118c:	e8 ec fe ff ff       	call   1107d <task_current>
   11191:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_state_t state = irq_enter_protection();
   11194:	e8 5e 0d 00 00       	call   11ef7 <irq_enter_protection>
   11199:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0)
   1119c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1119f:	8b 40 30             	mov    0x30(%eax),%eax
   111a2:	8d 50 ff             	lea    -0x1(%eax),%edx
   111a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111a8:	89 50 30             	mov    %edx,0x30(%eax)
   111ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111ae:	8b 40 30             	mov    0x30(%eax),%eax
   111b1:	85 c0                	test   %eax,%eax
   111b3:	75 28                	jne    111dd <task_time_tick+0x57>
    {
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_ticks;
   111b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111b8:	8b 50 2c             	mov    0x2c(%eax),%edx
   111bb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   111be:	89 50 30             	mov    %edx,0x30(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   111c1:	83 ec 0c             	sub    $0xc,%esp
   111c4:	ff 75 f0             	pushl  -0x10(%ebp)
   111c7:	e8 86 fe ff ff       	call   11052 <task_set_block>
   111cc:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   111cf:	83 ec 0c             	sub    $0xc,%esp
   111d2:	ff 75 f0             	pushl  -0x10(%ebp)
   111d5:	e8 44 fe ff ff       	call   1101e <task_set_ready>
   111da:	83 c4 10             	add    $0x10,%esp
    }

    // 睡眠处理
    list_node_t *curr = list_first(&task_manager.sleep_list);
   111dd:	83 ec 0c             	sub    $0xc,%esp
   111e0:	68 1c a0 01 00       	push   $0x1a01c
   111e5:	e8 6f f9 ff ff       	call   10b59 <list_first>
   111ea:	83 c4 10             	add    $0x10,%esp
   111ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   111f0:	eb 62                	jmp    11254 <task_time_tick+0xce>
    {
        list_node_t *next = list_node_next(curr);
   111f2:	83 ec 0c             	sub    $0xc,%esp
   111f5:	ff 75 f4             	pushl  -0xc(%ebp)
   111f8:	e8 46 f9 ff ff       	call   10b43 <list_node_next>
   111fd:	83 c4 10             	add    $0x10,%esp
   11200:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t *task = list_node_parent(curr, task_t, run_node);
   11203:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11207:	74 08                	je     11211 <task_time_tick+0x8b>
   11209:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1120c:	83 e8 34             	sub    $0x34,%eax
   1120f:	eb 05                	jmp    11216 <task_time_tick+0x90>
   11211:	b8 00 00 00 00       	mov    $0x0,%eax
   11216:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   11219:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1121c:	8b 40 28             	mov    0x28(%eax),%eax
   1121f:	8d 50 ff             	lea    -0x1(%eax),%edx
   11222:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11225:	89 50 28             	mov    %edx,0x28(%eax)
   11228:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1122b:	8b 40 28             	mov    0x28(%eax),%eax
   1122e:	85 c0                	test   %eax,%eax
   11230:	75 1c                	jne    1124e <task_time_tick+0xc8>
        {
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   11232:	83 ec 0c             	sub    $0xc,%esp
   11235:	ff 75 e4             	pushl  -0x1c(%ebp)
   11238:	e8 6d 00 00 00       	call   112aa <task_set_wakeup>
   1123d:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11240:	83 ec 0c             	sub    $0xc,%esp
   11243:	ff 75 e4             	pushl  -0x1c(%ebp)
   11246:	e8 d3 fd ff ff       	call   1101e <task_set_ready>
   1124b:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   1124e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11251:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11254:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11258:	75 98                	jne    111f2 <task_time_tick+0x6c>
    }
    task_dispatch();
   1125a:	e8 cc fe ff ff       	call   1112b <task_dispatch>
    irq_leave_protection(state);
   1125f:	83 ec 0c             	sub    $0xc,%esp
   11262:	ff 75 ec             	pushl  -0x14(%ebp)
   11265:	e8 a5 0c 00 00       	call   11f0f <irq_leave_protection>
   1126a:	83 c4 10             	add    $0x10,%esp
}
   1126d:	90                   	nop
   1126e:	c9                   	leave  
   1126f:	c3                   	ret    

00011270 <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   11270:	55                   	push   %ebp
   11271:	89 e5                	mov    %esp,%ebp
   11273:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   11276:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1127a:	74 2b                	je     112a7 <task_set_sleep+0x37>
    {
        return;
    }

    task->sleep_ticks = ticks;
   1127c:	8b 55 0c             	mov    0xc(%ebp),%edx
   1127f:	8b 45 08             	mov    0x8(%ebp),%eax
   11282:	89 50 28             	mov    %edx,0x28(%eax)
    task->state = TASK_SLEEP;
   11285:	8b 45 08             	mov    0x8(%ebp),%eax
   11288:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   1128e:	8b 45 08             	mov    0x8(%ebp),%eax
   11291:	83 c0 34             	add    $0x34,%eax
   11294:	83 ec 08             	sub    $0x8,%esp
   11297:	50                   	push   %eax
   11298:	68 1c a0 01 00       	push   $0x1a01c
   1129d:	e8 f6 18 00 00       	call   12b98 <list_insert_last>
   112a2:	83 c4 10             	add    $0x10,%esp
   112a5:	eb 01                	jmp    112a8 <task_set_sleep+0x38>
        return;
   112a7:	90                   	nop
}
   112a8:	c9                   	leave  
   112a9:	c3                   	ret    

000112aa <task_set_wakeup>:
 * @brief 将任务从延时队列移除
 *
 * @param task
 */
void task_set_wakeup(task_t *task)
{
   112aa:	55                   	push   %ebp
   112ab:	89 e5                	mov    %esp,%ebp
   112ad:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   112b0:	8b 45 08             	mov    0x8(%ebp),%eax
   112b3:	83 c0 34             	add    $0x34,%eax
   112b6:	83 ec 08             	sub    $0x8,%esp
   112b9:	50                   	push   %eax
   112ba:	68 1c a0 01 00       	push   $0x1a01c
   112bf:	e8 b0 19 00 00       	call   12c74 <list_remove>
   112c4:	83 c4 10             	add    $0x10,%esp
}
   112c7:	90                   	nop
   112c8:	c9                   	leave  
   112c9:	c3                   	ret    

000112ca <sys_msleep>:
 * @brief 任务进入睡眠状态
 *
 * @param ms
 */
void sys_msleep(uint32_t ms)
{
   112ca:	55                   	push   %ebp
   112cb:	89 e5                	mov    %esp,%ebp
   112cd:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   112d0:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   112d4:	77 07                	ja     112dd <sys_msleep+0x13>
    {
        ms = OS_TICK_MS;
   112d6:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   112dd:	e8 15 0c 00 00       	call   11ef7 <irq_enter_protection>
   112e2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   112e5:	a1 00 a0 01 00       	mov    0x1a000,%eax
   112ea:	83 ec 0c             	sub    $0xc,%esp
   112ed:	50                   	push   %eax
   112ee:	e8 5f fd ff ff       	call   11052 <task_set_block>
   112f3:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   112f6:	8b 45 08             	mov    0x8(%ebp),%eax
   112f9:	83 c0 09             	add    $0x9,%eax
   112fc:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11301:	f7 e2                	mul    %edx
   11303:	c1 ea 03             	shr    $0x3,%edx
   11306:	a1 00 a0 01 00       	mov    0x1a000,%eax
   1130b:	83 ec 08             	sub    $0x8,%esp
   1130e:	52                   	push   %edx
   1130f:	50                   	push   %eax
   11310:	e8 5b ff ff ff       	call   11270 <task_set_sleep>
   11315:	83 c4 10             	add    $0x10,%esp

    // 进行一次调度
    task_dispatch();
   11318:	e8 0e fe ff ff       	call   1112b <task_dispatch>

    irq_leave_protection(state);
   1131d:	83 ec 0c             	sub    $0xc,%esp
   11320:	ff 75 f4             	pushl  -0xc(%ebp)
   11323:	e8 e7 0b 00 00       	call   11f0f <irq_leave_protection>
   11328:	83 c4 10             	add    $0x10,%esp
}
   1132b:	90                   	nop
   1132c:	c9                   	leave  
   1132d:	c3                   	ret    

0001132e <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid(void)
{
   1132e:	55                   	push   %ebp
   1132f:	89 e5                	mov    %esp,%ebp
   11331:	83 ec 10             	sub    $0x10,%esp
    task_t *curr_task = task_current();
   11334:	e8 44 fd ff ff       	call   1107d <task_current>
   11339:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   1133c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1133f:	8b 40 24             	mov    0x24(%eax),%eax
   11342:	c9                   	leave  
   11343:	c3                   	ret    

00011344 <lgdt>:
{
   11344:	55                   	push   %ebp
   11345:	89 e5                	mov    %esp,%ebp
   11347:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   1134a:	8b 45 08             	mov    0x8(%ebp),%eax
   1134d:	c1 e8 10             	shr    $0x10,%eax
   11350:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   11354:	8b 45 08             	mov    0x8(%ebp),%eax
   11357:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   1135b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1135e:	83 e8 01             	sub    $0x1,%eax
   11361:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   11365:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   11369:	90                   	nop
   1136a:	c9                   	leave  
   1136b:	c3                   	ret    

0001136c <far_jump>:
{
   1136c:	55                   	push   %ebp
   1136d:	89 e5                	mov    %esp,%ebp
   1136f:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   11372:	8b 45 0c             	mov    0xc(%ebp),%eax
   11375:	89 45 f8             	mov    %eax,-0x8(%ebp)
   11378:	8b 45 08             	mov    0x8(%ebp),%eax
   1137b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   1137e:	8d 45 f8             	lea    -0x8(%ebp),%eax
   11381:	ff 28                	ljmp   *(%eax)
}
   11383:	90                   	nop
   11384:	c9                   	leave  
   11385:	c3                   	ret    

00011386 <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   11386:	55                   	push   %ebp
   11387:	89 e5                	mov    %esp,%ebp
   11389:	83 ec 14             	sub    $0x14,%esp
   1138c:	8b 45 14             	mov    0x14(%ebp),%eax
   1138f:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector / sizeof(segment_desc_t)); //
   11393:	8b 45 08             	mov    0x8(%ebp),%eax
   11396:	83 e0 f8             	and    $0xfffffff8,%eax
   11399:	05 a0 a1 01 00       	add    $0x1a1a0,%eax
   1139e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 设置limit单位为4kB
    if (limit > 0xFFFF)
   113a1:	81 7d 10 ff ff 00 00 	cmpl   $0xffff,0x10(%ebp)
   113a8:	76 0f                	jbe    113b9 <segment_desc_set+0x33>
    {
        attr |= SEG_G; // G 标志位
   113aa:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   113b0:	8b 45 10             	mov    0x10(%ebp),%eax
   113b3:	c1 e8 0c             	shr    $0xc,%eax
   113b6:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   113b9:	8b 45 10             	mov    0x10(%ebp),%eax
   113bc:	89 c2                	mov    %eax,%edx
   113be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113c1:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   113c4:	8b 45 0c             	mov    0xc(%ebp),%eax
   113c7:	89 c2                	mov    %eax,%edx
   113c9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113cc:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   113d0:	8b 45 0c             	mov    0xc(%ebp),%eax
   113d3:	c1 e8 10             	shr    $0x10,%eax
   113d6:	89 c2                	mov    %eax,%edx
   113d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113db:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   113de:	8b 45 0c             	mov    0xc(%ebp),%eax
   113e1:	c1 e8 18             	shr    $0x18,%eax
   113e4:	89 c2                	mov    %eax,%edx
   113e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113e9:	88 50 07             	mov    %dl,0x7(%eax)
    desc->attr = attr | (((limit >> 16) & 0xFF) << 8);
   113ec:	8b 45 10             	mov    0x10(%ebp),%eax
   113ef:	c1 e8 10             	shr    $0x10,%eax
   113f2:	c1 e0 08             	shl    $0x8,%eax
   113f5:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   113f9:	89 c2                	mov    %eax,%edx
   113fb:	8b 45 fc             	mov    -0x4(%ebp),%eax
   113fe:	66 89 50 05          	mov    %dx,0x5(%eax)
}
   11402:	90                   	nop
   11403:	c9                   	leave  
   11404:	c3                   	ret    

00011405 <gdt_free_sel>:

void gdt_free_sel(int sel)
{
   11405:	55                   	push   %ebp
   11406:	89 e5                	mov    %esp,%ebp
   11408:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   1140b:	83 ec 0c             	sub    $0xc,%esp
   1140e:	68 a0 a9 01 00       	push   $0x1a9a0
   11413:	e8 ea 0c 00 00       	call   12102 <mutex_lock>
   11418:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   1141b:	8b 45 08             	mov    0x8(%ebp),%eax
   1141e:	c1 e8 03             	shr    $0x3,%eax
   11421:	66 c7 04 c5 a5 a1 01 	movw   $0x0,0x1a1a5(,%eax,8)
   11428:	00 00 00 
    mutex_unlock(&mutex);
   1142b:	83 ec 0c             	sub    $0xc,%esp
   1142e:	68 a0 a9 01 00       	push   $0x1a9a0
   11433:	e8 5e 0d 00 00       	call   12196 <mutex_unlock>
   11438:	83 c4 10             	add    $0x10,%esp
}
   1143b:	90                   	nop
   1143c:	c9                   	leave  
   1143d:	c3                   	ret    

0001143e <get_alloc_desc>:

int get_alloc_desc()
{
   1143e:	55                   	push   %ebp
   1143f:	89 e5                	mov    %esp,%ebp
   11441:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   11444:	83 ec 0c             	sub    $0xc,%esp
   11447:	68 a0 a9 01 00       	push   $0x1a9a0
   1144c:	e8 b1 0c 00 00       	call   12102 <mutex_lock>
   11451:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   11454:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1145b:	eb 36                	jmp    11493 <get_alloc_desc+0x55>
    {
        segment_desc_t *desc = gdt_table + i;
   1145d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11460:	c1 e0 03             	shl    $0x3,%eax
   11463:	05 a0 a1 01 00       	add    $0x1a1a0,%eax
   11468:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) // 根据属性是否为0判断
   1146b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1146e:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   11472:	66 85 c0             	test   %ax,%ax
   11475:	75 18                	jne    1148f <get_alloc_desc+0x51>
        {
            // irq_leave_protection(state);
            mutex_unlock(&mutex);
   11477:	83 ec 0c             	sub    $0xc,%esp
   1147a:	68 a0 a9 01 00       	push   $0x1a9a0
   1147f:	e8 12 0d 00 00       	call   12196 <mutex_unlock>
   11484:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   11487:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1148a:	c1 e0 03             	shl    $0x3,%eax
   1148d:	eb 22                	jmp    114b1 <get_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1148f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11493:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1149a:	7e c1                	jle    1145d <get_alloc_desc+0x1f>
        }
    }
    // irq_leave_protection(state);
    mutex_unlock(&mutex);
   1149c:	83 ec 0c             	sub    $0xc,%esp
   1149f:	68 a0 a9 01 00       	push   $0x1a9a0
   114a4:	e8 ed 0c 00 00       	call   12196 <mutex_unlock>
   114a9:	83 c4 10             	add    $0x10,%esp
    return -1;
   114ac:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   114b1:	c9                   	leave  
   114b2:	c3                   	ret    

000114b3 <init_gdt>:

void init_gdt(void)
{
   114b3:	55                   	push   %ebp
   114b4:	89 e5                	mov    %esp,%ebp
   114b6:	83 ec 18             	sub    $0x18,%esp
    // 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   114b9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   114c0:	eb 19                	jmp    114db <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0); // 找到第几个GDT表项
   114c2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114c5:	c1 e0 03             	shl    $0x3,%eax
   114c8:	6a 00                	push   $0x0
   114ca:	6a 00                	push   $0x0
   114cc:	6a 00                	push   $0x0
   114ce:	50                   	push   %eax
   114cf:	e8 b2 fe ff ff       	call   11386 <segment_desc_set>
   114d4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   114d7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   114db:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   114e2:	7e de                	jle    114c2 <init_gdt+0xf>
    }
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF,
   114e4:	68 92 40 00 00       	push   $0x4092
   114e9:	6a ff                	push   $0xffffffff
   114eb:	6a 00                	push   $0x0
   114ed:	6a 10                	push   $0x10
   114ef:	e8 92 fe ff ff       	call   11386 <segment_desc_set>
   114f4:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF,
   114f7:	68 9a 40 00 00       	push   $0x409a
   114fc:	6a ff                	push   $0xffffffff
   114fe:	6a 00                	push   $0x0
   11500:	6a 08                	push   $0x8
   11502:	e8 7f fe ff ff       	call   11386 <segment_desc_set>
   11507:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   1150a:	ba c7 02 01 00       	mov    $0x102c7,%edx
   1150f:	b8 b8 a1 01 00       	mov    $0x1a1b8,%eax
   11514:	68 05 ec 00 00       	push   $0xec05
   11519:	52                   	push   %edx
   1151a:	6a 08                	push   $0x8
   1151c:	50                   	push   %eax
   1151d:	e8 1c 00 00 00       	call   1153e <gate_desc_set>
   11522:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS,
                  (uint32_t)exception_handler_syscall,
                  GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    // 重新加载GDT
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   11525:	b8 a0 a1 01 00       	mov    $0x1a1a0,%eax
   1152a:	83 ec 08             	sub    $0x8,%esp
   1152d:	68 00 08 00 00       	push   $0x800
   11532:	50                   	push   %eax
   11533:	e8 0c fe ff ff       	call   11344 <lgdt>
   11538:	83 c4 10             	add    $0x10,%esp
}
   1153b:	90                   	nop
   1153c:	c9                   	leave  
   1153d:	c3                   	ret    

0001153e <gate_desc_set>:

void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   1153e:	55                   	push   %ebp
   1153f:	89 e5                	mov    %esp,%ebp
   11541:	83 ec 08             	sub    $0x8,%esp
   11544:	8b 55 0c             	mov    0xc(%ebp),%edx
   11547:	8b 45 14             	mov    0x14(%ebp),%eax
   1154a:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1154e:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   11552:	8b 45 10             	mov    0x10(%ebp),%eax
   11555:	89 c2                	mov    %eax,%edx
   11557:	8b 45 08             	mov    0x8(%ebp),%eax
   1155a:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1155d:	8b 45 08             	mov    0x8(%ebp),%eax
   11560:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11564:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   11568:	8b 45 08             	mov    0x8(%ebp),%eax
   1156b:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   1156f:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFFF;
   11573:	8b 45 10             	mov    0x10(%ebp),%eax
   11576:	c1 e8 10             	shr    $0x10,%eax
   11579:	89 c2                	mov    %eax,%edx
   1157b:	8b 45 08             	mov    0x8(%ebp),%eax
   1157e:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   11582:	90                   	nop
   11583:	c9                   	leave  
   11584:	c3                   	ret    

00011585 <cpu_init>:

void cpu_init(void)
{
   11585:	55                   	push   %ebp
   11586:	89 e5                	mov    %esp,%ebp
   11588:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1158b:	83 ec 0c             	sub    $0xc,%esp
   1158e:	68 a0 a9 01 00       	push   $0x1a9a0
   11593:	e8 3c 0b 00 00       	call   120d4 <mutex_init>
   11598:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1159b:	e8 13 ff ff ff       	call   114b3 <init_gdt>
}
   115a0:	90                   	nop
   115a1:	c9                   	leave  
   115a2:	c3                   	ret    

000115a3 <switch_to_tss>:

void switch_to_tss(uint32_t tss_selector)
{
   115a3:	55                   	push   %ebp
   115a4:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   115a6:	6a 00                	push   $0x0
   115a8:	ff 75 08             	pushl  0x8(%ebp)
   115ab:	e8 bc fd ff ff       	call   1136c <far_jump>
   115b0:	83 c4 08             	add    $0x8,%esp
   115b3:	90                   	nop
   115b4:	c9                   	leave  
   115b5:	c3                   	ret    

000115b6 <inb>:
{
   115b6:	55                   	push   %ebp
   115b7:	89 e5                	mov    %esp,%ebp
   115b9:	83 ec 14             	sub    $0x14,%esp
   115bc:	8b 45 08             	mov    0x8(%ebp),%eax
   115bf:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   115c3:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   115c7:	89 c2                	mov    %eax,%edx
   115c9:	ec                   	in     (%dx),%al
   115ca:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   115cd:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   115d1:	c9                   	leave  
   115d2:	c3                   	ret    

000115d3 <outb>:
{
   115d3:	55                   	push   %ebp
   115d4:	89 e5                	mov    %esp,%ebp
   115d6:	83 ec 08             	sub    $0x8,%esp
   115d9:	8b 55 08             	mov    0x8(%ebp),%edx
   115dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   115df:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   115e3:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   115e6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   115ea:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   115ee:	ee                   	out    %al,(%dx)
}
   115ef:	90                   	nop
   115f0:	c9                   	leave  
   115f1:	c3                   	ret    

000115f2 <cli>:
{
   115f2:	55                   	push   %ebp
   115f3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   115f5:	fa                   	cli    
}
   115f6:	90                   	nop
   115f7:	5d                   	pop    %ebp
   115f8:	c3                   	ret    

000115f9 <sti>:
{
   115f9:	55                   	push   %ebp
   115fa:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   115fc:	fb                   	sti    
}
   115fd:	90                   	nop
   115fe:	5d                   	pop    %ebp
   115ff:	c3                   	ret    

00011600 <lidt>:
{
   11600:	55                   	push   %ebp
   11601:	89 e5                	mov    %esp,%ebp
   11603:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   11606:	8b 45 08             	mov    0x8(%ebp),%eax
   11609:	c1 e8 10             	shr    $0x10,%eax
   1160c:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   11610:	8b 45 08             	mov    0x8(%ebp),%eax
   11613:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   11617:	8b 45 0c             	mov    0xc(%ebp),%eax
   1161a:	83 e8 01             	sub    $0x1,%eax
   1161d:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   11621:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   11625:	90                   	nop
   11626:	c9                   	leave  
   11627:	c3                   	ret    

00011628 <read_cr2>:
{
   11628:	55                   	push   %ebp
   11629:	89 e5                	mov    %esp,%ebp
   1162b:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   1162e:	0f 20 d0             	mov    %cr2,%eax
   11631:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   11634:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11637:	c9                   	leave  
   11638:	c3                   	ret    

00011639 <hlt>:
{
   11639:	55                   	push   %ebp
   1163a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1163c:	f4                   	hlt    
}
   1163d:	90                   	nop
   1163e:	5d                   	pop    %ebp
   1163f:	c3                   	ret    

00011640 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   11640:	55                   	push   %ebp
   11641:	89 e5                	mov    %esp,%ebp
   11643:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax" : "=a"(eflags));
   11646:	9c                   	pushf  
   11647:	58                   	pop    %eax
   11648:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1164b:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1164e:	c9                   	leave  
   1164f:	c3                   	ret    

00011650 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   11650:	55                   	push   %ebp
   11651:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl" ::"a"(eflags));
   11653:	8b 45 08             	mov    0x8(%ebp),%eax
   11656:	50                   	push   %eax
   11657:	9d                   	popf   
}
   11658:	90                   	nop
   11659:	5d                   	pop    %ebp
   1165a:	c3                   	ret    

0001165b <dump_core_regs>:
#define IDT_TABLE_NR 128

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs(exception_frame_t *frame)
{
   1165b:	55                   	push   %ebp
   1165c:	89 e5                	mov    %esp,%ebp
   1165e:	57                   	push   %edi
   1165f:	56                   	push   %esi
   11660:	53                   	push   %ebx
   11661:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t esp, ss;
    if (frame->cs & 0x7)
   11664:	8b 45 08             	mov    0x8(%ebp),%eax
   11667:	8b 40 3c             	mov    0x3c(%eax),%eax
   1166a:	83 e0 07             	and    $0x7,%eax
   1166d:	85 c0                	test   %eax,%eax
   1166f:	74 14                	je     11685 <dump_core_regs+0x2a>
    {
        ss = frame->ds;
   11671:	8b 45 08             	mov    0x8(%ebp),%eax
   11674:	8b 40 0c             	mov    0xc(%eax),%eax
   11677:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1167a:	8b 45 08             	mov    0x8(%ebp),%eax
   1167d:	8b 40 1c             	mov    0x1c(%eax),%eax
   11680:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   11683:	eb 12                	jmp    11697 <dump_core_regs+0x3c>
    }
    else
    {
        ss = frame->ss3;
   11685:	8b 45 08             	mov    0x8(%ebp),%eax
   11688:	8b 40 48             	mov    0x48(%eax),%eax
   1168b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   1168e:	8b 45 08             	mov    0x8(%ebp),%eax
   11691:	8b 40 44             	mov    0x44(%eax),%eax
   11694:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->err_code);
   11697:	8b 45 08             	mov    0x8(%ebp),%eax
   1169a:	8b 50 34             	mov    0x34(%eax),%edx
   1169d:	8b 45 08             	mov    0x8(%ebp),%eax
   116a0:	8b 40 30             	mov    0x30(%eax),%eax
   116a3:	83 ec 04             	sub    $0x4,%esp
   116a6:	52                   	push   %edx
   116a7:	50                   	push   %eax
   116a8:	68 74 32 01 00       	push   $0x13274
   116ad:	e8 fc 16 00 00       	call   12dae <log_printf>
   116b2:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   116b5:	8b 45 08             	mov    0x8(%ebp),%eax
   116b8:	8b 30                	mov    (%eax),%esi
   116ba:	8b 45 08             	mov    0x8(%ebp),%eax
   116bd:	8b 58 04             	mov    0x4(%eax),%ebx
   116c0:	8b 45 08             	mov    0x8(%ebp),%eax
   116c3:	8b 48 08             	mov    0x8(%eax),%ecx
   116c6:	8b 45 08             	mov    0x8(%ebp),%eax
   116c9:	8b 50 0c             	mov    0xc(%eax),%edx
   116cc:	8b 45 08             	mov    0x8(%ebp),%eax
   116cf:	8b 40 3c             	mov    0x3c(%eax),%eax
   116d2:	83 ec 04             	sub    $0x4,%esp
   116d5:	56                   	push   %esi
   116d6:	53                   	push   %ebx
   116d7:	ff 75 e0             	pushl  -0x20(%ebp)
   116da:	51                   	push   %ecx
   116db:	52                   	push   %edx
   116dc:	50                   	push   %eax
   116dd:	68 90 32 01 00       	push   $0x13290
   116e2:	e8 c7 16 00 00       	call   12dae <log_printf>
   116e7:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   116ea:	8b 45 08             	mov    0x8(%ebp),%eax
   116ed:	8b 40 18             	mov    0x18(%eax),%eax
   116f0:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   116f3:	8b 45 08             	mov    0x8(%ebp),%eax
   116f6:	8b 78 14             	mov    0x14(%eax),%edi
   116f9:	8b 45 08             	mov    0x8(%ebp),%eax
   116fc:	8b 70 10             	mov    0x10(%eax),%esi
   116ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11702:	8b 58 24             	mov    0x24(%eax),%ebx
   11705:	8b 45 08             	mov    0x8(%ebp),%eax
   11708:	8b 48 28             	mov    0x28(%eax),%ecx
   1170b:	8b 45 08             	mov    0x8(%ebp),%eax
   1170e:	8b 50 20             	mov    0x20(%eax),%edx
   11711:	8b 45 08             	mov    0x8(%ebp),%eax
   11714:	8b 40 2c             	mov    0x2c(%eax),%eax
   11717:	83 ec 0c             	sub    $0xc,%esp
   1171a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1171d:	ff 75 d4             	pushl  -0x2c(%ebp)
   11720:	57                   	push   %edi
   11721:	56                   	push   %esi
   11722:	53                   	push   %ebx
   11723:	51                   	push   %ecx
   11724:	52                   	push   %edx
   11725:	50                   	push   %eax
   11726:	68 b8 32 01 00       	push   $0x132b8
   1172b:	e8 7e 16 00 00       	call   12dae <log_printf>
   11730:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   11733:	8b 45 08             	mov    0x8(%ebp),%eax
   11736:	8b 50 40             	mov    0x40(%eax),%edx
   11739:	8b 45 08             	mov    0x8(%ebp),%eax
   1173c:	8b 40 38             	mov    0x38(%eax),%eax
   1173f:	83 ec 04             	sub    $0x4,%esp
   11742:	52                   	push   %edx
   11743:	50                   	push   %eax
   11744:	68 01 33 01 00       	push   $0x13301
   11749:	e8 60 16 00 00       	call   12dae <log_printf>
   1174e:	83 c4 10             	add    $0x10,%esp
}
   11751:	90                   	nop
   11752:	8d 65 f4             	lea    -0xc(%ebp),%esp
   11755:	5b                   	pop    %ebx
   11756:	5e                   	pop    %esi
   11757:	5f                   	pop    %edi
   11758:	5d                   	pop    %ebp
   11759:	c3                   	ret    

0001175a <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   1175a:	55                   	push   %ebp
   1175b:	89 e5                	mov    %esp,%ebp
   1175d:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   11760:	83 ec 0c             	sub    $0xc,%esp
   11763:	68 18 33 01 00       	push   $0x13318
   11768:	e8 41 16 00 00       	call   12dae <log_printf>
   1176d:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", msg);
   11770:	83 ec 08             	sub    $0x8,%esp
   11773:	ff 75 0c             	pushl  0xc(%ebp)
   11776:	68 39 33 01 00       	push   $0x13339
   1177b:	e8 2e 16 00 00       	call   12dae <log_printf>
   11780:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame); // 打印寄存器
   11783:	83 ec 0c             	sub    $0xc,%esp
   11786:	ff 75 08             	pushl  0x8(%ebp)
   11789:	e8 cd fe ff ff       	call   1165b <dump_core_regs>
   1178e:	83 c4 10             	add    $0x10,%esp
    log_printf("--------------------------------");
   11791:	83 ec 0c             	sub    $0xc,%esp
   11794:	68 18 33 01 00       	push   $0x13318
   11799:	e8 10 16 00 00       	call   12dae <log_printf>
   1179e:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   117a1:	e8 93 fe ff ff       	call   11639 <hlt>
   117a6:	eb f9                	jmp    117a1 <do_default_handler+0x47>

000117a8 <do_handler_unknown>:
    }
}

void do_handler_unknown(exception_frame_t *frame)
{
   117a8:	55                   	push   %ebp
   117a9:	89 e5                	mov    %esp,%ebp
   117ab:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   117ae:	83 ec 08             	sub    $0x8,%esp
   117b1:	68 54 33 01 00       	push   $0x13354
   117b6:	ff 75 08             	pushl  0x8(%ebp)
   117b9:	e8 9c ff ff ff       	call   1175a <do_default_handler>
   117be:	83 c4 10             	add    $0x10,%esp
}
   117c1:	90                   	nop
   117c2:	c9                   	leave  
   117c3:	c3                   	ret    

000117c4 <do_handler_divider>:

void do_handler_divider(exception_frame_t *frame)
{
   117c4:	55                   	push   %ebp
   117c5:	89 e5                	mov    %esp,%ebp
   117c7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception");
   117ca:	83 ec 08             	sub    $0x8,%esp
   117cd:	68 66 33 01 00       	push   $0x13366
   117d2:	ff 75 08             	pushl  0x8(%ebp)
   117d5:	e8 80 ff ff ff       	call   1175a <do_default_handler>
   117da:	83 c4 10             	add    $0x10,%esp
}
   117dd:	90                   	nop
   117de:	c9                   	leave  
   117df:	c3                   	ret    

000117e0 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t *frame)
{
   117e0:	55                   	push   %ebp
   117e1:	89 e5                	mov    %esp,%ebp
   117e3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   117e6:	83 ec 08             	sub    $0x8,%esp
   117e9:	68 78 33 01 00       	push   $0x13378
   117ee:	ff 75 08             	pushl  0x8(%ebp)
   117f1:	e8 64 ff ff ff       	call   1175a <do_default_handler>
   117f6:	83 c4 10             	add    $0x10,%esp
}
   117f9:	90                   	nop
   117fa:	c9                   	leave  
   117fb:	c3                   	ret    

000117fc <do_handler_NMI>:

void do_handler_NMI(exception_frame_t *frame)
{
   117fc:	55                   	push   %ebp
   117fd:	89 e5                	mov    %esp,%ebp
   117ff:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   11802:	83 ec 08             	sub    $0x8,%esp
   11805:	68 88 33 01 00       	push   $0x13388
   1180a:	ff 75 08             	pushl  0x8(%ebp)
   1180d:	e8 48 ff ff ff       	call   1175a <do_default_handler>
   11812:	83 c4 10             	add    $0x10,%esp
}
   11815:	90                   	nop
   11816:	c9                   	leave  
   11817:	c3                   	ret    

00011818 <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t *frame)
{
   11818:	55                   	push   %ebp
   11819:	89 e5                	mov    %esp,%ebp
   1181b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   1181e:	83 ec 08             	sub    $0x8,%esp
   11821:	68 97 33 01 00       	push   $0x13397
   11826:	ff 75 08             	pushl  0x8(%ebp)
   11829:	e8 2c ff ff ff       	call   1175a <do_default_handler>
   1182e:	83 c4 10             	add    $0x10,%esp
}
   11831:	90                   	nop
   11832:	c9                   	leave  
   11833:	c3                   	ret    

00011834 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t *frame)
{
   11834:	55                   	push   %ebp
   11835:	89 e5                	mov    %esp,%ebp
   11837:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   1183a:	83 ec 08             	sub    $0x8,%esp
   1183d:	68 a3 33 01 00       	push   $0x133a3
   11842:	ff 75 08             	pushl  0x8(%ebp)
   11845:	e8 10 ff ff ff       	call   1175a <do_default_handler>
   1184a:	83 c4 10             	add    $0x10,%esp
}
   1184d:	90                   	nop
   1184e:	c9                   	leave  
   1184f:	c3                   	ret    

00011850 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t *frame)
{
   11850:	55                   	push   %ebp
   11851:	89 e5                	mov    %esp,%ebp
   11853:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   11856:	83 ec 08             	sub    $0x8,%esp
   11859:	68 ad 33 01 00       	push   $0x133ad
   1185e:	ff 75 08             	pushl  0x8(%ebp)
   11861:	e8 f4 fe ff ff       	call   1175a <do_default_handler>
   11866:	83 c4 10             	add    $0x10,%esp
}
   11869:	90                   	nop
   1186a:	c9                   	leave  
   1186b:	c3                   	ret    

0001186c <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t *frame)
{
   1186c:	55                   	push   %ebp
   1186d:	89 e5                	mov    %esp,%ebp
   1186f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   11872:	83 ec 08             	sub    $0x8,%esp
   11875:	68 c3 33 01 00       	push   $0x133c3
   1187a:	ff 75 08             	pushl  0x8(%ebp)
   1187d:	e8 d8 fe ff ff       	call   1175a <do_default_handler>
   11882:	83 c4 10             	add    $0x10,%esp
}
   11885:	90                   	nop
   11886:	c9                   	leave  
   11887:	c3                   	ret    

00011888 <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t *frame)
{
   11888:	55                   	push   %ebp
   11889:	89 e5                	mov    %esp,%ebp
   1188b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   1188e:	83 ec 08             	sub    $0x8,%esp
   11891:	68 d3 33 01 00       	push   $0x133d3
   11896:	ff 75 08             	pushl  0x8(%ebp)
   11899:	e8 bc fe ff ff       	call   1175a <do_default_handler>
   1189e:	83 c4 10             	add    $0x10,%esp
}
   118a1:	90                   	nop
   118a2:	c9                   	leave  
   118a3:	c3                   	ret    

000118a4 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t *frame)
{
   118a4:	55                   	push   %ebp
   118a5:	89 e5                	mov    %esp,%ebp
   118a7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   118aa:	83 ec 08             	sub    $0x8,%esp
   118ad:	68 e9 33 01 00       	push   $0x133e9
   118b2:	ff 75 08             	pushl  0x8(%ebp)
   118b5:	e8 a0 fe ff ff       	call   1175a <do_default_handler>
   118ba:	83 c4 10             	add    $0x10,%esp
}
   118bd:	90                   	nop
   118be:	c9                   	leave  
   118bf:	c3                   	ret    

000118c0 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t *frame)
{
   118c0:	55                   	push   %ebp
   118c1:	89 e5                	mov    %esp,%ebp
   118c3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   118c6:	83 ec 08             	sub    $0x8,%esp
   118c9:	68 f7 33 01 00       	push   $0x133f7
   118ce:	ff 75 08             	pushl  0x8(%ebp)
   118d1:	e8 84 fe ff ff       	call   1175a <do_default_handler>
   118d6:	83 c4 10             	add    $0x10,%esp
}
   118d9:	90                   	nop
   118da:	c9                   	leave  
   118db:	c3                   	ret    

000118dc <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t *frame)
{
   118dc:	55                   	push   %ebp
   118dd:	89 e5                	mov    %esp,%ebp
   118df:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   118e2:	83 ec 08             	sub    $0x8,%esp
   118e5:	68 03 34 01 00       	push   $0x13403
   118ea:	ff 75 08             	pushl  0x8(%ebp)
   118ed:	e8 68 fe ff ff       	call   1175a <do_default_handler>
   118f2:	83 c4 10             	add    $0x10,%esp
}
   118f5:	90                   	nop
   118f6:	c9                   	leave  
   118f7:	c3                   	ret    

000118f8 <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   118f8:	55                   	push   %ebp
   118f9:	89 e5                	mov    %esp,%ebp
   118fb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   118fe:	83 ec 08             	sub    $0x8,%esp
   11901:	68 18 34 01 00       	push   $0x13418
   11906:	ff 75 08             	pushl  0x8(%ebp)
   11909:	e8 4c fe ff ff       	call   1175a <do_default_handler>
   1190e:	83 c4 10             	add    $0x10,%esp
}
   11911:	90                   	nop
   11912:	c9                   	leave  
   11913:	c3                   	ret    

00011914 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   11914:	55                   	push   %ebp
   11915:	89 e5                	mov    %esp,%ebp
   11917:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   1191a:	83 ec 08             	sub    $0x8,%esp
   1191d:	68 2d 34 01 00       	push   $0x1342d
   11922:	ff 75 08             	pushl  0x8(%ebp)
   11925:	e8 30 fe ff ff       	call   1175a <do_default_handler>
   1192a:	83 c4 10             	add    $0x10,%esp
}
   1192d:	90                   	nop
   1192e:	c9                   	leave  
   1192f:	c3                   	ret    

00011930 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   11930:	55                   	push   %ebp
   11931:	89 e5                	mov    %esp,%ebp
   11933:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   11936:	83 ec 08             	sub    $0x8,%esp
   11939:	68 4b 34 01 00       	push   $0x1344b
   1193e:	ff 75 08             	pushl  0x8(%ebp)
   11941:	e8 14 fe ff ff       	call   1175a <do_default_handler>
   11946:	83 c4 10             	add    $0x10,%esp
}
   11949:	90                   	nop
   1194a:	c9                   	leave  
   1194b:	c3                   	ret    

0001194c <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   1194c:	55                   	push   %ebp
   1194d:	89 e5                	mov    %esp,%ebp
   1194f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   11952:	83 ec 08             	sub    $0x8,%esp
   11955:	68 5c 34 01 00       	push   $0x1345c
   1195a:	ff 75 08             	pushl  0x8(%ebp)
   1195d:	e8 f8 fd ff ff       	call   1175a <do_default_handler>
   11962:	83 c4 10             	add    $0x10,%esp
}
   11965:	90                   	nop
   11966:	c9                   	leave  
   11967:	c3                   	ret    

00011968 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   11968:	55                   	push   %ebp
   11969:	89 e5                	mov    %esp,%ebp
   1196b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   1196e:	83 ec 08             	sub    $0x8,%esp
   11971:	68 6c 34 01 00       	push   $0x1346c
   11976:	ff 75 08             	pushl  0x8(%ebp)
   11979:	e8 dc fd ff ff       	call   1175a <do_default_handler>
   1197e:	83 c4 10             	add    $0x10,%esp
}
   11981:	90                   	nop
   11982:	c9                   	leave  
   11983:	c3                   	ret    

00011984 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   11984:	55                   	push   %ebp
   11985:	89 e5                	mov    %esp,%ebp
   11987:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   1198a:	83 ec 08             	sub    $0x8,%esp
   1198d:	68 8b 34 01 00       	push   $0x1348b
   11992:	ff 75 08             	pushl  0x8(%ebp)
   11995:	e8 c0 fd ff ff       	call   1175a <do_default_handler>
   1199a:	83 c4 10             	add    $0x10,%esp
}
   1199d:	90                   	nop
   1199e:	c9                   	leave  
   1199f:	c3                   	ret    

000119a0 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   119a0:	55                   	push   %ebp
   119a1:	89 e5                	mov    %esp,%ebp
   119a3:	83 ec 08             	sub    $0x8,%esp
    // do_default_handler(frame, "General_protection Exception.");
    log_printf("--------------------------------");
   119a6:	83 ec 0c             	sub    $0xc,%esp
   119a9:	68 18 33 01 00       	push   $0x13318
   119ae:	e8 fb 13 00 00       	call   12dae <log_printf>
   119b3:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   119b6:	83 ec 0c             	sub    $0xc,%esp
   119b9:	68 a8 34 01 00       	push   $0x134a8
   119be:	e8 eb 13 00 00       	call   12dae <log_printf>
   119c3:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_EXT)
   119c6:	8b 45 08             	mov    0x8(%ebp),%eax
   119c9:	8b 40 34             	mov    0x34(%eax),%eax
   119cc:	83 e0 01             	and    $0x1,%eax
   119cf:	85 c0                	test   %eax,%eax
   119d1:	74 12                	je     119e5 <do_handler_general_protection+0x45>
    {
        log_printf("the exception occurred during delivery of an "
   119d3:	83 ec 0c             	sub    $0xc,%esp
   119d6:	68 d4 34 01 00       	push   $0x134d4
   119db:	e8 ce 13 00 00       	call   12dae <log_printf>
   119e0:	83 c4 10             	add    $0x10,%esp
   119e3:	eb 10                	jmp    119f5 <do_handler_general_protection+0x55>
                   "event external to the program, such as an interrupt"
                   "or an earlier exception.");
    }
    else
    {
        log_printf("the exception occurred during delivery of a"
   119e5:	83 ec 0c             	sub    $0xc,%esp
   119e8:	68 50 35 01 00       	push   $0x13550
   119ed:	e8 bc 13 00 00       	call   12dae <log_printf>
   119f2:	83 c4 10             	add    $0x10,%esp
                   "software interrupt (INT n, INT3, or INTO).");
    }

    if (frame->err_code & ERR_IDT)
   119f5:	8b 45 08             	mov    0x8(%ebp),%eax
   119f8:	8b 40 34             	mov    0x34(%eax),%eax
   119fb:	83 e0 02             	and    $0x2,%eax
   119fe:	85 c0                	test   %eax,%eax
   11a00:	74 12                	je     11a14 <do_handler_general_protection+0x74>
    {
        log_printf("the index portion of the error code refers "
   11a02:	83 ec 0c             	sub    $0xc,%esp
   11a05:	68 a8 35 01 00       	push   $0x135a8
   11a0a:	e8 9f 13 00 00       	call   12dae <log_printf>
   11a0f:	83 c4 10             	add    $0x10,%esp
   11a12:	eb 10                	jmp    11a24 <do_handler_general_protection+0x84>
                   "to a gate descriptor in the IDT");
    }
    else
    {
        log_printf("the index refers to a descriptor in the GDT");
   11a14:	83 ec 0c             	sub    $0xc,%esp
   11a17:	68 f4 35 01 00       	push   $0x135f4
   11a1c:	e8 8d 13 00 00       	call   12dae <log_printf>
   11a21:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("segment index: %d", frame->err_code & 0xFFF8);
   11a24:	8b 45 08             	mov    0x8(%ebp),%eax
   11a27:	8b 40 34             	mov    0x34(%eax),%eax
   11a2a:	25 f8 ff 00 00       	and    $0xfff8,%eax
   11a2f:	83 ec 08             	sub    $0x8,%esp
   11a32:	50                   	push   %eax
   11a33:	68 20 36 01 00       	push   $0x13620
   11a38:	e8 71 13 00 00       	call   12dae <log_printf>
   11a3d:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   11a40:	83 ec 0c             	sub    $0xc,%esp
   11a43:	ff 75 08             	pushl  0x8(%ebp)
   11a46:	e8 10 fc ff ff       	call   1165b <dump_core_regs>
   11a4b:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   11a4e:	e8 e6 fb ff ff       	call   11639 <hlt>
   11a53:	eb f9                	jmp    11a4e <do_handler_general_protection+0xae>

00011a55 <do_handler_page_fault>:
    //     }
    // }
}

void do_handler_page_fault(exception_frame_t *frame)
{
   11a55:	55                   	push   %ebp
   11a56:	89 e5                	mov    %esp,%ebp
   11a58:	83 ec 08             	sub    $0x8,%esp

    log_printf("--------------------------------");
   11a5b:	83 ec 0c             	sub    $0xc,%esp
   11a5e:	68 18 33 01 00       	push   $0x13318
   11a63:	e8 46 13 00 00       	call   12dae <log_printf>
   11a68:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   11a6b:	83 ec 0c             	sub    $0xc,%esp
   11a6e:	68 34 36 01 00       	push   $0x13634
   11a73:	e8 36 13 00 00       	call   12dae <log_printf>
   11a78:	83 c4 10             	add    $0x10,%esp
    // do_default_handler(frame, "Page_fault Exception.");
    if (frame->err_code & ERR_PAGE_P)
   11a7b:	8b 45 08             	mov    0x8(%ebp),%eax
   11a7e:	8b 40 34             	mov    0x34(%eax),%eax
   11a81:	83 e0 01             	and    $0x1,%eax
   11a84:	85 c0                	test   %eax,%eax
   11a86:	74 18                	je     11aa0 <do_handler_page_fault+0x4b>
    {
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   11a88:	e8 9b fb ff ff       	call   11628 <read_cr2>
   11a8d:	83 ec 08             	sub    $0x8,%esp
   11a90:	50                   	push   %eax
   11a91:	68 58 36 01 00       	push   $0x13658
   11a96:	e8 13 13 00 00       	call   12dae <log_printf>
   11a9b:	83 c4 10             	add    $0x10,%esp
   11a9e:	eb 16                	jmp    11ab6 <do_handler_page_fault+0x61>
    }
    else
    {
        log_printf("\tPage doesn't present 0x%x", read_cr2());
   11aa0:	e8 83 fb ff ff       	call   11628 <read_cr2>
   11aa5:	83 ec 08             	sub    $0x8,%esp
   11aa8:	50                   	push   %eax
   11aa9:	68 80 36 01 00       	push   $0x13680
   11aae:	e8 fb 12 00 00       	call   12dae <log_printf>
   11ab3:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_WR)
   11ab6:	8b 45 08             	mov    0x8(%ebp),%eax
   11ab9:	8b 40 34             	mov    0x34(%eax),%eax
   11abc:	83 e0 02             	and    $0x2,%eax
   11abf:	85 c0                	test   %eax,%eax
   11ac1:	74 12                	je     11ad5 <do_handler_page_fault+0x80>
    {
        log_printf("\tThe access causing the fault was a read.");
   11ac3:	83 ec 0c             	sub    $0xc,%esp
   11ac6:	68 9c 36 01 00       	push   $0x1369c
   11acb:	e8 de 12 00 00       	call   12dae <log_printf>
   11ad0:	83 c4 10             	add    $0x10,%esp
   11ad3:	eb 10                	jmp    11ae5 <do_handler_page_fault+0x90>
    }
    else
    {
        log_printf("\tThe access causing the fault was a write.");
   11ad5:	83 ec 0c             	sub    $0xc,%esp
   11ad8:	68 c8 36 01 00       	push   $0x136c8
   11add:	e8 cc 12 00 00       	call   12dae <log_printf>
   11ae2:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_US)
   11ae5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ae8:	8b 40 34             	mov    0x34(%eax),%eax
   11aeb:	83 e0 02             	and    $0x2,%eax
   11aee:	85 c0                	test   %eax,%eax
   11af0:	74 12                	je     11b04 <do_handler_page_fault+0xaf>
    {
        log_printf("\tA supervisor-mode access caused the fault.");
   11af2:	83 ec 0c             	sub    $0xc,%esp
   11af5:	68 f4 36 01 00       	push   $0x136f4
   11afa:	e8 af 12 00 00       	call   12dae <log_printf>
   11aff:	83 c4 10             	add    $0x10,%esp
   11b02:	eb 10                	jmp    11b14 <do_handler_page_fault+0xbf>
    }
    else
    {
        log_printf("\tA user-mode access caused the fault.");
   11b04:	83 ec 0c             	sub    $0xc,%esp
   11b07:	68 20 37 01 00       	push   $0x13720
   11b0c:	e8 9d 12 00 00       	call   12dae <log_printf>
   11b11:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   11b14:	83 ec 0c             	sub    $0xc,%esp
   11b17:	ff 75 08             	pushl  0x8(%ebp)
   11b1a:	e8 3c fb ff ff       	call   1165b <dump_core_regs>
   11b1f:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   11b22:	e8 12 fb ff ff       	call   11639 <hlt>
   11b27:	eb f9                	jmp    11b22 <do_handler_page_fault+0xcd>

00011b29 <init_pic>:
    //     }
    // }
}

static void init_pic(void)
{
   11b29:	55                   	push   %ebp
   11b2a:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   11b2c:	6a 11                	push   $0x11
   11b2e:	6a 20                	push   $0x20
   11b30:	e8 9e fa ff ff       	call   115d3 <outb>
   11b35:	83 c4 08             	add    $0x8,%esp
    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   11b38:	6a 20                	push   $0x20
   11b3a:	6a 21                	push   $0x21
   11b3c:	e8 92 fa ff ff       	call   115d3 <outb>
   11b41:	83 c4 08             	add    $0x8,%esp
    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   11b44:	6a 04                	push   $0x4
   11b46:	6a 21                	push   $0x21
   11b48:	e8 86 fa ff ff       	call   115d3 <outb>
   11b4d:	83 c4 08             	add    $0x8,%esp
    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   11b50:	6a 01                	push   $0x1
   11b52:	6a 21                	push   $0x21
   11b54:	e8 7a fa ff ff       	call   115d3 <outb>
   11b59:	83 c4 08             	add    $0x8,%esp

    // 第二块芯片
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   11b5c:	6a 11                	push   $0x11
   11b5e:	68 a0 00 00 00       	push   $0xa0
   11b63:	e8 6b fa ff ff       	call   115d3 <outb>
   11b68:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   11b6b:	6a 28                	push   $0x28
   11b6d:	68 a1 00 00 00       	push   $0xa1
   11b72:	e8 5c fa ff ff       	call   115d3 <outb>
   11b77:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   11b7a:	6a 02                	push   $0x2
   11b7c:	68 a1 00 00 00       	push   $0xa1
   11b81:	e8 4d fa ff ff       	call   115d3 <outb>
   11b86:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   11b89:	6a 01                	push   $0x1
   11b8b:	68 a1 00 00 00       	push   $0xa1
   11b90:	e8 3e fa ff ff       	call   115d3 <outb>
   11b95:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   11b98:	68 fb 00 00 00       	push   $0xfb
   11b9d:	6a 21                	push   $0x21
   11b9f:	e8 2f fa ff ff       	call   115d3 <outb>
   11ba4:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   11ba7:	68 ff 00 00 00       	push   $0xff
   11bac:	68 a1 00 00 00       	push   $0xa1
   11bb1:	e8 1d fa ff ff       	call   115d3 <outb>
   11bb6:	83 c4 08             	add    $0x8,%esp
}
   11bb9:	90                   	nop
   11bba:	c9                   	leave  
   11bbb:	c3                   	ret    

00011bbc <irq_init>:

void irq_init(void)
{
   11bbc:	55                   	push   %ebp
   11bbd:	89 e5                	mov    %esp,%ebp
   11bbf:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   11bc2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11bc9:	eb 25                	jmp    11bf0 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   11bcb:	ba 35 00 01 00       	mov    $0x10035,%edx
   11bd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11bd3:	c1 e0 03             	shl    $0x3,%eax
   11bd6:	05 c0 a9 01 00       	add    $0x1a9c0,%eax
   11bdb:	68 00 8e 00 00       	push   $0x8e00
   11be0:	52                   	push   %edx
   11be1:	6a 08                	push   $0x8
   11be3:	50                   	push   %eax
   11be4:	e8 55 f9 ff ff       	call   1153e <gate_desc_set>
   11be9:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   11bec:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11bf0:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11bf4:	7e d5                	jle    11bcb <irq_init+0xf>
    }
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   11bf6:	83 ec 08             	sub    $0x8,%esp
   11bf9:	68 54 00 01 00       	push   $0x10054
   11bfe:	6a 00                	push   $0x0
   11c00:	e8 65 01 00 00       	call   11d6a <irq_install>
   11c05:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   11c08:	83 ec 08             	sub    $0x8,%esp
   11c0b:	68 73 00 01 00       	push   $0x10073
   11c10:	6a 01                	push   $0x1
   11c12:	e8 53 01 00 00       	call   11d6a <irq_install>
   11c17:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   11c1a:	83 ec 08             	sub    $0x8,%esp
   11c1d:	68 92 00 01 00       	push   $0x10092
   11c22:	6a 02                	push   $0x2
   11c24:	e8 41 01 00 00       	call   11d6a <irq_install>
   11c29:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   11c2c:	83 ec 08             	sub    $0x8,%esp
   11c2f:	68 b1 00 01 00       	push   $0x100b1
   11c34:	6a 03                	push   $0x3
   11c36:	e8 2f 01 00 00       	call   11d6a <irq_install>
   11c3b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   11c3e:	83 ec 08             	sub    $0x8,%esp
   11c41:	68 d0 00 01 00       	push   $0x100d0
   11c46:	6a 04                	push   $0x4
   11c48:	e8 1d 01 00 00       	call   11d6a <irq_install>
   11c4d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   11c50:	83 ec 08             	sub    $0x8,%esp
   11c53:	68 ef 00 01 00       	push   $0x100ef
   11c58:	6a 05                	push   $0x5
   11c5a:	e8 0b 01 00 00       	call   11d6a <irq_install>
   11c5f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   11c62:	83 ec 08             	sub    $0x8,%esp
   11c65:	68 0e 01 01 00       	push   $0x1010e
   11c6a:	6a 06                	push   $0x6
   11c6c:	e8 f9 00 00 00       	call   11d6a <irq_install>
   11c71:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   11c74:	83 ec 08             	sub    $0x8,%esp
   11c77:	68 2d 01 01 00       	push   $0x1012d
   11c7c:	6a 07                	push   $0x7
   11c7e:	e8 e7 00 00 00       	call   11d6a <irq_install>
   11c83:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   11c86:	83 ec 08             	sub    $0x8,%esp
   11c89:	68 4c 01 01 00       	push   $0x1014c
   11c8e:	6a 08                	push   $0x8
   11c90:	e8 d5 00 00 00       	call   11d6a <irq_install>
   11c95:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   11c98:	83 ec 08             	sub    $0x8,%esp
   11c9b:	68 69 01 01 00       	push   $0x10169
   11ca0:	6a 0a                	push   $0xa
   11ca2:	e8 c3 00 00 00       	call   11d6a <irq_install>
   11ca7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   11caa:	83 ec 08             	sub    $0x8,%esp
   11cad:	68 86 01 01 00       	push   $0x10186
   11cb2:	6a 0b                	push   $0xb
   11cb4:	e8 b1 00 00 00       	call   11d6a <irq_install>
   11cb9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   11cbc:	83 ec 08             	sub    $0x8,%esp
   11cbf:	68 a3 01 01 00       	push   $0x101a3
   11cc4:	6a 0c                	push   $0xc
   11cc6:	e8 9f 00 00 00       	call   11d6a <irq_install>
   11ccb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   11cce:	83 ec 08             	sub    $0x8,%esp
   11cd1:	68 c0 01 01 00       	push   $0x101c0
   11cd6:	6a 0d                	push   $0xd
   11cd8:	e8 8d 00 00 00       	call   11d6a <irq_install>
   11cdd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   11ce0:	83 ec 08             	sub    $0x8,%esp
   11ce3:	68 dd 01 01 00       	push   $0x101dd
   11ce8:	6a 0e                	push   $0xe
   11cea:	e8 7b 00 00 00       	call   11d6a <irq_install>
   11cef:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   11cf2:	83 ec 08             	sub    $0x8,%esp
   11cf5:	68 fa 01 01 00       	push   $0x101fa
   11cfa:	6a 10                	push   $0x10
   11cfc:	e8 69 00 00 00       	call   11d6a <irq_install>
   11d01:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   11d04:	83 ec 08             	sub    $0x8,%esp
   11d07:	68 19 02 01 00       	push   $0x10219
   11d0c:	6a 11                	push   $0x11
   11d0e:	e8 57 00 00 00       	call   11d6a <irq_install>
   11d13:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   11d16:	83 ec 08             	sub    $0x8,%esp
   11d19:	68 36 02 01 00       	push   $0x10236
   11d1e:	6a 12                	push   $0x12
   11d20:	e8 45 00 00 00       	call   11d6a <irq_install>
   11d25:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   11d28:	83 ec 08             	sub    $0x8,%esp
   11d2b:	68 55 02 01 00       	push   $0x10255
   11d30:	6a 13                	push   $0x13
   11d32:	e8 33 00 00 00       	call   11d6a <irq_install>
   11d37:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   11d3a:	83 ec 08             	sub    $0x8,%esp
   11d3d:	68 74 02 01 00       	push   $0x10274
   11d42:	6a 14                	push   $0x14
   11d44:	e8 21 00 00 00       	call   11d6a <irq_install>
   11d49:	83 c4 10             	add    $0x10,%esp
    lidt((uint32_t)idt_table, sizeof(idt_table));
   11d4c:	b8 c0 a9 01 00       	mov    $0x1a9c0,%eax
   11d51:	83 ec 08             	sub    $0x8,%esp
   11d54:	68 00 04 00 00       	push   $0x400
   11d59:	50                   	push   %eax
   11d5a:	e8 a1 f8 ff ff       	call   11600 <lidt>
   11d5f:	83 c4 10             	add    $0x10,%esp

    init_pic();
   11d62:	e8 c2 fd ff ff       	call   11b29 <init_pic>
}
   11d67:	90                   	nop
   11d68:	c9                   	leave  
   11d69:	c3                   	ret    

00011d6a <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   11d6a:	55                   	push   %ebp
   11d6b:	89 e5                	mov    %esp,%ebp
   11d6d:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   11d70:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11d74:	7e 07                	jle    11d7d <irq_install+0x13>
    {
        return -1;
   11d76:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d7b:	eb 25                	jmp    11da2 <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   11d7d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11d80:	8b 55 08             	mov    0x8(%ebp),%edx
   11d83:	c1 e2 03             	shl    $0x3,%edx
   11d86:	81 c2 c0 a9 01 00    	add    $0x1a9c0,%edx
   11d8c:	68 00 8e 00 00       	push   $0x8e00
   11d91:	50                   	push   %eax
   11d92:	6a 08                	push   $0x8
   11d94:	52                   	push   %edx
   11d95:	e8 a4 f7 ff ff       	call   1153e <gate_desc_set>
   11d9a:	83 c4 10             	add    $0x10,%esp
    return 0;
   11d9d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11da2:	c9                   	leave  
   11da3:	c3                   	ret    

00011da4 <irq_enable>:

void irq_enable(int irq_num)
{
   11da4:	55                   	push   %ebp
   11da5:	89 e5                	mov    %esp,%ebp
   11da7:	53                   	push   %ebx
   11da8:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   11dab:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11daf:	7e 78                	jle    11e29 <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   11db1:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11db5:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11db9:	7f 32                	jg     11ded <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   11dbb:	6a 21                	push   $0x21
   11dbd:	e8 f4 f7 ff ff       	call   115b6 <inb>
   11dc2:	83 c4 04             	add    $0x4,%esp
   11dc5:	89 c2                	mov    %eax,%edx
   11dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dca:	bb 01 00 00 00       	mov    $0x1,%ebx
   11dcf:	89 c1                	mov    %eax,%ecx
   11dd1:	d3 e3                	shl    %cl,%ebx
   11dd3:	89 d8                	mov    %ebx,%eax
   11dd5:	f7 d0                	not    %eax
   11dd7:	21 d0                	and    %edx,%eax
   11dd9:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11ddc:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11de0:	50                   	push   %eax
   11de1:	6a 21                	push   $0x21
   11de3:	e8 eb f7 ff ff       	call   115d3 <outb>
   11de8:	83 c4 08             	add    $0x8,%esp
   11deb:	eb 3d                	jmp    11e2a <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   11ded:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   11df1:	68 a1 00 00 00       	push   $0xa1
   11df6:	e8 bb f7 ff ff       	call   115b6 <inb>
   11dfb:	83 c4 04             	add    $0x4,%esp
   11dfe:	89 c2                	mov    %eax,%edx
   11e00:	8b 45 08             	mov    0x8(%ebp),%eax
   11e03:	bb 01 00 00 00       	mov    $0x1,%ebx
   11e08:	89 c1                	mov    %eax,%ecx
   11e0a:	d3 e3                	shl    %cl,%ebx
   11e0c:	89 d8                	mov    %ebx,%eax
   11e0e:	f7 d0                	not    %eax
   11e10:	21 d0                	and    %edx,%eax
   11e12:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11e15:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11e19:	50                   	push   %eax
   11e1a:	68 a1 00 00 00       	push   $0xa1
   11e1f:	e8 af f7 ff ff       	call   115d3 <outb>
   11e24:	83 c4 08             	add    $0x8,%esp
   11e27:	eb 01                	jmp    11e2a <irq_enable+0x86>
        return;
   11e29:	90                   	nop
    }
}
   11e2a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11e2d:	c9                   	leave  
   11e2e:	c3                   	ret    

00011e2f <irq_disable>:

void irq_disable(int irq_num)
{
   11e2f:	55                   	push   %ebp
   11e30:	89 e5                	mov    %esp,%ebp
   11e32:	53                   	push   %ebx
   11e33:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   11e36:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   11e3a:	7e 74                	jle    11eb0 <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   11e3c:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   11e40:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11e44:	7f 30                	jg     11e76 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   11e46:	6a 21                	push   $0x21
   11e48:	e8 69 f7 ff ff       	call   115b6 <inb>
   11e4d:	83 c4 04             	add    $0x4,%esp
   11e50:	89 c3                	mov    %eax,%ebx
   11e52:	8b 45 08             	mov    0x8(%ebp),%eax
   11e55:	ba 01 00 00 00       	mov    $0x1,%edx
   11e5a:	89 c1                	mov    %eax,%ecx
   11e5c:	d3 e2                	shl    %cl,%edx
   11e5e:	89 d0                	mov    %edx,%eax
   11e60:	09 d8                	or     %ebx,%eax
   11e62:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   11e65:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   11e69:	50                   	push   %eax
   11e6a:	6a 21                	push   $0x21
   11e6c:	e8 62 f7 ff ff       	call   115d3 <outb>
   11e71:	83 c4 08             	add    $0x8,%esp
   11e74:	eb 3b                	jmp    11eb1 <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   11e76:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   11e7a:	68 a1 00 00 00       	push   $0xa1
   11e7f:	e8 32 f7 ff ff       	call   115b6 <inb>
   11e84:	83 c4 04             	add    $0x4,%esp
   11e87:	89 c3                	mov    %eax,%ebx
   11e89:	8b 45 08             	mov    0x8(%ebp),%eax
   11e8c:	ba 01 00 00 00       	mov    $0x1,%edx
   11e91:	89 c1                	mov    %eax,%ecx
   11e93:	d3 e2                	shl    %cl,%edx
   11e95:	89 d0                	mov    %edx,%eax
   11e97:	09 d8                	or     %ebx,%eax
   11e99:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   11e9c:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   11ea0:	50                   	push   %eax
   11ea1:	68 a1 00 00 00       	push   $0xa1
   11ea6:	e8 28 f7 ff ff       	call   115d3 <outb>
   11eab:	83 c4 08             	add    $0x8,%esp
   11eae:	eb 01                	jmp    11eb1 <irq_disable+0x82>
        return;
   11eb0:	90                   	nop
    }
}
   11eb1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   11eb4:	c9                   	leave  
   11eb5:	c3                   	ret    

00011eb6 <irq_disable_global>:

void irq_disable_global(void)
{
   11eb6:	55                   	push   %ebp
   11eb7:	89 e5                	mov    %esp,%ebp
    cli();
   11eb9:	e8 34 f7 ff ff       	call   115f2 <cli>
}
   11ebe:	90                   	nop
   11ebf:	5d                   	pop    %ebp
   11ec0:	c3                   	ret    

00011ec1 <irq_enable_global>:

void irq_enable_global(void)
{
   11ec1:	55                   	push   %ebp
   11ec2:	89 e5                	mov    %esp,%ebp
    sti();
   11ec4:	e8 30 f7 ff ff       	call   115f9 <sti>
}
   11ec9:	90                   	nop
   11eca:	5d                   	pop    %ebp
   11ecb:	c3                   	ret    

00011ecc <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   11ecc:	55                   	push   %ebp
   11ecd:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   11ecf:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    // 从片也可能需要发送EOI
    if (irq_num >= 8)
   11ed3:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   11ed7:	7e 0f                	jle    11ee8 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   11ed9:	6a 20                	push   $0x20
   11edb:	68 a0 00 00 00       	push   $0xa0
   11ee0:	e8 ee f6 ff ff       	call   115d3 <outb>
   11ee5:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   11ee8:	6a 20                	push   $0x20
   11eea:	6a 20                	push   $0x20
   11eec:	e8 e2 f6 ff ff       	call   115d3 <outb>
   11ef1:	83 c4 08             	add    $0x8,%esp
}
   11ef4:	90                   	nop
   11ef5:	c9                   	leave  
   11ef6:	c3                   	ret    

00011ef7 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection(void)
{
   11ef7:	55                   	push   %ebp
   11ef8:	89 e5                	mov    %esp,%ebp
   11efa:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags(); // 保存之前的中断状态
   11efd:	e8 3e f7 ff ff       	call   11640 <read_eflags>
   11f02:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   11f05:	e8 ac ff ff ff       	call   11eb6 <irq_disable_global>
    return state;
   11f0a:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   11f0d:	c9                   	leave  
   11f0e:	c3                   	ret    

00011f0f <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection(irq_state_t state)
{
   11f0f:	55                   	push   %ebp
   11f10:	89 e5                	mov    %esp,%ebp
    write_eflags(state); // 恢复之前的中断状态
   11f12:	ff 75 08             	pushl  0x8(%ebp)
   11f15:	e8 36 f7 ff ff       	call   11650 <write_eflags>
   11f1a:	83 c4 04             	add    $0x4,%esp
   11f1d:	90                   	nop
   11f1e:	c9                   	leave  
   11f1f:	c3                   	ret    

00011f20 <outb>:
{
   11f20:	55                   	push   %ebp
   11f21:	89 e5                	mov    %esp,%ebp
   11f23:	83 ec 08             	sub    $0x8,%esp
   11f26:	8b 55 08             	mov    0x8(%ebp),%edx
   11f29:	8b 45 0c             	mov    0xc(%ebp),%eax
   11f2c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   11f30:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   11f33:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   11f37:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   11f3b:	ee                   	out    %al,(%dx)
}
   11f3c:	90                   	nop
   11f3d:	c9                   	leave  
   11f3e:	c3                   	ret    

00011f3f <init_pic>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
static void init_pic(void)
{
   11f3f:	55                   	push   %ebp
   11f40:	89 e5                	mov    %esp,%ebp
   11f42:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS); // 每隔10ms+1
   11f45:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   11f4c:	6a 36                	push   $0x36
   11f4e:	6a 43                	push   $0x43
   11f50:	e8 cb ff ff ff       	call   11f20 <outb>
   11f55:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);        // 加载低8位
   11f58:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f5b:	0f b6 c0             	movzbl %al,%eax
   11f5e:	50                   	push   %eax
   11f5f:	6a 40                	push   $0x40
   11f61:	e8 ba ff ff ff       	call   11f20 <outb>
   11f66:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   11f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f6c:	c1 e8 08             	shr    $0x8,%eax
   11f6f:	0f b6 c0             	movzbl %al,%eax
   11f72:	50                   	push   %eax
   11f73:	6a 40                	push   $0x40
   11f75:	e8 a6 ff ff ff       	call   11f20 <outb>
   11f7a:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   11f7d:	83 ec 08             	sub    $0x8,%esp
   11f80:	68 93 02 01 00       	push   $0x10293
   11f85:	6a 20                	push   $0x20
   11f87:	e8 de fd ff ff       	call   11d6a <irq_install>
   11f8c:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   11f8f:	83 ec 0c             	sub    $0xc,%esp
   11f92:	6a 20                	push   $0x20
   11f94:	e8 0b fe ff ff       	call   11da4 <irq_enable>
   11f99:	83 c4 10             	add    $0x10,%esp
}
   11f9c:	90                   	nop
   11f9d:	c9                   	leave  
   11f9e:	c3                   	ret    

00011f9f <do_handler_timer>:
void do_handler_timer(exception_frame_t *frame)
{
   11f9f:	55                   	push   %ebp
   11fa0:	89 e5                	mov    %esp,%ebp
   11fa2:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   11fa5:	a1 c0 ad 01 00       	mov    0x1adc0,%eax
   11faa:	83 c0 01             	add    $0x1,%eax
   11fad:	a3 c0 ad 01 00       	mov    %eax,0x1adc0
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   11fb2:	83 ec 0c             	sub    $0xc,%esp
   11fb5:	6a 20                	push   $0x20
   11fb7:	e8 10 ff ff ff       	call   11ecc <pic_send_eoi>
   11fbc:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   11fbf:	e8 c2 f1 ff ff       	call   11186 <task_time_tick>
}
   11fc4:	90                   	nop
   11fc5:	c9                   	leave  
   11fc6:	c3                   	ret    

00011fc7 <time_init>:
void time_init(void)
{
   11fc7:	55                   	push   %ebp
   11fc8:	89 e5                	mov    %esp,%ebp
   11fca:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   11fcd:	c7 05 c0 ad 01 00 00 	movl   $0x0,0x1adc0
   11fd4:	00 00 00 
    init_pic();
   11fd7:	e8 63 ff ff ff       	call   11f3f <init_pic>
   11fdc:	90                   	nop
   11fdd:	c9                   	leave  
   11fde:	c3                   	ret    

00011fdf <kernel_init>:
#include "comm/cpu_instr.h"
#include "ipc/sem.h"
#include "core/memory.h"

void kernel_init(boot_info_t *boot_info)
{
   11fdf:	55                   	push   %ebp
   11fe0:	89 e5                	mov    %esp,%ebp
   11fe2:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   11fe5:	e8 9b f5 ff ff       	call   11585 <cpu_init>
    log_init();
   11fea:	e8 46 0d 00 00       	call   12d35 <log_init>
    irq_init();
   11fef:	e8 c8 fb ff ff       	call   11bbc <irq_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   11ff4:	83 ec 0c             	sub    $0xc,%esp
   11ff7:	ff 75 08             	pushl  0x8(%ebp)
   11ffa:	e8 96 e9 ff ff       	call   10995 <memory_init>
   11fff:	83 c4 10             	add    $0x10,%esp
    time_init();
   12002:	e8 c0 ff ff ff       	call   11fc7 <time_init>

    task_manager_init();
   12007:	e8 5f ef ff ff       	call   10f6b <task_manager_init>
}
   1200c:	90                   	nop
   1200d:	c9                   	leave  
   1200e:	c3                   	ret    

0001200f <move_to_first_task>:

/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void)
{
   1200f:	55                   	push   %ebp
   12010:	89 e5                	mov    %esp,%ebp
   12012:	56                   	push   %esi
   12013:	53                   	push   %ebx
   12014:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t *curr = task_current();
   12017:	e8 61 f0 ff ff       	call   1107d <task_current>
   1201c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   1201f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12023:	75 19                	jne    1203e <move_to_first_task+0x2f>
   12025:	68 54 37 01 00       	push   $0x13754
   1202a:	68 d0 37 01 00       	push   $0x137d0
   1202f:	6a 53                	push   $0x53
   12031:	68 60 37 01 00       	push   $0x13760
   12036:	e8 90 0a 00 00       	call   12acb <panic>
   1203b:	83 c4 10             	add    $0x10,%esp

    tss_t *tss = &(curr->tss);
   1203e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12041:	83 c0 4c             	add    $0x4c,%eax
   12044:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"     // SS
        "push %[esp]\n\t"    // ESP
        "push %[eflags]\n\t" // EFLAGS
        "push %[cs]\n\t"     // CS
        "push %[eip]\n\t"    // ip
        "iret\n\t" ::[ss] "r"(tss->ss),
   12047:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1204a:	8b 40 50             	mov    0x50(%eax),%eax
        [esp] "r"(tss->esp), [eflags] "r"(tss->eflags),
   1204d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12050:	8b 52 38             	mov    0x38(%edx),%edx
   12053:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   12056:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs] "r"(tss->cs), [eip] "r"(tss->eip));
   12059:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   1205c:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1205f:	8b 75 f0             	mov    -0x10(%ebp),%esi
   12062:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   12065:	50                   	push   %eax
   12066:	52                   	push   %edx
   12067:	51                   	push   %ecx
   12068:	53                   	push   %ebx
   12069:	56                   	push   %esi
   1206a:	cf                   	iret   
}
   1206b:	90                   	nop
   1206c:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1206f:	5b                   	pop    %ebx
   12070:	5e                   	pop    %esi
   12071:	5d                   	pop    %ebp
   12072:	c3                   	ret    

00012073 <init_main>:

void init_main(void)
{
   12073:	55                   	push   %ebp
   12074:	89 e5                	mov    %esp,%ebp
   12076:	83 ec 08             	sub    $0x8,%esp
    // list_test();

    log_printf("Kernel is running...");
   12079:	83 ec 0c             	sub    $0xc,%esp
   1207c:	68 9a 37 01 00       	push   $0x1379a
   12081:	e8 28 0d 00 00       	call   12dae <log_printf>
   12086:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   12089:	83 ec 08             	sub    $0x8,%esp
   1208c:	68 af 37 01 00       	push   $0x137af
   12091:	68 b5 37 01 00       	push   $0x137b5
   12096:	e8 13 0d 00 00       	call   12dae <log_printf>
   1209b:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 123456, -123, 0x123456, 'a');
   1209e:	83 ec 0c             	sub    $0xc,%esp
   120a1:	6a 61                	push   $0x61
   120a3:	68 56 34 12 00       	push   $0x123456
   120a8:	6a 85                	push   $0xffffff85
   120aa:	68 40 e2 01 00       	push   $0x1e240
   120af:	68 c1 37 01 00       	push   $0x137c1
   120b4:	e8 f5 0c 00 00       	call   12dae <log_printf>
   120b9:	83 c4 20             	add    $0x20,%esp

    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]); // 压栈先-4再入栈
    task_first_init();
   120bc:	e8 d0 ed ff ff       	call   10e91 <task_first_init>
    move_to_first_task();
   120c1:	e8 49 ff ff ff       	call   1200f <move_to_first_task>
    //     sem_notify(&sem);
    //     // sys_msleep(1000);
    //     // task_switch_from_to(task_first_task(), &init_task);
    //     // sys_sched_yield();
    // }
   120c6:	90                   	nop
   120c7:	c9                   	leave  
   120c8:	c3                   	ret    

000120c9 <list_count>:
{
   120c9:	55                   	push   %ebp
   120ca:	89 e5                	mov    %esp,%ebp
    return list->count;
   120cc:	8b 45 08             	mov    0x8(%ebp),%eax
   120cf:	8b 40 08             	mov    0x8(%eax),%eax
}
   120d2:	5d                   	pop    %ebp
   120d3:	c3                   	ret    

000120d4 <mutex_init>:

/**
 * 锁初始化
 */
void mutex_init(mutex_t *mutex)
{
   120d4:	55                   	push   %ebp
   120d5:	89 e5                	mov    %esp,%ebp
   120d7:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   120da:	8b 45 08             	mov    0x8(%ebp),%eax
   120dd:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   120e4:	8b 45 08             	mov    0x8(%ebp),%eax
   120e7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   120ed:	8b 45 08             	mov    0x8(%ebp),%eax
   120f0:	83 c0 08             	add    $0x8,%eax
   120f3:	83 ec 0c             	sub    $0xc,%esp
   120f6:	50                   	push   %eax
   120f7:	e8 18 0a 00 00       	call   12b14 <list_init>
   120fc:	83 c4 10             	add    $0x10,%esp
}
   120ff:	90                   	nop
   12100:	c9                   	leave  
   12101:	c3                   	ret    

00012102 <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock(mutex_t *mutex)
{
   12102:	55                   	push   %ebp
   12103:	89 e5                	mov    %esp,%ebp
   12105:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   12108:	e8 ea fd ff ff       	call   11ef7 <irq_enter_protection>
   1210d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t *curr = task_current();
   12110:	e8 68 ef ff ff       	call   1107d <task_current>
   12115:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0)
   12118:	8b 45 08             	mov    0x8(%ebp),%eax
   1211b:	8b 40 04             	mov    0x4(%eax),%eax
   1211e:	85 c0                	test   %eax,%eax
   12120:	75 14                	jne    12136 <mutex_lock+0x34>
    {
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   12122:	8b 45 08             	mov    0x8(%ebp),%eax
   12125:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   1212c:	8b 45 08             	mov    0x8(%ebp),%eax
   1212f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12132:	89 10                	mov    %edx,(%eax)
   12134:	eb 4f                	jmp    12185 <mutex_lock+0x83>
    }
    else if (mutex->owner == curr)
   12136:	8b 45 08             	mov    0x8(%ebp),%eax
   12139:	8b 00                	mov    (%eax),%eax
   1213b:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1213e:	75 11                	jne    12151 <mutex_lock+0x4f>
    {
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   12140:	8b 45 08             	mov    0x8(%ebp),%eax
   12143:	8b 40 04             	mov    0x4(%eax),%eax
   12146:	8d 50 01             	lea    0x1(%eax),%edx
   12149:	8b 45 08             	mov    0x8(%ebp),%eax
   1214c:	89 50 04             	mov    %edx,0x4(%eax)
   1214f:	eb 34                	jmp    12185 <mutex_lock+0x83>
    }
    else
    {
        // 有其它任务占用，则进入队列等待
        task_t *curr = task_current();
   12151:	e8 27 ef ff ff       	call   1107d <task_current>
   12156:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   12159:	83 ec 0c             	sub    $0xc,%esp
   1215c:	ff 75 ec             	pushl  -0x14(%ebp)
   1215f:	e8 ee ee ff ff       	call   11052 <task_set_block>
   12164:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   12167:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1216a:	8d 50 3c             	lea    0x3c(%eax),%edx
   1216d:	8b 45 08             	mov    0x8(%ebp),%eax
   12170:	83 c0 08             	add    $0x8,%eax
   12173:	83 ec 08             	sub    $0x8,%esp
   12176:	52                   	push   %edx
   12177:	50                   	push   %eax
   12178:	e8 1b 0a 00 00       	call   12b98 <list_insert_last>
   1217d:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   12180:	e8 a6 ef ff ff       	call   1112b <task_dispatch>
    }

    irq_leave_protection(irq_state);
   12185:	83 ec 0c             	sub    $0xc,%esp
   12188:	ff 75 f4             	pushl  -0xc(%ebp)
   1218b:	e8 7f fd ff ff       	call   11f0f <irq_leave_protection>
   12190:	83 c4 10             	add    $0x10,%esp
}
   12193:	90                   	nop
   12194:	c9                   	leave  
   12195:	c3                   	ret    

00012196 <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock(mutex_t *mutex)
{
   12196:	55                   	push   %ebp
   12197:	89 e5                	mov    %esp,%ebp
   12199:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1219c:	e8 56 fd ff ff       	call   11ef7 <irq_enter_protection>
   121a1:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t *curr = task_current();
   121a4:	e8 d4 ee ff ff       	call   1107d <task_current>
   121a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr)
   121ac:	8b 45 08             	mov    0x8(%ebp),%eax
   121af:	8b 00                	mov    (%eax),%eax
   121b1:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   121b4:	0f 85 88 00 00 00    	jne    12242 <mutex_unlock+0xac>
    {
        if (--mutex->locked_count == 0)
   121ba:	8b 45 08             	mov    0x8(%ebp),%eax
   121bd:	8b 40 04             	mov    0x4(%eax),%eax
   121c0:	8d 50 ff             	lea    -0x1(%eax),%edx
   121c3:	8b 45 08             	mov    0x8(%ebp),%eax
   121c6:	89 50 04             	mov    %edx,0x4(%eax)
   121c9:	8b 45 08             	mov    0x8(%ebp),%eax
   121cc:	8b 40 04             	mov    0x4(%eax),%eax
   121cf:	85 c0                	test   %eax,%eax
   121d1:	75 6f                	jne    12242 <mutex_unlock+0xac>
        {
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   121d3:	8b 45 08             	mov    0x8(%ebp),%eax
   121d6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list))
   121dc:	8b 45 08             	mov    0x8(%ebp),%eax
   121df:	83 c0 08             	add    $0x8,%eax
   121e2:	83 ec 0c             	sub    $0xc,%esp
   121e5:	50                   	push   %eax
   121e6:	e8 de fe ff ff       	call   120c9 <list_count>
   121eb:	83 c4 10             	add    $0x10,%esp
   121ee:	85 c0                	test   %eax,%eax
   121f0:	74 50                	je     12242 <mutex_unlock+0xac>
            {
                list_node_t *task_node = list_remove_first(&mutex->wait_list);
   121f2:	8b 45 08             	mov    0x8(%ebp),%eax
   121f5:	83 c0 08             	add    $0x8,%eax
   121f8:	83 ec 0c             	sub    $0xc,%esp
   121fb:	50                   	push   %eax
   121fc:	e8 fb 09 00 00       	call   12bfc <list_remove_first>
   12201:	83 c4 10             	add    $0x10,%esp
   12204:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t *task = list_node_parent(task_node, task_t, wait_node);
   12207:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1220b:	74 08                	je     12215 <mutex_unlock+0x7f>
   1220d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12210:	83 e8 3c             	sub    $0x3c,%eax
   12213:	eb 05                	jmp    1221a <mutex_unlock+0x84>
   12215:	b8 00 00 00 00       	mov    $0x0,%eax
   1221a:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   1221d:	83 ec 0c             	sub    $0xc,%esp
   12220:	ff 75 e8             	pushl  -0x18(%ebp)
   12223:	e8 f6 ed ff ff       	call   1101e <task_set_ready>
   12228:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   1222b:	8b 45 08             	mov    0x8(%ebp),%eax
   1222e:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   12235:	8b 45 08             	mov    0x8(%ebp),%eax
   12238:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1223b:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   1223d:	e8 e9 ee ff ff       	call   1112b <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   12242:	83 ec 0c             	sub    $0xc,%esp
   12245:	ff 75 f4             	pushl  -0xc(%ebp)
   12248:	e8 c2 fc ff ff       	call   11f0f <irq_leave_protection>
   1224d:	83 c4 10             	add    $0x10,%esp
   12250:	90                   	nop
   12251:	c9                   	leave  
   12252:	c3                   	ret    

00012253 <list_count>:
{
   12253:	55                   	push   %ebp
   12254:	89 e5                	mov    %esp,%ebp
    return list->count;
   12256:	8b 45 08             	mov    0x8(%ebp),%eax
   12259:	8b 40 08             	mov    0x8(%eax),%eax
}
   1225c:	5d                   	pop    %ebp
   1225d:	c3                   	ret    

0001225e <sem_init>:

/**
 * 信号量初始化
 */
void sem_init(sem_t *sem, int init_count)
{
   1225e:	55                   	push   %ebp
   1225f:	89 e5                	mov    %esp,%ebp
   12261:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   12264:	8b 45 08             	mov    0x8(%ebp),%eax
   12267:	8b 55 0c             	mov    0xc(%ebp),%edx
   1226a:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   1226c:	8b 45 08             	mov    0x8(%ebp),%eax
   1226f:	83 c0 04             	add    $0x4,%eax
   12272:	83 ec 0c             	sub    $0xc,%esp
   12275:	50                   	push   %eax
   12276:	e8 99 08 00 00       	call   12b14 <list_init>
   1227b:	83 c4 10             	add    $0x10,%esp
}
   1227e:	90                   	nop
   1227f:	c9                   	leave  
   12280:	c3                   	ret    

00012281 <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait(sem_t *sem)
{
   12281:	55                   	push   %ebp
   12282:	89 e5                	mov    %esp,%ebp
   12284:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   12287:	e8 6b fc ff ff       	call   11ef7 <irq_enter_protection>
   1228c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0)
   1228f:	8b 45 08             	mov    0x8(%ebp),%eax
   12292:	8b 00                	mov    (%eax),%eax
   12294:	85 c0                	test   %eax,%eax
   12296:	7e 0f                	jle    122a7 <sem_wait+0x26>
    {
        sem->count--;
   12298:	8b 45 08             	mov    0x8(%ebp),%eax
   1229b:	8b 00                	mov    (%eax),%eax
   1229d:	8d 50 ff             	lea    -0x1(%eax),%edx
   122a0:	8b 45 08             	mov    0x8(%ebp),%eax
   122a3:	89 10                	mov    %edx,(%eax)
   122a5:	eb 34                	jmp    122db <sem_wait+0x5a>
    }
    else
    {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t *curr = task_current();
   122a7:	e8 d1 ed ff ff       	call   1107d <task_current>
   122ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   122af:	83 ec 0c             	sub    $0xc,%esp
   122b2:	ff 75 f0             	pushl  -0x10(%ebp)
   122b5:	e8 98 ed ff ff       	call   11052 <task_set_block>
   122ba:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   122bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   122c0:	8d 50 3c             	lea    0x3c(%eax),%edx
   122c3:	8b 45 08             	mov    0x8(%ebp),%eax
   122c6:	83 c0 04             	add    $0x4,%eax
   122c9:	83 ec 08             	sub    $0x8,%esp
   122cc:	52                   	push   %edx
   122cd:	50                   	push   %eax
   122ce:	e8 c5 08 00 00       	call   12b98 <list_insert_last>
   122d3:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   122d6:	e8 50 ee ff ff       	call   1112b <task_dispatch>
    }

    irq_leave_protection(irq_state);
   122db:	83 ec 0c             	sub    $0xc,%esp
   122de:	ff 75 f4             	pushl  -0xc(%ebp)
   122e1:	e8 29 fc ff ff       	call   11f0f <irq_leave_protection>
   122e6:	83 c4 10             	add    $0x10,%esp
}
   122e9:	90                   	nop
   122ea:	c9                   	leave  
   122eb:	c3                   	ret    

000122ec <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify(sem_t *sem)
{
   122ec:	55                   	push   %ebp
   122ed:	89 e5                	mov    %esp,%ebp
   122ef:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   122f2:	e8 00 fc ff ff       	call   11ef7 <irq_enter_protection>
   122f7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list))
   122fa:	8b 45 08             	mov    0x8(%ebp),%eax
   122fd:	83 c0 04             	add    $0x4,%eax
   12300:	83 ec 0c             	sub    $0xc,%esp
   12303:	50                   	push   %eax
   12304:	e8 4a ff ff ff       	call   12253 <list_count>
   12309:	83 c4 10             	add    $0x10,%esp
   1230c:	85 c0                	test   %eax,%eax
   1230e:	74 40                	je     12350 <sem_notify+0x64>
    {
        // 有进程等待，则唤醒加入就绪队列
        list_node_t *node = list_remove_first(&sem->wait_list);
   12310:	8b 45 08             	mov    0x8(%ebp),%eax
   12313:	83 c0 04             	add    $0x4,%eax
   12316:	83 ec 0c             	sub    $0xc,%esp
   12319:	50                   	push   %eax
   1231a:	e8 dd 08 00 00       	call   12bfc <list_remove_first>
   1231f:	83 c4 10             	add    $0x10,%esp
   12322:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   12325:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12329:	74 08                	je     12333 <sem_notify+0x47>
   1232b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1232e:	83 e8 3c             	sub    $0x3c,%eax
   12331:	eb 05                	jmp    12338 <sem_notify+0x4c>
   12333:	b8 00 00 00 00       	mov    $0x0,%eax
   12338:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   1233b:	83 ec 0c             	sub    $0xc,%esp
   1233e:	ff 75 ec             	pushl  -0x14(%ebp)
   12341:	e8 d8 ec ff ff       	call   1101e <task_set_ready>
   12346:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   12349:	e8 dd ed ff ff       	call   1112b <task_dispatch>
   1234e:	eb 0d                	jmp    1235d <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   12350:	8b 45 08             	mov    0x8(%ebp),%eax
   12353:	8b 00                	mov    (%eax),%eax
   12355:	8d 50 01             	lea    0x1(%eax),%edx
   12358:	8b 45 08             	mov    0x8(%ebp),%eax
   1235b:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   1235d:	83 ec 0c             	sub    $0xc,%esp
   12360:	ff 75 f4             	pushl  -0xc(%ebp)
   12363:	e8 a7 fb ff ff       	call   11f0f <irq_leave_protection>
   12368:	83 c4 10             	add    $0x10,%esp
}
   1236b:	90                   	nop
   1236c:	c9                   	leave  
   1236d:	c3                   	ret    

0001236e <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count(sem_t *sem)
{
   1236e:	55                   	push   %ebp
   1236f:	89 e5                	mov    %esp,%ebp
   12371:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   12374:	e8 7e fb ff ff       	call   11ef7 <irq_enter_protection>
   12379:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   1237c:	8b 45 08             	mov    0x8(%ebp),%eax
   1237f:	8b 00                	mov    (%eax),%eax
   12381:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   12384:	83 ec 0c             	sub    $0xc,%esp
   12387:	ff 75 f4             	pushl  -0xc(%ebp)
   1238a:	e8 80 fb ff ff       	call   11f0f <irq_leave_protection>
   1238f:	83 c4 10             	add    $0x10,%esp
    return count;
   12392:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12395:	c9                   	leave  
   12396:	c3                   	ret    

00012397 <bitmap_byte_count>:

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count(int bit_count)
{
   12397:	55                   	push   %ebp
   12398:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   1239a:	8b 45 08             	mov    0x8(%ebp),%eax
   1239d:	83 c0 07             	add    $0x7,%eax
   123a0:	8d 50 07             	lea    0x7(%eax),%edx
   123a3:	85 c0                	test   %eax,%eax
   123a5:	0f 48 c2             	cmovs  %edx,%eax
   123a8:	c1 f8 03             	sar    $0x3,%eax
}
   123ab:	5d                   	pop    %ebp
   123ac:	c3                   	ret    

000123ad <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   123ad:	55                   	push   %ebp
   123ae:	89 e5                	mov    %esp,%ebp
   123b0:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   123b3:	8b 45 08             	mov    0x8(%ebp),%eax
   123b6:	8b 55 10             	mov    0x10(%ebp),%edx
   123b9:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   123bb:	8b 45 08             	mov    0x8(%ebp),%eax
   123be:	8b 55 0c             	mov    0xc(%ebp),%edx
   123c1:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   123c4:	8b 45 08             	mov    0x8(%ebp),%eax
   123c7:	8b 00                	mov    (%eax),%eax
   123c9:	50                   	push   %eax
   123ca:	e8 c8 ff ff ff       	call   12397 <bitmap_byte_count>
   123cf:	83 c4 04             	add    $0x4,%esp
   123d2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes); // 将bitmap置位
   123d5:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   123d9:	74 07                	je     123e2 <bitmap_init+0x35>
   123db:	ba ff 00 00 00       	mov    $0xff,%edx
   123e0:	eb 05                	jmp    123e7 <bitmap_init+0x3a>
   123e2:	ba 00 00 00 00       	mov    $0x0,%edx
   123e7:	8b 45 08             	mov    0x8(%ebp),%eax
   123ea:	8b 40 04             	mov    0x4(%eax),%eax
   123ed:	83 ec 04             	sub    $0x4,%esp
   123f0:	ff 75 f4             	pushl  -0xc(%ebp)
   123f3:	52                   	push   %edx
   123f4:	50                   	push   %eax
   123f5:	e8 a8 03 00 00       	call   127a2 <kernel_memset>
   123fa:	83 c4 10             	add    $0x10,%esp
}
   123fd:	90                   	nop
   123fe:	c9                   	leave  
   123ff:	c3                   	ret    

00012400 <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   12400:	55                   	push   %ebp
   12401:	89 e5                	mov    %esp,%ebp
   12403:	56                   	push   %esi
   12404:	53                   	push   %ebx
   12405:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   12408:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1240f:	e9 a2 00 00 00       	jmp    124b6 <bitmap_set_bit+0xb6>
    {
        // 可以考虑进行一定程序的优化!!
        if (bit)
   12414:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   12418:	74 4a                	je     12464 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= 1 << (index % 8);
   1241a:	8b 45 08             	mov    0x8(%ebp),%eax
   1241d:	8b 50 04             	mov    0x4(%eax),%edx
   12420:	8b 45 0c             	mov    0xc(%ebp),%eax
   12423:	8d 48 07             	lea    0x7(%eax),%ecx
   12426:	85 c0                	test   %eax,%eax
   12428:	0f 48 c1             	cmovs  %ecx,%eax
   1242b:	c1 f8 03             	sar    $0x3,%eax
   1242e:	89 c3                	mov    %eax,%ebx
   12430:	89 d8                	mov    %ebx,%eax
   12432:	01 d0                	add    %edx,%eax
   12434:	0f b6 00             	movzbl (%eax),%eax
   12437:	89 c6                	mov    %eax,%esi
   12439:	8b 45 0c             	mov    0xc(%ebp),%eax
   1243c:	99                   	cltd   
   1243d:	c1 ea 1d             	shr    $0x1d,%edx
   12440:	01 d0                	add    %edx,%eax
   12442:	83 e0 07             	and    $0x7,%eax
   12445:	29 d0                	sub    %edx,%eax
   12447:	ba 01 00 00 00       	mov    $0x1,%edx
   1244c:	89 c1                	mov    %eax,%ecx
   1244e:	d3 e2                	shl    %cl,%edx
   12450:	89 d0                	mov    %edx,%eax
   12452:	89 f2                	mov    %esi,%edx
   12454:	09 c2                	or     %eax,%edx
   12456:	8b 45 08             	mov    0x8(%ebp),%eax
   12459:	8b 40 04             	mov    0x4(%eax),%eax
   1245c:	89 d9                	mov    %ebx,%ecx
   1245e:	01 c8                	add    %ecx,%eax
   12460:	88 10                	mov    %dl,(%eax)
   12462:	eb 4a                	jmp    124ae <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   12464:	8b 45 08             	mov    0x8(%ebp),%eax
   12467:	8b 50 04             	mov    0x4(%eax),%edx
   1246a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1246d:	8d 48 07             	lea    0x7(%eax),%ecx
   12470:	85 c0                	test   %eax,%eax
   12472:	0f 48 c1             	cmovs  %ecx,%eax
   12475:	c1 f8 03             	sar    $0x3,%eax
   12478:	89 c3                	mov    %eax,%ebx
   1247a:	89 d8                	mov    %ebx,%eax
   1247c:	01 d0                	add    %edx,%eax
   1247e:	0f b6 00             	movzbl (%eax),%eax
   12481:	89 c6                	mov    %eax,%esi
   12483:	8b 45 0c             	mov    0xc(%ebp),%eax
   12486:	99                   	cltd   
   12487:	c1 ea 1d             	shr    $0x1d,%edx
   1248a:	01 d0                	add    %edx,%eax
   1248c:	83 e0 07             	and    $0x7,%eax
   1248f:	29 d0                	sub    %edx,%eax
   12491:	ba 01 00 00 00       	mov    $0x1,%edx
   12496:	89 c1                	mov    %eax,%ecx
   12498:	d3 e2                	shl    %cl,%edx
   1249a:	89 d0                	mov    %edx,%eax
   1249c:	f7 d0                	not    %eax
   1249e:	89 f2                	mov    %esi,%edx
   124a0:	21 c2                	and    %eax,%edx
   124a2:	8b 45 08             	mov    0x8(%ebp),%eax
   124a5:	8b 40 04             	mov    0x4(%eax),%eax
   124a8:	89 d9                	mov    %ebx,%ecx
   124aa:	01 c8                	add    %ecx,%eax
   124ac:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   124ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   124b2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   124b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   124b9:	3b 45 10             	cmp    0x10(%ebp),%eax
   124bc:	7d 0e                	jge    124cc <bitmap_set_bit+0xcc>
   124be:	8b 45 08             	mov    0x8(%ebp),%eax
   124c1:	8b 00                	mov    (%eax),%eax
   124c3:	39 45 0c             	cmp    %eax,0xc(%ebp)
   124c6:	0f 8c 48 ff ff ff    	jl     12414 <bitmap_set_bit+0x14>
        }
    }
}
   124cc:	90                   	nop
   124cd:	83 c4 10             	add    $0x10,%esp
   124d0:	5b                   	pop    %ebx
   124d1:	5e                   	pop    %esi
   124d2:	5d                   	pop    %ebp
   124d3:	c3                   	ret    

000124d4 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   124d4:	55                   	push   %ebp
   124d5:	89 e5                	mov    %esp,%ebp
   124d7:	53                   	push   %ebx
    // return bitmap->bits[index / 8] & (1 << (index % 8));
    //  2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   124d8:	8b 45 08             	mov    0x8(%ebp),%eax
   124db:	8b 50 04             	mov    0x4(%eax),%edx
   124de:	8b 45 0c             	mov    0xc(%ebp),%eax
   124e1:	8d 48 07             	lea    0x7(%eax),%ecx
   124e4:	85 c0                	test   %eax,%eax
   124e6:	0f 48 c1             	cmovs  %ecx,%eax
   124e9:	c1 f8 03             	sar    $0x3,%eax
   124ec:	01 d0                	add    %edx,%eax
   124ee:	0f b6 00             	movzbl (%eax),%eax
   124f1:	0f b6 d8             	movzbl %al,%ebx
   124f4:	8b 45 0c             	mov    0xc(%ebp),%eax
   124f7:	99                   	cltd   
   124f8:	c1 ea 1d             	shr    $0x1d,%edx
   124fb:	01 d0                	add    %edx,%eax
   124fd:	83 e0 07             	and    $0x7,%eax
   12500:	29 d0                	sub    %edx,%eax
   12502:	89 c1                	mov    %eax,%ecx
   12504:	d3 fb                	sar    %cl,%ebx
   12506:	89 d8                	mov    %ebx,%eax
   12508:	83 e0 01             	and    $0x1,%eax
}
   1250b:	5b                   	pop    %ebx
   1250c:	5d                   	pop    %ebp
   1250d:	c3                   	ret    

0001250e <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   1250e:	55                   	push   %ebp
   1250f:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   12511:	ff 75 0c             	pushl  0xc(%ebp)
   12514:	ff 75 08             	pushl  0x8(%ebp)
   12517:	e8 b8 ff ff ff       	call   124d4 <bitmap_get_bit>
   1251c:	83 c4 08             	add    $0x8,%esp
   1251f:	85 c0                	test   %eax,%eax
   12521:	0f 95 c0             	setne  %al
   12524:	0f b6 c0             	movzbl %al,%eax
}
   12527:	c9                   	leave  
   12528:	c3                   	ret    

00012529 <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   12529:	55                   	push   %ebp
   1252a:	89 e5                	mov    %esp,%ebp
   1252c:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1252f:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   12536:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count)
   1253d:	e9 85 00 00 00       	jmp    125c7 <bitmap_alloc_nbits+0x9e>
    {
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   12542:	ff 75 fc             	pushl  -0x4(%ebp)
   12545:	ff 75 08             	pushl  0x8(%ebp)
   12548:	e8 87 ff ff ff       	call   124d4 <bitmap_get_bit>
   1254d:	83 c4 08             	add    $0x8,%esp
   12550:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12553:	74 06                	je     1255b <bitmap_alloc_nbits+0x32>
        {
            // 不同，继续寻找起始的bit
            search_idx++;
   12555:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   12559:	eb 6c                	jmp    125c7 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   1255b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1255e:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   12561:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12568:	eb 27                	jmp    12591 <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   1256a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1256d:	8d 50 01             	lea    0x1(%eax),%edx
   12570:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12573:	50                   	push   %eax
   12574:	ff 75 08             	pushl  0x8(%ebp)
   12577:	e8 58 ff ff ff       	call   124d4 <bitmap_get_bit>
   1257c:	83 c4 08             	add    $0x8,%esp
   1257f:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12582:	74 09                	je     1258d <bitmap_alloc_nbits+0x64>
            {
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   12584:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1258b:	eb 16                	jmp    125a3 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   1258d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12591:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12594:	3b 45 10             	cmp    0x10(%ebp),%eax
   12597:	7d 0a                	jge    125a3 <bitmap_alloc_nbits+0x7a>
   12599:	8b 45 08             	mov    0x8(%ebp),%eax
   1259c:	8b 00                	mov    (%eax),%eax
   1259e:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   125a1:	7c c7                	jl     1256a <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count)
   125a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   125a6:	3b 45 10             	cmp    0x10(%ebp),%eax
   125a9:	7c 1c                	jl     125c7 <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   125ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   125ae:	f7 d0                	not    %eax
   125b0:	50                   	push   %eax
   125b1:	ff 75 10             	pushl  0x10(%ebp)
   125b4:	ff 75 f8             	pushl  -0x8(%ebp)
   125b7:	ff 75 08             	pushl  0x8(%ebp)
   125ba:	e8 41 fe ff ff       	call   12400 <bitmap_set_bit>
   125bf:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   125c2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   125c5:	eb 13                	jmp    125da <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   125c7:	8b 45 08             	mov    0x8(%ebp),%eax
   125ca:	8b 00                	mov    (%eax),%eax
   125cc:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   125cf:	0f 8c 6d ff ff ff    	jl     12542 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   125d5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   125da:	c9                   	leave  
   125db:	c3                   	ret    

000125dc <hlt>:
{
   125dc:	55                   	push   %ebp
   125dd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   125df:	f4                   	hlt    
}
   125e0:	90                   	nop
   125e1:	5d                   	pop    %ebp
   125e2:	c3                   	ret    

000125e3 <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char *dest, const char *src)
{
   125e3:	55                   	push   %ebp
   125e4:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   125e6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   125ea:	74 3b                	je     12627 <kernel_strcpy+0x44>
   125ec:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   125f0:	74 35                	je     12627 <kernel_strcpy+0x44>
    {
        return;
    }

    while (*dest && *src)
   125f2:	eb 17                	jmp    1260b <kernel_strcpy+0x28>
    {
        *dest++ = *src++;
   125f4:	8b 55 0c             	mov    0xc(%ebp),%edx
   125f7:	8d 42 01             	lea    0x1(%edx),%eax
   125fa:	89 45 0c             	mov    %eax,0xc(%ebp)
   125fd:	8b 45 08             	mov    0x8(%ebp),%eax
   12600:	8d 48 01             	lea    0x1(%eax),%ecx
   12603:	89 4d 08             	mov    %ecx,0x8(%ebp)
   12606:	0f b6 12             	movzbl (%edx),%edx
   12609:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   1260b:	8b 45 08             	mov    0x8(%ebp),%eax
   1260e:	0f b6 00             	movzbl (%eax),%eax
   12611:	84 c0                	test   %al,%al
   12613:	74 0a                	je     1261f <kernel_strcpy+0x3c>
   12615:	8b 45 0c             	mov    0xc(%ebp),%eax
   12618:	0f b6 00             	movzbl (%eax),%eax
   1261b:	84 c0                	test   %al,%al
   1261d:	75 d5                	jne    125f4 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   1261f:	8b 45 08             	mov    0x8(%ebp),%eax
   12622:	c6 00 00             	movb   $0x0,(%eax)
   12625:	eb 01                	jmp    12628 <kernel_strcpy+0x45>
        return;
   12627:	90                   	nop
}
   12628:	5d                   	pop    %ebp
   12629:	c3                   	ret    

0001262a <kernel_strncpy>:

void kernel_strncpy(char *dest, const char *src, int size)
{
   1262a:	55                   	push   %ebp
   1262b:	89 e5                	mov    %esp,%ebp
   1262d:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   12630:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12634:	74 61                	je     12697 <kernel_strncpy+0x6d>
   12636:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1263a:	74 5b                	je     12697 <kernel_strncpy+0x6d>
   1263c:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12640:	74 55                	je     12697 <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   12642:	8b 45 08             	mov    0x8(%ebp),%eax
   12645:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   12648:	8b 45 0c             	mov    0xc(%ebp),%eax
   1264b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   1264e:	eb 17                	jmp    12667 <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   12650:	8b 55 f8             	mov    -0x8(%ebp),%edx
   12653:	8d 42 01             	lea    0x1(%edx),%eax
   12656:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12659:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1265c:	8d 48 01             	lea    0x1(%eax),%ecx
   1265f:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   12662:	0f b6 12             	movzbl (%edx),%edx
   12665:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   12667:	8b 45 10             	mov    0x10(%ebp),%eax
   1266a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1266d:	89 55 10             	mov    %edx,0x10(%ebp)
   12670:	85 c0                	test   %eax,%eax
   12672:	7e 0a                	jle    1267e <kernel_strncpy+0x54>
   12674:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12677:	0f b6 00             	movzbl (%eax),%eax
   1267a:	84 c0                	test   %al,%al
   1267c:	75 d2                	jne    12650 <kernel_strncpy+0x26>
    }
    if (size == 0)
   1267e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12682:	75 0b                	jne    1268f <kernel_strncpy+0x65>
    {
        *(d - 1) = '\0';
   12684:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12687:	83 e8 01             	sub    $0x1,%eax
   1268a:	c6 00 00             	movb   $0x0,(%eax)
   1268d:	eb 09                	jmp    12698 <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   1268f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12692:	c6 00 00             	movb   $0x0,(%eax)
   12695:	eb 01                	jmp    12698 <kernel_strncpy+0x6e>
        return;
   12697:	90                   	nop
    }
}
   12698:	c9                   	leave  
   12699:	c3                   	ret    

0001269a <kernel_strncmp>:

int kernel_strncmp(const char *s1, const char *s2, int size)
{
   1269a:	55                   	push   %ebp
   1269b:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   1269d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   126a1:	74 06                	je     126a9 <kernel_strncmp+0xf>
   126a3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   126a7:	75 13                	jne    126bc <kernel_strncmp+0x22>
    {
        return -1;
   126a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   126ae:	eb 66                	jmp    12716 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   126b0:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   126b4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   126b8:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   126bc:	8b 45 08             	mov    0x8(%ebp),%eax
   126bf:	0f b6 00             	movzbl (%eax),%eax
   126c2:	84 c0                	test   %al,%al
   126c4:	74 20                	je     126e6 <kernel_strncmp+0x4c>
   126c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   126c9:	0f b6 00             	movzbl (%eax),%eax
   126cc:	84 c0                	test   %al,%al
   126ce:	74 16                	je     126e6 <kernel_strncmp+0x4c>
   126d0:	8b 45 08             	mov    0x8(%ebp),%eax
   126d3:	0f b6 10             	movzbl (%eax),%edx
   126d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   126d9:	0f b6 00             	movzbl (%eax),%eax
   126dc:	38 c2                	cmp    %al,%dl
   126de:	75 06                	jne    126e6 <kernel_strncmp+0x4c>
   126e0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   126e4:	75 ca                	jne    126b0 <kernel_strncmp+0x16>
    }
    // 相等返回0
    // s1="abc",s2="abcdef" 也属于相等
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   126e6:	8b 45 08             	mov    0x8(%ebp),%eax
   126e9:	0f b6 00             	movzbl (%eax),%eax
   126ec:	84 c0                	test   %al,%al
   126ee:	74 21                	je     12711 <kernel_strncmp+0x77>
   126f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   126f3:	0f b6 00             	movzbl (%eax),%eax
   126f6:	84 c0                	test   %al,%al
   126f8:	74 17                	je     12711 <kernel_strncmp+0x77>
   126fa:	8b 45 08             	mov    0x8(%ebp),%eax
   126fd:	0f b6 10             	movzbl (%eax),%edx
   12700:	8b 45 0c             	mov    0xc(%ebp),%eax
   12703:	0f b6 00             	movzbl (%eax),%eax
   12706:	38 c2                	cmp    %al,%dl
   12708:	74 07                	je     12711 <kernel_strncmp+0x77>
   1270a:	b8 01 00 00 00       	mov    $0x1,%eax
   1270f:	eb 05                	jmp    12716 <kernel_strncmp+0x7c>
   12711:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12716:	5d                   	pop    %ebp
   12717:	c3                   	ret    

00012718 <kernel_strlen>:

int kernel_strlen(const char *str)
{
   12718:	55                   	push   %ebp
   12719:	89 e5                	mov    %esp,%ebp
   1271b:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   1271e:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   12722:	75 07                	jne    1272b <kernel_strlen+0x13>
    {
        return 0;
   12724:	b8 00 00 00 00       	mov    $0x0,%eax
   12729:	eb 26                	jmp    12751 <kernel_strlen+0x39>
    }

    const char *c = str;
   1272b:	8b 45 08             	mov    0x8(%ebp),%eax
   1272e:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   12731:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   12738:	eb 04                	jmp    1273e <kernel_strlen+0x26>
    {
        len++;
   1273a:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   1273e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12741:	8d 50 01             	lea    0x1(%eax),%edx
   12744:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12747:	0f b6 00             	movzbl (%eax),%eax
   1274a:	84 c0                	test   %al,%al
   1274c:	75 ec                	jne    1273a <kernel_strlen+0x22>
    }

    return len;
   1274e:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   12751:	c9                   	leave  
   12752:	c3                   	ret    

00012753 <kernel_memcpy>:

void kernel_memcpy(void *dest, void *src, int size)
{
   12753:	55                   	push   %ebp
   12754:	89 e5                	mov    %esp,%ebp
   12756:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   12759:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1275d:	74 40                	je     1279f <kernel_memcpy+0x4c>
   1275f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12763:	74 3a                	je     1279f <kernel_memcpy+0x4c>
   12765:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12769:	74 34                	je     1279f <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   1276b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1276e:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   12771:	8b 45 08             	mov    0x8(%ebp),%eax
   12774:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   12777:	eb 17                	jmp    12790 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   12779:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1277c:	8d 42 01             	lea    0x1(%edx),%eax
   1277f:	89 45 fc             	mov    %eax,-0x4(%ebp)
   12782:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12785:	8d 48 01             	lea    0x1(%eax),%ecx
   12788:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1278b:	0f b6 12             	movzbl (%edx),%edx
   1278e:	88 10                	mov    %dl,(%eax)
    while (size--)
   12790:	8b 45 10             	mov    0x10(%ebp),%eax
   12793:	8d 50 ff             	lea    -0x1(%eax),%edx
   12796:	89 55 10             	mov    %edx,0x10(%ebp)
   12799:	85 c0                	test   %eax,%eax
   1279b:	75 dc                	jne    12779 <kernel_memcpy+0x26>
   1279d:	eb 01                	jmp    127a0 <kernel_memcpy+0x4d>
        return;
   1279f:	90                   	nop
    }
}
   127a0:	c9                   	leave  
   127a1:	c3                   	ret    

000127a2 <kernel_memset>:

// 内存逐字节设置v
void kernel_memset(void *dest, uint8_t v, int size)
{
   127a2:	55                   	push   %ebp
   127a3:	89 e5                	mov    %esp,%ebp
   127a5:	83 ec 14             	sub    $0x14,%esp
   127a8:	8b 45 0c             	mov    0xc(%ebp),%eax
   127ab:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   127ae:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127b2:	74 2c                	je     127e0 <kernel_memset+0x3e>
   127b4:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   127b8:	74 26                	je     127e0 <kernel_memset+0x3e>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   127ba:	8b 45 08             	mov    0x8(%ebp),%eax
   127bd:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   127c0:	eb 0f                	jmp    127d1 <kernel_memset+0x2f>
    {
        *d++ = v;
   127c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   127c5:	8d 50 01             	lea    0x1(%eax),%edx
   127c8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   127cb:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   127cf:	88 10                	mov    %dl,(%eax)
    while (size--)
   127d1:	8b 45 10             	mov    0x10(%ebp),%eax
   127d4:	8d 50 ff             	lea    -0x1(%eax),%edx
   127d7:	89 55 10             	mov    %edx,0x10(%ebp)
   127da:	85 c0                	test   %eax,%eax
   127dc:	75 e4                	jne    127c2 <kernel_memset+0x20>
   127de:	eb 01                	jmp    127e1 <kernel_memset+0x3f>
        return;
   127e0:	90                   	nop
    }
}
   127e1:	c9                   	leave  
   127e2:	c3                   	ret    

000127e3 <kernel_memcmp>:

int kernel_memcmp(void *d1, void *d2, int size)
{
   127e3:	55                   	push   %ebp
   127e4:	89 e5                	mov    %esp,%ebp
   127e6:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   127e9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   127ed:	74 06                	je     127f5 <kernel_memcmp+0x12>
   127ef:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   127f3:	75 07                	jne    127fc <kernel_memcmp+0x19>
    {
        return 1;
   127f5:	b8 01 00 00 00       	mov    $0x1,%eax
   127fa:	eb 43                	jmp    1283f <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   127fc:	8b 45 08             	mov    0x8(%ebp),%eax
   127ff:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   12802:	8b 45 0c             	mov    0xc(%ebp),%eax
   12805:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   12808:	eb 23                	jmp    1282d <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   1280a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1280d:	8d 50 01             	lea    0x1(%eax),%edx
   12810:	89 55 fc             	mov    %edx,-0x4(%ebp)
   12813:	0f b6 08             	movzbl (%eax),%ecx
   12816:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12819:	8d 50 01             	lea    0x1(%eax),%edx
   1281c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1281f:	0f b6 00             	movzbl (%eax),%eax
   12822:	38 c1                	cmp    %al,%cl
   12824:	74 07                	je     1282d <kernel_memcmp+0x4a>
        {
            return 1;
   12826:	b8 01 00 00 00       	mov    $0x1,%eax
   1282b:	eb 12                	jmp    1283f <kernel_memcmp+0x5c>
    while (size--)
   1282d:	8b 45 10             	mov    0x10(%ebp),%eax
   12830:	8d 50 ff             	lea    -0x1(%eax),%edx
   12833:	89 55 10             	mov    %edx,0x10(%ebp)
   12836:	85 c0                	test   %eax,%eax
   12838:	75 d0                	jne    1280a <kernel_memcmp+0x27>
        }
    }

    // 内存一样返回0
    return 0;
   1283a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1283f:	c9                   	leave  
   12840:	c3                   	ret    

00012841 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   12841:	55                   	push   %ebp
   12842:	89 e5                	mov    %esp,%ebp
   12844:	53                   	push   %ebx
   12845:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   12848:	8b 45 08             	mov    0x8(%ebp),%eax
   1284b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   1284e:	8b 45 0c             	mov    0xc(%ebp),%eax
   12851:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   12854:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   12858:	74 1d                	je     12877 <kernel_itoa+0x36>
   1285a:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   1285e:	74 17                	je     12877 <kernel_itoa+0x36>
   12860:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12864:	74 11                	je     12877 <kernel_itoa+0x36>
   12866:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   1286a:	74 0b                	je     12877 <kernel_itoa+0x36>
    {
        *p = '\0';
   1286c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1286f:	c6 00 00             	movb   $0x0,(%eax)
        return;
   12872:	e9 03 01 00 00       	jmp    1297a <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   12877:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   1287e:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   12882:	79 19                	jns    1289d <kernel_itoa+0x5c>
   12884:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   12888:	75 13                	jne    1289d <kernel_itoa+0x5c>
    {
        *p++ = '-';
   1288a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1288d:	8d 50 01             	lea    0x1(%eax),%edx
   12890:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12893:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   12896:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   1289d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   128a1:	74 3b                	je     128de <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   128a3:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   128a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   128ac:	99                   	cltd   
   128ad:	f7 7d 10             	idivl  0x10(%ebp)
   128b0:	89 d0                	mov    %edx,%eax
   128b2:	83 c0 0f             	add    $0xf,%eax
   128b5:	01 c8                	add    %ecx,%eax
   128b7:	0f b6 00             	movzbl (%eax),%eax
   128ba:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   128bd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   128c0:	8d 50 01             	lea    0x1(%eax),%edx
   128c3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   128c6:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   128ca:	88 10                	mov    %dl,(%eax)
            num /= base;
   128cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   128cf:	99                   	cltd   
   128d0:	f7 7d 10             	idivl  0x10(%ebp)
   128d3:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   128d6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   128da:	75 c7                	jne    128a3 <kernel_itoa+0x62>
   128dc:	eb 4b                	jmp    12929 <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   128de:	8b 45 0c             	mov    0xc(%ebp),%eax
   128e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   128e4:	8b 0d 40 40 01 00    	mov    0x14040,%ecx
   128ea:	8b 5d 10             	mov    0x10(%ebp),%ebx
   128ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   128f0:	ba 00 00 00 00       	mov    $0x0,%edx
   128f5:	f7 f3                	div    %ebx
   128f7:	89 d0                	mov    %edx,%eax
   128f9:	83 c0 0f             	add    $0xf,%eax
   128fc:	01 c8                	add    %ecx,%eax
   128fe:	0f b6 00             	movzbl (%eax),%eax
   12901:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   12904:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12907:	8d 50 01             	lea    0x1(%eax),%edx
   1290a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1290d:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   12911:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   12913:	8b 5d 10             	mov    0x10(%ebp),%ebx
   12916:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12919:	ba 00 00 00 00       	mov    $0x0,%edx
   1291e:	f7 f3                	div    %ebx
   12920:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   12923:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12927:	75 bb                	jne    128e4 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   12929:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1292c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1292f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12932:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   12935:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   12939:	74 08                	je     12943 <kernel_itoa+0x102>
   1293b:	8b 45 08             	mov    0x8(%ebp),%eax
   1293e:	83 c0 01             	add    $0x1,%eax
   12941:	eb 03                	jmp    12946 <kernel_itoa+0x105>
   12943:	8b 45 08             	mov    0x8(%ebp),%eax
   12946:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   12949:	eb 27                	jmp    12972 <kernel_itoa+0x131>
    {
        char ch = *start;
   1294b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1294e:	0f b6 00             	movzbl (%eax),%eax
   12951:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   12954:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12957:	0f b6 10             	movzbl (%eax),%edx
   1295a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1295d:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   1295f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12962:	8d 50 ff             	lea    -0x1(%eax),%edx
   12965:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12968:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   1296c:	88 10                	mov    %dl,(%eax)
        start++;
   1296e:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   12972:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12975:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12978:	72 d1                	jb     1294b <kernel_itoa+0x10a>
    }
}
   1297a:	83 c4 20             	add    $0x20,%esp
   1297d:	5b                   	pop    %ebx
   1297e:	5d                   	pop    %ebp
   1297f:	c3                   	ret    

00012980 <kernel_vsprintf>:
// buf 为最终显示的目标
// fmt 为整个字符串
// args 为va_list 可变变量
void kernel_vsprintf(char *buf, const char *fmt, va_list args)
{
   12980:	55                   	push   %ebp
   12981:	89 e5                	mov    %esp,%ebp
   12983:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   12986:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buf;
   1298d:	8b 45 08             	mov    0x8(%ebp),%eax
   12990:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   12993:	e9 17 01 00 00       	jmp    12aaf <kernel_vsprintf+0x12f>
    {
        switch (state)
   12998:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1299b:	85 c0                	test   %eax,%eax
   1299d:	74 0a                	je     129a9 <kernel_vsprintf+0x29>
   1299f:	83 f8 01             	cmp    $0x1,%eax
   129a2:	74 2b                	je     129cf <kernel_vsprintf+0x4f>
   129a4:	e9 06 01 00 00       	jmp    12aaf <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   129a9:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   129ad:	75 0c                	jne    129bb <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   129af:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   129b6:	e9 f4 00 00 00       	jmp    12aaf <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   129bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   129be:	8d 50 01             	lea    0x1(%eax),%edx
   129c1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   129c4:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   129c8:	88 10                	mov    %dl,(%eax)
            }
            break;
   129ca:	e9 e0 00 00 00       	jmp    12aaf <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   129cf:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   129d3:	75 31                	jne    12a06 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   129d5:	8b 45 10             	mov    0x10(%ebp),%eax
   129d8:	8d 50 04             	lea    0x4(%eax),%edx
   129db:	89 55 10             	mov    %edx,0x10(%ebp)
   129de:	8b 00                	mov    (%eax),%eax
   129e0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   129e3:	6a 0a                	push   $0xa
   129e5:	ff 75 e4             	pushl  -0x1c(%ebp)
   129e8:	ff 75 f8             	pushl  -0x8(%ebp)
   129eb:	e8 51 fe ff ff       	call   12841 <kernel_itoa>
   129f0:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr); // 移动到下一个
   129f3:	ff 75 f8             	pushl  -0x8(%ebp)
   129f6:	e8 1d fd ff ff       	call   12718 <kernel_strlen>
   129fb:	83 c4 04             	add    $0x4,%esp
   129fe:	01 45 f8             	add    %eax,-0x8(%ebp)
   12a01:	e9 a1 00 00 00       	jmp    12aa7 <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   12a06:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   12a0a:	75 2e                	jne    12a3a <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   12a0c:	8b 45 10             	mov    0x10(%ebp),%eax
   12a0f:	8d 50 04             	lea    0x4(%eax),%edx
   12a12:	89 55 10             	mov    %edx,0x10(%ebp)
   12a15:	8b 00                	mov    (%eax),%eax
   12a17:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   12a1a:	6a 10                	push   $0x10
   12a1c:	ff 75 e8             	pushl  -0x18(%ebp)
   12a1f:	ff 75 f8             	pushl  -0x8(%ebp)
   12a22:	e8 1a fe ff ff       	call   12841 <kernel_itoa>
   12a27:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   12a2a:	ff 75 f8             	pushl  -0x8(%ebp)
   12a2d:	e8 e6 fc ff ff       	call   12718 <kernel_strlen>
   12a32:	83 c4 04             	add    $0x4,%esp
   12a35:	01 45 f8             	add    %eax,-0x8(%ebp)
   12a38:	eb 6d                	jmp    12aa7 <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   12a3a:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   12a3e:	75 1f                	jne    12a5f <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   12a40:	8b 45 10             	mov    0x10(%ebp),%eax
   12a43:	8d 50 04             	lea    0x4(%eax),%edx
   12a46:	89 55 10             	mov    %edx,0x10(%ebp)
   12a49:	8b 00                	mov    (%eax),%eax
   12a4b:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   12a4e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a51:	8d 50 01             	lea    0x1(%eax),%edx
   12a54:	89 55 f8             	mov    %edx,-0x8(%ebp)
   12a57:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   12a5b:	88 10                	mov    %dl,(%eax)
   12a5d:	eb 48                	jmp    12aa7 <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   12a5f:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   12a63:	75 42                	jne    12aa7 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   12a65:	8b 45 10             	mov    0x10(%ebp),%eax
   12a68:	8d 50 04             	lea    0x4(%eax),%edx
   12a6b:	89 55 10             	mov    %edx,0x10(%ebp)
   12a6e:	8b 00                	mov    (%eax),%eax
   12a70:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   12a73:	ff 75 f4             	pushl  -0xc(%ebp)
   12a76:	e8 9d fc ff ff       	call   12718 <kernel_strlen>
   12a7b:	83 c4 04             	add    $0x4,%esp
   12a7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   12a81:	eb 17                	jmp    12a9a <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   12a83:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12a86:	8d 42 01             	lea    0x1(%edx),%eax
   12a89:	89 45 f4             	mov    %eax,-0xc(%ebp)
   12a8c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12a8f:	8d 48 01             	lea    0x1(%eax),%ecx
   12a92:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   12a95:	0f b6 12             	movzbl (%edx),%edx
   12a98:	88 10                	mov    %dl,(%eax)
                while (len--)
   12a9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12a9d:	8d 50 ff             	lea    -0x1(%eax),%edx
   12aa0:	89 55 f0             	mov    %edx,-0x10(%ebp)
   12aa3:	85 c0                	test   %eax,%eax
   12aa5:	75 dc                	jne    12a83 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   12aa7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   12aae:	90                   	nop
    while ((ch = *fmt++))
   12aaf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ab2:	8d 50 01             	lea    0x1(%eax),%edx
   12ab5:	89 55 0c             	mov    %edx,0xc(%ebp)
   12ab8:	0f b6 00             	movzbl (%eax),%eax
   12abb:	88 45 ef             	mov    %al,-0x11(%ebp)
   12abe:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   12ac2:	0f 85 d0 fe ff ff    	jne    12998 <kernel_vsprintf+0x18>
        }
    }
}
   12ac8:	90                   	nop
   12ac9:	c9                   	leave  
   12aca:	c3                   	ret    

00012acb <panic>:

void panic(const char *file, int line, const char *func, const char *cond)
{
   12acb:	55                   	push   %ebp
   12acc:	89 e5                	mov    %esp,%ebp
   12ace:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   12ad1:	83 ec 08             	sub    $0x8,%esp
   12ad4:	ff 75 14             	pushl  0x14(%ebp)
   12ad7:	68 e4 37 01 00       	push   $0x137e4
   12adc:	e8 cd 02 00 00       	call   12dae <log_printf>
   12ae1:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   12ae4:	ff 75 10             	pushl  0x10(%ebp)
   12ae7:	ff 75 0c             	pushl  0xc(%ebp)
   12aea:	ff 75 08             	pushl  0x8(%ebp)
   12aed:	68 f6 37 01 00       	push   $0x137f6
   12af2:	e8 b7 02 00 00       	call   12dae <log_printf>
   12af7:	83 c4 10             	add    $0x10,%esp

    for (;;)
    {
        hlt();
   12afa:	e8 dd fa ff ff       	call   125dc <hlt>
   12aff:	eb f9                	jmp    12afa <panic+0x2f>

00012b01 <list_is_empty>:
{
   12b01:	55                   	push   %ebp
   12b02:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   12b04:	8b 45 08             	mov    0x8(%ebp),%eax
   12b07:	8b 40 08             	mov    0x8(%eax),%eax
   12b0a:	85 c0                	test   %eax,%eax
   12b0c:	0f 94 c0             	sete   %al
   12b0f:	0f b6 c0             	movzbl %al,%eax
}
   12b12:	5d                   	pop    %ebp
   12b13:	c3                   	ret    

00012b14 <list_init>:
/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list)
{
   12b14:	55                   	push   %ebp
   12b15:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   12b17:	8b 45 08             	mov    0x8(%ebp),%eax
   12b1a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12b21:	8b 45 08             	mov    0x8(%ebp),%eax
   12b24:	8b 50 04             	mov    0x4(%eax),%edx
   12b27:	8b 45 08             	mov    0x8(%ebp),%eax
   12b2a:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   12b2c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b2f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   12b36:	90                   	nop
   12b37:	5d                   	pop    %ebp
   12b38:	c3                   	ret    

00012b39 <list_insert_first>:
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node)
{
   12b39:	55                   	push   %ebp
   12b3a:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   12b3c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3f:	8b 10                	mov    (%eax),%edx
   12b41:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b44:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   12b47:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b4a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list))
   12b50:	ff 75 08             	pushl  0x8(%ebp)
   12b53:	e8 a9 ff ff ff       	call   12b01 <list_is_empty>
   12b58:	83 c4 04             	add    $0x4,%esp
   12b5b:	85 c0                	test   %eax,%eax
   12b5d:	74 15                	je     12b74 <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   12b5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b62:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b65:	89 10                	mov    %edx,(%eax)
   12b67:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6a:	8b 10                	mov    (%eax),%edx
   12b6c:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6f:	89 50 04             	mov    %edx,0x4(%eax)
   12b72:	eb 12                	jmp    12b86 <list_insert_first+0x4d>
    }
    else
    {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   12b74:	8b 45 08             	mov    0x8(%ebp),%eax
   12b77:	8b 00                	mov    (%eax),%eax
   12b79:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b7c:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   12b7e:	8b 45 08             	mov    0x8(%ebp),%eax
   12b81:	8b 55 0c             	mov    0xc(%ebp),%edx
   12b84:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   12b86:	8b 45 08             	mov    0x8(%ebp),%eax
   12b89:	8b 40 08             	mov    0x8(%eax),%eax
   12b8c:	8d 50 01             	lea    0x1(%eax),%edx
   12b8f:	8b 45 08             	mov    0x8(%ebp),%eax
   12b92:	89 50 08             	mov    %edx,0x8(%eax)
}
   12b95:	90                   	nop
   12b96:	c9                   	leave  
   12b97:	c3                   	ret    

00012b98 <list_insert_last>:
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node)
{
   12b98:	55                   	push   %ebp
   12b99:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   12b9b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b9e:	8b 50 04             	mov    0x4(%eax),%edx
   12ba1:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ba4:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   12ba6:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ba9:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list))
   12bb0:	ff 75 08             	pushl  0x8(%ebp)
   12bb3:	e8 49 ff ff ff       	call   12b01 <list_is_empty>
   12bb8:	83 c4 04             	add    $0x4,%esp
   12bbb:	85 c0                	test   %eax,%eax
   12bbd:	74 16                	je     12bd5 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   12bbf:	8b 45 08             	mov    0x8(%ebp),%eax
   12bc2:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bc5:	89 50 04             	mov    %edx,0x4(%eax)
   12bc8:	8b 45 08             	mov    0x8(%ebp),%eax
   12bcb:	8b 50 04             	mov    0x4(%eax),%edx
   12bce:	8b 45 08             	mov    0x8(%ebp),%eax
   12bd1:	89 10                	mov    %edx,(%eax)
   12bd3:	eb 15                	jmp    12bea <list_insert_last+0x52>
    }
    else
    {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   12bd5:	8b 45 08             	mov    0x8(%ebp),%eax
   12bd8:	8b 40 04             	mov    0x4(%eax),%eax
   12bdb:	8b 55 0c             	mov    0xc(%ebp),%edx
   12bde:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   12be1:	8b 45 08             	mov    0x8(%ebp),%eax
   12be4:	8b 55 0c             	mov    0xc(%ebp),%edx
   12be7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   12bea:	8b 45 08             	mov    0x8(%ebp),%eax
   12bed:	8b 40 08             	mov    0x8(%eax),%eax
   12bf0:	8d 50 01             	lea    0x1(%eax),%edx
   12bf3:	8b 45 08             	mov    0x8(%ebp),%eax
   12bf6:	89 50 08             	mov    %edx,0x8(%eax)
}
   12bf9:	90                   	nop
   12bfa:	c9                   	leave  
   12bfb:	c3                   	ret    

00012bfc <list_remove_first>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t *list_remove_first(list_t *list)
{
   12bfc:	55                   	push   %ebp
   12bfd:	89 e5                	mov    %esp,%ebp
   12bff:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list))
   12c02:	ff 75 08             	pushl  0x8(%ebp)
   12c05:	e8 f7 fe ff ff       	call   12b01 <list_is_empty>
   12c0a:	83 c4 04             	add    $0x4,%esp
   12c0d:	85 c0                	test   %eax,%eax
   12c0f:	74 07                	je     12c18 <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   12c11:	b8 00 00 00 00       	mov    $0x0,%eax
   12c16:	eb 5a                	jmp    12c72 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t *remove_node = list->first;
   12c18:	8b 45 08             	mov    0x8(%ebp),%eax
   12c1b:	8b 00                	mov    (%eax),%eax
   12c1d:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   12c20:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c23:	8b 50 04             	mov    0x4(%eax),%edx
   12c26:	8b 45 08             	mov    0x8(%ebp),%eax
   12c29:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0)
   12c2b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2e:	8b 00                	mov    (%eax),%eax
   12c30:	85 c0                	test   %eax,%eax
   12c32:	75 0c                	jne    12c40 <list_remove_first+0x44>
    {
        // node为最后一个结点
        list->last = (list_node_t *)0;
   12c34:	8b 45 08             	mov    0x8(%ebp),%eax
   12c37:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12c3e:	eb 0c                	jmp    12c4c <list_remove_first+0x50>
    }
    else
    {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   12c40:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c43:	8b 40 04             	mov    0x4(%eax),%eax
   12c46:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t *)0;
   12c4c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c4f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   12c55:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c58:	8b 10                	mov    (%eax),%edx
   12c5a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12c5d:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   12c60:	8b 45 08             	mov    0x8(%ebp),%eax
   12c63:	8b 40 08             	mov    0x8(%eax),%eax
   12c66:	8d 50 ff             	lea    -0x1(%eax),%edx
   12c69:	8b 45 08             	mov    0x8(%ebp),%eax
   12c6c:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   12c6f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12c72:	c9                   	leave  
   12c73:	c3                   	ret    

00012c74 <list_remove>:
/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t *list_remove(list_t *list, list_node_t *remove_node)
{
   12c74:	55                   	push   %ebp
   12c75:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first)
   12c77:	8b 45 08             	mov    0x8(%ebp),%eax
   12c7a:	8b 00                	mov    (%eax),%eax
   12c7c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c7f:	75 0b                	jne    12c8c <list_remove+0x18>
    {
        list->first = remove_node->next;
   12c81:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c84:	8b 50 04             	mov    0x4(%eax),%edx
   12c87:	8b 45 08             	mov    0x8(%ebp),%eax
   12c8a:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last)
   12c8c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c8f:	8b 40 04             	mov    0x4(%eax),%eax
   12c92:	39 45 0c             	cmp    %eax,0xc(%ebp)
   12c95:	75 0b                	jne    12ca2 <list_remove+0x2e>
    {
        list->last = remove_node->pre;
   12c97:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c9a:	8b 10                	mov    (%eax),%edx
   12c9c:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre)
   12ca2:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ca5:	8b 00                	mov    (%eax),%eax
   12ca7:	85 c0                	test   %eax,%eax
   12ca9:	74 0e                	je     12cb9 <list_remove+0x45>
    {
        remove_node->pre->next = remove_node->next;
   12cab:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cae:	8b 00                	mov    (%eax),%eax
   12cb0:	8b 55 0c             	mov    0xc(%ebp),%edx
   12cb3:	8b 52 04             	mov    0x4(%edx),%edx
   12cb6:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next)
   12cb9:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cbc:	8b 40 04             	mov    0x4(%eax),%eax
   12cbf:	85 c0                	test   %eax,%eax
   12cc1:	74 0d                	je     12cd0 <list_remove+0x5c>
    {
        remove_node->next->pre = remove_node->pre;
   12cc3:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cc6:	8b 40 04             	mov    0x4(%eax),%eax
   12cc9:	8b 55 0c             	mov    0xc(%ebp),%edx
   12ccc:	8b 12                	mov    (%edx),%edx
   12cce:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t *)0;
   12cd0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cd3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   12cda:	8b 45 0c             	mov    0xc(%ebp),%eax
   12cdd:	8b 50 04             	mov    0x4(%eax),%edx
   12ce0:	8b 45 0c             	mov    0xc(%ebp),%eax
   12ce3:	89 10                	mov    %edx,(%eax)
    --list->count;
   12ce5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ce8:	8b 40 08             	mov    0x8(%eax),%eax
   12ceb:	8d 50 ff             	lea    -0x1(%eax),%edx
   12cee:	8b 45 08             	mov    0x8(%ebp),%eax
   12cf1:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   12cf4:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   12cf7:	5d                   	pop    %ebp
   12cf8:	c3                   	ret    

00012cf9 <inb>:
{
   12cf9:	55                   	push   %ebp
   12cfa:	89 e5                	mov    %esp,%ebp
   12cfc:	83 ec 14             	sub    $0x14,%esp
   12cff:	8b 45 08             	mov    0x8(%ebp),%eax
   12d02:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   12d06:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12d0a:	89 c2                	mov    %eax,%edx
   12d0c:	ec                   	in     (%dx),%al
   12d0d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12d10:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12d14:	c9                   	leave  
   12d15:	c3                   	ret    

00012d16 <outb>:
{
   12d16:	55                   	push   %ebp
   12d17:	89 e5                	mov    %esp,%ebp
   12d19:	83 ec 08             	sub    $0x8,%esp
   12d1c:	8b 55 08             	mov    0x8(%ebp),%edx
   12d1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d22:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12d26:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   12d29:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d2d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d31:	ee                   	out    %al,(%dx)
}
   12d32:	90                   	nop
   12d33:	c9                   	leave  
   12d34:	c3                   	ret    

00012d35 <log_init>:
#define COM1_PORT 0x3F8 // RS232端口0初始化

static mutex_t mutex;

void log_init(void)
{
   12d35:	55                   	push   %ebp
   12d36:	89 e5                	mov    %esp,%ebp
   12d38:	83 ec 08             	sub    $0x8,%esp
    outb(COM1_PORT + 1, 0x00); // Disable all interrupts
   12d3b:	6a 00                	push   $0x0
   12d3d:	68 f9 03 00 00       	push   $0x3f9
   12d42:	e8 cf ff ff ff       	call   12d16 <outb>
   12d47:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x80); // Enable DLAB (set baud rate divisor)
   12d4a:	68 80 00 00 00       	push   $0x80
   12d4f:	68 fb 03 00 00       	push   $0x3fb
   12d54:	e8 bd ff ff ff       	call   12d16 <outb>
   12d59:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 0, 0x03); // Set divisor to 3 (lo byte) 38400 baud
   12d5c:	6a 03                	push   $0x3
   12d5e:	68 f8 03 00 00       	push   $0x3f8
   12d63:	e8 ae ff ff ff       	call   12d16 <outb>
   12d68:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
   12d6b:	6a 00                	push   $0x0
   12d6d:	68 f9 03 00 00       	push   $0x3f9
   12d72:	e8 9f ff ff ff       	call   12d16 <outb>
   12d77:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
   12d7a:	6a 03                	push   $0x3
   12d7c:	68 fb 03 00 00       	push   $0x3fb
   12d81:	e8 90 ff ff ff       	call   12d16 <outb>
   12d86:	83 c4 08             	add    $0x8,%esp
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
   12d89:	68 c7 00 00 00       	push   $0xc7
   12d8e:	68 fa 03 00 00       	push   $0x3fa
   12d93:	e8 7e ff ff ff       	call   12d16 <outb>
   12d98:	83 c4 08             	add    $0x8,%esp
    mutex_init(&mutex);
   12d9b:	83 ec 0c             	sub    $0xc,%esp
   12d9e:	68 c4 ad 01 00       	push   $0x1adc4
   12da3:	e8 2c f3 ff ff       	call   120d4 <mutex_init>
   12da8:	83 c4 10             	add    $0x10,%esp
}
   12dab:	90                   	nop
   12dac:	c9                   	leave  
   12dad:	c3                   	ret    

00012dae <log_printf>:

void log_printf(const char *fmt, ...)
{
   12dae:	55                   	push   %ebp
   12daf:	89 e5                	mov    %esp,%ebp
   12db1:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   12db7:	83 ec 04             	sub    $0x4,%esp
   12dba:	68 80 00 00 00       	push   $0x80
   12dbf:	6a 00                	push   $0x0
   12dc1:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12dc7:	50                   	push   %eax
   12dc8:	e8 d5 f9 ff ff       	call   127a2 <kernel_memset>
   12dcd:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   12dd0:	8d 45 0c             	lea    0xc(%ebp),%eax
   12dd3:	89 85 70 ff ff ff    	mov    %eax,-0x90(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   12dd9:	8b 85 70 ff ff ff    	mov    -0x90(%ebp),%eax
   12ddf:	83 ec 04             	sub    $0x4,%esp
   12de2:	50                   	push   %eax
   12de3:	ff 75 08             	pushl  0x8(%ebp)
   12de6:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12dec:	50                   	push   %eax
   12ded:	e8 8e fb ff ff       	call   12980 <kernel_vsprintf>
   12df2:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 临界区进入
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   12df5:	83 ec 0c             	sub    $0xc,%esp
   12df8:	68 c4 ad 01 00       	push   $0x1adc4
   12dfd:	e8 00 f3 ff ff       	call   12102 <mutex_lock>
   12e02:	83 c4 10             	add    $0x10,%esp
    const char *p = str_buf;
   12e05:	8d 85 74 ff ff ff    	lea    -0x8c(%ebp),%eax
   12e0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (*p != '\0')
   12e0e:	eb 3b                	jmp    12e4b <log_printf+0x9d>
    {
        // 检查串口是否忙
        while ((inb(COM1_PORT + 5) & (1 << 6)) == 0)
   12e10:	90                   	nop
   12e11:	83 ec 0c             	sub    $0xc,%esp
   12e14:	68 fd 03 00 00       	push   $0x3fd
   12e19:	e8 db fe ff ff       	call   12cf9 <inb>
   12e1e:	83 c4 10             	add    $0x10,%esp
   12e21:	0f b6 c0             	movzbl %al,%eax
   12e24:	83 e0 40             	and    $0x40,%eax
   12e27:	85 c0                	test   %eax,%eax
   12e29:	74 e6                	je     12e11 <log_printf+0x63>
        {
        }
        outb(COM1_PORT, *p++);
   12e2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e2e:	8d 50 01             	lea    0x1(%eax),%edx
   12e31:	89 55 f4             	mov    %edx,-0xc(%ebp)
   12e34:	0f b6 00             	movzbl (%eax),%eax
   12e37:	0f b6 c0             	movzbl %al,%eax
   12e3a:	83 ec 08             	sub    $0x8,%esp
   12e3d:	50                   	push   %eax
   12e3e:	68 f8 03 00 00       	push   $0x3f8
   12e43:	e8 ce fe ff ff       	call   12d16 <outb>
   12e48:	83 c4 10             	add    $0x10,%esp
    while (*p != '\0')
   12e4b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e4e:	0f b6 00             	movzbl (%eax),%eax
   12e51:	84 c0                	test   %al,%al
   12e53:	75 bb                	jne    12e10 <log_printf+0x62>
    }
    // 增加默认换行
    outb(COM1_PORT, '\r'); // 行号不变，列号归零
   12e55:	83 ec 08             	sub    $0x8,%esp
   12e58:	6a 0d                	push   $0xd
   12e5a:	68 f8 03 00 00       	push   $0x3f8
   12e5f:	e8 b2 fe ff ff       	call   12d16 <outb>
   12e64:	83 c4 10             	add    $0x10,%esp
    outb(COM1_PORT, '\n'); // 列号不变，行号+1
   12e67:	83 ec 08             	sub    $0x8,%esp
   12e6a:	6a 0a                	push   $0xa
   12e6c:	68 f8 03 00 00       	push   $0x3f8
   12e71:	e8 a0 fe ff ff       	call   12d16 <outb>
   12e76:	83 c4 10             	add    $0x10,%esp
    // irq_leave_protection(state); // 临界区退出
    mutex_unlock(&mutex);
   12e79:	83 ec 0c             	sub    $0xc,%esp
   12e7c:	68 c4 ad 01 00       	push   $0x1adc4
   12e81:	e8 10 f3 ff ff       	call   12196 <mutex_unlock>
   12e86:	83 c4 10             	add    $0x10,%esp
   12e89:	90                   	nop
   12e8a:	c9                   	leave  
   12e8b:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
8000000b:	e9 b9 00 00 00       	jmp    800000c9 <first_task_main>

80000010 <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	57                   	push   %edi
80000014:	56                   	push   %esi
80000015:	53                   	push   %ebx
80000016:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
80000019:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000020:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
80000027:	8b 45 08             	mov    0x8(%ebp),%eax
8000002a:	8b 40 10             	mov    0x10(%eax),%eax
8000002d:	8b 55 08             	mov    0x8(%ebp),%edx
80000030:	8b 52 0c             	mov    0xc(%edx),%edx
80000033:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000036:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
80000039:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000003c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8000003f:	8b 75 08             	mov    0x8(%ebp),%esi
80000042:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000044:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000047:	50                   	push   %eax
80000048:	52                   	push   %edx
80000049:	51                   	push   %ecx
8000004a:	53                   	push   %ebx
8000004b:	56                   	push   %esi
8000004c:	ff 1f                	lcall  *(%edi)
8000004e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
80000051:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000054:	83 c4 10             	add    $0x10,%esp
80000057:	5b                   	pop    %ebx
80000058:	5e                   	pop    %esi
80000059:	5f                   	pop    %edi
8000005a:	5d                   	pop    %ebp
8000005b:	c3                   	ret    

8000005c <msleep>:

static inline void msleep(int ms)
{
8000005c:	55                   	push   %ebp
8000005d:	89 e5                	mov    %esp,%ebp
8000005f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
80000062:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000066:	7e 1b                	jle    80000083 <msleep+0x27>
    {
        return;
    }

    syscall_args_t args;
    args.id = SYS_msleep;
80000068:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000006f:	8b 45 08             	mov    0x8(%ebp),%eax
80000072:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000075:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000078:	50                   	push   %eax
80000079:	e8 92 ff ff ff       	call   80000010 <sys_call>
8000007e:	83 c4 04             	add    $0x4,%esp
80000081:	eb 01                	jmp    80000084 <msleep+0x28>
        return;
80000083:	90                   	nop
}
80000084:	c9                   	leave  
80000085:	c3                   	ret    

80000086 <getpid>:

static inline int getpid(void)
{
80000086:	55                   	push   %ebp
80000087:	89 e5                	mov    %esp,%ebp
80000089:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000008c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000093:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000096:	50                   	push   %eax
80000097:	e8 74 ff ff ff       	call   80000010 <sys_call>
8000009c:	83 c4 04             	add    $0x4,%esp
}
8000009f:	c9                   	leave  
800000a0:	c3                   	ret    

800000a1 <print_msg>:

static inline void print_msg(const char *fmt, int arg)
{
800000a1:	55                   	push   %ebp
800000a2:	89 e5                	mov    %esp,%ebp
800000a4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
800000a7:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
800000ae:	8b 45 08             	mov    0x8(%ebp),%eax
800000b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
800000b4:	8b 45 0c             	mov    0xc(%ebp),%eax
800000b7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
800000ba:	8d 45 ec             	lea    -0x14(%ebp),%eax
800000bd:	50                   	push   %eax
800000be:	e8 4d ff ff ff       	call   80000010 <sys_call>
800000c3:	83 c4 04             	add    $0x4,%esp
}
800000c6:	90                   	nop
800000c7:	c9                   	leave  
800000c8:	c3                   	ret    

800000c9 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"
#include "applib/lib_syscall.h"

int first_task_main(void)
{
800000c9:	55                   	push   %ebp
800000ca:	89 e5                	mov    %esp,%ebp
800000cc:	83 ec 10             	sub    $0x10,%esp
    int pid = getpid();
800000cf:	e8 b2 ff ff ff       	call   80000086 <getpid>
800000d4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (;;)
    {
        print_msg("task id=%d", pid);
800000d7:	ff 75 fc             	pushl  -0x4(%ebp)
800000da:	68 46 37 01 00       	push   $0x13746
800000df:	e8 bd ff ff ff       	call   800000a1 <print_msg>
800000e4:	83 c4 08             	add    $0x8,%esp
        // log_printf("first task.");
        // sys_msleep(1000);
        msleep(1000);
800000e7:	68 e8 03 00 00       	push   $0x3e8
800000ec:	e8 6b ff ff ff       	call   8000005c <msleep>
800000f1:	83 c4 04             	add    $0x4,%esp
        print_msg("task id=%d", pid);
800000f4:	eb e1                	jmp    800000d7 <first_task_main+0xe>
