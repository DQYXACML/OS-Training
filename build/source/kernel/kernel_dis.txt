
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00006da4 memsz 0x00006da4 flags r-x
    LOAD off    0x00008000 vaddr 0x00017000 paddr 0x00017000 align 2**12
         filesz 0x0000009c memsz 0x0005d47c flags rw-
    LOAD off    0x00009000 vaddr 0x80000000 paddr 0x0007447c align 2**12
         filesz 0x00000343 memsz 0x00000343 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005e7c  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .first_task   00000343  80000000  0007447c  00009000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  2 .data         0000009c  00017000  00017000  00008000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0005c47c  00018000  00018000  0000809c  2**12
                  ALLOC
  4 .debug_line   000036e8  00000000  00000000  00009343  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000c48d  00000000  00000000  0000ca2b  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002913  00000000  00000000  00018eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 000002e0  00000000  00000000  0001b7d0  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .rodata       00000f24  00015e80  00015e80  00006e80  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_ranges 000000a8  00000000  00000000  0001bab0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000238f  00000000  00000000  0001bb58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0001dee7  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002244  00000000  00000000  0001def8  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
80000000 l    d  .first_task	00000000 .first_task
00017000 l    d  .data	00000000 .data
00018000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00015e80 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010311 l     F .text	00000017 up2
00010328 l     F .text	0000000d down2
00010335 l     F .text	0000000c write_cr3
00010341 l     F .text	00000014 pde_index
00010355 l     F .text	00000027 pde_paddr
0001037c l     F .text	00000010 pte_index
0001038c l     F .text	00000027 pte_paddr
000103b3 l     F .text	0000000f get_pte_perm
000103c2 l     F .text	00000011 mmu_set_page_dir
0001a000 l     O .bss	00000028 paddr_alloc
0001b000 l     O .bss	00001000 kernel_page_dir
000103d3 l     F .text	00000013 current_page_dir
000103e6 l     F .text	00000058 addr_alloc_init
0001043e l     F .text	00000067 addr_alloc_page
000104a5 l     F .text	00000062 addr_free_page
00010507 l     F .text	00000066 show_mem_info
0001056d l     F .text	0000003c total_mem_size
00015fe8 l     O .rodata	00000012 __func__.2383
00017000 l     O .data	00000050 kernel_map.2395
00015ffc l     O .rodata	00000013 __func__.2423
00016010 l     O .rodata	00000011 __func__.2496
00016024 l     O .rodata	0000000c __func__.2508
00016030 l     O .rodata	00000009 __func__.2516
00000000 l    df *ABS*	00000000 syscall.c
00016040 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010f95 l     F .text	0000001b list_node_init
00010fb0 l     F .text	0000000b list_node_next
00010fbb l     F .text	0000000b list_count
00010fc6 l     F .text	0000000a list_first
00010fd0 l     F .text	0000000c write_cr3
00010fdc l     F .text	00000007 hlt
00010fe3 l     F .text	0000000c write_tr
00010fef l     F .text	00000011 mmu_set_page_dir
0001c000 l     O .bss	00001000 idle_task_stack
0001d000 l     O .bss	000005b8 task_manager
0001d5c0 l     O .bss	00016200 task_table
000337c0 l     O .bss	00000014 task_table_mutex
00011000 l     F .text	000001ab tss_init
0001638c l     O .rodata	0000000a __func__.2857
00016398 l     O .rodata	00000010 __func__.2877
0001142e l     F .text	0000000a idle_task_entry
000115ec l     F .text	00000043 task_next_run
00011832 l     F .text	00000069 alloc_task
0001189b l     F .text	00000030 free_task
00011af8 l     F .text	00000129 load_phdr
000163a8 l     O .rodata	0000000a __func__.2972
00011c21 l     F .text	00000213 load_elf_file
00011e34 l     F .text	00000130 copy_args
000163b4 l     O .rodata	0000000a __func__.3007
00000000 l    df *ABS*	00000000 cpu.c
0001222e l     F .text	00000028 lgdt
00012256 l     F .text	0000001a far_jump
000337e0 l     O .bss	00000800 gdt_table
00033fe0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
000124a0 l     F .text	0000001d inb
000124bd l     F .text	0000001f outb
000124dc l     F .text	00000007 cli
000124e3 l     F .text	00000007 sti
000124ea l     F .text	00000028 lidt
00012512 l     F .text	00000011 read_cr2
00012523 l     F .text	00000007 hlt
0001252a l     F .text	00000010 read_eflags
0001253a l     F .text	0000000b write_eflags
00034000 l     O .bss	00000400 idt_table
00012545 l     F .text	000000ff dump_core_regs
00012644 l     F .text	0000004e do_default_handler
00012a13 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
00012e0a l     F .text	0000001d inb
00012e27 l     F .text	0000001f outb
00034400 l     O .bss	00000340 console_buf
00034740 l     O .bss	00000004 curr_console_idx
00012e46 l     F .text	00000074 read_cursor_pos
00012eba l     F .text	000000c1 update_cursor_pos
00012f7b l     F .text	00000085 clear_display
00013000 l     F .text	00000091 erase_rows
00013091 l     F .text	00000088 scroll_up
00013119 l     F .text	00000010 move_to_col0
00013129 l     F .text	00000038 move_next_line
00013161 l     F .text	00000076 move_forward
000131d7 l     F .text	00000094 show_char
0001338e l     F .text	00000078 move_backword
00013406 l     F .text	0000003a erase_backword
00013440 l     F .text	00000073 move_next_tab
000134b3 l     F .text	000000b8 write_normal
0001356b l     F .text	00000037 move_left
000135a2 l     F .text	00000049 move_right
000135eb l     F .text	00000033 move_cursor
0001361e l     F .text	00000029 clear_esc_param
00013647 l     F .text	00000075 write_esc
000136bc l     F .text	00000051 erase_in_display
0001370d l     F .text	00000099 set_font_style
00016960 l     O .rodata	00000020 color_table.2406
000137a6 l     F .text	00000107 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
00017050 l     O .data	00000004 dev_desc_tbl
00034760 l     O .bss	00000a00 dev_tbl
00013b4a l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 kbd.c
00013e39 l     F .text	0000001d inb
00013e56 l     F .text	0000001f outb
00035160 l     O .bss	00000004 kbd_state
00016980 l     O .rodata	00000200 map_table
00013e75 l     F .text	00000015 get_key
00013e8a l     F .text	0000001a is_make_code
00013f4e l     F .text	00000045 update_led_status
00013f93 l     F .text	0000003c do_fx_key
00013fcf l     F .text	000001d0 do_normal_key
0001419f l     F .text	0000008a do_e0_key
00035164 l     O .bss	00000004 recv_state.2126
00035168 l     O .bss	00000004 inited.2136
00000000 l    df *ABS*	00000000 time.c
0001432b l     F .text	0000001f outb
0003516c l     O .bss	00000004 sys_tick
0001434a l     F .text	00000060 init_pic
00000000 l    df *ABS*	00000000 tty.c
00035180 l     O .bss	000022a0 tty_devs
00037420 l     O .bss	00000004 curr_tty
0001452a l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 file.c
00037440 l     O .bss	00024000 file_table
0005b440 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00014b0b l     F .text	0000001d inb
00014b28 l     F .text	0000001f inw
00014b47 l     F .text	0000001f outb
0005b460 l     O .bss	00019000 TEMP_ADDR
00074460 l     O .bss	00000004 temp_pos
00014b66 l     F .text	0000001d is_fd_bad
00014b83 l     F .text	0000012f read_disk
00014cb2 l     F .text	00000021 is_path_valid
00000000 l    df *ABS*	00000000 init.c
00016d40 l     O .rodata	00000013 __func__.2852
00000000 l    df *ABS*	00000000 mutex.c
000150f4 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
0001527e l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00015607 l     F .text	00000007 hlt
00017098 l     O .data	00000004 num2ch.1927
00000000 l    df *ABS*	00000000 list.c
00015b9f l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
00074464 l     O .bss	00000004 log_dev_id
00074468 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000ce l     F .first_task	0000004c sys_call
000154ff g     F .text	0000003a bitmap_get_bit
0001577e g     F .text	0000004f kernel_memcpy
00014f39 g     F .text	0000000a sys_close
00011581 g     F .text	0000000a task_current
800001cf g     F .first_task	0000001b yield
00012dab g     F .text	0000000b irq_enable_global
00015c36 g     F .text	00000064 list_insert_last
00012182 g     F .text	00000032 task_file
000102b2 g       .text	00000000 exception_handler_kbd
00010dda g     F .text	0000010c sys_sbrk
00012121 g     F .text	00000061 sys_yield
000117ce g     F .text	00000064 sys_msleep
000127c6 g     F .text	0000001c do_handler_segment_not_present
00011522 g     F .text	00000034 task_set_ready
00015539 g     F .text	0000001b bitmap_is_set
000157cd g     F .text	00000041 kernel_memset
00013d1e g     F .text	0000004c dev_write
00014f15 g     F .text	00000024 sys_lseek
000142eb g     F .text	00000040 kbd_init
00010274 g       .text	00000000 exception_handler_virtual_exception
00010f00 g     F .text	00000095 do_handler_syscall
00015b72 g     F .text	0000002d strings_count
0001246f g     F .text	0000001e cpu_init
00015d97 g     F .text	0000002f log_init
0001196a g     F .text	0000018e sys_fork
0001509e g     F .text	00000056 init_main
00010219 g       .text	00000000 exception_handler_alignment_check
000122ef g     F .text	00000039 gdt_free_sel
00010ee6 g     F .text	0000001a sys_print_msg
0001560e g     F .text	00000047 kernel_strcpy
00017000 g       .data	00000000 s_data
800001a2 g     F .first_task	0000002d execve
80000144 g     F .first_task	0000001b getpid
00012c8e g     F .text	0000008b irq_enable
00010035 g       .text	00000000 exception_handler_unknown
000100b1 g       .text	00000000 exception_handler_breakpoint
0001271e g     F .text	0000001c do_handler_overflow
0001281a g     F .text	0000001c do_handler_alignment_check
00010659 g     F .text	0000008c memory_create_map
00014e42 g     F .text	00000086 sys_read
00013f05 g     F .text	00000035 kbd_wait_recv_ready
000138ad g     F .text	000000b7 console_select
000101c0 g       .text	00000000 exception_handler_general_protection
0001288a g     F .text	000000b5 do_handler_general_protection
00013289 g     F .text	0000001e restore_cursor
00015399 g     F .text	00000029 sem_count
80000010 g     F .first_task	000000be first_task_main
000126ae g     F .text	0000001c do_handler_divider
0001542b g     F .text	000000d4 bitmap_set_bit
0001278e g     F .text	0000001c do_handler_double_fault
0001293f g     F .text	000000d4 do_handler_page_fault
800002e0 g     F .first_task	00000021 isatty
0001014c g       .text	00000000 exception_handler_double_fault
00012db6 g     F .text	0000002b pic_send_eoi
00011424 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107a0 g     F .text	00000085 memory_create_uvm
000152ac g     F .text	0000006b sem_wait
00010cd1 g     F .text	00000025 memory_alloc_page_for
000143aa g     F .text	00000028 do_handler_timer
000101a3 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00014f4d g     F .text	0000000a sys_fstat
00013cd2 g     F .text	0000004c dev_read
0001286e g     F .text	0000001c do_handler_virtual_exception
000100d0 g       .text	00000000 exception_handler_overflow
00012328 g     F .text	00000075 get_alloc_desc
000102d1 g       .text	00000000 simple_switch
8000028c g     F .first_task	0000002d lseek
00018000 g     O .bss	00002000 stack
00014f57 g     F .text	0000000e fs_init
00014aa3 g     F .text	00000038 file_inc_ref
00010c38 g     F .text	00000099 memory_free_page
0007447c g       *ABS*	00000000 s_first_task
00012207 g     F .text	00000027 task_remove_fd
00014880 g     F .text	000000ba tty_control
000132a7 g     F .text	000000e7 console_init
0001475f g     F .text	00000121 tty_read
000118e1 g     F .text	00000089 task_uninit
00010b52 g     F .text	000000cc memory_alloc_for_page_dir
00014421 g     F .text	0000007f tty_fifo_get
000100ef g       .text	00000000 exception_handler_bound_range
00014940 g     F .text	0000006d tty_in
00015317 g     F .text	00000082 sem_notify
00010acf g     F .text	00000083 memory_copy_uvm_data
00013d6a g     F .text	0000004c dev_control
00014229 g     F .text	000000c2 do_handler_kbd
00012756 g     F .text	0000001c do_handler_invalid_opcode
00010169 g       .text	00000000 exception_handler_invalid_tss
000127fe g     F .text	0000001c do_handler_fpu_error
0001133a g     F .text	000000ea task_first_init
00012836 g     F .text	0000001c do_handler_machine_check
8000023e g     F .first_task	0000002d write
00014cd3 g     F .text	0000016f sys_open
000126ca g     F .text	0000001c do_handler_Debug
800002b9 g     F .first_task	00000027 fstat
00014f43 g     F .text	0000000a sys_isatty
00015bd7 g     F .text	0000005f list_insert_first
00013b88 g     F .text	0000014a dev_open
000117ae g     F .text	00000020 task_set_wakeup
000126e6 g     F .text	0000001c do_handler_NMI
00010054 g       .text	00000000 exception_handler_divider
000143ea g     F .text	00000037 tty_fifo_init
00015655 g     F .text	00000070 kernel_strncpy
00012da0 g     F .text	0000000b irq_disable_global
0001158b g     F .text	00000061 sys_sched_yield
00014ec8 g     F .text	0000004d sys_write
000747bf g       *ABS*	00000000 mem_free_start
00013ed9 g     F .text	0000002c kbd_write
00015003 g     F .text	00000035 kernel_init
00015289 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
000159ab g     F .text	0000014b kernel_vsprintf
00015b2c g     F .text	00000046 get_file_name
0001012d g       .text	00000000 exception_handler_device_unavailable
0001010e g       .text	00000000 exception_handler_invalid_opcode
00013db6 g     F .text	00000083 dev_close
0001326b g     F .text	0000001e save_cursor
0007447c g       .bss	00000000 e_data
80000211 g     F .first_task	0000002d read
0001512d g     F .text	00000094 mutex_lock
000121b4 g     F .text	00000053 task_alloc_fd
00010236 g       .text	00000000 exception_handler_machine_check
00014672 g     F .text	000000ed tty_write
000127aa g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
000144a0 g     F .text	0000008a tty_fifo_put
000747bf g       *ABS*	00000000 e_first_task
00011774 g     F .text	0000003a task_set_sleep
00014f65 g     F .text	0000009e sys_dup
00015af6 g     F .text	00000036 panic
00010293 g       .text	00000000 exception_handler_timer
00012c54 g     F .text	0000003a irq_install
0001239d g     F .text	0000008b init_gdt
00014579 g     F .text	000000f9 tty_open
80000187 g     F .first_task	0000001b fork
00012de1 g     F .text	00000018 irq_enter_protection
000150ff g     F .text	0000002e mutex_init
00012d19 g     F .text	00000087 irq_disable
80000301 g     F .first_task	00000021 sbrk
00010255 g       .text	00000000 exception_handler_smd_exception
00010825 g     F .text	0000010f memory_destroy_uvm
000153c2 g     F .text	00000016 bitmap_byte_count
00012772 g     F .text	0000001c do_handler_device_unavailable
0001162f g     F .text	0000005b task_dispatch
00010934 g     F .text	00000155 memory_copy_uvm
0001493a g     F .text	00000006 tty_close
00015038 g     F .text	00000066 move_to_first_task
0001248d g     F .text	00000013 switch_to_tss
00013a34 g     F .text	00000110 console_write
00013ea4 g     F .text	00000035 kbd_wait_send_ready
80000322 g     F .first_task	00000021 dup
0001580e g     F .text	0000005e kernel_memcmp
000106e5 g     F .text	000000bb create_kernel_table
00015bb2 g     F .text	00000025 list_init
00012852 g     F .text	0000001c do_handler_smd_exception
000101dd g       .text	00000000 exception_handler_page_fault
00011556 g     F .text	0000002b task_set_block
00012692 g     F .text	0000001c do_handler_unknown
00010c1e g     F .text	0000001a memory_alloc_page
000101fa g       .text	00000000 exception_handler_fpu_error
000112ef g     F .text	0000001e task_switch_from_to
00012aa6 g     F .text	000001ae irq_init
000151c1 g     F .text	000000bd mutex_unlock
00014adb g     F .text	00000030 file_table_init
00012df9 g     F .text	00000011 irq_leave_protection
00014a61 g     F .text	00000042 file_free
00013f3a g     F .text	00000014 kbd_read
8000015f g     F .first_task	00000028 print_msg
00015743 g     F .text	0000003b kernel_strlen
00012270 g     F .text	0000007f segment_desc_set
0001273a g     F .text	0000001c do_handler_bound_range
000102e6 g       .text	00000000 exception_handler_syscall
00015c9a g     F .text	00000078 list_remove_first
00016da4 g       .rodata	00000000 e_text
000156c5 g     F .text	0000007e kernel_strncmp
000153d8 g     F .text	00000053 bitmap_init
00010186 g       .text	00000000 exception_handler_segment_not_present
00013964 g     F .text	000000d0 console_set_cursor
00010092 g       .text	00000000 exception_handler_NMI
00015554 g     F .text	000000b3 bitmap_alloc_nbits
000149d6 g     F .text	0000008b file_alloc
00011438 g     F .text	000000ea task_manager_init
0001130d g     F .text	0000002d task_start
00010073 g       .text	00000000 exception_handler_Debug
0001168a g     F .text	000000ea task_time_tick
00010cf6 g     F .text	000000e4 memory_init
00011f64 g     F .text	000001bd sys_execve
000149ad g     F .text	00000029 tty_select
00013b44 g     F .text	00000006 console_close
00010a89 g     F .text	00000046 memory_get_paddr
000127e2 g     F .text	0000001c do_handler_stack_segment_fault
00012702 g     F .text	0000001c do_handler_breakpoint
00015dc6 g     F .text	000000b6 log_printf
000111ab g     F .text	00000144 task_init
800001ea g     F .first_task	00000027 open
000118cb g     F .text	00000016 sys_getpid
0001586c g     F .text	0000013f kernel_itoa
00015d12 g     F .text	00000085 list_remove
00012428 g     F .text	00000047 gate_desc_set
8000011a g     F .first_task	0000002a msleep
8000026b g     F .first_task	00000021 close
000105a9 g     F .text	000000b0 find_pte
000143d2 g     F .text	00000018 time_init
00017060 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .extern init_main
    .global _start
    # void start (boot_info_t *boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax
    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 f7 4f 00 00       	call   15003 <kernel_init>
    jmp $KERNEL_SELECTOR_CS, $gdt_reload # 重新加载GDT
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    ; mov $stack, %eax
   10021:	b8 00 80 01 00       	mov    $0x18000,%eax
    ; mov $KERNEL_STACK_SIZE, %ebx
   10026:	bb 00 20 00 00       	mov    $0x2000,%ebx

    mov $(stack + KERNEL_STACK_SIZE), %esp
   1002b:	bc 00 a0 01 00       	mov    $0x1a000,%esp
    jmp init_main
   10030:	e9 69 50 00 00       	jmp    1509e <init_main>

00010035 <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   10035:	6a 00                	push   $0x0
   10037:	6a ff                	push   $0xffffffff
   10039:	60                   	pusha  
   1003a:	1e                   	push   %ds
   1003b:	06                   	push   %es
   1003c:	0f a0                	push   %fs
   1003e:	0f a8                	push   %gs
   10040:	54                   	push   %esp
   10041:	e8 4c 26 00 00       	call   12692 <do_handler_unknown>
   10046:	83 c4 04             	add    $0x4,%esp
   10049:	0f a9                	pop    %gs
   1004b:	0f a1                	pop    %fs
   1004d:	07                   	pop    %es
   1004e:	1f                   	pop    %ds
   1004f:	61                   	popa   
   10050:	83 c4 08             	add    $0x8,%esp
   10053:	cf                   	iret   

00010054 <exception_handler_divider>:
exception_handler divider, 0, 0
   10054:	6a 00                	push   $0x0
   10056:	6a 00                	push   $0x0
   10058:	60                   	pusha  
   10059:	1e                   	push   %ds
   1005a:	06                   	push   %es
   1005b:	0f a0                	push   %fs
   1005d:	0f a8                	push   %gs
   1005f:	54                   	push   %esp
   10060:	e8 49 26 00 00       	call   126ae <do_handler_divider>
   10065:	83 c4 04             	add    $0x4,%esp
   10068:	0f a9                	pop    %gs
   1006a:	0f a1                	pop    %fs
   1006c:	07                   	pop    %es
   1006d:	1f                   	pop    %ds
   1006e:	61                   	popa   
   1006f:	83 c4 08             	add    $0x8,%esp
   10072:	cf                   	iret   

00010073 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10073:	6a 00                	push   $0x0
   10075:	6a 01                	push   $0x1
   10077:	60                   	pusha  
   10078:	1e                   	push   %ds
   10079:	06                   	push   %es
   1007a:	0f a0                	push   %fs
   1007c:	0f a8                	push   %gs
   1007e:	54                   	push   %esp
   1007f:	e8 46 26 00 00       	call   126ca <do_handler_Debug>
   10084:	83 c4 04             	add    $0x4,%esp
   10087:	0f a9                	pop    %gs
   10089:	0f a1                	pop    %fs
   1008b:	07                   	pop    %es
   1008c:	1f                   	pop    %ds
   1008d:	61                   	popa   
   1008e:	83 c4 08             	add    $0x8,%esp
   10091:	cf                   	iret   

00010092 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10092:	6a 00                	push   $0x0
   10094:	6a 02                	push   $0x2
   10096:	60                   	pusha  
   10097:	1e                   	push   %ds
   10098:	06                   	push   %es
   10099:	0f a0                	push   %fs
   1009b:	0f a8                	push   %gs
   1009d:	54                   	push   %esp
   1009e:	e8 43 26 00 00       	call   126e6 <do_handler_NMI>
   100a3:	83 c4 04             	add    $0x4,%esp
   100a6:	0f a9                	pop    %gs
   100a8:	0f a1                	pop    %fs
   100aa:	07                   	pop    %es
   100ab:	1f                   	pop    %ds
   100ac:	61                   	popa   
   100ad:	83 c4 08             	add    $0x8,%esp
   100b0:	cf                   	iret   

000100b1 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100b1:	6a 00                	push   $0x0
   100b3:	6a 03                	push   $0x3
   100b5:	60                   	pusha  
   100b6:	1e                   	push   %ds
   100b7:	06                   	push   %es
   100b8:	0f a0                	push   %fs
   100ba:	0f a8                	push   %gs
   100bc:	54                   	push   %esp
   100bd:	e8 40 26 00 00       	call   12702 <do_handler_breakpoint>
   100c2:	83 c4 04             	add    $0x4,%esp
   100c5:	0f a9                	pop    %gs
   100c7:	0f a1                	pop    %fs
   100c9:	07                   	pop    %es
   100ca:	1f                   	pop    %ds
   100cb:	61                   	popa   
   100cc:	83 c4 08             	add    $0x8,%esp
   100cf:	cf                   	iret   

000100d0 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100d0:	6a 00                	push   $0x0
   100d2:	6a 04                	push   $0x4
   100d4:	60                   	pusha  
   100d5:	1e                   	push   %ds
   100d6:	06                   	push   %es
   100d7:	0f a0                	push   %fs
   100d9:	0f a8                	push   %gs
   100db:	54                   	push   %esp
   100dc:	e8 3d 26 00 00       	call   1271e <do_handler_overflow>
   100e1:	83 c4 04             	add    $0x4,%esp
   100e4:	0f a9                	pop    %gs
   100e6:	0f a1                	pop    %fs
   100e8:	07                   	pop    %es
   100e9:	1f                   	pop    %ds
   100ea:	61                   	popa   
   100eb:	83 c4 08             	add    $0x8,%esp
   100ee:	cf                   	iret   

000100ef <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100ef:	6a 00                	push   $0x0
   100f1:	6a 05                	push   $0x5
   100f3:	60                   	pusha  
   100f4:	1e                   	push   %ds
   100f5:	06                   	push   %es
   100f6:	0f a0                	push   %fs
   100f8:	0f a8                	push   %gs
   100fa:	54                   	push   %esp
   100fb:	e8 3a 26 00 00       	call   1273a <do_handler_bound_range>
   10100:	83 c4 04             	add    $0x4,%esp
   10103:	0f a9                	pop    %gs
   10105:	0f a1                	pop    %fs
   10107:	07                   	pop    %es
   10108:	1f                   	pop    %ds
   10109:	61                   	popa   
   1010a:	83 c4 08             	add    $0x8,%esp
   1010d:	cf                   	iret   

0001010e <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   1010e:	6a 00                	push   $0x0
   10110:	6a 06                	push   $0x6
   10112:	60                   	pusha  
   10113:	1e                   	push   %ds
   10114:	06                   	push   %es
   10115:	0f a0                	push   %fs
   10117:	0f a8                	push   %gs
   10119:	54                   	push   %esp
   1011a:	e8 37 26 00 00       	call   12756 <do_handler_invalid_opcode>
   1011f:	83 c4 04             	add    $0x4,%esp
   10122:	0f a9                	pop    %gs
   10124:	0f a1                	pop    %fs
   10126:	07                   	pop    %es
   10127:	1f                   	pop    %ds
   10128:	61                   	popa   
   10129:	83 c4 08             	add    $0x8,%esp
   1012c:	cf                   	iret   

0001012d <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   1012d:	6a 00                	push   $0x0
   1012f:	6a 07                	push   $0x7
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 34 26 00 00       	call   12772 <do_handler_device_unavailable>
   1013e:	83 c4 04             	add    $0x4,%esp
   10141:	0f a9                	pop    %gs
   10143:	0f a1                	pop    %fs
   10145:	07                   	pop    %es
   10146:	1f                   	pop    %ds
   10147:	61                   	popa   
   10148:	83 c4 08             	add    $0x8,%esp
   1014b:	cf                   	iret   

0001014c <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1014c:	6a 08                	push   $0x8
   1014e:	60                   	pusha  
   1014f:	1e                   	push   %ds
   10150:	06                   	push   %es
   10151:	0f a0                	push   %fs
   10153:	0f a8                	push   %gs
   10155:	54                   	push   %esp
   10156:	e8 33 26 00 00       	call   1278e <do_handler_double_fault>
   1015b:	83 c4 04             	add    $0x4,%esp
   1015e:	0f a9                	pop    %gs
   10160:	0f a1                	pop    %fs
   10162:	07                   	pop    %es
   10163:	1f                   	pop    %ds
   10164:	61                   	popa   
   10165:	83 c4 08             	add    $0x8,%esp
   10168:	cf                   	iret   

00010169 <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   10169:	6a 0a                	push   $0xa
   1016b:	60                   	pusha  
   1016c:	1e                   	push   %ds
   1016d:	06                   	push   %es
   1016e:	0f a0                	push   %fs
   10170:	0f a8                	push   %gs
   10172:	54                   	push   %esp
   10173:	e8 32 26 00 00       	call   127aa <do_handler_invalid_tss>
   10178:	83 c4 04             	add    $0x4,%esp
   1017b:	0f a9                	pop    %gs
   1017d:	0f a1                	pop    %fs
   1017f:	07                   	pop    %es
   10180:	1f                   	pop    %ds
   10181:	61                   	popa   
   10182:	83 c4 08             	add    $0x8,%esp
   10185:	cf                   	iret   

00010186 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10186:	6a 0b                	push   $0xb
   10188:	60                   	pusha  
   10189:	1e                   	push   %ds
   1018a:	06                   	push   %es
   1018b:	0f a0                	push   %fs
   1018d:	0f a8                	push   %gs
   1018f:	54                   	push   %esp
   10190:	e8 31 26 00 00       	call   127c6 <do_handler_segment_not_present>
   10195:	83 c4 04             	add    $0x4,%esp
   10198:	0f a9                	pop    %gs
   1019a:	0f a1                	pop    %fs
   1019c:	07                   	pop    %es
   1019d:	1f                   	pop    %ds
   1019e:	61                   	popa   
   1019f:	83 c4 08             	add    $0x8,%esp
   101a2:	cf                   	iret   

000101a3 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   101a3:	6a 0c                	push   $0xc
   101a5:	60                   	pusha  
   101a6:	1e                   	push   %ds
   101a7:	06                   	push   %es
   101a8:	0f a0                	push   %fs
   101aa:	0f a8                	push   %gs
   101ac:	54                   	push   %esp
   101ad:	e8 30 26 00 00       	call   127e2 <do_handler_stack_segment_fault>
   101b2:	83 c4 04             	add    $0x4,%esp
   101b5:	0f a9                	pop    %gs
   101b7:	0f a1                	pop    %fs
   101b9:	07                   	pop    %es
   101ba:	1f                   	pop    %ds
   101bb:	61                   	popa   
   101bc:	83 c4 08             	add    $0x8,%esp
   101bf:	cf                   	iret   

000101c0 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101c0:	6a 0d                	push   $0xd
   101c2:	60                   	pusha  
   101c3:	1e                   	push   %ds
   101c4:	06                   	push   %es
   101c5:	0f a0                	push   %fs
   101c7:	0f a8                	push   %gs
   101c9:	54                   	push   %esp
   101ca:	e8 bb 26 00 00       	call   1288a <do_handler_general_protection>
   101cf:	83 c4 04             	add    $0x4,%esp
   101d2:	0f a9                	pop    %gs
   101d4:	0f a1                	pop    %fs
   101d6:	07                   	pop    %es
   101d7:	1f                   	pop    %ds
   101d8:	61                   	popa   
   101d9:	83 c4 08             	add    $0x8,%esp
   101dc:	cf                   	iret   

000101dd <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101dd:	6a 0e                	push   $0xe
   101df:	60                   	pusha  
   101e0:	1e                   	push   %ds
   101e1:	06                   	push   %es
   101e2:	0f a0                	push   %fs
   101e4:	0f a8                	push   %gs
   101e6:	54                   	push   %esp
   101e7:	e8 53 27 00 00       	call   1293f <do_handler_page_fault>
   101ec:	83 c4 04             	add    $0x4,%esp
   101ef:	0f a9                	pop    %gs
   101f1:	0f a1                	pop    %fs
   101f3:	07                   	pop    %es
   101f4:	1f                   	pop    %ds
   101f5:	61                   	popa   
   101f6:	83 c4 08             	add    $0x8,%esp
   101f9:	cf                   	iret   

000101fa <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101fa:	6a 00                	push   $0x0
   101fc:	6a 10                	push   $0x10
   101fe:	60                   	pusha  
   101ff:	1e                   	push   %ds
   10200:	06                   	push   %es
   10201:	0f a0                	push   %fs
   10203:	0f a8                	push   %gs
   10205:	54                   	push   %esp
   10206:	e8 f3 25 00 00       	call   127fe <do_handler_fpu_error>
   1020b:	83 c4 04             	add    $0x4,%esp
   1020e:	0f a9                	pop    %gs
   10210:	0f a1                	pop    %fs
   10212:	07                   	pop    %es
   10213:	1f                   	pop    %ds
   10214:	61                   	popa   
   10215:	83 c4 08             	add    $0x8,%esp
   10218:	cf                   	iret   

00010219 <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   10219:	6a 11                	push   $0x11
   1021b:	60                   	pusha  
   1021c:	1e                   	push   %ds
   1021d:	06                   	push   %es
   1021e:	0f a0                	push   %fs
   10220:	0f a8                	push   %gs
   10222:	54                   	push   %esp
   10223:	e8 f2 25 00 00       	call   1281a <do_handler_alignment_check>
   10228:	83 c4 04             	add    $0x4,%esp
   1022b:	0f a9                	pop    %gs
   1022d:	0f a1                	pop    %fs
   1022f:	07                   	pop    %es
   10230:	1f                   	pop    %ds
   10231:	61                   	popa   
   10232:	83 c4 08             	add    $0x8,%esp
   10235:	cf                   	iret   

00010236 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10236:	6a 00                	push   $0x0
   10238:	6a 12                	push   $0x12
   1023a:	60                   	pusha  
   1023b:	1e                   	push   %ds
   1023c:	06                   	push   %es
   1023d:	0f a0                	push   %fs
   1023f:	0f a8                	push   %gs
   10241:	54                   	push   %esp
   10242:	e8 ef 25 00 00       	call   12836 <do_handler_machine_check>
   10247:	83 c4 04             	add    $0x4,%esp
   1024a:	0f a9                	pop    %gs
   1024c:	0f a1                	pop    %fs
   1024e:	07                   	pop    %es
   1024f:	1f                   	pop    %ds
   10250:	61                   	popa   
   10251:	83 c4 08             	add    $0x8,%esp
   10254:	cf                   	iret   

00010255 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10255:	6a 00                	push   $0x0
   10257:	6a 13                	push   $0x13
   10259:	60                   	pusha  
   1025a:	1e                   	push   %ds
   1025b:	06                   	push   %es
   1025c:	0f a0                	push   %fs
   1025e:	0f a8                	push   %gs
   10260:	54                   	push   %esp
   10261:	e8 ec 25 00 00       	call   12852 <do_handler_smd_exception>
   10266:	83 c4 04             	add    $0x4,%esp
   10269:	0f a9                	pop    %gs
   1026b:	0f a1                	pop    %fs
   1026d:	07                   	pop    %es
   1026e:	1f                   	pop    %ds
   1026f:	61                   	popa   
   10270:	83 c4 08             	add    $0x8,%esp
   10273:	cf                   	iret   

00010274 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10274:	6a 00                	push   $0x0
   10276:	6a 14                	push   $0x14
   10278:	60                   	pusha  
   10279:	1e                   	push   %ds
   1027a:	06                   	push   %es
   1027b:	0f a0                	push   %fs
   1027d:	0f a8                	push   %gs
   1027f:	54                   	push   %esp
   10280:	e8 e9 25 00 00       	call   1286e <do_handler_virtual_exception>
   10285:	83 c4 04             	add    $0x4,%esp
   10288:	0f a9                	pop    %gs
   1028a:	0f a1                	pop    %fs
   1028c:	07                   	pop    %es
   1028d:	1f                   	pop    %ds
   1028e:	61                   	popa   
   1028f:	83 c4 08             	add    $0x8,%esp
   10292:	cf                   	iret   

00010293 <exception_handler_timer>:

# 硬件中断
exception_handler timer, 0x20, 0
   10293:	6a 00                	push   $0x0
   10295:	6a 20                	push   $0x20
   10297:	60                   	pusha  
   10298:	1e                   	push   %ds
   10299:	06                   	push   %es
   1029a:	0f a0                	push   %fs
   1029c:	0f a8                	push   %gs
   1029e:	54                   	push   %esp
   1029f:	e8 06 41 00 00       	call   143aa <do_handler_timer>
   102a4:	83 c4 04             	add    $0x4,%esp
   102a7:	0f a9                	pop    %gs
   102a9:	0f a1                	pop    %fs
   102ab:	07                   	pop    %es
   102ac:	1f                   	pop    %ds
   102ad:	61                   	popa   
   102ae:	83 c4 08             	add    $0x8,%esp
   102b1:	cf                   	iret   

000102b2 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102b2:	6a 00                	push   $0x0
   102b4:	6a 21                	push   $0x21
   102b6:	60                   	pusha  
   102b7:	1e                   	push   %ds
   102b8:	06                   	push   %es
   102b9:	0f a0                	push   %fs
   102bb:	0f a8                	push   %gs
   102bd:	54                   	push   %esp
   102be:	e8 66 3f 00 00       	call   14229 <do_handler_kbd>
   102c3:	83 c4 04             	add    $0x4,%esp
   102c6:	0f a9                	pop    %gs
   102c8:	0f a1                	pop    %fs
   102ca:	07                   	pop    %es
   102cb:	1f                   	pop    %ds
   102cc:	61                   	popa   
   102cd:	83 c4 08             	add    $0x8,%esp
   102d0:	cf                   	iret   

000102d1 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
    .text
    .global simple_switch
simple_switch:
    movl 4(%esp), %eax   // 取from->stack
   102d1:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102d5:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102d9:	55                   	push   %ebp
	push %ebx
   102da:	53                   	push   %ebx
	push %esi
   102db:	56                   	push   %esi
	push %edi
   102dc:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102dd:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102df:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102e1:	5f                   	pop    %edi
	pop %esi
   102e2:	5e                   	pop    %esi
	pop %ebx
   102e3:	5b                   	pop    %ebx
	pop %ebp
   102e4:	5d                   	pop    %ebp
  	ret
   102e5:	c3                   	ret    

000102e6 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    # 保存前一任务的状态
	pusha
   102e6:	60                   	pusha  
	push %ds
   102e7:	1e                   	push   %ds
	push %es
   102e8:	06                   	push   %es
	push %fs
   102e9:	0f a0                	push   %fs
	push %gs
   102eb:	0f a8                	push   %gs
	pushf
   102ed:	9c                   	pushf  

    # 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   102ee:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102f3:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102f5:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102f7:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   102f9:	8e e8                	mov    %eax,%gs

    # 调用处理函数
    mov %esp, %eax
   102fb:	89 e0                	mov    %esp,%eax
    push %eax
   102fd:	50                   	push   %eax
	call do_handler_syscall
   102fe:	e8 fd 0b 00 00       	call   10f00 <do_handler_syscall>
	add $4, %esp
   10303:	83 c4 04             	add    $0x4,%esp

    # 再切换回来
	popf
   10306:	9d                   	popf   
	pop %gs
   10307:	0f a9                	pop    %gs
	pop %fs
   10309:	0f a1                	pop    %fs
	pop %es
   1030b:	07                   	pop    %es
	pop %ds
   1030c:	1f                   	pop    %ds
	popa
   1030d:	61                   	popa   
   1030e:	ca 14 00             	lret   $0x14

00010311 <up2>:
#include "comm/types.h"
#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   10311:	55                   	push   %ebp
   10312:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10314:	8b 55 08             	mov    0x8(%ebp),%edx
   10317:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031a:	01 d0                	add    %edx,%eax
   1031c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1031f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10322:	f7 d8                	neg    %eax
   10324:	21 d0                	and    %edx,%eax
}
   10326:	5d                   	pop    %ebp
   10327:	c3                   	ret    

00010328 <down2>:
// size = 0x1010 bound = 0x1000
// bound - 1 = 0x0FFF
// ~(bound-1) = 0xFFFF1000
// size & ~(bound-1) =  0x1010 & 0xFFFF1000 = 0x1000
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   10328:	55                   	push   %ebp
   10329:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1032b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032e:	f7 d8                	neg    %eax
   10330:	23 45 08             	and    0x8(%ebp),%eax
}
   10333:	5d                   	pop    %ebp
   10334:	c3                   	ret    

00010335 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]" : [v] "=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   10335:	55                   	push   %ebp
   10336:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	0f 22 d8             	mov    %eax,%cr3
}
   1033e:	90                   	nop
   1033f:	5d                   	pop    %ebp
   10340:	c3                   	ret    

00010341 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index(uint32_t vaddr)
{
   10341:	55                   	push   %ebp
   10342:	89 e5                	mov    %esp,%ebp
   10344:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10347:	8b 45 08             	mov    0x8(%ebp),%eax
   1034a:	c1 e8 16             	shr    $0x16,%eax
   1034d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10350:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10353:	c9                   	leave  
   10354:	c3                   	ret    

00010355 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr(pde_t *pde)
{
   10355:	55                   	push   %ebp
   10356:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10358:	8b 45 08             	mov    0x8(%ebp),%eax
   1035b:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1035f:	c0 ea 04             	shr    $0x4,%dl
   10362:	0f b6 d2             	movzbl %dl,%edx
   10365:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10369:	c1 e1 04             	shl    $0x4,%ecx
   1036c:	09 ca                	or     %ecx,%edx
   1036e:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10372:	c1 e0 0c             	shl    $0xc,%eax
   10375:	09 d0                	or     %edx,%eax
   10377:	c1 e0 0c             	shl    $0xc,%eax
}
   1037a:	5d                   	pop    %ebp
   1037b:	c3                   	ret    

0001037c <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index(uint32_t vaddr)
{
   1037c:	55                   	push   %ebp
   1037d:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   1037f:	8b 45 08             	mov    0x8(%ebp),%eax
   10382:	c1 e8 0c             	shr    $0xc,%eax
   10385:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr(pte_t *pte)
{
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10396:	c0 ea 04             	shr    $0x4,%dl
   10399:	0f b6 d2             	movzbl %dl,%edx
   1039c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103a0:	c1 e1 04             	shl    $0x4,%ecx
   103a3:	09 ca                	or     %ecx,%edx
   103a5:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103a9:	c1 e0 0c             	shl    $0xc,%eax
   103ac:	09 d0                	or     %edx,%eax
   103ae:	c1 e0 0c             	shl    $0xc,%eax
}
   103b1:	5d                   	pop    %ebp
   103b2:	c3                   	ret    

000103b3 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm(pte_t *pte)
{
   103b3:	55                   	push   %ebp
   103b4:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);
   103b6:	8b 45 08             	mov    0x8(%ebp),%eax
   103b9:	8b 00                	mov    (%eax),%eax
   103bb:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103c0:	5d                   	pop    %ebp
   103c1:	c3                   	ret    

000103c2 <mmu_set_page_dir>:
/**
 * @brief 重新加载整个页表至cr3高20位寄存器
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir(uint32_t paddr)
{
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103c5:	ff 75 08             	pushl  0x8(%ebp)
   103c8:	e8 68 ff ff ff       	call   10335 <write_cr3>
   103cd:	83 c4 04             	add    $0x4,%esp
}
   103d0:	90                   	nop
   103d1:	c9                   	leave  
   103d2:	c3                   	ret    

000103d3 <current_page_dir>:

/**
 * @brief 获取当前页表地址
 */
static pde_t *current_page_dir(void)
{
   103d3:	55                   	push   %ebp
   103d4:	89 e5                	mov    %esp,%ebp
   103d6:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103d9:	e8 a3 11 00 00       	call   11581 <task_current>
   103de:	8b 80 74 02 00 00    	mov    0x274(%eax),%eax
}
   103e4:	c9                   	leave  
   103e5:	c3                   	ret    

000103e6 <addr_alloc_init>:
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits,
                            uint32_t start, uint32_t size, uint32_t page_size)
{
   103e6:	55                   	push   %ebp
   103e7:	89 e5                	mov    %esp,%ebp
   103e9:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103ec:	8b 45 08             	mov    0x8(%ebp),%eax
   103ef:	83 ec 0c             	sub    $0xc,%esp
   103f2:	50                   	push   %eax
   103f3:	e8 07 4d 00 00       	call   150ff <mutex_init>
   103f8:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103fb:	8b 45 08             	mov    0x8(%ebp),%eax
   103fe:	8b 55 10             	mov    0x10(%ebp),%edx
   10401:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10404:	8b 45 08             	mov    0x8(%ebp),%eax
   10407:	8b 55 14             	mov    0x14(%ebp),%edx
   1040a:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1040d:	8b 45 08             	mov    0x8(%ebp),%eax
   10410:	8b 55 18             	mov    0x18(%ebp),%edx
   10413:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10416:	8b 45 08             	mov    0x8(%ebp),%eax
   10419:	8b 40 24             	mov    0x24(%eax),%eax
   1041c:	ba 00 00 00 00       	mov    $0x0,%edx
   10421:	f7 75 18             	divl   0x18(%ebp)
   10424:	89 c2                	mov    %eax,%edx
   10426:	8b 45 08             	mov    0x8(%ebp),%eax
   10429:	83 c0 14             	add    $0x14,%eax
   1042c:	6a 00                	push   $0x0
   1042e:	52                   	push   %edx
   1042f:	ff 75 0c             	pushl  0xc(%ebp)
   10432:	50                   	push   %eax
   10433:	e8 a0 4f 00 00       	call   153d8 <bitmap_init>
   10438:	83 c4 10             	add    $0x10,%esp
}
   1043b:	90                   	nop
   1043c:	c9                   	leave  
   1043d:	c3                   	ret    

0001043e <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1043e:	55                   	push   %ebp
   1043f:	89 e5                	mov    %esp,%ebp
   10441:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10444:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1044b:	8b 45 08             	mov    0x8(%ebp),%eax
   1044e:	83 ec 0c             	sub    $0xc,%esp
   10451:	50                   	push   %eax
   10452:	e8 d6 4c 00 00       	call   1512d <mutex_lock>
   10457:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1045a:	8b 45 08             	mov    0x8(%ebp),%eax
   1045d:	83 c0 14             	add    $0x14,%eax
   10460:	83 ec 04             	sub    $0x4,%esp
   10463:	ff 75 0c             	pushl  0xc(%ebp)
   10466:	6a 00                	push   $0x0
   10468:	50                   	push   %eax
   10469:	e8 e6 50 00 00       	call   15554 <bitmap_alloc_nbits>
   1046e:	83 c4 10             	add    $0x10,%esp
   10471:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10474:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10478:	78 17                	js     10491 <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   1047a:	8b 45 08             	mov    0x8(%ebp),%eax
   1047d:	8b 50 20             	mov    0x20(%eax),%edx
   10480:	8b 45 08             	mov    0x8(%ebp),%eax
   10483:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10486:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10489:	0f af c1             	imul   %ecx,%eax
   1048c:	01 d0                	add    %edx,%eax
   1048e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   10491:	8b 45 08             	mov    0x8(%ebp),%eax
   10494:	83 ec 0c             	sub    $0xc,%esp
   10497:	50                   	push   %eax
   10498:	e8 24 4d 00 00       	call   151c1 <mutex_unlock>
   1049d:	83 c4 10             	add    $0x10,%esp
    return addr;
   104a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104a3:	c9                   	leave  
   104a4:	c3                   	ret    

000104a5 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   104a5:	55                   	push   %ebp
   104a6:	89 e5                	mov    %esp,%ebp
   104a8:	53                   	push   %ebx
   104a9:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104ac:	8b 45 08             	mov    0x8(%ebp),%eax
   104af:	83 ec 0c             	sub    $0xc,%esp
   104b2:	50                   	push   %eax
   104b3:	e8 75 4c 00 00       	call   1512d <mutex_lock>
   104b8:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104bb:	8b 45 08             	mov    0x8(%ebp),%eax
   104be:	8b 40 20             	mov    0x20(%eax),%eax
   104c1:	8b 55 0c             	mov    0xc(%ebp),%edx
   104c4:	89 d1                	mov    %edx,%ecx
   104c6:	29 c1                	sub    %eax,%ecx
   104c8:	8b 45 08             	mov    0x8(%ebp),%eax
   104cb:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104ce:	89 c8                	mov    %ecx,%eax
   104d0:	ba 00 00 00 00       	mov    $0x0,%edx
   104d5:	f7 f3                	div    %ebx
   104d7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104da:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104dd:	8b 55 08             	mov    0x8(%ebp),%edx
   104e0:	83 c2 14             	add    $0x14,%edx
   104e3:	6a 00                	push   $0x0
   104e5:	ff 75 10             	pushl  0x10(%ebp)
   104e8:	50                   	push   %eax
   104e9:	52                   	push   %edx
   104ea:	e8 3c 4f 00 00       	call   1542b <bitmap_set_bit>
   104ef:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   104f2:	8b 45 08             	mov    0x8(%ebp),%eax
   104f5:	83 ec 0c             	sub    $0xc,%esp
   104f8:	50                   	push   %eax
   104f9:	e8 c3 4c 00 00       	call   151c1 <mutex_unlock>
   104fe:	83 c4 10             	add    $0x10,%esp
}
   10501:	90                   	nop
   10502:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10505:	c9                   	leave  
   10506:	c3                   	ret    

00010507 <show_mem_info>:

static void show_mem_info(boot_info_t *boot_info)
{
   10507:	55                   	push   %ebp
   10508:	89 e5                	mov    %esp,%ebp
   1050a:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1050d:	83 ec 0c             	sub    $0xc,%esp
   10510:	68 80 5e 01 00       	push   $0x15e80
   10515:	e8 ac 58 00 00       	call   15dc6 <log_printf>
   1051a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1051d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10524:	eb 29                	jmp    1054f <show_mem_info+0x48>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   10526:	8b 45 08             	mov    0x8(%ebp),%eax
   10529:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1052c:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10530:	8b 45 08             	mov    0x8(%ebp),%eax
   10533:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10536:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10539:	52                   	push   %edx
   1053a:	50                   	push   %eax
   1053b:	ff 75 f4             	pushl  -0xc(%ebp)
   1053e:	68 8c 5e 01 00       	push   $0x15e8c
   10543:	e8 7e 58 00 00       	call   15dc6 <log_printf>
   10548:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1054b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 40 50             	mov    0x50(%eax),%eax
   10555:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10558:	7c cc                	jl     10526 <show_mem_info+0x1f>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1055a:	83 ec 0c             	sub    $0xc,%esp
   1055d:	68 9e 5e 01 00       	push   $0x15e9e
   10562:	e8 5f 58 00 00       	call   15dc6 <log_printf>
   10567:	83 c4 10             	add    $0x10,%esp
}
   1056a:	90                   	nop
   1056b:	c9                   	leave  
   1056c:	c3                   	ret    

0001056d <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   1056d:	55                   	push   %ebp
   1056e:	89 e5                	mov    %esp,%ebp
   10570:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10573:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1057a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10581:	eb 16                	jmp    10599 <total_mem_size+0x2c>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   10583:	8b 45 08             	mov    0x8(%ebp),%eax
   10586:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10589:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1058d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   10590:	01 d0                	add    %edx,%eax
   10592:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10595:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10599:	8b 45 08             	mov    0x8(%ebp),%eax
   1059c:	8b 40 50             	mov    0x50(%eax),%eax
   1059f:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105a2:	7c df                	jl     10583 <total_mem_size+0x16>
    }
    return mem_size;
   105a4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105a7:	c9                   	leave  
   105a8:	c3                   	ret    

000105a9 <find_pte>:

pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   105a9:	55                   	push   %ebp
   105aa:	89 e5                	mov    %esp,%ebp
   105ac:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105af:	ff 75 0c             	pushl  0xc(%ebp)
   105b2:	e8 8a fd ff ff       	call   10341 <pde_index>
   105b7:	83 c4 04             	add    $0x4,%esp
   105ba:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105c1:	8b 45 08             	mov    0x8(%ebp),%eax
   105c4:	01 d0                	add    %edx,%eax
   105c6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   105c9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105cc:	0f b6 00             	movzbl (%eax),%eax
   105cf:	83 e0 01             	and    $0x1,%eax
   105d2:	84 c0                	test   %al,%al
   105d4:	74 10                	je     105e6 <find_pte+0x3d>
    {
        page_table = (pte_t *)pde_paddr(pde);
   105d6:	ff 75 f0             	pushl  -0x10(%ebp)
   105d9:	e8 77 fd ff ff       	call   10355 <pde_paddr>
   105de:	83 c4 04             	add    $0x4,%esp
   105e1:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105e4:	eb 57                	jmp    1063d <find_pte+0x94>
    }
    else
    {
        // 如果不存在，则考虑分配一个
        if (alloc == 0)
   105e6:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105ea:	75 07                	jne    105f3 <find_pte+0x4a>
        {
            return (pte_t *)0;
   105ec:	b8 00 00 00 00       	mov    $0x0,%eax
   105f1:	eb 64                	jmp    10657 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   105f3:	83 ec 08             	sub    $0x8,%esp
   105f6:	6a 01                	push   $0x1
   105f8:	68 00 a0 01 00       	push   $0x1a000
   105fd:	e8 3c fe ff ff       	call   1043e <addr_alloc_page>
   10602:	83 c4 10             	add    $0x10,%esp
   10605:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0)
   10608:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1060c:	75 07                	jne    10615 <find_pte+0x6c>
        {
            return (pte_t *)0;
   1060e:	b8 00 00 00 00       	mov    $0x0,%eax
   10613:	eb 42                	jmp    10657 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10615:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10618:	83 c8 07             	or     $0x7,%eax
   1061b:	89 c2                	mov    %eax,%edx
   1061d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10620:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        // kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10622:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10625:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10628:	83 ec 04             	sub    $0x4,%esp
   1062b:	68 00 10 00 00       	push   $0x1000
   10630:	6a 00                	push   $0x0
   10632:	ff 75 f4             	pushl  -0xc(%ebp)
   10635:	e8 93 51 00 00       	call   157cd <kernel_memset>
   1063a:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1063d:	83 ec 0c             	sub    $0xc,%esp
   10640:	ff 75 0c             	pushl  0xc(%ebp)
   10643:	e8 34 fd ff ff       	call   1037c <pte_index>
   10648:	83 c4 10             	add    $0x10,%esp
   1064b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10652:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10655:	01 d0                	add    %edx,%eax
}
   10657:	c9                   	leave  
   10658:	c3                   	ret    

00010659 <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10659:	55                   	push   %ebp
   1065a:	89 e5                	mov    %esp,%ebp
   1065c:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   1065f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10666:	eb 6e                	jmp    106d6 <memory_create_map+0x7d>
    {
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t *pte = find_pte(page_dir, vaddr, 1);
   10668:	83 ec 04             	sub    $0x4,%esp
   1066b:	6a 01                	push   $0x1
   1066d:	ff 75 0c             	pushl  0xc(%ebp)
   10670:	ff 75 08             	pushl  0x8(%ebp)
   10673:	e8 31 ff ff ff       	call   105a9 <find_pte>
   10678:	83 c4 10             	add    $0x10,%esp
   1067b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   1067e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10682:	75 07                	jne    1068b <memory_create_map+0x32>
        {
            // log_printf("create pte failed. pte == 0");
            return -1;
   10684:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10689:	eb 58                	jmp    106e3 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1068b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068e:	0f b6 00             	movzbl (%eax),%eax
   10691:	83 e0 01             	and    $0x1,%eax
   10694:	84 c0                	test   %al,%al
   10696:	74 1c                	je     106b4 <memory_create_map+0x5b>
   10698:	68 a0 5e 01 00       	push   $0x15ea0
   1069d:	68 e8 5f 01 00       	push   $0x15fe8
   106a2:	68 97 00 00 00       	push   $0x97
   106a7:	68 b4 5e 01 00       	push   $0x15eb4
   106ac:	e8 45 54 00 00       	call   15af6 <panic>
   106b1:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106b4:	8b 45 10             	mov    0x10(%ebp),%eax
   106b7:	0b 45 18             	or     0x18(%ebp),%eax
   106ba:	83 c8 01             	or     $0x1,%eax
   106bd:	89 c2                	mov    %eax,%edx
   106bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106c2:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106c4:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106cb:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   106d2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d9:	3b 45 14             	cmp    0x14(%ebp),%eax
   106dc:	7c 8a                	jl     10668 <memory_create_map+0xf>
    }

    return 0;
   106de:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106e3:	c9                   	leave  
   106e4:	c3                   	ret    

000106e5 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table(void)
{
   106e5:	55                   	push   %ebp
   106e6:	89 e5                	mov    %esp,%ebp
   106e8:	83 ec 28             	sub    $0x28,%esp
        // 1M以上空间扩展V\P一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106eb:	83 ec 04             	sub    $0x4,%esp
   106ee:	68 00 10 00 00       	push   $0x1000
   106f3:	6a 00                	push   $0x0
   106f5:	68 00 b0 01 00       	push   $0x1b000
   106fa:	e8 ce 50 00 00       	call   157cd <kernel_memset>
   106ff:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   10702:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10709:	e9 83 00 00 00       	jmp    10791 <create_kernel_table+0xac>
    {
        memory_map_t *map = kernel_map + i;
   1070e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10711:	c1 e0 04             	shl    $0x4,%eax
   10714:	05 00 70 01 00       	add    $0x17000,%eax
   10719:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1071c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1071f:	8b 00                	mov    (%eax),%eax
   10721:	83 ec 08             	sub    $0x8,%esp
   10724:	68 00 10 00 00       	push   $0x1000
   10729:	50                   	push   %eax
   1072a:	e8 f9 fb ff ff       	call   10328 <down2>
   1072f:	83 c4 10             	add    $0x10,%esp
   10732:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10735:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10738:	8b 40 04             	mov    0x4(%eax),%eax
   1073b:	83 ec 08             	sub    $0x8,%esp
   1073e:	68 00 10 00 00       	push   $0x1000
   10743:	50                   	push   %eax
   10744:	e8 c8 fb ff ff       	call   10311 <up2>
   10749:	83 c4 10             	add    $0x10,%esp
   1074c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1074f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10752:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10755:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1075b:	85 c0                	test   %eax,%eax
   1075d:	0f 48 c2             	cmovs  %edx,%eax
   10760:	c1 f8 0c             	sar    $0xc,%eax
   10763:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10766:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10769:	8b 50 0c             	mov    0xc(%eax),%edx
   1076c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076f:	8b 40 08             	mov    0x8(%eax),%eax
   10772:	89 c1                	mov    %eax,%ecx
   10774:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10777:	83 ec 0c             	sub    $0xc,%esp
   1077a:	52                   	push   %edx
   1077b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1077e:	51                   	push   %ecx
   1077f:	50                   	push   %eax
   10780:	68 00 b0 01 00       	push   $0x1b000
   10785:	e8 cf fe ff ff       	call   10659 <memory_create_map>
   1078a:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1078d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10791:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10794:	83 f8 04             	cmp    $0x4,%eax
   10797:	0f 86 71 ff ff ff    	jbe    1070e <create_kernel_table+0x29>
    }
}
   1079d:	90                   	nop
   1079e:	c9                   	leave  
   1079f:	c3                   	ret    

000107a0 <memory_create_uvm>:
/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm(void)
{
   107a0:	55                   	push   %ebp
   107a1:	89 e5                	mov    %esp,%ebp
   107a3:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107a6:	83 ec 08             	sub    $0x8,%esp
   107a9:	6a 01                	push   $0x1
   107ab:	68 00 a0 01 00       	push   $0x1a000
   107b0:	e8 89 fc ff ff       	call   1043e <addr_alloc_page>
   107b5:	83 c4 10             	add    $0x10,%esp
   107b8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   107bb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107bf:	75 07                	jne    107c8 <memory_create_uvm+0x28>
    {
        return 0;
   107c1:	b8 00 00 00 00       	mov    $0x0,%eax
   107c6:	eb 5b                	jmp    10823 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107c8:	83 ec 04             	sub    $0x4,%esp
   107cb:	68 00 10 00 00       	push   $0x1000
   107d0:	6a 00                	push   $0x0
   107d2:	ff 75 f0             	pushl  -0x10(%ebp)
   107d5:	e8 f3 4f 00 00       	call   157cd <kernel_memset>
   107da:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107dd:	83 ec 0c             	sub    $0xc,%esp
   107e0:	68 00 00 00 80       	push   $0x80000000
   107e5:	e8 57 fb ff ff       	call   10341 <pde_index>
   107ea:	83 c4 10             	add    $0x10,%esp
   107ed:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   107f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107f7:	eb 1f                	jmp    10818 <memory_create_uvm+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   107f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107fc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10803:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10806:	01 c2                	add    %eax,%edx
   10808:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080b:	8b 04 85 00 b0 01 00 	mov    0x1b000(,%eax,4),%eax
   10812:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   10814:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10818:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081b:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1081e:	77 d9                	ja     107f9 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   10820:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10823:	c9                   	leave  
   10824:	c3                   	ret    

00010825 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm(uint32_t page_dir)
{
   10825:	55                   	push   %ebp
   10826:	89 e5                	mov    %esp,%ebp
   10828:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1082b:	68 00 00 00 80       	push   $0x80000000
   10830:	e8 0c fb ff ff       	call   10341 <pde_index>
   10835:	83 c4 04             	add    $0x4,%esp
   10838:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   1083b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1083e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10845:	8b 45 08             	mov    0x8(%ebp),%eax
   10848:	01 d0                	add    %edx,%eax
   1084a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1084d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10851:	75 1c                	jne    1086f <memory_destroy_uvm+0x4a>
   10853:	68 f0 5e 01 00       	push   $0x15ef0
   10858:	68 fc 5f 01 00       	push   $0x15ffc
   1085d:	68 e7 00 00 00       	push   $0xe7
   10862:	68 b4 5e 01 00       	push   $0x15eb4
   10867:	e8 8a 52 00 00       	call   15af6 <panic>
   1086c:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   1086f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10872:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10875:	e9 95 00 00 00       	jmp    1090f <memory_destroy_uvm+0xea>
    {
        if (!pde->present)
   1087a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087d:	0f b6 00             	movzbl (%eax),%eax
   10880:	83 e0 01             	and    $0x1,%eax
   10883:	84 c0                	test   %al,%al
   10885:	74 7f                	je     10906 <memory_destroy_uvm+0xe1>
        {
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   10887:	83 ec 0c             	sub    $0xc,%esp
   1088a:	ff 75 f4             	pushl  -0xc(%ebp)
   1088d:	e8 c3 fa ff ff       	call   10355 <pde_paddr>
   10892:	83 c4 10             	add    $0x10,%esp
   10895:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   10898:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1089f:	eb 39                	jmp    108da <memory_destroy_uvm+0xb5>
        {
            if (!pte->present)
   108a1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108a4:	0f b6 00             	movzbl (%eax),%eax
   108a7:	83 e0 01             	and    $0x1,%eax
   108aa:	84 c0                	test   %al,%al
   108ac:	74 23                	je     108d1 <memory_destroy_uvm+0xac>
            {
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108ae:	83 ec 0c             	sub    $0xc,%esp
   108b1:	ff 75 ec             	pushl  -0x14(%ebp)
   108b4:	e8 d3 fa ff ff       	call   1038c <pte_paddr>
   108b9:	83 c4 10             	add    $0x10,%esp
   108bc:	83 ec 04             	sub    $0x4,%esp
   108bf:	6a 01                	push   $0x1
   108c1:	50                   	push   %eax
   108c2:	68 00 a0 01 00       	push   $0x1a000
   108c7:	e8 d9 fb ff ff       	call   104a5 <addr_free_page>
   108cc:	83 c4 10             	add    $0x10,%esp
   108cf:	eb 01                	jmp    108d2 <memory_destroy_uvm+0xad>
                continue;
   108d1:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   108d2:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108d6:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108da:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108e1:	7e be                	jle    108a1 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108e3:	83 ec 0c             	sub    $0xc,%esp
   108e6:	ff 75 f4             	pushl  -0xc(%ebp)
   108e9:	e8 67 fa ff ff       	call   10355 <pde_paddr>
   108ee:	83 c4 10             	add    $0x10,%esp
   108f1:	83 ec 04             	sub    $0x4,%esp
   108f4:	6a 01                	push   $0x1
   108f6:	50                   	push   %eax
   108f7:	68 00 a0 01 00       	push   $0x1a000
   108fc:	e8 a4 fb ff ff       	call   104a5 <addr_free_page>
   10901:	83 c4 10             	add    $0x10,%esp
   10904:	eb 01                	jmp    10907 <memory_destroy_uvm+0xe2>
            continue;
   10906:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10907:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1090b:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   1090f:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10916:	0f 8e 5e ff ff ff    	jle    1087a <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   1091c:	83 ec 04             	sub    $0x4,%esp
   1091f:	6a 01                	push   $0x1
   10921:	ff 75 08             	pushl  0x8(%ebp)
   10924:	68 00 a0 01 00       	push   $0x1a000
   10929:	e8 77 fb ff ff       	call   104a5 <addr_free_page>
   1092e:	83 c4 10             	add    $0x10,%esp
}
   10931:	90                   	nop
   10932:	c9                   	leave  
   10933:	c3                   	ret    

00010934 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm(uint32_t page_dir)
{
   10934:	55                   	push   %ebp
   10935:	89 e5                	mov    %esp,%ebp
   10937:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   1093a:	e8 61 fe ff ff       	call   107a0 <memory_create_uvm>
   1093f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0)
   10942:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10946:	0f 84 1b 01 00 00    	je     10a67 <memory_copy_uvm+0x133>
    {
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1094c:	83 ec 0c             	sub    $0xc,%esp
   1094f:	68 00 00 00 80       	push   $0x80000000
   10954:	e8 e8 f9 ff ff       	call   10341 <pde_index>
   10959:	83 c4 10             	add    $0x10,%esp
   1095c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   1095f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10962:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10969:	8b 45 08             	mov    0x8(%ebp),%eax
   1096c:	01 d0                	add    %edx,%eax
   1096e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10971:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10974:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10977:	e9 d9 00 00 00       	jmp    10a55 <memory_copy_uvm+0x121>
    {
        if (!pde->present)
   1097c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1097f:	0f b6 00             	movzbl (%eax),%eax
   10982:	83 e0 01             	and    $0x1,%eax
   10985:	84 c0                	test   %al,%al
   10987:	0f 84 bf 00 00 00    	je     10a4c <memory_copy_uvm+0x118>
        {
            continue;
        }

        // 遍历页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   1098d:	83 ec 0c             	sub    $0xc,%esp
   10990:	ff 75 f4             	pushl  -0xc(%ebp)
   10993:	e8 bd f9 ff ff       	call   10355 <pde_paddr>
   10998:	83 c4 10             	add    $0x10,%esp
   1099b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   1099e:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109a5:	e9 93 00 00 00       	jmp    10a3d <memory_copy_uvm+0x109>
        {
            if (!pte->present)
   109aa:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109ad:	0f b6 00             	movzbl (%eax),%eax
   109b0:	83 e0 01             	and    $0x1,%eax
   109b3:	84 c0                	test   %al,%al
   109b5:	74 7d                	je     10a34 <memory_copy_uvm+0x100>
            {
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109b7:	83 ec 08             	sub    $0x8,%esp
   109ba:	6a 01                	push   $0x1
   109bc:	68 00 a0 01 00       	push   $0x1a000
   109c1:	e8 78 fa ff ff       	call   1043e <addr_alloc_page>
   109c6:	83 c4 10             	add    $0x10,%esp
   109c9:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0)
   109cc:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109d0:	0f 84 94 00 00 00    	je     10a6a <memory_copy_uvm+0x136>
            {
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109d6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109d9:	c1 e0 16             	shl    $0x16,%eax
   109dc:	89 c2                	mov    %eax,%edx
   109de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109e1:	c1 e0 0c             	shl    $0xc,%eax
   109e4:	09 d0                	or     %edx,%eax
   109e6:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109e9:	83 ec 0c             	sub    $0xc,%esp
   109ec:	ff 75 ec             	pushl  -0x14(%ebp)
   109ef:	e8 bf f9 ff ff       	call   103b3 <get_pte_perm>
   109f4:	83 c4 10             	add    $0x10,%esp
   109f7:	89 c2                	mov    %eax,%edx
   109f9:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109fc:	83 ec 0c             	sub    $0xc,%esp
   109ff:	52                   	push   %edx
   10a00:	6a 01                	push   $0x1
   10a02:	ff 75 dc             	pushl  -0x24(%ebp)
   10a05:	ff 75 d8             	pushl  -0x28(%ebp)
   10a08:	50                   	push   %eax
   10a09:	e8 4b fc ff ff       	call   10659 <memory_create_map>
   10a0e:	83 c4 20             	add    $0x20,%esp
   10a11:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0)
   10a14:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a18:	78 53                	js     10a6d <memory_copy_uvm+0x139>
            {
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a1a:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a1d:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a20:	83 ec 04             	sub    $0x4,%esp
   10a23:	68 00 10 00 00       	push   $0x1000
   10a28:	52                   	push   %edx
   10a29:	50                   	push   %eax
   10a2a:	e8 4f 4d 00 00       	call   1577e <kernel_memcpy>
   10a2f:	83 c4 10             	add    $0x10,%esp
   10a32:	eb 01                	jmp    10a35 <memory_copy_uvm+0x101>
                continue;
   10a34:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   10a35:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a39:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a3d:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a44:	0f 8e 60 ff ff ff    	jle    109aa <memory_copy_uvm+0x76>
   10a4a:	eb 01                	jmp    10a4d <memory_copy_uvm+0x119>
            continue;
   10a4c:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10a4d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a51:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a55:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a5c:	0f 8e 1a ff ff ff    	jle    1097c <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a65:	eb 20                	jmp    10a87 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a67:	90                   	nop
   10a68:	eb 04                	jmp    10a6e <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a6a:	90                   	nop
   10a6b:	eb 01                	jmp    10a6e <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a6d:	90                   	nop

copy_uvm_failed:
    if (to_page_dir)
   10a6e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a72:	74 0e                	je     10a82 <memory_copy_uvm+0x14e>
    {
        memory_destroy_uvm(to_page_dir);
   10a74:	83 ec 0c             	sub    $0xc,%esp
   10a77:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a7a:	e8 a6 fd ff ff       	call   10825 <memory_destroy_uvm>
   10a7f:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a82:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a87:	c9                   	leave  
   10a88:	c3                   	ret    

00010a89 <memory_get_paddr>:
/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr)
{
   10a89:	55                   	push   %ebp
   10a8a:	89 e5                	mov    %esp,%ebp
   10a8c:	83 ec 18             	sub    $0x18,%esp
    pte_t *pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10a8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10a92:	83 ec 04             	sub    $0x4,%esp
   10a95:	6a 00                	push   $0x0
   10a97:	ff 75 0c             	pushl  0xc(%ebp)
   10a9a:	50                   	push   %eax
   10a9b:	e8 09 fb ff ff       	call   105a9 <find_pte>
   10aa0:	83 c4 10             	add    $0x10,%esp
   10aa3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0)
   10aa6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aaa:	75 07                	jne    10ab3 <memory_get_paddr+0x2a>
    {
        return 0;
   10aac:	b8 00 00 00 00       	mov    $0x0,%eax
   10ab1:	eb 1a                	jmp    10acd <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ab3:	83 ec 0c             	sub    $0xc,%esp
   10ab6:	ff 75 f4             	pushl  -0xc(%ebp)
   10ab9:	e8 ce f8 ff ff       	call   1038c <pte_paddr>
   10abe:	83 c4 10             	add    $0x10,%esp
   10ac1:	89 c2                	mov    %eax,%edx
   10ac3:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ac6:	25 ff 0f 00 00       	and    $0xfff,%eax
   10acb:	01 d0                	add    %edx,%eax
}
   10acd:	c9                   	leave  
   10ace:	c3                   	ret    

00010acf <memory_copy_uvm_data>:
/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size)
{
   10acf:	55                   	push   %ebp
   10ad0:	89 e5                	mov    %esp,%ebp
   10ad2:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while (size > 0)
   10ad5:	eb 6e                	jmp    10b45 <memory_copy_uvm_data+0x76>
    {
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ad7:	83 ec 08             	sub    $0x8,%esp
   10ada:	ff 75 08             	pushl  0x8(%ebp)
   10add:	ff 75 0c             	pushl  0xc(%ebp)
   10ae0:	e8 a4 ff ff ff       	call   10a89 <memory_get_paddr>
   10ae5:	83 c4 10             	add    $0x10,%esp
   10ae8:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0)
   10aeb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10aef:	75 07                	jne    10af8 <memory_copy_uvm_data+0x29>
        {
            return -1;
   10af1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10af6:	eb 58                	jmp    10b50 <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10af8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10afb:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b00:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b03:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b08:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b0b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size)
   10b0e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b11:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b14:	76 06                	jbe    10b1c <memory_copy_uvm_data+0x4d>
        {
            curr_size = size; // 如果比较大，超过页边界，则只拷贝此页内的
   10b16:	8b 45 14             	mov    0x14(%ebp),%eax
   10b19:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b1c:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b1f:	8b 55 10             	mov    0x10(%ebp),%edx
   10b22:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b25:	83 ec 04             	sub    $0x4,%esp
   10b28:	51                   	push   %ecx
   10b29:	52                   	push   %edx
   10b2a:	50                   	push   %eax
   10b2b:	e8 4e 4c 00 00       	call   1577e <kernel_memcpy>
   10b30:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b33:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b36:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b3c:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b42:	01 45 10             	add    %eax,0x10(%ebp)
    while (size > 0)
   10b45:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b49:	75 8c                	jne    10ad7 <memory_copy_uvm_data+0x8>
    }

    return 0;
   10b4b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b50:	c9                   	leave  
   10b51:	c3                   	ret    

00010b52 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm)
{
   10b52:	55                   	push   %ebp
   10b53:	89 e5                	mov    %esp,%ebp
   10b55:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b58:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b5b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b5e:	68 00 10 00 00       	push   $0x1000
   10b63:	ff 75 10             	pushl  0x10(%ebp)
   10b66:	e8 a6 f7 ff ff       	call   10311 <up2>
   10b6b:	83 c4 08             	add    $0x8,%esp
   10b6e:	c1 e8 0c             	shr    $0xc,%eax
   10b71:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b74:	68 00 10 00 00       	push   $0x1000
   10b79:	ff 75 0c             	pushl  0xc(%ebp)
   10b7c:	e8 a7 f7 ff ff       	call   10328 <down2>
   10b81:	83 c4 08             	add    $0x8,%esp
   10b84:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++)
   10b87:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10b8e:	eb 7b                	jmp    10c0b <memory_alloc_for_page_dir+0xb9>
    {
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10b90:	83 ec 08             	sub    $0x8,%esp
   10b93:	6a 01                	push   $0x1
   10b95:	68 00 a0 01 00       	push   $0x1a000
   10b9a:	e8 9f f8 ff ff       	call   1043e <addr_alloc_page>
   10b9f:	83 c4 10             	add    $0x10,%esp
   10ba2:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0)
   10ba5:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10ba9:	75 17                	jne    10bc2 <memory_alloc_for_page_dir+0x70>
        {
            log_printf("mem alloc failed. no memory");
   10bab:	83 ec 0c             	sub    $0xc,%esp
   10bae:	68 fe 5e 01 00       	push   $0x15efe
   10bb3:	e8 0e 52 00 00       	call   15dc6 <log_printf>
   10bb8:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bbb:	b8 00 00 00 00       	mov    $0x0,%eax
   10bc0:	eb 5a                	jmp    10c1c <memory_alloc_for_page_dir+0xca>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bc2:	8b 55 14             	mov    0x14(%ebp),%edx
   10bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc8:	83 ec 0c             	sub    $0xc,%esp
   10bcb:	52                   	push   %edx
   10bcc:	6a 01                	push   $0x1
   10bce:	ff 75 e8             	pushl  -0x18(%ebp)
   10bd1:	ff 75 f4             	pushl  -0xc(%ebp)
   10bd4:	50                   	push   %eax
   10bd5:	e8 7f fa ff ff       	call   10659 <memory_create_map>
   10bda:	83 c4 20             	add    $0x20,%esp
   10bdd:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   10be0:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10be4:	79 1a                	jns    10c00 <memory_alloc_for_page_dir+0xae>
        {
            log_printf("create memory map failed. err = %d", err);
   10be6:	83 ec 08             	sub    $0x8,%esp
   10be9:	ff 75 e4             	pushl  -0x1c(%ebp)
   10bec:	68 1c 5f 01 00       	push   $0x15f1c
   10bf1:	e8 d0 51 00 00       	call   15dc6 <log_printf>
   10bf6:	83 c4 10             	add    $0x10,%esp
            // addr_free_page(&paddr_alloc, vaddr, i + 1); 清理之前分配的页
            return -1;
   10bf9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bfe:	eb 1c                	jmp    10c1c <memory_alloc_for_page_dir+0xca>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c00:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++)
   10c07:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c0e:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c11:	0f 8c 79 ff ff ff    	jl     10b90 <memory_alloc_for_page_dir+0x3e>
    }

    return 0;
   10c17:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c1c:	c9                   	leave  
   10c1d:	c3                   	ret    

00010c1e <memory_alloc_page>:
/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page(void)
{
   10c1e:	55                   	push   %ebp
   10c1f:	89 e5                	mov    %esp,%ebp
   10c21:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c24:	83 ec 08             	sub    $0x8,%esp
   10c27:	6a 01                	push   $0x1
   10c29:	68 00 a0 01 00       	push   $0x1a000
   10c2e:	e8 0b f8 ff ff       	call   1043e <addr_alloc_page>
   10c33:	83 c4 10             	add    $0x10,%esp
}
   10c36:	c9                   	leave  
   10c37:	c3                   	ret    

00010c38 <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page(uint32_t addr)
{
   10c38:	55                   	push   %ebp
   10c39:	89 e5                	mov    %esp,%ebp
   10c3b:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE)
   10c3e:	8b 45 08             	mov    0x8(%ebp),%eax
   10c41:	85 c0                	test   %eax,%eax
   10c43:	78 17                	js     10c5c <memory_free_page+0x24>
    {
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c45:	83 ec 04             	sub    $0x4,%esp
   10c48:	6a 01                	push   $0x1
   10c4a:	ff 75 08             	pushl  0x8(%ebp)
   10c4d:	68 00 a0 01 00       	push   $0x1a000
   10c52:	e8 4e f8 ff ff       	call   104a5 <addr_free_page>
   10c57:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10c5a:	eb 72                	jmp    10cce <memory_free_page+0x96>
        pte_t *pte = find_pte(current_page_dir(), addr, 0);
   10c5c:	e8 72 f7 ff ff       	call   103d3 <current_page_dir>
   10c61:	83 ec 04             	sub    $0x4,%esp
   10c64:	6a 00                	push   $0x0
   10c66:	ff 75 08             	pushl  0x8(%ebp)
   10c69:	50                   	push   %eax
   10c6a:	e8 3a f9 ff ff       	call   105a9 <find_pte>
   10c6f:	83 c4 10             	add    $0x10,%esp
   10c72:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10c75:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c79:	75 0d                	jne    10c88 <memory_free_page+0x50>
   10c7b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c7e:	0f b6 00             	movzbl (%eax),%eax
   10c81:	83 e0 01             	and    $0x1,%eax
   10c84:	84 c0                	test   %al,%al
   10c86:	75 1c                	jne    10ca4 <memory_free_page+0x6c>
   10c88:	68 40 5f 01 00       	push   $0x15f40
   10c8d:	68 10 60 01 00       	push   $0x16010
   10c92:	68 ac 01 00 00       	push   $0x1ac
   10c97:	68 b4 5e 01 00       	push   $0x15eb4
   10c9c:	e8 55 4e 00 00       	call   15af6 <panic>
   10ca1:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10ca4:	83 ec 0c             	sub    $0xc,%esp
   10ca7:	ff 75 f4             	pushl  -0xc(%ebp)
   10caa:	e8 dd f6 ff ff       	call   1038c <pte_paddr>
   10caf:	83 c4 10             	add    $0x10,%esp
   10cb2:	83 ec 04             	sub    $0x4,%esp
   10cb5:	6a 01                	push   $0x1
   10cb7:	50                   	push   %eax
   10cb8:	68 00 a0 01 00       	push   $0x1a000
   10cbd:	e8 e3 f7 ff ff       	call   104a5 <addr_free_page>
   10cc2:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10cc5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cc8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10cce:	90                   	nop
   10ccf:	c9                   	leave  
   10cd0:	c3                   	ret    

00010cd1 <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm)
{
   10cd1:	55                   	push   %ebp
   10cd2:	89 e5                	mov    %esp,%ebp
   10cd4:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10cd7:	e8 a5 08 00 00       	call   11581 <task_current>
   10cdc:	8b 80 74 02 00 00    	mov    0x274(%eax),%eax
   10ce2:	ff 75 10             	pushl  0x10(%ebp)
   10ce5:	ff 75 0c             	pushl  0xc(%ebp)
   10ce8:	ff 75 08             	pushl  0x8(%ebp)
   10ceb:	50                   	push   %eax
   10cec:	e8 61 fe ff ff       	call   10b52 <memory_alloc_for_page_dir>
   10cf1:	83 c4 10             	add    $0x10,%esp
}
   10cf4:	c9                   	leave  
   10cf5:	c3                   	ret    

00010cf6 <memory_init>:
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init(boot_info_t *boot_info)
{
   10cf6:	55                   	push   %ebp
   10cf7:	89 e5                	mov    %esp,%ebp
   10cf9:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    log_printf("mem init");
   10cfc:	83 ec 0c             	sub    $0xc,%esp
   10cff:	68 64 5f 01 00       	push   $0x15f64
   10d04:	e8 bd 50 00 00       	call   15dc6 <log_printf>
   10d09:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d0c:	83 ec 0c             	sub    $0xc,%esp
   10d0f:	ff 75 08             	pushl  0x8(%ebp)
   10d12:	e8 f0 f7 ff ff       	call   10507 <show_mem_info>
   10d17:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10d1a:	c7 45 f4 bf 47 07 00 	movl   $0x747bf,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d21:	83 ec 0c             	sub    $0xc,%esp
   10d24:	ff 75 08             	pushl  0x8(%ebp)
   10d27:	e8 41 f8 ff ff       	call   1056d <total_mem_size>
   10d2c:	83 c4 10             	add    $0x10,%esp
   10d2f:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d34:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10d37:	83 ec 08             	sub    $0x8,%esp
   10d3a:	68 00 10 00 00       	push   $0x1000
   10d3f:	ff 75 f0             	pushl  -0x10(%ebp)
   10d42:	e8 e1 f5 ff ff       	call   10328 <down2>
   10d47:	83 c4 10             	add    $0x10,%esp
   10d4a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x, size:0x%x", MEM_EXT_START, mem_up1MB_free);
   10d4d:	83 ec 04             	sub    $0x4,%esp
   10d50:	ff 75 f0             	pushl  -0x10(%ebp)
   10d53:	68 00 00 10 00       	push   $0x100000
   10d58:	68 6d 5f 01 00       	push   $0x15f6d
   10d5d:	e8 64 50 00 00       	call   15dc6 <log_printf>
   10d62:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d65:	83 ec 0c             	sub    $0xc,%esp
   10d68:	68 00 10 00 00       	push   $0x1000
   10d6d:	ff 75 f0             	pushl  -0x10(%ebp)
   10d70:	68 00 00 10 00       	push   $0x100000
   10d75:	ff 75 f4             	pushl  -0xc(%ebp)
   10d78:	68 00 a0 01 00       	push   $0x1a000
   10d7d:	e8 64 f6 ff ff       	call   103e6 <addr_alloc_init>
   10d82:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE); // mem_free 跳过bit的地址
   10d85:	a1 24 a0 01 00       	mov    0x1a024,%eax
   10d8a:	c1 e8 0c             	shr    $0xc,%eax
   10d8d:	83 ec 0c             	sub    $0xc,%esp
   10d90:	50                   	push   %eax
   10d91:	e8 2c 46 00 00       	call   153c2 <bitmap_byte_count>
   10d96:	83 c4 10             	add    $0x10,%esp
   10d99:	01 45 f4             	add    %eax,-0xc(%ebp)
    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10d9c:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10da3:	76 1c                	jbe    10dc1 <memory_init+0xcb>
   10da5:	68 8c 5f 01 00       	push   $0x15f8c
   10daa:	68 24 60 01 00       	push   $0x16024
   10daf:	68 d6 01 00 00       	push   $0x1d6
   10db4:	68 b4 5e 01 00       	push   $0x15eb4
   10db9:	e8 38 4d 00 00       	call   15af6 <panic>
   10dbe:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10dc1:	e8 1f f9 ff ff       	call   106e5 <create_kernel_table>
    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10dc6:	b8 00 b0 01 00       	mov    $0x1b000,%eax
   10dcb:	83 ec 0c             	sub    $0xc,%esp
   10dce:	50                   	push   %eax
   10dcf:	e8 ee f5 ff ff       	call   103c2 <mmu_set_page_dir>
   10dd4:	83 c4 10             	add    $0x10,%esp
    // {
    //     addr_free_page(&addr_alloc, addr, 2);
    //     addr += 4096 * 2;
    //     log_printf("alloc addr: 0x%x", addr);
    // }
}
   10dd7:	90                   	nop
   10dd8:	c9                   	leave  
   10dd9:	c3                   	ret    

00010dda <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char *sys_sbrk(int incr)
{
   10dda:	55                   	push   %ebp
   10ddb:	89 e5                	mov    %esp,%ebp
   10ddd:	83 ec 38             	sub    $0x38,%esp
    task_t *task = task_current();
   10de0:	e8 9c 07 00 00       	call   11581 <task_current>
   10de5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char *pre_heap_end = (char *)task->heap_end;
   10de8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10deb:	8b 40 30             	mov    0x30(%eax),%eax
   10dee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10df1:	8b 45 08             	mov    0x8(%ebp),%eax
   10df4:	89 45 e8             	mov    %eax,-0x18(%ebp)
    ASSERT(incr >= 0);
   10df7:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10dfb:	79 1c                	jns    10e19 <sys_sbrk+0x3f>
   10dfd:	68 b1 5f 01 00       	push   $0x15fb1
   10e02:	68 30 60 01 00       	push   $0x16030
   10e07:	68 f7 01 00 00       	push   $0x1f7
   10e0c:	68 b4 5e 01 00       	push   $0x15eb4
   10e11:	e8 e0 4c 00 00       	call   15af6 <panic>
   10e16:	83 c4 10             	add    $0x10,%esp
    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0)
   10e19:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e1d:	75 1b                	jne    10e3a <sys_sbrk+0x60>
    {
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e1f:	83 ec 08             	sub    $0x8,%esp
   10e22:	ff 75 ec             	pushl  -0x14(%ebp)
   10e25:	68 bb 5f 01 00       	push   $0x15fbb
   10e2a:	e8 97 4f 00 00       	call   15dc6 <log_printf>
   10e2f:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e32:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e35:	e9 aa 00 00 00       	jmp    10ee4 <sys_sbrk+0x10a>
    }
    uint32_t start = task->heap_end;
   10e3a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e3d:	8b 40 30             	mov    0x30(%eax),%eax
   10e40:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e43:	8b 55 08             	mov    0x8(%ebp),%edx
   10e46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e49:	01 d0                	add    %edx,%eax
   10e4b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e51:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e56:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset)
   10e59:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e5d:	74 37                	je     10e96 <sys_sbrk+0xbc>
    {
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE)
   10e5f:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e62:	8b 45 08             	mov    0x8(%ebp),%eax
   10e65:	01 d0                	add    %edx,%eax
   10e67:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e6c:	7f 0e                	jg     10e7c <sys_sbrk+0xa2>
        {
            task->heap_end = end;
   10e6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e71:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10e74:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10e77:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e7a:	eb 68                	jmp    10ee4 <sys_sbrk+0x10a>
        }
        else
        {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10e7c:	b8 00 10 00 00       	mov    $0x1000,%eax
   10e81:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10e84:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10e87:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10e8a:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e90:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10e93:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }
    // 处理其余的，起始对齐的页边界的
    if (incr)
   10e96:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e9a:	74 3c                	je     10ed8 <sys_sbrk+0xfe>
    {
        uint32_t curr_size = end - start;
   10e9c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e9f:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ea2:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ea5:	83 ec 04             	sub    $0x4,%esp
   10ea8:	6a 07                	push   $0x7
   10eaa:	ff 75 d8             	pushl  -0x28(%ebp)
   10ead:	ff 75 f4             	pushl  -0xc(%ebp)
   10eb0:	e8 1c fe ff ff       	call   10cd1 <memory_alloc_page_for>
   10eb5:	83 c4 10             	add    $0x10,%esp
   10eb8:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0)
   10ebb:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10ebf:	79 17                	jns    10ed8 <sys_sbrk+0xfe>
        {
            log_printf("sbrk: alloc mem failed.");
   10ec1:	83 ec 0c             	sub    $0xc,%esp
   10ec4:	68 cf 5f 01 00       	push   $0x15fcf
   10ec9:	e8 f8 4e 00 00       	call   15dc6 <log_printf>
   10ece:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10ed1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ed6:	eb 0c                	jmp    10ee4 <sys_sbrk+0x10a>
        }
    }

    // log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10ed8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10edb:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ede:	89 50 30             	mov    %edx,0x30(%eax)
    return (char *)pre_heap_end;
   10ee1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ee4:	c9                   	leave  
   10ee5:	c3                   	ret    

00010ee6 <sys_print_msg>:

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

void sys_print_msg(char *fmt, int arg)
{
   10ee6:	55                   	push   %ebp
   10ee7:	89 e5                	mov    %esp,%ebp
   10ee9:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10eec:	83 ec 08             	sub    $0x8,%esp
   10eef:	ff 75 0c             	pushl  0xc(%ebp)
   10ef2:	ff 75 08             	pushl  0x8(%ebp)
   10ef5:	e8 cc 4e 00 00       	call   15dc6 <log_printf>
   10efa:	83 c4 10             	add    $0x10,%esp
}
   10efd:	90                   	nop
   10efe:	c9                   	leave  
   10eff:	c3                   	ret    

00010f00 <do_handler_syscall>:

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall(syscall_frame_t *frame)
{
   10f00:	55                   	push   %ebp
   10f01:	89 e5                	mov    %esp,%ebp
   10f03:	53                   	push   %ebx
   10f04:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0]))
   10f07:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0a:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f0d:	83 f8 64             	cmp    $0x64,%eax
   10f10:	77 4e                	ja     10f60 <do_handler_syscall+0x60>
    {
        // 查表取得处理函数，然后调用处理
        syscall_handler_t handler = sys_table[frame->func_id];
   10f12:	8b 45 08             	mov    0x8(%ebp),%eax
   10f15:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f18:	8b 04 85 40 60 01 00 	mov    0x16040(,%eax,4),%eax
   10f1f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler)
   10f22:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f26:	74 38                	je     10f60 <do_handler_syscall+0x60>
        {
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f28:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2b:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f2e:	89 c3                	mov    %eax,%ebx
   10f30:	8b 45 08             	mov    0x8(%ebp),%eax
   10f33:	8b 40 48             	mov    0x48(%eax),%eax
   10f36:	89 c1                	mov    %eax,%ecx
   10f38:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3b:	8b 40 44             	mov    0x44(%eax),%eax
   10f3e:	89 c2                	mov    %eax,%edx
   10f40:	8b 45 08             	mov    0x8(%ebp),%eax
   10f43:	8b 40 40             	mov    0x40(%eax),%eax
   10f46:	53                   	push   %ebx
   10f47:	51                   	push   %ecx
   10f48:	52                   	push   %edx
   10f49:	50                   	push   %eax
   10f4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f4d:	ff d0                	call   *%eax
   10f4f:	83 c4 10             	add    $0x10,%esp
   10f52:	89 45 f0             	mov    %eax,-0x10(%ebp)
            frame->eax = ret; // 设置系统调用的返回值，由eax传递
   10f55:	8b 45 08             	mov    0x8(%ebp),%eax
   10f58:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f5b:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f5e:	eb 30                	jmp    10f90 <do_handler_syscall+0x90>
        }
    }
    // 不支持的系统调用，打印出错信息
    task_t *task = task_current();
   10f60:	e8 1c 06 00 00       	call   11581 <task_current>
   10f65:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10f68:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6b:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f6e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f71:	83 c2 04             	add    $0x4,%edx
   10f74:	83 ec 04             	sub    $0x4,%esp
   10f77:	50                   	push   %eax
   10f78:	52                   	push   %edx
   10f79:	68 d4 61 01 00       	push   $0x161d4
   10f7e:	e8 43 4e 00 00       	call   15dc6 <log_printf>
   10f83:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1; // 设置系统调用的返回值，由eax传递
   10f86:	8b 45 08             	mov    0x8(%ebp),%eax
   10f89:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10f90:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f93:	c9                   	leave  
   10f94:	c3                   	ret    

00010f95 <list_node_init>:
/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node)
{
   10f95:	55                   	push   %ebp
   10f96:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10f98:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fa2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa5:	8b 50 04             	mov    0x4(%eax),%edx
   10fa8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fab:	89 10                	mov    %edx,(%eax)
}
   10fad:	90                   	nop
   10fae:	5d                   	pop    %ebp
   10faf:	c3                   	ret    

00010fb0 <list_node_next>:
 * 获取结点的后一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t *list_node_next(list_node_t *node)
{
   10fb0:	55                   	push   %ebp
   10fb1:	89 e5                	mov    %esp,%ebp
    return node->next;
   10fb3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb6:	8b 40 04             	mov    0x4(%eax),%eax
}
   10fb9:	5d                   	pop    %ebp
   10fba:	c3                   	ret    

00010fbb <list_count>:
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list)
{
   10fbb:	55                   	push   %ebp
   10fbc:	89 e5                	mov    %esp,%ebp
    return list->count;
   10fbe:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc1:	8b 40 08             	mov    0x8(%eax),%eax
}
   10fc4:	5d                   	pop    %ebp
   10fc5:	c3                   	ret    

00010fc6 <list_first>:
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t *list_first(list_t *list)
{
   10fc6:	55                   	push   %ebp
   10fc7:	89 e5                	mov    %esp,%ebp
    return list->first;
   10fc9:	8b 45 08             	mov    0x8(%ebp),%eax
   10fcc:	8b 00                	mov    (%eax),%eax
}
   10fce:	5d                   	pop    %ebp
   10fcf:	c3                   	ret    

00010fd0 <write_cr3>:
{
   10fd0:	55                   	push   %ebp
   10fd1:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10fd3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd6:	0f 22 d8             	mov    %eax,%cr3
}
   10fd9:	90                   	nop
   10fda:	5d                   	pop    %ebp
   10fdb:	c3                   	ret    

00010fdc <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   10fdc:	55                   	push   %ebp
   10fdd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fdf:	f4                   	hlt    
}
   10fe0:	90                   	nop
   10fe1:	5d                   	pop    %ebp
   10fe2:	c3                   	ret    

00010fe3 <write_tr>:

// 写tss register 当前运行那个进程
static inline void write_tr(uint32_t tss_selector)
{
   10fe3:	55                   	push   %ebp
   10fe4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   10fe6:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe9:	0f 00 d8             	ltr    %ax
}
   10fec:	90                   	nop
   10fed:	5d                   	pop    %ebp
   10fee:	c3                   	ret    

00010fef <mmu_set_page_dir>:
{
   10fef:	55                   	push   %ebp
   10ff0:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10ff2:	ff 75 08             	pushl  0x8(%ebp)
   10ff5:	e8 d6 ff ff ff       	call   10fd0 <write_cr3>
   10ffa:	83 c4 04             	add    $0x4,%esp
}
   10ffd:	90                   	nop
   10ffe:	c9                   	leave  
   10fff:	c3                   	ret    

00011000 <tss_init>:
static task_manager_t task_manager; // 任务管理器
static task_t task_table[TASK_NR];
static mutex_t task_table_mutex;

static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   11000:	55                   	push   %ebp
   11001:	89 e5                	mov    %esp,%ebp
   11003:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = get_alloc_desc();
   11006:	e8 1d 13 00 00       	call   12328 <get_alloc_desc>
   1100b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   1100e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11012:	79 1a                	jns    1102e <tss_init+0x2e>
    {
        log_printf("alloc tss failed.\n");
   11014:	83 ec 0c             	sub    $0xc,%esp
   11017:	68 f4 61 01 00       	push   $0x161f4
   1101c:	e8 a5 4d 00 00       	call   15dc6 <log_printf>
   11021:	83 c4 10             	add    $0x10,%esp
        return -1;
   11024:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11029:	e9 7b 01 00 00       	jmp    111a9 <tss_init+0x1a9>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS); // 设置GDT表项内容
   1102e:	8b 45 08             	mov    0x8(%ebp),%eax
   11031:	05 58 02 00 00       	add    $0x258,%eax
   11036:	68 89 00 00 00       	push   $0x89
   1103b:	6a 68                	push   $0x68
   1103d:	50                   	push   %eax
   1103e:	ff 75 ec             	pushl  -0x14(%ebp)
   11041:	e8 2a 12 00 00       	call   12270 <segment_desc_set>
   11046:	83 c4 10             	add    $0x10,%esp

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11049:	8b 45 08             	mov    0x8(%ebp),%eax
   1104c:	05 58 02 00 00       	add    $0x258,%eax
   11051:	83 ec 04             	sub    $0x4,%esp
   11054:	6a 68                	push   $0x68
   11056:	6a 00                	push   $0x0
   11058:	50                   	push   %eax
   11059:	e8 6f 47 00 00       	call   157cd <kernel_memset>
   1105e:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   11061:	e8 b8 fb ff ff       	call   10c1e <memory_alloc_page>
   11066:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0)
   11069:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1106d:	0f 84 0b 01 00 00    	je     1117e <tss_init+0x17e>

    int code_sel, data_sel;
    // code_sel = task_manager.app_code_sel | SEG_CPL3;
    // data_sel = task_manager.app_data_sel | SEG_CPL3;
    // 根据不同的权限选择不同的访问选择子
    if (flag & TASK_FLAG_SYSTEM)
   11073:	8b 45 0c             	mov    0xc(%ebp),%eax
   11076:	83 e0 01             	and    $0x1,%eax
   11079:	85 c0                	test   %eax,%eax
   1107b:	74 10                	je     1108d <tss_init+0x8d>
    {
        code_sel = KERNEL_SELECTOR_CS;
   1107d:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   11084:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   1108b:	eb 16                	jmp    110a3 <tss_init+0xa3>
    }
    else
    {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_CPL3;
   1108d:	a1 b0 d5 01 00       	mov    0x1d5b0,%eax
   11092:	83 c8 03             	or     $0x3,%eax
   11095:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3;
   11098:	a1 b4 d5 01 00       	mov    0x1d5b4,%eax
   1109d:	83 c8 03             	or     $0x3,%eax
   110a0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   110a3:	8b 45 08             	mov    0x8(%ebp),%eax
   110a6:	8b 55 10             	mov    0x10(%ebp),%edx
   110a9:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
    // task->tss.esp = task->tss.esp0 = esp;
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; // 未指定栈则用内核栈，即运行在特权级0的进程
   110af:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110b3:	75 0a                	jne    110bf <tss_init+0xbf>
   110b5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110b8:	05 00 10 00 00       	add    $0x1000,%eax
   110bd:	eb 03                	jmp    110c2 <tss_init+0xc2>
   110bf:	8b 45 14             	mov    0x14(%ebp),%eax
   110c2:	8b 55 08             	mov    0x8(%ebp),%edx
   110c5:	89 82 90 02 00 00    	mov    %eax,0x290(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110ce:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   110d4:	8b 45 08             	mov    0x8(%ebp),%eax
   110d7:	89 90 5c 02 00 00    	mov    %edx,0x25c(%eax)
    task->tss.ss = data_sel;            // 特权3
   110dd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110e0:	8b 45 08             	mov    0x8(%ebp),%eax
   110e3:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; // 特权0
   110e9:	8b 45 08             	mov    0x8(%ebp),%eax
   110ec:	c7 80 60 02 00 00 10 	movl   $0x10,0x260(%eax)
   110f3:	00 00 00 
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   110f6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110f9:	8b 45 08             	mov    0x8(%ebp),%eax
   110fc:	89 90 b4 02 00 00    	mov    %edx,0x2b4(%eax)
   11102:	8b 45 08             	mov    0x8(%ebp),%eax
   11105:	8b 90 b4 02 00 00    	mov    0x2b4(%eax),%edx
   1110b:	8b 45 08             	mov    0x8(%ebp),%eax
   1110e:	89 90 b0 02 00 00    	mov    %edx,0x2b0(%eax)
   11114:	8b 45 08             	mov    0x8(%ebp),%eax
   11117:	8b 90 b0 02 00 00    	mov    0x2b0(%eax),%edx
   1111d:	8b 45 08             	mov    0x8(%ebp),%eax
   11120:	89 90 ac 02 00 00    	mov    %edx,0x2ac(%eax)
   11126:	8b 45 08             	mov    0x8(%ebp),%eax
   11129:	8b 90 ac 02 00 00    	mov    0x2ac(%eax),%edx
   1112f:	8b 45 08             	mov    0x8(%ebp),%eax
   11132:	89 90 a0 02 00 00    	mov    %edx,0x2a0(%eax)
    task->tss.cs = code_sel;
   11138:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	89 90 a4 02 00 00    	mov    %edx,0x2a4(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   11144:	8b 45 08             	mov    0x8(%ebp),%eax
   11147:	c7 80 7c 02 00 00 02 	movl   $0x202,0x27c(%eax)
   1114e:	02 00 00 

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   11151:	e8 4a f6 ff ff       	call   107a0 <memory_create_uvm>
   11156:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0)
   11159:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1115d:	74 22                	je     11181 <tss_init+0x181>
    {
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   1115f:	8b 45 08             	mov    0x8(%ebp),%eax
   11162:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11165:	89 90 74 02 00 00    	mov    %edx,0x274(%eax)
    task->tss_sel = tss_sel;
   1116b:	8b 45 08             	mov    0x8(%ebp),%eax
   1116e:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11171:	89 90 c0 02 00 00    	mov    %edx,0x2c0(%eax)
    return 0;
   11177:	b8 00 00 00 00       	mov    $0x0,%eax
   1117c:	eb 2b                	jmp    111a9 <tss_init+0x1a9>
        goto tss_init_failed;
   1117e:	90                   	nop
   1117f:	eb 01                	jmp    11182 <tss_init+0x182>
        goto tss_init_failed;
   11181:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   11182:	83 ec 0c             	sub    $0xc,%esp
   11185:	ff 75 ec             	pushl  -0x14(%ebp)
   11188:	e8 62 11 00 00       	call   122ef <gdt_free_sel>
   1118d:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack)
   11190:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11194:	74 0e                	je     111a4 <tss_init+0x1a4>
    {
        memory_free_page(kernel_stack);
   11196:	83 ec 0c             	sub    $0xc,%esp
   11199:	ff 75 e8             	pushl  -0x18(%ebp)
   1119c:	e8 97 fa ff ff       	call   10c38 <memory_free_page>
   111a1:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111a9:	c9                   	leave  
   111aa:	c3                   	ret    

000111ab <task_init>:

int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   111ab:	55                   	push   %ebp
   111ac:	89 e5                	mov    %esp,%ebp
   111ae:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   111b1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111b5:	75 19                	jne    111d0 <task_init+0x25>
   111b7:	68 07 62 01 00       	push   $0x16207
   111bc:	68 8c 63 01 00       	push   $0x1638c
   111c1:	6a 57                	push   $0x57
   111c3:	68 1c 62 01 00       	push   $0x1621c
   111c8:	e8 29 49 00 00       	call   15af6 <panic>
   111cd:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   111d0:	ff 75 18             	pushl  0x18(%ebp)
   111d3:	ff 75 14             	pushl  0x14(%ebp)
   111d6:	ff 75 10             	pushl  0x10(%ebp)
   111d9:	ff 75 08             	pushl  0x8(%ebp)
   111dc:	e8 1f fe ff ff       	call   11000 <tss_init>
   111e1:	83 c4 10             	add    $0x10,%esp
   111e4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   111e7:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111eb:	79 18                	jns    11205 <task_init+0x5a>
    {
        log_printf("init task failed.\n");
   111ed:	83 ec 0c             	sub    $0xc,%esp
   111f0:	68 56 62 01 00       	push   $0x16256
   111f5:	e8 cc 4b 00 00       	call   15dc6 <log_printf>
   111fa:	83 c4 10             	add    $0x10,%esp
        return err;
   111fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11200:	e9 e8 00 00 00       	jmp    112ed <task_init+0x142>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11205:	8b 45 08             	mov    0x8(%ebp),%eax
   11208:	83 c0 04             	add    $0x4,%eax
   1120b:	83 ec 04             	sub    $0x4,%esp
   1120e:	6a 20                	push   $0x20
   11210:	ff 75 0c             	pushl  0xc(%ebp)
   11213:	50                   	push   %eax
   11214:	e8 3c 44 00 00       	call   15655 <kernel_strncpy>
   11219:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1121c:	8b 45 08             	mov    0x8(%ebp),%eax
   1121f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   11225:	8b 45 08             	mov    0x8(%ebp),%eax
   11228:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    task->parent = (task_t *)0;
   1122f:	8b 45 08             	mov    0x8(%ebp),%eax
   11232:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   11239:	8b 45 08             	mov    0x8(%ebp),%eax
   1123c:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   11243:	8b 45 08             	mov    0x8(%ebp),%eax
   11246:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1124d:	8b 45 08             	mov    0x8(%ebp),%eax
   11250:	c7 40 38 0a 00 00 00 	movl   $0xa,0x38(%eax)
    task->slice_ticks = task->time_ticks;
   11257:	8b 45 08             	mov    0x8(%ebp),%eax
   1125a:	8b 50 38             	mov    0x38(%eax),%edx
   1125d:	8b 45 08             	mov    0x8(%ebp),%eax
   11260:	89 50 3c             	mov    %edx,0x3c(%eax)
    list_node_init(&task->all_node);
   11263:	8b 45 08             	mov    0x8(%ebp),%eax
   11266:	83 c0 50             	add    $0x50,%eax
   11269:	83 ec 0c             	sub    $0xc,%esp
   1126c:	50                   	push   %eax
   1126d:	e8 23 fd ff ff       	call   10f95 <list_node_init>
   11272:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11275:	8b 45 08             	mov    0x8(%ebp),%eax
   11278:	83 c0 40             	add    $0x40,%eax
   1127b:	83 ec 0c             	sub    $0xc,%esp
   1127e:	50                   	push   %eax
   1127f:	e8 11 fd ff ff       	call   10f95 <list_node_init>
   11284:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   11287:	8b 45 08             	mov    0x8(%ebp),%eax
   1128a:	83 c0 48             	add    $0x48,%eax
   1128d:	83 ec 0c             	sub    $0xc,%esp
   11290:	50                   	push   %eax
   11291:	e8 ff fc ff ff       	call   10f95 <list_node_init>
   11296:	83 c4 10             	add    $0x10,%esp

    // 文件相关
    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   11299:	8b 45 08             	mov    0x8(%ebp),%eax
   1129c:	83 c0 58             	add    $0x58,%eax
   1129f:	83 ec 04             	sub    $0x4,%esp
   112a2:	68 00 02 00 00       	push   $0x200
   112a7:	6a 00                	push   $0x0
   112a9:	50                   	push   %eax
   112aa:	e8 1e 45 00 00       	call   157cd <kernel_memset>
   112af:	83 c4 10             	add    $0x10,%esp

    // 插入就绪队列中和所有的任务队列中
    irq_state_t state = irq_enter_protection();
   112b2:	e8 2a 1b 00 00       	call   12de1 <irq_enter_protection>
   112b7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task; // 使用地址，能唯一
   112ba:	8b 55 08             	mov    0x8(%ebp),%edx
   112bd:	8b 45 08             	mov    0x8(%ebp),%eax
   112c0:	89 50 24             	mov    %edx,0x24(%eax)
    // task_set_ready(task);
    list_insert_last(&task_manager.task_list, &task->all_node); // 插入所有task进队尾
   112c3:	8b 45 08             	mov    0x8(%ebp),%eax
   112c6:	83 c0 50             	add    $0x50,%eax
   112c9:	83 ec 08             	sub    $0x8,%esp
   112cc:	50                   	push   %eax
   112cd:	68 10 d0 01 00       	push   $0x1d010
   112d2:	e8 5f 49 00 00       	call   15c36 <list_insert_last>
   112d7:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   112da:	83 ec 0c             	sub    $0xc,%esp
   112dd:	ff 75 f0             	pushl  -0x10(%ebp)
   112e0:	e8 14 1b 00 00       	call   12df9 <irq_leave_protection>
   112e5:	83 c4 10             	add    $0x10,%esp
    return 0;
   112e8:	b8 00 00 00 00       	mov    $0x0,%eax
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    // }
}
   112ed:	c9                   	leave  
   112ee:	c3                   	ret    

000112ef <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   112ef:	55                   	push   %ebp
   112f0:	89 e5                	mov    %esp,%ebp
   112f2:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   112f5:	8b 45 0c             	mov    0xc(%ebp),%eax
   112f8:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
   112fe:	83 ec 0c             	sub    $0xc,%esp
   11301:	50                   	push   %eax
   11302:	e8 86 11 00 00       	call   1248d <switch_to_tss>
   11307:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   1130a:	90                   	nop
   1130b:	c9                   	leave  
   1130c:	c3                   	ret    

0001130d <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t *task)
{
   1130d:	55                   	push   %ebp
   1130e:	89 e5                	mov    %esp,%ebp
   11310:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11313:	e8 c9 1a 00 00       	call   12de1 <irq_enter_protection>
   11318:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   1131b:	83 ec 0c             	sub    $0xc,%esp
   1131e:	ff 75 08             	pushl  0x8(%ebp)
   11321:	e8 fc 01 00 00       	call   11522 <task_set_ready>
   11326:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11329:	83 ec 0c             	sub    $0xc,%esp
   1132c:	ff 75 f4             	pushl  -0xc(%ebp)
   1132f:	e8 c5 1a 00 00       	call   12df9 <irq_leave_protection>
   11334:	83 c4 10             	add    $0x10,%esp
}
   11337:	90                   	nop
   11338:	c9                   	leave  
   11339:	c3                   	ret    

0001133a <task_first_init>:
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init(void)
{
   1133a:	55                   	push   %ebp
   1133b:	89 e5                	mov    %esp,%ebp
   1133d:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    // 以下获得的是bin文件在内存中的物理地址，起始和结束
    extern uint8_t s_first_task[], e_first_task[];
    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   11340:	ba bf 47 07 00       	mov    $0x747bf,%edx
   11345:	b8 7c 44 07 00       	mov    $0x7447c,%eax
   1134a:	29 c2                	sub    %eax,%edx
   1134c:	89 d0                	mov    %edx,%eax
   1134e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   11351:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11358:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1135b:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1135e:	72 1c                	jb     1137c <task_first_init+0x42>
   11360:	68 69 62 01 00       	push   $0x16269
   11365:	68 98 63 01 00       	push   $0x16398
   1136a:	68 a3 00 00 00       	push   $0xa3
   1136f:	68 1c 62 01 00       	push   $0x1621c
   11374:	e8 7d 47 00 00       	call   15af6 <panic>
   11379:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1137c:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   11383:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11386:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11389:	01 d0                	add    %edx,%eax
   1138b:	83 ec 0c             	sub    $0xc,%esp
   1138e:	50                   	push   %eax
   1138f:	ff 75 ec             	pushl  -0x14(%ebp)
   11392:	6a 00                	push   $0x0
   11394:	68 80 62 01 00       	push   $0x16280
   11399:	68 28 d0 01 00       	push   $0x1d028
   1139e:	e8 08 fe ff ff       	call   111ab <task_init>
   113a3:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task; // 这里不对
   113a6:	b8 bf 47 07 00       	mov    $0x747bf,%eax
   113ab:	a3 54 d0 01 00       	mov    %eax,0x1d054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   113b0:	a1 54 d0 01 00       	mov    0x1d054,%eax
   113b5:	a3 58 d0 01 00       	mov    %eax,0x1d058

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   113ba:	a1 e8 d2 01 00       	mov    0x1d2e8,%eax
   113bf:	83 ec 0c             	sub    $0xc,%esp
   113c2:	50                   	push   %eax
   113c3:	e8 1b fc ff ff       	call   10fe3 <write_tr>
   113c8:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   113cb:	c7 05 00 d0 01 00 28 	movl   $0x1d028,0x1d000
   113d2:	d0 01 00 

    // 切换页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   113d5:	a1 9c d2 01 00       	mov    0x1d29c,%eax
   113da:	83 ec 0c             	sub    $0xc,%esp
   113dd:	50                   	push   %eax
   113de:	e8 0c fc ff ff       	call   10fef <mmu_set_page_dir>
   113e3:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   113e6:	83 ec 04             	sub    $0x4,%esp
   113e9:	6a 07                	push   $0x7
   113eb:	ff 75 f0             	pushl  -0x10(%ebp)
   113ee:	ff 75 ec             	pushl  -0x14(%ebp)
   113f1:	e8 db f8 ff ff       	call   10cd1 <memory_alloc_page_for>
   113f6:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   113f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   113ff:	83 ec 04             	sub    $0x4,%esp
   11402:	52                   	push   %edx
   11403:	68 7c 44 07 00       	push   $0x7447c
   11408:	50                   	push   %eax
   11409:	e8 70 43 00 00       	call   1577e <kernel_memcpy>
   1140e:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   11411:	83 ec 0c             	sub    $0xc,%esp
   11414:	68 28 d0 01 00       	push   $0x1d028
   11419:	e8 ef fe ff ff       	call   1130d <task_start>
   1141e:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    // write_tr(task_manager.first_task.tss_sel);
}
   11421:	90                   	nop
   11422:	c9                   	leave  
   11423:	c3                   	ret    

00011424 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t *task_first_task(void)
{
   11424:	55                   	push   %ebp
   11425:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11427:	b8 28 d0 01 00       	mov    $0x1d028,%eax
}
   1142c:	5d                   	pop    %ebp
   1142d:	c3                   	ret    

0001142e <idle_task_entry>:

static void idle_task_entry(void)
{
   1142e:	55                   	push   %ebp
   1142f:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        hlt();
   11431:	e8 a6 fb ff ff       	call   10fdc <hlt>
   11436:	eb f9                	jmp    11431 <idle_task_entry+0x3>

00011438 <task_manager_init>:
    }
}

void task_manager_init(void)
{
   11438:	55                   	push   %ebp
   11439:	89 e5                	mov    %esp,%ebp
   1143b:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1143e:	83 ec 04             	sub    $0x4,%esp
   11441:	68 00 62 01 00       	push   $0x16200
   11446:	6a 00                	push   $0x0
   11448:	68 c0 d5 01 00       	push   $0x1d5c0
   1144d:	e8 7b 43 00 00       	call   157cd <kernel_memset>
   11452:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11455:	83 ec 0c             	sub    $0xc,%esp
   11458:	68 c0 37 03 00       	push   $0x337c0
   1145d:	e8 9d 3c 00 00       	call   150ff <mutex_init>
   11462:	83 c4 10             	add    $0x10,%esp

    int sel = get_alloc_desc();
   11465:	e8 be 0e 00 00       	call   12328 <get_alloc_desc>
   1146a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1146d:	68 f2 40 00 00       	push   $0x40f2
   11472:	6a ff                	push   $0xffffffff
   11474:	6a 00                	push   $0x0
   11476:	ff 75 f4             	pushl  -0xc(%ebp)
   11479:	e8 f2 0d 00 00       	call   12270 <segment_desc_set>
   1147e:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   11481:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11484:	a3 b4 d5 01 00       	mov    %eax,0x1d5b4

    sel = get_alloc_desc();
   11489:	e8 9a 0e 00 00       	call   12328 <get_alloc_desc>
   1148e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   11491:	68 fa 40 00 00       	push   $0x40fa
   11496:	6a ff                	push   $0xffffffff
   11498:	6a 00                	push   $0x0
   1149a:	ff 75 f4             	pushl  -0xc(%ebp)
   1149d:	e8 ce 0d 00 00       	call   12270 <segment_desc_set>
   114a2:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   114a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114a8:	a3 b0 d5 01 00       	mov    %eax,0x1d5b0

    // 各队列初始化
    list_init(&task_manager.ready_list);
   114ad:	83 ec 0c             	sub    $0xc,%esp
   114b0:	68 04 d0 01 00       	push   $0x1d004
   114b5:	e8 f8 46 00 00       	call   15bb2 <list_init>
   114ba:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   114bd:	83 ec 0c             	sub    $0xc,%esp
   114c0:	68 10 d0 01 00       	push   $0x1d010
   114c5:	e8 e8 46 00 00       	call   15bb2 <list_init>
   114ca:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   114cd:	83 ec 0c             	sub    $0xc,%esp
   114d0:	68 1c d0 01 00       	push   $0x1d01c
   114d5:	e8 d8 46 00 00       	call   15bb2 <list_init>
   114da:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   114dd:	c7 05 00 d0 01 00 00 	movl   $0x0,0x1d000
   114e4:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", TASK_FLAG_SYSTEM, (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + 1024);
   114e7:	b8 00 c0 01 00       	mov    $0x1c000,%eax
   114ec:	05 00 04 00 00       	add    $0x400,%eax
   114f1:	ba 2e 14 01 00       	mov    $0x1142e,%edx
   114f6:	83 ec 0c             	sub    $0xc,%esp
   114f9:	50                   	push   %eax
   114fa:	52                   	push   %edx
   114fb:	6a 01                	push   $0x1
   114fd:	68 8b 62 01 00       	push   $0x1628b
   11502:	68 ec d2 01 00       	push   $0x1d2ec
   11507:	e8 9f fc ff ff       	call   111ab <task_init>
   1150c:	83 c4 20             	add    $0x20,%esp
    task_start(&task_manager.idle_task);
   1150f:	83 ec 0c             	sub    $0xc,%esp
   11512:	68 ec d2 01 00       	push   $0x1d2ec
   11517:	e8 f1 fd ff ff       	call   1130d <task_start>
   1151c:	83 c4 10             	add    $0x10,%esp
}
   1151f:	90                   	nop
   11520:	c9                   	leave  
   11521:	c3                   	ret    

00011522 <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task)
{
   11522:	55                   	push   %ebp
   11523:	89 e5                	mov    %esp,%ebp
   11525:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   11528:	81 7d 08 ec d2 01 00 	cmpl   $0x1d2ec,0x8(%ebp)
   1152f:	74 22                	je     11553 <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   11531:	8b 45 08             	mov    0x8(%ebp),%eax
   11534:	83 c0 40             	add    $0x40,%eax
   11537:	83 ec 08             	sub    $0x8,%esp
   1153a:	50                   	push   %eax
   1153b:	68 04 d0 01 00       	push   $0x1d004
   11540:	e8 f1 46 00 00       	call   15c36 <list_insert_last>
   11545:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11548:	8b 45 08             	mov    0x8(%ebp),%eax
   1154b:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   11551:	eb 01                	jmp    11554 <task_set_ready+0x32>
        return;
   11553:	90                   	nop
}
   11554:	c9                   	leave  
   11555:	c3                   	ret    

00011556 <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block(task_t *task)
{
   11556:	55                   	push   %ebp
   11557:	89 e5                	mov    %esp,%ebp
   11559:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   1155c:	81 7d 08 ec d2 01 00 	cmpl   $0x1d2ec,0x8(%ebp)
   11563:	74 19                	je     1157e <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   11565:	8b 45 08             	mov    0x8(%ebp),%eax
   11568:	83 c0 40             	add    $0x40,%eax
   1156b:	83 ec 08             	sub    $0x8,%esp
   1156e:	50                   	push   %eax
   1156f:	68 04 d0 01 00       	push   $0x1d004
   11574:	e8 99 47 00 00       	call   15d12 <list_remove>
   11579:	83 c4 10             	add    $0x10,%esp
   1157c:	eb 01                	jmp    1157f <task_set_block+0x29>
        return;
   1157e:	90                   	nop
}
   1157f:	c9                   	leave  
   11580:	c3                   	ret    

00011581 <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t *task_current(void)
{
   11581:	55                   	push   %ebp
   11582:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11584:	a1 00 d0 01 00       	mov    0x1d000,%eax
}
   11589:	5d                   	pop    %ebp
   1158a:	c3                   	ret    

0001158b <sys_sched_yield>:

int sys_sched_yield(void)
{
   1158b:	55                   	push   %ebp
   1158c:	89 e5                	mov    %esp,%ebp
   1158e:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11591:	e8 4b 18 00 00       	call   12de1 <irq_enter_protection>
   11596:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   11599:	83 ec 0c             	sub    $0xc,%esp
   1159c:	68 04 d0 01 00       	push   $0x1d004
   115a1:	e8 15 fa ff ff       	call   10fbb <list_count>
   115a6:	83 c4 10             	add    $0x10,%esp
   115a9:	83 f8 01             	cmp    $0x1,%eax
   115ac:	7e 29                	jle    115d7 <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current();
   115ae:	e8 ce ff ff ff       	call   11581 <task_current>
   115b3:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   115b6:	83 ec 0c             	sub    $0xc,%esp
   115b9:	ff 75 f0             	pushl  -0x10(%ebp)
   115bc:	e8 95 ff ff ff       	call   11556 <task_set_block>
   115c1:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   115c4:	83 ec 0c             	sub    $0xc,%esp
   115c7:	ff 75 f0             	pushl  -0x10(%ebp)
   115ca:	e8 53 ff ff ff       	call   11522 <task_set_ready>
   115cf:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   115d2:	e8 58 00 00 00       	call   1162f <task_dispatch>
    }
    irq_leave_protection(state);
   115d7:	83 ec 0c             	sub    $0xc,%esp
   115da:	ff 75 f4             	pushl  -0xc(%ebp)
   115dd:	e8 17 18 00 00       	call   12df9 <irq_leave_protection>
   115e2:	83 c4 10             	add    $0x10,%esp
    return 0;
   115e5:	b8 00 00 00 00       	mov    $0x0,%eax
}
   115ea:	c9                   	leave  
   115eb:	c3                   	ret    

000115ec <task_next_run>:

/**
 * @brief 获取下一将要运行的任务
 */
static task_t *task_next_run(void)
{
   115ec:	55                   	push   %ebp
   115ed:	89 e5                	mov    %esp,%ebp
   115ef:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   115f2:	68 04 d0 01 00       	push   $0x1d004
   115f7:	e8 bf f9 ff ff       	call   10fbb <list_count>
   115fc:	83 c4 04             	add    $0x4,%esp
   115ff:	85 c0                	test   %eax,%eax
   11601:	75 07                	jne    1160a <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   11603:	b8 ec d2 01 00       	mov    $0x1d2ec,%eax
   11608:	eb 23                	jmp    1162d <task_next_run+0x41>
    }

    // 普通任务
    list_node_t *task_node = list_first(&task_manager.ready_list);
   1160a:	68 04 d0 01 00       	push   $0x1d004
   1160f:	e8 b2 f9 ff ff       	call   10fc6 <list_first>
   11614:	83 c4 04             	add    $0x4,%esp
   11617:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   1161a:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1161e:	74 08                	je     11628 <task_next_run+0x3c>
   11620:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11623:	83 e8 40             	sub    $0x40,%eax
   11626:	eb 05                	jmp    1162d <task_next_run+0x41>
   11628:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1162d:	c9                   	leave  
   1162e:	c3                   	ret    

0001162f <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch(void)
{
   1162f:	55                   	push   %ebp
   11630:	89 e5                	mov    %esp,%ebp
   11632:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11635:	e8 a7 17 00 00       	call   12de1 <irq_enter_protection>
   1163a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   1163d:	e8 aa ff ff ff       	call   115ec <task_next_run>
   11642:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task)
   11645:	a1 00 d0 01 00       	mov    0x1d000,%eax
   1164a:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1164d:	74 2a                	je     11679 <task_dispatch+0x4a>
    {
        task_t *from = task_manager.curr_task;
   1164f:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11654:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;
   11657:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1165a:	a3 00 d0 01 00       	mov    %eax,0x1d000
        to->state = TASK_RUNNING;
   1165f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11662:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   11668:	83 ec 08             	sub    $0x8,%esp
   1166b:	ff 75 f0             	pushl  -0x10(%ebp)
   1166e:	ff 75 ec             	pushl  -0x14(%ebp)
   11671:	e8 79 fc ff ff       	call   112ef <task_switch_from_to>
   11676:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   11679:	83 ec 0c             	sub    $0xc,%esp
   1167c:	ff 75 f4             	pushl  -0xc(%ebp)
   1167f:	e8 75 17 00 00       	call   12df9 <irq_leave_protection>
   11684:	83 c4 10             	add    $0x10,%esp
}
   11687:	90                   	nop
   11688:	c9                   	leave  
   11689:	c3                   	ret    

0001168a <task_time_tick>:
/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick(void)
{
   1168a:	55                   	push   %ebp
   1168b:	89 e5                	mov    %esp,%ebp
   1168d:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   11690:	e8 ec fe ff ff       	call   11581 <task_current>
   11695:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_state_t state = irq_enter_protection();
   11698:	e8 44 17 00 00       	call   12de1 <irq_enter_protection>
   1169d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0)
   116a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116a3:	8b 40 3c             	mov    0x3c(%eax),%eax
   116a6:	8d 50 ff             	lea    -0x1(%eax),%edx
   116a9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116ac:	89 50 3c             	mov    %edx,0x3c(%eax)
   116af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116b2:	8b 40 3c             	mov    0x3c(%eax),%eax
   116b5:	85 c0                	test   %eax,%eax
   116b7:	75 28                	jne    116e1 <task_time_tick+0x57>
    {
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_ticks;
   116b9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116bc:	8b 50 38             	mov    0x38(%eax),%edx
   116bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116c2:	89 50 3c             	mov    %edx,0x3c(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   116c5:	83 ec 0c             	sub    $0xc,%esp
   116c8:	ff 75 f0             	pushl  -0x10(%ebp)
   116cb:	e8 86 fe ff ff       	call   11556 <task_set_block>
   116d0:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   116d3:	83 ec 0c             	sub    $0xc,%esp
   116d6:	ff 75 f0             	pushl  -0x10(%ebp)
   116d9:	e8 44 fe ff ff       	call   11522 <task_set_ready>
   116de:	83 c4 10             	add    $0x10,%esp
    }

    // 睡眠处理
    list_node_t *curr = list_first(&task_manager.sleep_list);
   116e1:	83 ec 0c             	sub    $0xc,%esp
   116e4:	68 1c d0 01 00       	push   $0x1d01c
   116e9:	e8 d8 f8 ff ff       	call   10fc6 <list_first>
   116ee:	83 c4 10             	add    $0x10,%esp
   116f1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   116f4:	eb 62                	jmp    11758 <task_time_tick+0xce>
    {
        list_node_t *next = list_node_next(curr);
   116f6:	83 ec 0c             	sub    $0xc,%esp
   116f9:	ff 75 f4             	pushl  -0xc(%ebp)
   116fc:	e8 af f8 ff ff       	call   10fb0 <list_node_next>
   11701:	83 c4 10             	add    $0x10,%esp
   11704:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t *task = list_node_parent(curr, task_t, run_node);
   11707:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1170b:	74 08                	je     11715 <task_time_tick+0x8b>
   1170d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11710:	83 e8 40             	sub    $0x40,%eax
   11713:	eb 05                	jmp    1171a <task_time_tick+0x90>
   11715:	b8 00 00 00 00       	mov    $0x0,%eax
   1171a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   1171d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11720:	8b 40 34             	mov    0x34(%eax),%eax
   11723:	8d 50 ff             	lea    -0x1(%eax),%edx
   11726:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11729:	89 50 34             	mov    %edx,0x34(%eax)
   1172c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1172f:	8b 40 34             	mov    0x34(%eax),%eax
   11732:	85 c0                	test   %eax,%eax
   11734:	75 1c                	jne    11752 <task_time_tick+0xc8>
        {
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   11736:	83 ec 0c             	sub    $0xc,%esp
   11739:	ff 75 e4             	pushl  -0x1c(%ebp)
   1173c:	e8 6d 00 00 00       	call   117ae <task_set_wakeup>
   11741:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11744:	83 ec 0c             	sub    $0xc,%esp
   11747:	ff 75 e4             	pushl  -0x1c(%ebp)
   1174a:	e8 d3 fd ff ff       	call   11522 <task_set_ready>
   1174f:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11752:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11755:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11758:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1175c:	75 98                	jne    116f6 <task_time_tick+0x6c>
    }
    task_dispatch();
   1175e:	e8 cc fe ff ff       	call   1162f <task_dispatch>
    irq_leave_protection(state);
   11763:	83 ec 0c             	sub    $0xc,%esp
   11766:	ff 75 ec             	pushl  -0x14(%ebp)
   11769:	e8 8b 16 00 00       	call   12df9 <irq_leave_protection>
   1176e:	83 c4 10             	add    $0x10,%esp
}
   11771:	90                   	nop
   11772:	c9                   	leave  
   11773:	c3                   	ret    

00011774 <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   11774:	55                   	push   %ebp
   11775:	89 e5                	mov    %esp,%ebp
   11777:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   1177a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1177e:	74 2b                	je     117ab <task_set_sleep+0x37>
    {
        return;
    }

    task->sleep_ticks = ticks;
   11780:	8b 55 0c             	mov    0xc(%ebp),%edx
   11783:	8b 45 08             	mov    0x8(%ebp),%eax
   11786:	89 50 34             	mov    %edx,0x34(%eax)
    task->state = TASK_SLEEP;
   11789:	8b 45 08             	mov    0x8(%ebp),%eax
   1178c:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   11792:	8b 45 08             	mov    0x8(%ebp),%eax
   11795:	83 c0 40             	add    $0x40,%eax
   11798:	83 ec 08             	sub    $0x8,%esp
   1179b:	50                   	push   %eax
   1179c:	68 1c d0 01 00       	push   $0x1d01c
   117a1:	e8 90 44 00 00       	call   15c36 <list_insert_last>
   117a6:	83 c4 10             	add    $0x10,%esp
   117a9:	eb 01                	jmp    117ac <task_set_sleep+0x38>
        return;
   117ab:	90                   	nop
}
   117ac:	c9                   	leave  
   117ad:	c3                   	ret    

000117ae <task_set_wakeup>:
 * @brief 将任务从延时队列移除
 *
 * @param task
 */
void task_set_wakeup(task_t *task)
{
   117ae:	55                   	push   %ebp
   117af:	89 e5                	mov    %esp,%ebp
   117b1:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   117b4:	8b 45 08             	mov    0x8(%ebp),%eax
   117b7:	83 c0 40             	add    $0x40,%eax
   117ba:	83 ec 08             	sub    $0x8,%esp
   117bd:	50                   	push   %eax
   117be:	68 1c d0 01 00       	push   $0x1d01c
   117c3:	e8 4a 45 00 00       	call   15d12 <list_remove>
   117c8:	83 c4 10             	add    $0x10,%esp
}
   117cb:	90                   	nop
   117cc:	c9                   	leave  
   117cd:	c3                   	ret    

000117ce <sys_msleep>:
 * @brief 任务进入睡眠状态
 *
 * @param ms
 */
void sys_msleep(uint32_t ms)
{
   117ce:	55                   	push   %ebp
   117cf:	89 e5                	mov    %esp,%ebp
   117d1:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   117d4:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   117d8:	77 07                	ja     117e1 <sys_msleep+0x13>
    {
        ms = OS_TICK_MS;
   117da:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   117e1:	e8 fb 15 00 00       	call   12de1 <irq_enter_protection>
   117e6:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   117e9:	a1 00 d0 01 00       	mov    0x1d000,%eax
   117ee:	83 ec 0c             	sub    $0xc,%esp
   117f1:	50                   	push   %eax
   117f2:	e8 5f fd ff ff       	call   11556 <task_set_block>
   117f7:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   117fa:	8b 45 08             	mov    0x8(%ebp),%eax
   117fd:	83 c0 09             	add    $0x9,%eax
   11800:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11805:	f7 e2                	mul    %edx
   11807:	c1 ea 03             	shr    $0x3,%edx
   1180a:	a1 00 d0 01 00       	mov    0x1d000,%eax
   1180f:	83 ec 08             	sub    $0x8,%esp
   11812:	52                   	push   %edx
   11813:	50                   	push   %eax
   11814:	e8 5b ff ff ff       	call   11774 <task_set_sleep>
   11819:	83 c4 10             	add    $0x10,%esp

    // 进行一次调度
    task_dispatch();
   1181c:	e8 0e fe ff ff       	call   1162f <task_dispatch>

    irq_leave_protection(state);
   11821:	83 ec 0c             	sub    $0xc,%esp
   11824:	ff 75 f4             	pushl  -0xc(%ebp)
   11827:	e8 cd 15 00 00       	call   12df9 <irq_leave_protection>
   1182c:	83 c4 10             	add    $0x10,%esp
}
   1182f:	90                   	nop
   11830:	c9                   	leave  
   11831:	c3                   	ret    

00011832 <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t *alloc_task(void)
{
   11832:	55                   	push   %ebp
   11833:	89 e5                	mov    %esp,%ebp
   11835:	83 ec 18             	sub    $0x18,%esp
    task_t *task = (task_t *)0;
   11838:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   1183f:	83 ec 0c             	sub    $0xc,%esp
   11842:	68 c0 37 03 00       	push   $0x337c0
   11847:	e8 e1 38 00 00       	call   1512d <mutex_lock>
   1184c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++)
   1184f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11856:	eb 28                	jmp    11880 <alloc_task+0x4e>
    {
        task_t *curr = task_table + i;
   11858:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1185b:	69 c0 c4 02 00 00    	imul   $0x2c4,%eax,%eax
   11861:	05 c0 d5 01 00       	add    $0x1d5c0,%eax
   11866:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == '\0')
   11869:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1186c:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   11870:	84 c0                	test   %al,%al
   11872:	75 08                	jne    1187c <alloc_task+0x4a>
        {
            task = curr;
   11874:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11877:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   1187a:	eb 0a                	jmp    11886 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++)
   1187c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11880:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11884:	7e d2                	jle    11858 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   11886:	83 ec 0c             	sub    $0xc,%esp
   11889:	68 c0 37 03 00       	push   $0x337c0
   1188e:	e8 2e 39 00 00       	call   151c1 <mutex_unlock>
   11893:	83 c4 10             	add    $0x10,%esp

    return task;
   11896:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11899:	c9                   	leave  
   1189a:	c3                   	ret    

0001189b <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task(task_t *task)
{
   1189b:	55                   	push   %ebp
   1189c:	89 e5                	mov    %esp,%ebp
   1189e:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   118a1:	83 ec 0c             	sub    $0xc,%esp
   118a4:	68 c0 37 03 00       	push   $0x337c0
   118a9:	e8 7f 38 00 00       	call   1512d <mutex_lock>
   118ae:	83 c4 10             	add    $0x10,%esp
    task->name[0] = '\0';
   118b1:	8b 45 08             	mov    0x8(%ebp),%eax
   118b4:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   118b8:	83 ec 0c             	sub    $0xc,%esp
   118bb:	68 c0 37 03 00       	push   $0x337c0
   118c0:	e8 fc 38 00 00       	call   151c1 <mutex_unlock>
   118c5:	83 c4 10             	add    $0x10,%esp
}
   118c8:	90                   	nop
   118c9:	c9                   	leave  
   118ca:	c3                   	ret    

000118cb <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid(void)
{
   118cb:	55                   	push   %ebp
   118cc:	89 e5                	mov    %esp,%ebp
   118ce:	83 ec 10             	sub    $0x10,%esp
    task_t *curr_task = task_current();
   118d1:	e8 ab fc ff ff       	call   11581 <task_current>
   118d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   118d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118dc:	8b 40 24             	mov    0x24(%eax),%eax
}
   118df:	c9                   	leave  
   118e0:	c3                   	ret    

000118e1 <task_uninit>:

/**
 * @brief 任务初始时分配的各项资源
 */
void task_uninit(task_t *task)
{
   118e1:	55                   	push   %ebp
   118e2:	89 e5                	mov    %esp,%ebp
   118e4:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel)
   118e7:	8b 45 08             	mov    0x8(%ebp),%eax
   118ea:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
   118f0:	85 c0                	test   %eax,%eax
   118f2:	74 15                	je     11909 <task_uninit+0x28>
    {
        gdt_free_sel(task->tss_sel);
   118f4:	8b 45 08             	mov    0x8(%ebp),%eax
   118f7:	8b 80 c0 02 00 00    	mov    0x2c0(%eax),%eax
   118fd:	83 ec 0c             	sub    $0xc,%esp
   11900:	50                   	push   %eax
   11901:	e8 e9 09 00 00       	call   122ef <gdt_free_sel>
   11906:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0)
   11909:	8b 45 08             	mov    0x8(%ebp),%eax
   1190c:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   11912:	85 c0                	test   %eax,%eax
   11914:	74 1a                	je     11930 <task_uninit+0x4f>
    {
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   11916:	8b 45 08             	mov    0x8(%ebp),%eax
   11919:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1191f:	2d 00 10 00 00       	sub    $0x1000,%eax
   11924:	83 ec 0c             	sub    $0xc,%esp
   11927:	50                   	push   %eax
   11928:	e8 0b f3 ff ff       	call   10c38 <memory_free_page>
   1192d:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3)
   11930:	8b 45 08             	mov    0x8(%ebp),%eax
   11933:	8b 80 74 02 00 00    	mov    0x274(%eax),%eax
   11939:	85 c0                	test   %eax,%eax
   1193b:	74 15                	je     11952 <task_uninit+0x71>
    {
        memory_destroy_uvm(task->tss.cr3);
   1193d:	8b 45 08             	mov    0x8(%ebp),%eax
   11940:	8b 80 74 02 00 00    	mov    0x274(%eax),%eax
   11946:	83 ec 0c             	sub    $0xc,%esp
   11949:	50                   	push   %eax
   1194a:	e8 d6 ee ff ff       	call   10825 <memory_destroy_uvm>
   1194f:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   11952:	83 ec 04             	sub    $0x4,%esp
   11955:	68 c4 02 00 00       	push   $0x2c4
   1195a:	6a 00                	push   $0x0
   1195c:	ff 75 08             	pushl  0x8(%ebp)
   1195f:	e8 69 3e 00 00       	call   157cd <kernel_memset>
   11964:	83 c4 10             	add    $0x10,%esp
}
   11967:	90                   	nop
   11968:	c9                   	leave  
   11969:	c3                   	ret    

0001196a <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork(void)
{
   1196a:	55                   	push   %ebp
   1196b:	89 e5                	mov    %esp,%ebp
   1196d:	83 ec 28             	sub    $0x28,%esp
    task_t *parent_task = task_current();
   11970:	e8 0c fc ff ff       	call   11581 <task_current>
   11975:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *child_task = alloc_task();
   11978:	e8 b5 fe ff ff       	call   11832 <alloc_task>
   1197d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0)
   11980:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11984:	0f 84 41 01 00 00    	je     11acb <sys_fork+0x161>
    {
        goto fork_failed;
    }
    syscall_frame_t *frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t)); // 拿到父进程的寄存器
   1198a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1198d:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   11993:	83 e8 58             	sub    $0x58,%eax
   11996:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT);
   11999:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1199c:	8b 40 50             	mov    0x50(%eax),%eax
   1199f:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
   119a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119a5:	8b 40 34             	mov    0x34(%eax),%eax
   119a8:	89 c1                	mov    %eax,%ecx
   119aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   119ad:	83 c0 04             	add    $0x4,%eax
   119b0:	83 ec 0c             	sub    $0xc,%esp
   119b3:	52                   	push   %edx
   119b4:	51                   	push   %ecx
   119b5:	6a 00                	push   $0x0
   119b7:	50                   	push   %eax
   119b8:	ff 75 f0             	pushl  -0x10(%ebp)
   119bb:	e8 eb f7 ff ff       	call   111ab <task_init>
   119c0:	83 c4 20             	add    $0x20,%esp
   119c3:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   119c6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   119ca:	0f 88 fe 00 00 00    	js     11ace <sys_fork+0x164>
    {
        goto fork_failed;
    }
    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t *tss = &child_task->tss;
   119d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119d3:	05 58 02 00 00       	add    $0x258,%eax
   119d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0; // 子进程返回0
   119db:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119de:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   119e5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119e8:	8b 40 24             	mov    0x24(%eax),%eax
   119eb:	89 c2                	mov    %eax,%edx
   119ed:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119f0:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   119f3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119f6:	8b 40 2c             	mov    0x2c(%eax),%eax
   119f9:	89 c2                	mov    %eax,%edx
   119fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119fe:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11a01:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a04:	8b 40 28             	mov    0x28(%eax),%eax
   11a07:	89 c2                	mov    %eax,%edx
   11a09:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a0c:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11a0f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a12:	8b 40 18             	mov    0x18(%eax),%eax
   11a15:	89 c2                	mov    %eax,%edx
   11a17:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a1a:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11a1d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a20:	8b 40 14             	mov    0x14(%eax),%eax
   11a23:	89 c2                	mov    %eax,%edx
   11a25:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a28:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11a2b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a2e:	8b 40 1c             	mov    0x1c(%eax),%eax
   11a31:	89 c2                	mov    %eax,%edx
   11a33:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a36:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11a39:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a3c:	8b 40 38             	mov    0x38(%eax),%eax
   11a3f:	89 c2                	mov    %eax,%edx
   11a41:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a44:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11a47:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a4a:	8b 40 10             	mov    0x10(%eax),%eax
   11a4d:	89 c2                	mov    %eax,%edx
   11a4f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a52:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11a55:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a58:	8b 40 0c             	mov    0xc(%eax),%eax
   11a5b:	89 c2                	mov    %eax,%edx
   11a5d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a60:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11a63:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a66:	8b 40 08             	mov    0x8(%eax),%eax
   11a69:	89 c2                	mov    %eax,%edx
   11a6b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a6e:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11a71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a74:	8b 40 04             	mov    0x4(%eax),%eax
   11a77:	89 c2                	mov    %eax,%edx
   11a79:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a7c:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11a7f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a82:	8b 00                	mov    (%eax),%eax
   11a84:	89 c2                	mov    %eax,%edx
   11a86:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a89:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11a8c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a8f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a92:	89 50 28             	mov    %edx,0x28(%eax)
    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0)
   11a95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a98:	8b 80 74 02 00 00    	mov    0x274(%eax),%eax
   11a9e:	83 ec 0c             	sub    $0xc,%esp
   11aa1:	50                   	push   %eax
   11aa2:	e8 8d ee ff ff       	call   10934 <memory_copy_uvm>
   11aa7:	83 c4 10             	add    $0x10,%esp
   11aaa:	89 c2                	mov    %eax,%edx
   11aac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11aaf:	89 90 74 02 00 00    	mov    %edx,0x274(%eax)
    {
        goto fork_failed;
    }
    // 创建成功，返回子进程的pid
    task_start(child_task);
   11ab5:	83 ec 0c             	sub    $0xc,%esp
   11ab8:	ff 75 f0             	pushl  -0x10(%ebp)
   11abb:	e8 4d f8 ff ff       	call   1130d <task_start>
   11ac0:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11ac3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ac6:	8b 40 24             	mov    0x24(%eax),%eax
   11ac9:	eb 2b                	jmp    11af6 <sys_fork+0x18c>
        goto fork_failed;
   11acb:	90                   	nop
   11acc:	eb 01                	jmp    11acf <sys_fork+0x165>
        goto fork_failed;
   11ace:	90                   	nop
fork_failed:
    if (child_task)
   11acf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ad3:	74 1c                	je     11af1 <sys_fork+0x187>
    {
        task_uninit(child_task);
   11ad5:	83 ec 0c             	sub    $0xc,%esp
   11ad8:	ff 75 f0             	pushl  -0x10(%ebp)
   11adb:	e8 01 fe ff ff       	call   118e1 <task_uninit>
   11ae0:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11ae3:	83 ec 0c             	sub    $0xc,%esp
   11ae6:	ff 75 f0             	pushl  -0x10(%ebp)
   11ae9:	e8 ad fd ff ff       	call   1189b <free_task>
   11aee:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11af1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11af6:	c9                   	leave  
   11af7:	c3                   	ret    

00011af8 <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr *phdr, uint32_t page_dir)
{
   11af8:	55                   	push   %ebp
   11af9:	89 e5                	mov    %esp,%ebp
   11afb:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11afe:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b01:	8b 40 08             	mov    0x8(%eax),%eax
   11b04:	25 ff 0f 00 00       	and    $0xfff,%eax
   11b09:	85 c0                	test   %eax,%eax
   11b0b:	74 1c                	je     11b29 <load_phdr+0x31>
   11b0d:	68 98 62 01 00       	push   $0x16298
   11b12:	68 a8 63 01 00       	push   $0x163a8
   11b17:	68 12 02 00 00       	push   $0x212
   11b1c:	68 1c 62 01 00       	push   $0x1621c
   11b21:	e8 d0 3f 00 00       	call   15af6 <panic>
   11b26:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11b29:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b2c:	8b 50 14             	mov    0x14(%eax),%edx
   11b2f:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b32:	8b 40 08             	mov    0x8(%eax),%eax
   11b35:	6a 07                	push   $0x7
   11b37:	52                   	push   %edx
   11b38:	50                   	push   %eax
   11b39:	ff 75 10             	pushl  0x10(%ebp)
   11b3c:	e8 11 f0 ff ff       	call   10b52 <memory_alloc_for_page_dir>
   11b41:	83 c4 10             	add    $0x10,%esp
   11b44:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   11b47:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11b4b:	79 1a                	jns    11b67 <load_phdr+0x6f>
    {
        log_printf("no memory");
   11b4d:	83 ec 0c             	sub    $0xc,%esp
   11b50:	68 c3 62 01 00       	push   $0x162c3
   11b55:	e8 6c 42 00 00       	call   15dc6 <log_printf>
   11b5a:	83 c4 10             	add    $0x10,%esp
        return -1;
   11b5d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b62:	e9 b8 00 00 00       	jmp    11c1f <load_phdr+0x127>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0)
   11b67:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b6a:	8b 40 04             	mov    0x4(%eax),%eax
   11b6d:	83 ec 04             	sub    $0x4,%esp
   11b70:	6a 00                	push   $0x0
   11b72:	50                   	push   %eax
   11b73:	ff 75 08             	pushl  0x8(%ebp)
   11b76:	e8 9a 33 00 00       	call   14f15 <sys_lseek>
   11b7b:	83 c4 10             	add    $0x10,%esp
   11b7e:	85 c0                	test   %eax,%eax
   11b80:	79 1a                	jns    11b9c <load_phdr+0xa4>
    {
        log_printf("read file failed");
   11b82:	83 ec 0c             	sub    $0xc,%esp
   11b85:	68 cd 62 01 00       	push   $0x162cd
   11b8a:	e8 37 42 00 00       	call   15dc6 <log_printf>
   11b8f:	83 c4 10             	add    $0x10,%esp
        return -1;
   11b92:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b97:	e9 83 00 00 00       	jmp    11c1f <load_phdr+0x127>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr; // 内存中的起始地址
   11b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b9f:	8b 40 08             	mov    0x8(%eax),%eax
   11ba2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz; // 文件需要拷贝的数据量
   11ba5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ba8:	8b 40 10             	mov    0x10(%eax),%eax
   11bab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0)
   11bae:	eb 64                	jmp    11c14 <load_phdr+0x11c>
    {
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size; // 至多copy一页的数据
   11bb0:	b8 00 10 00 00       	mov    $0x1000,%eax
   11bb5:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11bbc:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11bc0:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr); // 拿到物理地址，因为该页还没启用，不能直接copy
   11bc3:	83 ec 08             	sub    $0x8,%esp
   11bc6:	ff 75 f4             	pushl  -0xc(%ebp)
   11bc9:	ff 75 10             	pushl  0x10(%ebp)
   11bcc:	e8 b8 ee ff ff       	call   10a89 <memory_get_paddr>
   11bd1:	83 c4 10             	add    $0x10,%esp
   11bd4:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) < curr_size)
   11bd7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bda:	83 ec 04             	sub    $0x4,%esp
   11bdd:	ff 75 e8             	pushl  -0x18(%ebp)
   11be0:	50                   	push   %eax
   11be1:	ff 75 08             	pushl  0x8(%ebp)
   11be4:	e8 59 32 00 00       	call   14e42 <sys_read>
   11be9:	83 c4 10             	add    $0x10,%esp
   11bec:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11bef:	7e 17                	jle    11c08 <load_phdr+0x110>
        {
            log_printf("read file failed");
   11bf1:	83 ec 0c             	sub    $0xc,%esp
   11bf4:	68 cd 62 01 00       	push   $0x162cd
   11bf9:	e8 c8 41 00 00       	call   15dc6 <log_printf>
   11bfe:	83 c4 10             	add    $0x10,%esp
            return -1;
   11c01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c06:	eb 17                	jmp    11c1f <load_phdr+0x127>
        }

        size -= curr_size;
   11c08:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c0b:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c11:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0)
   11c14:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c18:	75 96                	jne    11bb0 <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11c1a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11c1f:	c9                   	leave  
   11c20:	c3                   	ret    

00011c21 <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file(task_t *task, const char *name, uint32_t page_dir)
{
   11c21:	55                   	push   %ebp
   11c22:	89 e5                	mov    %esp,%ebp
   11c24:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    int file = sys_open(name, 0);
   11c27:	83 ec 08             	sub    $0x8,%esp
   11c2a:	6a 00                	push   $0x0
   11c2c:	ff 75 0c             	pushl  0xc(%ebp)
   11c2f:	e8 9f 30 00 00       	call   14cd3 <sys_open>
   11c34:	83 c4 10             	add    $0x10,%esp
   11c37:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0)
   11c3a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c3e:	79 18                	jns    11c58 <load_elf_file+0x37>
    {
        log_printf("open failed. %s", name);
   11c40:	83 ec 08             	sub    $0x8,%esp
   11c43:	ff 75 0c             	pushl  0xc(%ebp)
   11c46:	68 de 62 01 00       	push   $0x162de
   11c4b:	e8 76 41 00 00       	call   15dc6 <log_printf>
   11c50:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11c53:	e9 c1 01 00 00       	jmp    11e19 <load_elf_file+0x1f8>
    }
    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11c58:	83 ec 04             	sub    $0x4,%esp
   11c5b:	6a 34                	push   $0x34
   11c5d:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11c60:	50                   	push   %eax
   11c61:	ff 75 ec             	pushl  -0x14(%ebp)
   11c64:	e8 d9 31 00 00       	call   14e42 <sys_read>
   11c69:	83 c4 10             	add    $0x10,%esp
   11c6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr))
   11c6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c72:	83 f8 33             	cmp    $0x33,%eax
   11c75:	77 18                	ja     11c8f <load_elf_file+0x6e>
    {
        log_printf("elf hdr too small. size=%d", cnt);
   11c77:	83 ec 08             	sub    $0x8,%esp
   11c7a:	ff 75 e8             	pushl  -0x18(%ebp)
   11c7d:	68 ee 62 01 00       	push   $0x162ee
   11c82:	e8 3f 41 00 00       	call   15dc6 <log_printf>
   11c87:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11c8a:	e9 8a 01 00 00       	jmp    11e19 <load_elf_file+0x1f8>
    }
    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E') || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F'))
   11c8f:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11c93:	3c 7f                	cmp    $0x7f,%al
   11c95:	75 18                	jne    11caf <load_elf_file+0x8e>
   11c97:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11c9b:	3c 45                	cmp    $0x45,%al
   11c9d:	75 10                	jne    11caf <load_elf_file+0x8e>
   11c9f:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11ca3:	3c 4c                	cmp    $0x4c,%al
   11ca5:	75 08                	jne    11caf <load_elf_file+0x8e>
   11ca7:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11cab:	3c 46                	cmp    $0x46,%al
   11cad:	74 15                	je     11cc4 <load_elf_file+0xa3>
    {
        log_printf("check elf indent failed.");
   11caf:	83 ec 0c             	sub    $0xc,%esp
   11cb2:	68 09 63 01 00       	push   $0x16309
   11cb7:	e8 0a 41 00 00       	call   15dc6 <log_printf>
   11cbc:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11cbf:	e9 55 01 00 00       	jmp    11e19 <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0))
   11cc4:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11cc8:	66 83 f8 02          	cmp    $0x2,%ax
   11ccc:	75 11                	jne    11cdf <load_elf_file+0xbe>
   11cce:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11cd2:	66 83 f8 03          	cmp    $0x3,%ax
   11cd6:	75 07                	jne    11cdf <load_elf_file+0xbe>
   11cd8:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11cdb:	85 c0                	test   %eax,%eax
   11cdd:	75 15                	jne    11cf4 <load_elf_file+0xd3>
    {
        log_printf("check elf type or entry failed.");
   11cdf:	83 ec 0c             	sub    $0xc,%esp
   11ce2:	68 24 63 01 00       	push   $0x16324
   11ce7:	e8 da 40 00 00       	call   15dc6 <log_printf>
   11cec:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11cef:	e9 25 01 00 00       	jmp    11e19 <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0))
   11cf4:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11cf8:	66 85 c0             	test   %ax,%ax
   11cfb:	74 07                	je     11d04 <load_elf_file+0xe3>
   11cfd:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11d00:	85 c0                	test   %eax,%eax
   11d02:	75 15                	jne    11d19 <load_elf_file+0xf8>
    {
        log_printf("none programe header");
   11d04:	83 ec 0c             	sub    $0xc,%esp
   11d07:	68 44 63 01 00       	push   $0x16344
   11d0c:	e8 b5 40 00 00       	call   15dc6 <log_printf>
   11d11:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d14:	e9 00 01 00 00       	jmp    11e19 <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11d19:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11d1c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11d1f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11d26:	e9 cb 00 00 00       	jmp    11df6 <load_elf_file+0x1d5>
    {
        if (sys_lseek(file, e_phoff, 0) < 0)
   11d2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11d2e:	83 ec 04             	sub    $0x4,%esp
   11d31:	6a 00                	push   $0x0
   11d33:	50                   	push   %eax
   11d34:	ff 75 ec             	pushl  -0x14(%ebp)
   11d37:	e8 d9 31 00 00       	call   14f15 <sys_lseek>
   11d3c:	83 c4 10             	add    $0x10,%esp
   11d3f:	85 c0                	test   %eax,%eax
   11d41:	79 15                	jns    11d58 <load_elf_file+0x137>
        {
            log_printf("read file failed");
   11d43:	83 ec 0c             	sub    $0xc,%esp
   11d46:	68 cd 62 01 00       	push   $0x162cd
   11d4b:	e8 76 40 00 00       	call   15dc6 <log_printf>
   11d50:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11d53:	e9 c1 00 00 00       	jmp    11e19 <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11d58:	83 ec 04             	sub    $0x4,%esp
   11d5b:	6a 20                	push   $0x20
   11d5d:	8d 45 90             	lea    -0x70(%ebp),%eax
   11d60:	50                   	push   %eax
   11d61:	ff 75 ec             	pushl  -0x14(%ebp)
   11d64:	e8 d9 30 00 00       	call   14e42 <sys_read>
   11d69:	83 c4 10             	add    $0x10,%esp
   11d6c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr))
   11d6f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d72:	83 f8 1f             	cmp    $0x1f,%eax
   11d75:	77 15                	ja     11d8c <load_elf_file+0x16b>
        {
            log_printf("read file failed");
   11d77:	83 ec 0c             	sub    $0xc,%esp
   11d7a:	68 cd 62 01 00       	push   $0x162cd
   11d7f:	e8 42 40 00 00       	call   15dc6 <log_printf>
   11d84:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11d87:	e9 8d 00 00 00       	jmp    11e19 <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE))
   11d8c:	8b 45 90             	mov    -0x70(%ebp),%eax
   11d8f:	83 f8 01             	cmp    $0x1,%eax
   11d92:	75 53                	jne    11de7 <load_elf_file+0x1c6>
   11d94:	8b 45 98             	mov    -0x68(%ebp),%eax
   11d97:	85 c0                	test   %eax,%eax
   11d99:	79 4c                	jns    11de7 <load_elf_file+0x1c6>
        {
            continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11d9b:	83 ec 04             	sub    $0x4,%esp
   11d9e:	ff 75 10             	pushl  0x10(%ebp)
   11da1:	8d 45 90             	lea    -0x70(%ebp),%eax
   11da4:	50                   	push   %eax
   11da5:	ff 75 ec             	pushl  -0x14(%ebp)
   11da8:	e8 4b fd ff ff       	call   11af8 <load_phdr>
   11dad:	83 c4 10             	add    $0x10,%esp
   11db0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   11db3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11db7:	79 12                	jns    11dcb <load_elf_file+0x1aa>
        {
            log_printf("load program hdr failed");
   11db9:	83 ec 0c             	sub    $0xc,%esp
   11dbc:	68 59 63 01 00       	push   $0x16359
   11dc1:	e8 00 40 00 00       	call   15dc6 <log_printf>
   11dc6:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11dc9:	eb 4e                	jmp    11e19 <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        // 最后地址是最后一个elf段加载的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11dcb:	8b 55 98             	mov    -0x68(%ebp),%edx
   11dce:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11dd1:	01 c2                	add    %eax,%edx
   11dd3:	8b 45 08             	mov    0x8(%ebp),%eax
   11dd6:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11dd9:	8b 45 08             	mov    0x8(%ebp),%eax
   11ddc:	8b 50 2c             	mov    0x2c(%eax),%edx
   11ddf:	8b 45 08             	mov    0x8(%ebp),%eax
   11de2:	89 50 30             	mov    %edx,0x30(%eax)
   11de5:	eb 01                	jmp    11de8 <load_elf_file+0x1c7>
            continue;
   11de7:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11de8:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11dec:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11df0:	0f b7 c0             	movzwl %ax,%eax
   11df3:	01 45 f4             	add    %eax,-0xc(%ebp)
   11df6:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11dfa:	0f b7 c0             	movzwl %ax,%eax
   11dfd:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e00:	0f 8c 25 ff ff ff    	jl     11d2b <load_elf_file+0x10a>
    }
    sys_close(file);
   11e06:	83 ec 0c             	sub    $0xc,%esp
   11e09:	ff 75 ec             	pushl  -0x14(%ebp)
   11e0c:	e8 28 31 00 00       	call   14f39 <sys_close>
   11e11:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11e14:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e17:	eb 19                	jmp    11e32 <load_elf_file+0x211>
load_failed:
    // 文件已经打开
    if (file >= 0)
   11e19:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e1d:	78 0e                	js     11e2d <load_elf_file+0x20c>
    {
        sys_close(file);
   11e1f:	83 ec 0c             	sub    $0xc,%esp
   11e22:	ff 75 ec             	pushl  -0x14(%ebp)
   11e25:	e8 0f 31 00 00       	call   14f39 <sys_close>
   11e2a:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   11e2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11e32:	c9                   	leave  
   11e33:	c3                   	ret    

00011e34 <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args(char *to, uint32_t page_dir, int argc, char **argv)
{
   11e34:	55                   	push   %ebp
   11e35:	89 e5                	mov    %esp,%ebp
   11e37:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11e3a:	8b 45 10             	mov    0x10(%ebp),%eax
   11e3d:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11e40:	8b 45 08             	mov    0x8(%ebp),%eax
   11e43:	83 c0 0c             	add    $0xc,%eax
   11e46:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char *dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1); // 留出结束符
   11e49:	8b 45 10             	mov    0x10(%ebp),%eax
   11e4c:	83 c0 04             	add    $0x4,%eax
   11e4f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e56:	8b 45 08             	mov    0x8(%ebp),%eax
   11e59:	01 d0                	add    %edx,%eax
   11e5b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // argv表
    char **dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11e5e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e61:	83 c0 0c             	add    $0xc,%eax
   11e64:	83 ec 08             	sub    $0x8,%esp
   11e67:	50                   	push   %eax
   11e68:	ff 75 0c             	pushl  0xc(%ebp)
   11e6b:	e8 19 ec ff ff       	call   10a89 <memory_get_paddr>
   11e70:	83 c4 10             	add    $0x10,%esp
   11e73:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11e76:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e7a:	75 1c                	jne    11e98 <copy_args+0x64>
   11e7c:	68 71 63 01 00       	push   $0x16371
   11e81:	68 b4 63 01 00       	push   $0x163b4
   11e86:	68 ac 02 00 00       	push   $0x2ac
   11e8b:	68 1c 62 01 00       	push   $0x1621c
   11e90:	e8 61 3c 00 00       	call   15af6 <panic>
   11e95:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++)
   11e98:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e9f:	e9 82 00 00 00       	jmp    11f26 <copy_args+0xf2>
    {
        char *from = argv[i];
   11ea4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ea7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11eae:	8b 45 14             	mov    0x14(%ebp),%eax
   11eb1:	01 d0                	add    %edx,%eax
   11eb3:	8b 00                	mov    (%eax),%eax
   11eb5:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1; // 包含结束符
   11eb8:	83 ec 0c             	sub    $0xc,%esp
   11ebb:	ff 75 e8             	pushl  -0x18(%ebp)
   11ebe:	e8 80 38 00 00       	call   15743 <kernel_strlen>
   11ec3:	83 c4 10             	add    $0x10,%esp
   11ec6:	83 c0 01             	add    $0x1,%eax
   11ec9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   11ecc:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11ecf:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11ed2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ed5:	51                   	push   %ecx
   11ed6:	52                   	push   %edx
   11ed7:	ff 75 0c             	pushl  0xc(%ebp)
   11eda:	50                   	push   %eax
   11edb:	e8 ef eb ff ff       	call   10acf <memory_copy_uvm_data>
   11ee0:	83 c4 10             	add    $0x10,%esp
   11ee3:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11ee6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11eea:	79 1c                	jns    11f08 <copy_args+0xd4>
   11eec:	68 83 63 01 00       	push   $0x16383
   11ef1:	68 b4 63 01 00       	push   $0x163b4
   11ef6:	68 b5 02 00 00       	push   $0x2b5
   11efb:	68 1c 62 01 00       	push   $0x1621c
   11f00:	e8 f1 3b 00 00       	call   15af6 <panic>
   11f05:	83 c4 10             	add    $0x10,%esp

        // 关联arg
        dest_argv_tb[i] = dest_arg;
   11f08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f0b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f12:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f15:	01 c2                	add    %eax,%edx
   11f17:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f1a:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   11f1c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11f1f:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++)
   11f22:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f26:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f29:	3b 45 10             	cmp    0x10(%ebp),%eax
   11f2c:	0f 8c 72 ff ff ff    	jl     11ea4 <copy_args+0x70>
    }
    // 可能存在无参的情况，此时不需要写入
    if (argc)
   11f32:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11f36:	74 15                	je     11f4d <copy_args+0x119>
    {
        dest_argv_tb[argc] = '\0';
   11f38:	8b 45 10             	mov    0x10(%ebp),%eax
   11f3b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f42:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11f45:	01 d0                	add    %edx,%eax
   11f47:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   11f4d:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   11f50:	8b 45 08             	mov    0x8(%ebp),%eax
   11f53:	6a 0c                	push   $0xc
   11f55:	52                   	push   %edx
   11f56:	ff 75 0c             	pushl  0xc(%ebp)
   11f59:	50                   	push   %eax
   11f5a:	e8 70 eb ff ff       	call   10acf <memory_copy_uvm_data>
   11f5f:	83 c4 10             	add    $0x10,%esp
}
   11f62:	c9                   	leave  
   11f63:	c3                   	ret    

00011f64 <sys_execve>:
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env)
{
   11f64:	55                   	push   %ebp
   11f65:	89 e5                	mov    %esp,%ebp
   11f67:	83 ec 28             	sub    $0x28,%esp
    task_t *task = task_current();
   11f6a:	e8 12 f6 ff ff       	call   11581 <task_current>
   11f6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   11f72:	83 ec 0c             	sub    $0xc,%esp
   11f75:	ff 75 08             	pushl  0x8(%ebp)
   11f78:	e8 af 3b 00 00       	call   15b2c <get_file_name>
   11f7d:	83 c4 10             	add    $0x10,%esp
   11f80:	89 c2                	mov    %eax,%edx
   11f82:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f85:	83 c0 04             	add    $0x4,%eax
   11f88:	83 ec 04             	sub    $0x4,%esp
   11f8b:	6a 20                	push   $0x20
   11f8d:	52                   	push   %edx
   11f8e:	50                   	push   %eax
   11f8f:	e8 c1 36 00 00       	call   15655 <kernel_strncpy>
   11f94:	83 c4 10             	add    $0x10,%esp
    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   11f97:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f9a:	8b 80 74 02 00 00    	mov    0x274(%eax),%eax
   11fa0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   11fa3:	e8 f8 e7 ff ff       	call   107a0 <memory_create_uvm>
   11fa8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir)
   11fab:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11faf:	0f 84 2d 01 00 00    	je     120e2 <sys_execve+0x17e>
    {
        goto exec_failed;
    }
    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir); // 暂时置用task->name表示
   11fb5:	83 ec 04             	sub    $0x4,%esp
   11fb8:	ff 75 ec             	pushl  -0x14(%ebp)
   11fbb:	ff 75 08             	pushl  0x8(%ebp)
   11fbe:	ff 75 f4             	pushl  -0xc(%ebp)
   11fc1:	e8 5b fc ff ff       	call   11c21 <load_elf_file>
   11fc6:	83 c4 10             	add    $0x10,%esp
   11fc9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0)
   11fcc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11fd0:	0f 84 0f 01 00 00    	je     120e5 <sys_execve+0x181>
    {
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE; // 预留一部分参数空间
   11fd6:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   11fdd:	6a 07                	push   $0x7
   11fdf:	68 00 40 1f 00       	push   $0x1f4000
   11fe4:	68 00 c0 e0 df       	push   $0xdfe0c000
   11fe9:	ff 75 ec             	pushl  -0x14(%ebp)
   11fec:	e8 61 eb ff ff       	call   10b52 <memory_alloc_for_page_dir>
   11ff1:	83 c4 10             	add    $0x10,%esp
   11ff4:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                        MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                                        MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0)
   11ff7:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11ffb:	0f 88 e7 00 00 00    	js     120e8 <sys_execve+0x184>
    {
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   12001:	83 ec 0c             	sub    $0xc,%esp
   12004:	ff 75 0c             	pushl  0xc(%ebp)
   12007:	e8 66 3b 00 00       	call   15b72 <strings_count>
   1200c:	83 c4 10             	add    $0x10,%esp
   1200f:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   12012:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12015:	ff 75 0c             	pushl  0xc(%ebp)
   12018:	ff 75 dc             	pushl  -0x24(%ebp)
   1201b:	ff 75 ec             	pushl  -0x14(%ebp)
   1201e:	50                   	push   %eax
   1201f:	e8 10 fe ff ff       	call   11e34 <copy_args>
   12024:	83 c4 10             	add    $0x10,%esp
   12027:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   1202a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1202e:	0f 88 b7 00 00 00    	js     120eb <sys_execve+0x187>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t *frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   12034:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12037:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1203d:	83 e8 58             	sub    $0x58,%eax
   12040:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   12043:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12046:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12049:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   1204c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1204f:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12056:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12059:	8b 50 28             	mov    0x28(%eax),%edx
   1205c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1205f:	89 50 2c             	mov    %edx,0x2c(%eax)
   12062:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12065:	8b 50 2c             	mov    0x2c(%eax),%edx
   12068:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1206b:	89 50 24             	mov    %edx,0x24(%eax)
   1206e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12071:	8b 50 24             	mov    0x24(%eax),%edx
   12074:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12077:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   1207a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1207d:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   12084:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12087:	8b 50 1c             	mov    0x1c(%eax),%edx
   1208a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1208d:	89 50 14             	mov    %edx,0x14(%eax)
   12090:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12093:	8b 50 14             	mov    0x14(%eax),%edx
   12096:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12099:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT | EFLAGS_IF; // 段寄存器无需修改
   1209c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1209f:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间
    frame->esp = stack_top - sizeof(uint32_t) * SYSCALL_PARAM_COUNT;
   120a5:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   120a8:	83 e8 14             	sub    $0x14,%eax
   120ab:	89 c2                	mov    %eax,%edx
   120ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120b0:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   120b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120b6:	8b 55 ec             	mov    -0x14(%ebp),%edx
   120b9:	89 90 74 02 00 00    	mov    %edx,0x274(%eax)
    mmu_set_page_dir(new_page_dir); // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   120bf:	83 ec 0c             	sub    $0xc,%esp
   120c2:	ff 75 ec             	pushl  -0x14(%ebp)
   120c5:	e8 25 ef ff ff       	call   10fef <mmu_set_page_dir>
   120ca:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir); // 再释放掉了原进程的内容空间
   120cd:	83 ec 0c             	sub    $0xc,%esp
   120d0:	ff 75 f0             	pushl  -0x10(%ebp)
   120d3:	e8 4d e7 ff ff       	call   10825 <memory_destroy_uvm>
   120d8:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return 0;
   120db:	b8 00 00 00 00       	mov    $0x0,%eax
   120e0:	eb 3d                	jmp    1211f <sys_execve+0x1bb>
        goto exec_failed;
   120e2:	90                   	nop
   120e3:	eb 07                	jmp    120ec <sys_execve+0x188>
        goto exec_failed;
   120e5:	90                   	nop
   120e6:	eb 04                	jmp    120ec <sys_execve+0x188>
        goto exec_failed;
   120e8:	90                   	nop
   120e9:	eb 01                	jmp    120ec <sys_execve+0x188>
        goto exec_failed;
   120eb:	90                   	nop

exec_failed: // 必要的资源释放
    if (new_page_dir)
   120ec:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120f0:	74 28                	je     1211a <sys_execve+0x1b6>
    {
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   120f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120f5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   120f8:	89 90 74 02 00 00    	mov    %edx,0x274(%eax)
        mmu_set_page_dir(old_page_dir);
   120fe:	83 ec 0c             	sub    $0xc,%esp
   12101:	ff 75 f0             	pushl  -0x10(%ebp)
   12104:	e8 e6 ee ff ff       	call   10fef <mmu_set_page_dir>
   12109:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1210c:	83 ec 0c             	sub    $0xc,%esp
   1210f:	ff 75 ec             	pushl  -0x14(%ebp)
   12112:	e8 0e e7 ff ff       	call   10825 <memory_destroy_uvm>
   12117:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   1211a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1211f:	c9                   	leave  
   12120:	c3                   	ret    

00012121 <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield(void)
{
   12121:	55                   	push   %ebp
   12122:	89 e5                	mov    %esp,%ebp
   12124:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   12127:	e8 b5 0c 00 00       	call   12de1 <irq_enter_protection>
   1212c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1)
   1212f:	83 ec 0c             	sub    $0xc,%esp
   12132:	68 04 d0 01 00       	push   $0x1d004
   12137:	e8 7f ee ff ff       	call   10fbb <list_count>
   1213c:	83 c4 10             	add    $0x10,%esp
   1213f:	83 f8 01             	cmp    $0x1,%eax
   12142:	7e 29                	jle    1216d <sys_yield+0x4c>
    {
        task_t *curr_task = task_current();
   12144:	e8 38 f4 ff ff       	call   11581 <task_current>
   12149:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   1214c:	83 ec 0c             	sub    $0xc,%esp
   1214f:	ff 75 f0             	pushl  -0x10(%ebp)
   12152:	e8 ff f3 ff ff       	call   11556 <task_set_block>
   12157:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   1215a:	83 ec 0c             	sub    $0xc,%esp
   1215d:	ff 75 f0             	pushl  -0x10(%ebp)
   12160:	e8 bd f3 ff ff       	call   11522 <task_set_ready>
   12165:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   12168:	e8 c2 f4 ff ff       	call   1162f <task_dispatch>
    }
    irq_leave_protection(state);
   1216d:	83 ec 0c             	sub    $0xc,%esp
   12170:	ff 75 f4             	pushl  -0xc(%ebp)
   12173:	e8 81 0c 00 00       	call   12df9 <irq_leave_protection>
   12178:	83 c4 10             	add    $0x10,%esp

    return 0;
   1217b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12180:	c9                   	leave  
   12181:	c3                   	ret    

00012182 <task_file>:

/**
 * @brief 获取当前进程指定的文件描述符
 */
file_t *task_file(int fd)
{
   12182:	55                   	push   %ebp
   12183:	89 e5                	mov    %esp,%ebp
   12185:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   12188:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1218c:	78 1f                	js     121ad <task_file+0x2b>
   1218e:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12192:	7f 19                	jg     121ad <task_file+0x2b>
    {
        file_t *file = task_current()->file_table[fd];
   12194:	e8 e8 f3 ff ff       	call   11581 <task_current>
   12199:	89 c2                	mov    %eax,%edx
   1219b:	8b 45 08             	mov    0x8(%ebp),%eax
   1219e:	83 c0 14             	add    $0x14,%eax
   121a1:	8b 44 82 08          	mov    0x8(%edx,%eax,4),%eax
   121a5:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   121a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121ab:	eb 05                	jmp    121b2 <task_file+0x30>
    }

    return (file_t *)0;
   121ad:	b8 00 00 00 00       	mov    $0x0,%eax
}
   121b2:	c9                   	leave  
   121b3:	c3                   	ret    

000121b4 <task_alloc_fd>:

/**
 * @brief 为指定的file分配一个新的文件id
 */
int task_alloc_fd(file_t *file)
{
   121b4:	55                   	push   %ebp
   121b5:	89 e5                	mov    %esp,%ebp
   121b7:	83 ec 10             	sub    $0x10,%esp
    task_t *task = task_current();
   121ba:	e8 c2 f3 ff ff       	call   11581 <task_current>
   121bf:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++)
   121c2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   121c9:	eb 2f                	jmp    121fa <task_alloc_fd+0x46>
    {
        file_t *p = task->file_table[i];
   121cb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   121ce:	8b 55 fc             	mov    -0x4(%ebp),%edx
   121d1:	83 c2 14             	add    $0x14,%edx
   121d4:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   121d8:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0)
   121db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   121df:	75 15                	jne    121f6 <task_alloc_fd+0x42>
        {
            task->file_table[i] = file;
   121e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   121e4:	8b 55 fc             	mov    -0x4(%ebp),%edx
   121e7:	8d 4a 14             	lea    0x14(%edx),%ecx
   121ea:	8b 55 08             	mov    0x8(%ebp),%edx
   121ed:	89 54 88 08          	mov    %edx,0x8(%eax,%ecx,4)
            return i;
   121f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121f4:	eb 0f                	jmp    12205 <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++)
   121f6:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   121fa:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   121fe:	7e cb                	jle    121cb <task_alloc_fd+0x17>
        }
    }

    return -1;
   12200:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12205:	c9                   	leave  
   12206:	c3                   	ret    

00012207 <task_remove_fd>:

/**
 * @brief 移除任务中打开的文件fd
 */
void task_remove_fd(int fd)
{
   12207:	55                   	push   %ebp
   12208:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   1220a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1220e:	78 1b                	js     1222b <task_remove_fd+0x24>
   12210:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12214:	7f 15                	jg     1222b <task_remove_fd+0x24>
    {
        task_current()->file_table[fd] = (file_t *)0;
   12216:	e8 66 f3 ff ff       	call   11581 <task_current>
   1221b:	89 c2                	mov    %eax,%edx
   1221d:	8b 45 08             	mov    0x8(%ebp),%eax
   12220:	83 c0 14             	add    $0x14,%eax
   12223:	c7 44 82 08 00 00 00 	movl   $0x0,0x8(%edx,%eax,4)
   1222a:	00 
    }
}
   1222b:	90                   	nop
   1222c:	5d                   	pop    %ebp
   1222d:	c3                   	ret    

0001222e <lgdt>:
{
   1222e:	55                   	push   %ebp
   1222f:	89 e5                	mov    %esp,%ebp
   12231:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   12234:	8b 45 08             	mov    0x8(%ebp),%eax
   12237:	c1 e8 10             	shr    $0x10,%eax
   1223a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1223e:	8b 45 08             	mov    0x8(%ebp),%eax
   12241:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   12245:	8b 45 0c             	mov    0xc(%ebp),%eax
   12248:	83 e8 01             	sub    $0x1,%eax
   1224b:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   1224f:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12253:	90                   	nop
   12254:	c9                   	leave  
   12255:	c3                   	ret    

00012256 <far_jump>:
{
   12256:	55                   	push   %ebp
   12257:	89 e5                	mov    %esp,%ebp
   12259:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   1225c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1225f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12262:	8b 45 08             	mov    0x8(%ebp),%eax
   12265:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   12268:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1226b:	ff 28                	ljmp   *(%eax)
}
   1226d:	90                   	nop
   1226e:	c9                   	leave  
   1226f:	c3                   	ret    

00012270 <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   12270:	55                   	push   %ebp
   12271:	89 e5                	mov    %esp,%ebp
   12273:	83 ec 14             	sub    $0x14,%esp
   12276:	8b 45 14             	mov    0x14(%ebp),%eax
   12279:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector / sizeof(segment_desc_t)); //
   1227d:	8b 45 08             	mov    0x8(%ebp),%eax
   12280:	83 e0 f8             	and    $0xfffffff8,%eax
   12283:	05 e0 37 03 00       	add    $0x337e0,%eax
   12288:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 设置limit单位为4kB
    if (limit > 0xFFFF)
   1228b:	81 7d 10 ff ff 00 00 	cmpl   $0xffff,0x10(%ebp)
   12292:	76 0f                	jbe    122a3 <segment_desc_set+0x33>
    {
        attr |= SEG_G; // G 标志位
   12294:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   1229a:	8b 45 10             	mov    0x10(%ebp),%eax
   1229d:	c1 e8 0c             	shr    $0xc,%eax
   122a0:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   122a3:	8b 45 10             	mov    0x10(%ebp),%eax
   122a6:	89 c2                	mov    %eax,%edx
   122a8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122ab:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   122ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   122b1:	89 c2                	mov    %eax,%edx
   122b3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122b6:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   122ba:	8b 45 0c             	mov    0xc(%ebp),%eax
   122bd:	c1 e8 10             	shr    $0x10,%eax
   122c0:	89 c2                	mov    %eax,%edx
   122c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122c5:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   122c8:	8b 45 0c             	mov    0xc(%ebp),%eax
   122cb:	c1 e8 18             	shr    $0x18,%eax
   122ce:	89 c2                	mov    %eax,%edx
   122d0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122d3:	88 50 07             	mov    %dl,0x7(%eax)
    desc->attr = attr | (((limit >> 16) & 0xFF) << 8);
   122d6:	8b 45 10             	mov    0x10(%ebp),%eax
   122d9:	c1 e8 10             	shr    $0x10,%eax
   122dc:	c1 e0 08             	shl    $0x8,%eax
   122df:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   122e3:	89 c2                	mov    %eax,%edx
   122e5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   122e8:	66 89 50 05          	mov    %dx,0x5(%eax)
}
   122ec:	90                   	nop
   122ed:	c9                   	leave  
   122ee:	c3                   	ret    

000122ef <gdt_free_sel>:

void gdt_free_sel(int sel)
{
   122ef:	55                   	push   %ebp
   122f0:	89 e5                	mov    %esp,%ebp
   122f2:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   122f5:	83 ec 0c             	sub    $0xc,%esp
   122f8:	68 e0 3f 03 00       	push   $0x33fe0
   122fd:	e8 2b 2e 00 00       	call   1512d <mutex_lock>
   12302:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   12305:	8b 45 08             	mov    0x8(%ebp),%eax
   12308:	c1 e8 03             	shr    $0x3,%eax
   1230b:	66 c7 04 c5 e5 37 03 	movw   $0x0,0x337e5(,%eax,8)
   12312:	00 00 00 
    mutex_unlock(&mutex);
   12315:	83 ec 0c             	sub    $0xc,%esp
   12318:	68 e0 3f 03 00       	push   $0x33fe0
   1231d:	e8 9f 2e 00 00       	call   151c1 <mutex_unlock>
   12322:	83 c4 10             	add    $0x10,%esp
}
   12325:	90                   	nop
   12326:	c9                   	leave  
   12327:	c3                   	ret    

00012328 <get_alloc_desc>:

int get_alloc_desc()
{
   12328:	55                   	push   %ebp
   12329:	89 e5                	mov    %esp,%ebp
   1232b:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   1232e:	83 ec 0c             	sub    $0xc,%esp
   12331:	68 e0 3f 03 00       	push   $0x33fe0
   12336:	e8 f2 2d 00 00       	call   1512d <mutex_lock>
   1233b:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1233e:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12345:	eb 36                	jmp    1237d <get_alloc_desc+0x55>
    {
        segment_desc_t *desc = gdt_table + i;
   12347:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1234a:	c1 e0 03             	shl    $0x3,%eax
   1234d:	05 e0 37 03 00       	add    $0x337e0,%eax
   12352:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) // 根据属性是否为0判断
   12355:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12358:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1235c:	66 85 c0             	test   %ax,%ax
   1235f:	75 18                	jne    12379 <get_alloc_desc+0x51>
        {
            // irq_leave_protection(state);
            mutex_unlock(&mutex);
   12361:	83 ec 0c             	sub    $0xc,%esp
   12364:	68 e0 3f 03 00       	push   $0x33fe0
   12369:	e8 53 2e 00 00       	call   151c1 <mutex_unlock>
   1236e:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   12371:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12374:	c1 e0 03             	shl    $0x3,%eax
   12377:	eb 22                	jmp    1239b <get_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   12379:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1237d:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12384:	7e c1                	jle    12347 <get_alloc_desc+0x1f>
        }
    }
    // irq_leave_protection(state);
    mutex_unlock(&mutex);
   12386:	83 ec 0c             	sub    $0xc,%esp
   12389:	68 e0 3f 03 00       	push   $0x33fe0
   1238e:	e8 2e 2e 00 00       	call   151c1 <mutex_unlock>
   12393:	83 c4 10             	add    $0x10,%esp
    return -1;
   12396:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1239b:	c9                   	leave  
   1239c:	c3                   	ret    

0001239d <init_gdt>:

void init_gdt(void)
{
   1239d:	55                   	push   %ebp
   1239e:	89 e5                	mov    %esp,%ebp
   123a0:	83 ec 18             	sub    $0x18,%esp
    // 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   123a3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123aa:	eb 19                	jmp    123c5 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0); // 找到第几个GDT表项
   123ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   123af:	c1 e0 03             	shl    $0x3,%eax
   123b2:	6a 00                	push   $0x0
   123b4:	6a 00                	push   $0x0
   123b6:	6a 00                	push   $0x0
   123b8:	50                   	push   %eax
   123b9:	e8 b2 fe ff ff       	call   12270 <segment_desc_set>
   123be:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   123c1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123c5:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   123cc:	7e de                	jle    123ac <init_gdt+0xf>
    }
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF,
   123ce:	68 92 40 00 00       	push   $0x4092
   123d3:	6a ff                	push   $0xffffffff
   123d5:	6a 00                	push   $0x0
   123d7:	6a 10                	push   $0x10
   123d9:	e8 92 fe ff ff       	call   12270 <segment_desc_set>
   123de:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF,
   123e1:	68 9a 40 00 00       	push   $0x409a
   123e6:	6a ff                	push   $0xffffffff
   123e8:	6a 00                	push   $0x0
   123ea:	6a 08                	push   $0x8
   123ec:	e8 7f fe ff ff       	call   12270 <segment_desc_set>
   123f1:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   123f4:	ba e6 02 01 00       	mov    $0x102e6,%edx
   123f9:	b8 f8 37 03 00       	mov    $0x337f8,%eax
   123fe:	68 05 ec 00 00       	push   $0xec05
   12403:	52                   	push   %edx
   12404:	6a 08                	push   $0x8
   12406:	50                   	push   %eax
   12407:	e8 1c 00 00 00       	call   12428 <gate_desc_set>
   1240c:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS,
                  (uint32_t)exception_handler_syscall,
                  GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    // 重新加载GDT
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1240f:	b8 e0 37 03 00       	mov    $0x337e0,%eax
   12414:	83 ec 08             	sub    $0x8,%esp
   12417:	68 00 08 00 00       	push   $0x800
   1241c:	50                   	push   %eax
   1241d:	e8 0c fe ff ff       	call   1222e <lgdt>
   12422:	83 c4 10             	add    $0x10,%esp
}
   12425:	90                   	nop
   12426:	c9                   	leave  
   12427:	c3                   	ret    

00012428 <gate_desc_set>:

void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   12428:	55                   	push   %ebp
   12429:	89 e5                	mov    %esp,%ebp
   1242b:	83 ec 08             	sub    $0x8,%esp
   1242e:	8b 55 0c             	mov    0xc(%ebp),%edx
   12431:	8b 45 14             	mov    0x14(%ebp),%eax
   12434:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12438:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   1243c:	8b 45 10             	mov    0x10(%ebp),%eax
   1243f:	89 c2                	mov    %eax,%edx
   12441:	8b 45 08             	mov    0x8(%ebp),%eax
   12444:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   12447:	8b 45 08             	mov    0x8(%ebp),%eax
   1244a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1244e:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   12452:	8b 45 08             	mov    0x8(%ebp),%eax
   12455:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12459:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFFF;
   1245d:	8b 45 10             	mov    0x10(%ebp),%eax
   12460:	c1 e8 10             	shr    $0x10,%eax
   12463:	89 c2                	mov    %eax,%edx
   12465:	8b 45 08             	mov    0x8(%ebp),%eax
   12468:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1246c:	90                   	nop
   1246d:	c9                   	leave  
   1246e:	c3                   	ret    

0001246f <cpu_init>:

void cpu_init(void)
{
   1246f:	55                   	push   %ebp
   12470:	89 e5                	mov    %esp,%ebp
   12472:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12475:	83 ec 0c             	sub    $0xc,%esp
   12478:	68 e0 3f 03 00       	push   $0x33fe0
   1247d:	e8 7d 2c 00 00       	call   150ff <mutex_init>
   12482:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   12485:	e8 13 ff ff ff       	call   1239d <init_gdt>
}
   1248a:	90                   	nop
   1248b:	c9                   	leave  
   1248c:	c3                   	ret    

0001248d <switch_to_tss>:

void switch_to_tss(uint32_t tss_selector)
{
   1248d:	55                   	push   %ebp
   1248e:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   12490:	6a 00                	push   $0x0
   12492:	ff 75 08             	pushl  0x8(%ebp)
   12495:	e8 bc fd ff ff       	call   12256 <far_jump>
   1249a:	83 c4 08             	add    $0x8,%esp
   1249d:	90                   	nop
   1249e:	c9                   	leave  
   1249f:	c3                   	ret    

000124a0 <inb>:
{
   124a0:	55                   	push   %ebp
   124a1:	89 e5                	mov    %esp,%ebp
   124a3:	83 ec 14             	sub    $0x14,%esp
   124a6:	8b 45 08             	mov    0x8(%ebp),%eax
   124a9:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   124ad:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   124b1:	89 c2                	mov    %eax,%edx
   124b3:	ec                   	in     (%dx),%al
   124b4:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   124b7:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   124bb:	c9                   	leave  
   124bc:	c3                   	ret    

000124bd <outb>:
{
   124bd:	55                   	push   %ebp
   124be:	89 e5                	mov    %esp,%ebp
   124c0:	83 ec 08             	sub    $0x8,%esp
   124c3:	8b 55 08             	mov    0x8(%ebp),%edx
   124c6:	8b 45 0c             	mov    0xc(%ebp),%eax
   124c9:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   124cd:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   124d0:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   124d4:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   124d8:	ee                   	out    %al,(%dx)
}
   124d9:	90                   	nop
   124da:	c9                   	leave  
   124db:	c3                   	ret    

000124dc <cli>:
{
   124dc:	55                   	push   %ebp
   124dd:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   124df:	fa                   	cli    
}
   124e0:	90                   	nop
   124e1:	5d                   	pop    %ebp
   124e2:	c3                   	ret    

000124e3 <sti>:
{
   124e3:	55                   	push   %ebp
   124e4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   124e6:	fb                   	sti    
}
   124e7:	90                   	nop
   124e8:	5d                   	pop    %ebp
   124e9:	c3                   	ret    

000124ea <lidt>:
{
   124ea:	55                   	push   %ebp
   124eb:	89 e5                	mov    %esp,%ebp
   124ed:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   124f0:	8b 45 08             	mov    0x8(%ebp),%eax
   124f3:	c1 e8 10             	shr    $0x10,%eax
   124f6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   124fa:	8b 45 08             	mov    0x8(%ebp),%eax
   124fd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   12501:	8b 45 0c             	mov    0xc(%ebp),%eax
   12504:	83 e8 01             	sub    $0x1,%eax
   12507:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   1250b:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1250f:	90                   	nop
   12510:	c9                   	leave  
   12511:	c3                   	ret    

00012512 <read_cr2>:
{
   12512:	55                   	push   %ebp
   12513:	89 e5                	mov    %esp,%ebp
   12515:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12518:	0f 20 d0             	mov    %cr2,%eax
   1251b:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   1251e:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12521:	c9                   	leave  
   12522:	c3                   	ret    

00012523 <hlt>:
{
   12523:	55                   	push   %ebp
   12524:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12526:	f4                   	hlt    
}
   12527:	90                   	nop
   12528:	5d                   	pop    %ebp
   12529:	c3                   	ret    

0001252a <read_eflags>:

static inline uint32_t read_eflags(void)
{
   1252a:	55                   	push   %ebp
   1252b:	89 e5                	mov    %esp,%ebp
   1252d:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax" : "=a"(eflags));
   12530:	9c                   	pushf  
   12531:	58                   	pop    %eax
   12532:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   12535:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12538:	c9                   	leave  
   12539:	c3                   	ret    

0001253a <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   1253a:	55                   	push   %ebp
   1253b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl" ::"a"(eflags));
   1253d:	8b 45 08             	mov    0x8(%ebp),%eax
   12540:	50                   	push   %eax
   12541:	9d                   	popf   
}
   12542:	90                   	nop
   12543:	5d                   	pop    %ebp
   12544:	c3                   	ret    

00012545 <dump_core_regs>:
#define IDT_TABLE_NR 128

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs(exception_frame_t *frame)
{
   12545:	55                   	push   %ebp
   12546:	89 e5                	mov    %esp,%ebp
   12548:	57                   	push   %edi
   12549:	56                   	push   %esi
   1254a:	53                   	push   %ebx
   1254b:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t esp, ss;
    if (frame->cs & 0x7)
   1254e:	8b 45 08             	mov    0x8(%ebp),%eax
   12551:	8b 40 3c             	mov    0x3c(%eax),%eax
   12554:	83 e0 07             	and    $0x7,%eax
   12557:	85 c0                	test   %eax,%eax
   12559:	74 14                	je     1256f <dump_core_regs+0x2a>
    {
        ss = frame->ds;
   1255b:	8b 45 08             	mov    0x8(%ebp),%eax
   1255e:	8b 40 0c             	mov    0xc(%eax),%eax
   12561:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   12564:	8b 45 08             	mov    0x8(%ebp),%eax
   12567:	8b 40 1c             	mov    0x1c(%eax),%eax
   1256a:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1256d:	eb 12                	jmp    12581 <dump_core_regs+0x3c>
    }
    else
    {
        ss = frame->ss3;
   1256f:	8b 45 08             	mov    0x8(%ebp),%eax
   12572:	8b 40 48             	mov    0x48(%eax),%eax
   12575:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   12578:	8b 45 08             	mov    0x8(%ebp),%eax
   1257b:	8b 40 44             	mov    0x44(%eax),%eax
   1257e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->err_code);
   12581:	8b 45 08             	mov    0x8(%ebp),%eax
   12584:	8b 50 34             	mov    0x34(%eax),%edx
   12587:	8b 45 08             	mov    0x8(%ebp),%eax
   1258a:	8b 40 30             	mov    0x30(%eax),%eax
   1258d:	83 ec 04             	sub    $0x4,%esp
   12590:	52                   	push   %edx
   12591:	50                   	push   %eax
   12592:	68 c0 63 01 00       	push   $0x163c0
   12597:	e8 2a 38 00 00       	call   15dc6 <log_printf>
   1259c:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   1259f:	8b 45 08             	mov    0x8(%ebp),%eax
   125a2:	8b 30                	mov    (%eax),%esi
   125a4:	8b 45 08             	mov    0x8(%ebp),%eax
   125a7:	8b 58 04             	mov    0x4(%eax),%ebx
   125aa:	8b 45 08             	mov    0x8(%ebp),%eax
   125ad:	8b 48 08             	mov    0x8(%eax),%ecx
   125b0:	8b 45 08             	mov    0x8(%ebp),%eax
   125b3:	8b 50 0c             	mov    0xc(%eax),%edx
   125b6:	8b 45 08             	mov    0x8(%ebp),%eax
   125b9:	8b 40 3c             	mov    0x3c(%eax),%eax
   125bc:	83 ec 04             	sub    $0x4,%esp
   125bf:	56                   	push   %esi
   125c0:	53                   	push   %ebx
   125c1:	ff 75 e0             	pushl  -0x20(%ebp)
   125c4:	51                   	push   %ecx
   125c5:	52                   	push   %edx
   125c6:	50                   	push   %eax
   125c7:	68 dc 63 01 00       	push   $0x163dc
   125cc:	e8 f5 37 00 00       	call   15dc6 <log_printf>
   125d1:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   125d4:	8b 45 08             	mov    0x8(%ebp),%eax
   125d7:	8b 40 18             	mov    0x18(%eax),%eax
   125da:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   125dd:	8b 45 08             	mov    0x8(%ebp),%eax
   125e0:	8b 78 14             	mov    0x14(%eax),%edi
   125e3:	8b 45 08             	mov    0x8(%ebp),%eax
   125e6:	8b 70 10             	mov    0x10(%eax),%esi
   125e9:	8b 45 08             	mov    0x8(%ebp),%eax
   125ec:	8b 58 24             	mov    0x24(%eax),%ebx
   125ef:	8b 45 08             	mov    0x8(%ebp),%eax
   125f2:	8b 48 28             	mov    0x28(%eax),%ecx
   125f5:	8b 45 08             	mov    0x8(%ebp),%eax
   125f8:	8b 50 20             	mov    0x20(%eax),%edx
   125fb:	8b 45 08             	mov    0x8(%ebp),%eax
   125fe:	8b 40 2c             	mov    0x2c(%eax),%eax
   12601:	83 ec 0c             	sub    $0xc,%esp
   12604:	ff 75 e4             	pushl  -0x1c(%ebp)
   12607:	ff 75 d4             	pushl  -0x2c(%ebp)
   1260a:	57                   	push   %edi
   1260b:	56                   	push   %esi
   1260c:	53                   	push   %ebx
   1260d:	51                   	push   %ecx
   1260e:	52                   	push   %edx
   1260f:	50                   	push   %eax
   12610:	68 04 64 01 00       	push   $0x16404
   12615:	e8 ac 37 00 00       	call   15dc6 <log_printf>
   1261a:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   1261d:	8b 45 08             	mov    0x8(%ebp),%eax
   12620:	8b 50 40             	mov    0x40(%eax),%edx
   12623:	8b 45 08             	mov    0x8(%ebp),%eax
   12626:	8b 40 38             	mov    0x38(%eax),%eax
   12629:	83 ec 04             	sub    $0x4,%esp
   1262c:	52                   	push   %edx
   1262d:	50                   	push   %eax
   1262e:	68 4d 64 01 00       	push   $0x1644d
   12633:	e8 8e 37 00 00       	call   15dc6 <log_printf>
   12638:	83 c4 10             	add    $0x10,%esp
}
   1263b:	90                   	nop
   1263c:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1263f:	5b                   	pop    %ebx
   12640:	5e                   	pop    %esi
   12641:	5f                   	pop    %edi
   12642:	5d                   	pop    %ebp
   12643:	c3                   	ret    

00012644 <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   12644:	55                   	push   %ebp
   12645:	89 e5                	mov    %esp,%ebp
   12647:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1264a:	83 ec 0c             	sub    $0xc,%esp
   1264d:	68 64 64 01 00       	push   $0x16464
   12652:	e8 6f 37 00 00       	call   15dc6 <log_printf>
   12657:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", msg);
   1265a:	83 ec 08             	sub    $0x8,%esp
   1265d:	ff 75 0c             	pushl  0xc(%ebp)
   12660:	68 85 64 01 00       	push   $0x16485
   12665:	e8 5c 37 00 00       	call   15dc6 <log_printf>
   1266a:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame); // 打印寄存器
   1266d:	83 ec 0c             	sub    $0xc,%esp
   12670:	ff 75 08             	pushl  0x8(%ebp)
   12673:	e8 cd fe ff ff       	call   12545 <dump_core_regs>
   12678:	83 c4 10             	add    $0x10,%esp
    log_printf("--------------------------------");
   1267b:	83 ec 0c             	sub    $0xc,%esp
   1267e:	68 64 64 01 00       	push   $0x16464
   12683:	e8 3e 37 00 00       	call   15dc6 <log_printf>
   12688:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   1268b:	e8 93 fe ff ff       	call   12523 <hlt>
   12690:	eb f9                	jmp    1268b <do_default_handler+0x47>

00012692 <do_handler_unknown>:
    }
}

void do_handler_unknown(exception_frame_t *frame)
{
   12692:	55                   	push   %ebp
   12693:	89 e5                	mov    %esp,%ebp
   12695:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   12698:	83 ec 08             	sub    $0x8,%esp
   1269b:	68 a0 64 01 00       	push   $0x164a0
   126a0:	ff 75 08             	pushl  0x8(%ebp)
   126a3:	e8 9c ff ff ff       	call   12644 <do_default_handler>
   126a8:	83 c4 10             	add    $0x10,%esp
}
   126ab:	90                   	nop
   126ac:	c9                   	leave  
   126ad:	c3                   	ret    

000126ae <do_handler_divider>:

void do_handler_divider(exception_frame_t *frame)
{
   126ae:	55                   	push   %ebp
   126af:	89 e5                	mov    %esp,%ebp
   126b1:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception");
   126b4:	83 ec 08             	sub    $0x8,%esp
   126b7:	68 b2 64 01 00       	push   $0x164b2
   126bc:	ff 75 08             	pushl  0x8(%ebp)
   126bf:	e8 80 ff ff ff       	call   12644 <do_default_handler>
   126c4:	83 c4 10             	add    $0x10,%esp
}
   126c7:	90                   	nop
   126c8:	c9                   	leave  
   126c9:	c3                   	ret    

000126ca <do_handler_Debug>:

void do_handler_Debug(exception_frame_t *frame)
{
   126ca:	55                   	push   %ebp
   126cb:	89 e5                	mov    %esp,%ebp
   126cd:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   126d0:	83 ec 08             	sub    $0x8,%esp
   126d3:	68 c4 64 01 00       	push   $0x164c4
   126d8:	ff 75 08             	pushl  0x8(%ebp)
   126db:	e8 64 ff ff ff       	call   12644 <do_default_handler>
   126e0:	83 c4 10             	add    $0x10,%esp
}
   126e3:	90                   	nop
   126e4:	c9                   	leave  
   126e5:	c3                   	ret    

000126e6 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t *frame)
{
   126e6:	55                   	push   %ebp
   126e7:	89 e5                	mov    %esp,%ebp
   126e9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   126ec:	83 ec 08             	sub    $0x8,%esp
   126ef:	68 d4 64 01 00       	push   $0x164d4
   126f4:	ff 75 08             	pushl  0x8(%ebp)
   126f7:	e8 48 ff ff ff       	call   12644 <do_default_handler>
   126fc:	83 c4 10             	add    $0x10,%esp
}
   126ff:	90                   	nop
   12700:	c9                   	leave  
   12701:	c3                   	ret    

00012702 <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t *frame)
{
   12702:	55                   	push   %ebp
   12703:	89 e5                	mov    %esp,%ebp
   12705:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   12708:	83 ec 08             	sub    $0x8,%esp
   1270b:	68 e3 64 01 00       	push   $0x164e3
   12710:	ff 75 08             	pushl  0x8(%ebp)
   12713:	e8 2c ff ff ff       	call   12644 <do_default_handler>
   12718:	83 c4 10             	add    $0x10,%esp
}
   1271b:	90                   	nop
   1271c:	c9                   	leave  
   1271d:	c3                   	ret    

0001271e <do_handler_overflow>:

void do_handler_overflow(exception_frame_t *frame)
{
   1271e:	55                   	push   %ebp
   1271f:	89 e5                	mov    %esp,%ebp
   12721:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   12724:	83 ec 08             	sub    $0x8,%esp
   12727:	68 ef 64 01 00       	push   $0x164ef
   1272c:	ff 75 08             	pushl  0x8(%ebp)
   1272f:	e8 10 ff ff ff       	call   12644 <do_default_handler>
   12734:	83 c4 10             	add    $0x10,%esp
}
   12737:	90                   	nop
   12738:	c9                   	leave  
   12739:	c3                   	ret    

0001273a <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t *frame)
{
   1273a:	55                   	push   %ebp
   1273b:	89 e5                	mov    %esp,%ebp
   1273d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   12740:	83 ec 08             	sub    $0x8,%esp
   12743:	68 f9 64 01 00       	push   $0x164f9
   12748:	ff 75 08             	pushl  0x8(%ebp)
   1274b:	e8 f4 fe ff ff       	call   12644 <do_default_handler>
   12750:	83 c4 10             	add    $0x10,%esp
}
   12753:	90                   	nop
   12754:	c9                   	leave  
   12755:	c3                   	ret    

00012756 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t *frame)
{
   12756:	55                   	push   %ebp
   12757:	89 e5                	mov    %esp,%ebp
   12759:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   1275c:	83 ec 08             	sub    $0x8,%esp
   1275f:	68 0f 65 01 00       	push   $0x1650f
   12764:	ff 75 08             	pushl  0x8(%ebp)
   12767:	e8 d8 fe ff ff       	call   12644 <do_default_handler>
   1276c:	83 c4 10             	add    $0x10,%esp
}
   1276f:	90                   	nop
   12770:	c9                   	leave  
   12771:	c3                   	ret    

00012772 <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t *frame)
{
   12772:	55                   	push   %ebp
   12773:	89 e5                	mov    %esp,%ebp
   12775:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   12778:	83 ec 08             	sub    $0x8,%esp
   1277b:	68 1f 65 01 00       	push   $0x1651f
   12780:	ff 75 08             	pushl  0x8(%ebp)
   12783:	e8 bc fe ff ff       	call   12644 <do_default_handler>
   12788:	83 c4 10             	add    $0x10,%esp
}
   1278b:	90                   	nop
   1278c:	c9                   	leave  
   1278d:	c3                   	ret    

0001278e <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t *frame)
{
   1278e:	55                   	push   %ebp
   1278f:	89 e5                	mov    %esp,%ebp
   12791:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   12794:	83 ec 08             	sub    $0x8,%esp
   12797:	68 35 65 01 00       	push   $0x16535
   1279c:	ff 75 08             	pushl  0x8(%ebp)
   1279f:	e8 a0 fe ff ff       	call   12644 <do_default_handler>
   127a4:	83 c4 10             	add    $0x10,%esp
}
   127a7:	90                   	nop
   127a8:	c9                   	leave  
   127a9:	c3                   	ret    

000127aa <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t *frame)
{
   127aa:	55                   	push   %ebp
   127ab:	89 e5                	mov    %esp,%ebp
   127ad:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   127b0:	83 ec 08             	sub    $0x8,%esp
   127b3:	68 43 65 01 00       	push   $0x16543
   127b8:	ff 75 08             	pushl  0x8(%ebp)
   127bb:	e8 84 fe ff ff       	call   12644 <do_default_handler>
   127c0:	83 c4 10             	add    $0x10,%esp
}
   127c3:	90                   	nop
   127c4:	c9                   	leave  
   127c5:	c3                   	ret    

000127c6 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t *frame)
{
   127c6:	55                   	push   %ebp
   127c7:	89 e5                	mov    %esp,%ebp
   127c9:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   127cc:	83 ec 08             	sub    $0x8,%esp
   127cf:	68 4f 65 01 00       	push   $0x1654f
   127d4:	ff 75 08             	pushl  0x8(%ebp)
   127d7:	e8 68 fe ff ff       	call   12644 <do_default_handler>
   127dc:	83 c4 10             	add    $0x10,%esp
}
   127df:	90                   	nop
   127e0:	c9                   	leave  
   127e1:	c3                   	ret    

000127e2 <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   127e2:	55                   	push   %ebp
   127e3:	89 e5                	mov    %esp,%ebp
   127e5:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   127e8:	83 ec 08             	sub    $0x8,%esp
   127eb:	68 64 65 01 00       	push   $0x16564
   127f0:	ff 75 08             	pushl  0x8(%ebp)
   127f3:	e8 4c fe ff ff       	call   12644 <do_default_handler>
   127f8:	83 c4 10             	add    $0x10,%esp
}
   127fb:	90                   	nop
   127fc:	c9                   	leave  
   127fd:	c3                   	ret    

000127fe <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   127fe:	55                   	push   %ebp
   127ff:	89 e5                	mov    %esp,%ebp
   12801:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   12804:	83 ec 08             	sub    $0x8,%esp
   12807:	68 79 65 01 00       	push   $0x16579
   1280c:	ff 75 08             	pushl  0x8(%ebp)
   1280f:	e8 30 fe ff ff       	call   12644 <do_default_handler>
   12814:	83 c4 10             	add    $0x10,%esp
}
   12817:	90                   	nop
   12818:	c9                   	leave  
   12819:	c3                   	ret    

0001281a <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   1281a:	55                   	push   %ebp
   1281b:	89 e5                	mov    %esp,%ebp
   1281d:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   12820:	83 ec 08             	sub    $0x8,%esp
   12823:	68 97 65 01 00       	push   $0x16597
   12828:	ff 75 08             	pushl  0x8(%ebp)
   1282b:	e8 14 fe ff ff       	call   12644 <do_default_handler>
   12830:	83 c4 10             	add    $0x10,%esp
}
   12833:	90                   	nop
   12834:	c9                   	leave  
   12835:	c3                   	ret    

00012836 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   12836:	55                   	push   %ebp
   12837:	89 e5                	mov    %esp,%ebp
   12839:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   1283c:	83 ec 08             	sub    $0x8,%esp
   1283f:	68 a8 65 01 00       	push   $0x165a8
   12844:	ff 75 08             	pushl  0x8(%ebp)
   12847:	e8 f8 fd ff ff       	call   12644 <do_default_handler>
   1284c:	83 c4 10             	add    $0x10,%esp
}
   1284f:	90                   	nop
   12850:	c9                   	leave  
   12851:	c3                   	ret    

00012852 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   12852:	55                   	push   %ebp
   12853:	89 e5                	mov    %esp,%ebp
   12855:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   12858:	83 ec 08             	sub    $0x8,%esp
   1285b:	68 b8 65 01 00       	push   $0x165b8
   12860:	ff 75 08             	pushl  0x8(%ebp)
   12863:	e8 dc fd ff ff       	call   12644 <do_default_handler>
   12868:	83 c4 10             	add    $0x10,%esp
}
   1286b:	90                   	nop
   1286c:	c9                   	leave  
   1286d:	c3                   	ret    

0001286e <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   1286e:	55                   	push   %ebp
   1286f:	89 e5                	mov    %esp,%ebp
   12871:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   12874:	83 ec 08             	sub    $0x8,%esp
   12877:	68 d7 65 01 00       	push   $0x165d7
   1287c:	ff 75 08             	pushl  0x8(%ebp)
   1287f:	e8 c0 fd ff ff       	call   12644 <do_default_handler>
   12884:	83 c4 10             	add    $0x10,%esp
}
   12887:	90                   	nop
   12888:	c9                   	leave  
   12889:	c3                   	ret    

0001288a <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   1288a:	55                   	push   %ebp
   1288b:	89 e5                	mov    %esp,%ebp
   1288d:	83 ec 08             	sub    $0x8,%esp
    // do_default_handler(frame, "General_protection Exception.");
    log_printf("--------------------------------");
   12890:	83 ec 0c             	sub    $0xc,%esp
   12893:	68 64 64 01 00       	push   $0x16464
   12898:	e8 29 35 00 00       	call   15dc6 <log_printf>
   1289d:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   128a0:	83 ec 0c             	sub    $0xc,%esp
   128a3:	68 f4 65 01 00       	push   $0x165f4
   128a8:	e8 19 35 00 00       	call   15dc6 <log_printf>
   128ad:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_EXT)
   128b0:	8b 45 08             	mov    0x8(%ebp),%eax
   128b3:	8b 40 34             	mov    0x34(%eax),%eax
   128b6:	83 e0 01             	and    $0x1,%eax
   128b9:	85 c0                	test   %eax,%eax
   128bb:	74 12                	je     128cf <do_handler_general_protection+0x45>
    {
        log_printf("the exception occurred during delivery of an "
   128bd:	83 ec 0c             	sub    $0xc,%esp
   128c0:	68 20 66 01 00       	push   $0x16620
   128c5:	e8 fc 34 00 00       	call   15dc6 <log_printf>
   128ca:	83 c4 10             	add    $0x10,%esp
   128cd:	eb 10                	jmp    128df <do_handler_general_protection+0x55>
                   "event external to the program, such as an interrupt"
                   "or an earlier exception.");
    }
    else
    {
        log_printf("the exception occurred during delivery of a"
   128cf:	83 ec 0c             	sub    $0xc,%esp
   128d2:	68 9c 66 01 00       	push   $0x1669c
   128d7:	e8 ea 34 00 00       	call   15dc6 <log_printf>
   128dc:	83 c4 10             	add    $0x10,%esp
                   "software interrupt (INT n, INT3, or INTO).");
    }

    if (frame->err_code & ERR_IDT)
   128df:	8b 45 08             	mov    0x8(%ebp),%eax
   128e2:	8b 40 34             	mov    0x34(%eax),%eax
   128e5:	83 e0 02             	and    $0x2,%eax
   128e8:	85 c0                	test   %eax,%eax
   128ea:	74 12                	je     128fe <do_handler_general_protection+0x74>
    {
        log_printf("the index portion of the error code refers "
   128ec:	83 ec 0c             	sub    $0xc,%esp
   128ef:	68 f4 66 01 00       	push   $0x166f4
   128f4:	e8 cd 34 00 00       	call   15dc6 <log_printf>
   128f9:	83 c4 10             	add    $0x10,%esp
   128fc:	eb 10                	jmp    1290e <do_handler_general_protection+0x84>
                   "to a gate descriptor in the IDT");
    }
    else
    {
        log_printf("the index refers to a descriptor in the GDT");
   128fe:	83 ec 0c             	sub    $0xc,%esp
   12901:	68 40 67 01 00       	push   $0x16740
   12906:	e8 bb 34 00 00       	call   15dc6 <log_printf>
   1290b:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("segment index: %d", frame->err_code & 0xFFF8);
   1290e:	8b 45 08             	mov    0x8(%ebp),%eax
   12911:	8b 40 34             	mov    0x34(%eax),%eax
   12914:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12919:	83 ec 08             	sub    $0x8,%esp
   1291c:	50                   	push   %eax
   1291d:	68 6c 67 01 00       	push   $0x1676c
   12922:	e8 9f 34 00 00       	call   15dc6 <log_printf>
   12927:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   1292a:	83 ec 0c             	sub    $0xc,%esp
   1292d:	ff 75 08             	pushl  0x8(%ebp)
   12930:	e8 10 fc ff ff       	call   12545 <dump_core_regs>
   12935:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   12938:	e8 e6 fb ff ff       	call   12523 <hlt>
   1293d:	eb f9                	jmp    12938 <do_handler_general_protection+0xae>

0001293f <do_handler_page_fault>:
    //     }
    // }
}

void do_handler_page_fault(exception_frame_t *frame)
{
   1293f:	55                   	push   %ebp
   12940:	89 e5                	mov    %esp,%ebp
   12942:	83 ec 08             	sub    $0x8,%esp

    log_printf("--------------------------------");
   12945:	83 ec 0c             	sub    $0xc,%esp
   12948:	68 64 64 01 00       	push   $0x16464
   1294d:	e8 74 34 00 00       	call   15dc6 <log_printf>
   12952:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12955:	83 ec 0c             	sub    $0xc,%esp
   12958:	68 80 67 01 00       	push   $0x16780
   1295d:	e8 64 34 00 00       	call   15dc6 <log_printf>
   12962:	83 c4 10             	add    $0x10,%esp
    // do_default_handler(frame, "Page_fault Exception.");
    if (frame->err_code & ERR_PAGE_P)
   12965:	8b 45 08             	mov    0x8(%ebp),%eax
   12968:	8b 40 34             	mov    0x34(%eax),%eax
   1296b:	83 e0 01             	and    $0x1,%eax
   1296e:	85 c0                	test   %eax,%eax
   12970:	74 18                	je     1298a <do_handler_page_fault+0x4b>
    {
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12972:	e8 9b fb ff ff       	call   12512 <read_cr2>
   12977:	83 ec 08             	sub    $0x8,%esp
   1297a:	50                   	push   %eax
   1297b:	68 a4 67 01 00       	push   $0x167a4
   12980:	e8 41 34 00 00       	call   15dc6 <log_printf>
   12985:	83 c4 10             	add    $0x10,%esp
   12988:	eb 16                	jmp    129a0 <do_handler_page_fault+0x61>
    }
    else
    {
        log_printf("\tPage doesn't present 0x%x", read_cr2());
   1298a:	e8 83 fb ff ff       	call   12512 <read_cr2>
   1298f:	83 ec 08             	sub    $0x8,%esp
   12992:	50                   	push   %eax
   12993:	68 cc 67 01 00       	push   $0x167cc
   12998:	e8 29 34 00 00       	call   15dc6 <log_printf>
   1299d:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_WR)
   129a0:	8b 45 08             	mov    0x8(%ebp),%eax
   129a3:	8b 40 34             	mov    0x34(%eax),%eax
   129a6:	83 e0 02             	and    $0x2,%eax
   129a9:	85 c0                	test   %eax,%eax
   129ab:	74 12                	je     129bf <do_handler_page_fault+0x80>
    {
        log_printf("\tThe access causing the fault was a read.");
   129ad:	83 ec 0c             	sub    $0xc,%esp
   129b0:	68 e8 67 01 00       	push   $0x167e8
   129b5:	e8 0c 34 00 00       	call   15dc6 <log_printf>
   129ba:	83 c4 10             	add    $0x10,%esp
   129bd:	eb 10                	jmp    129cf <do_handler_page_fault+0x90>
    }
    else
    {
        log_printf("\tThe access causing the fault was a write.");
   129bf:	83 ec 0c             	sub    $0xc,%esp
   129c2:	68 14 68 01 00       	push   $0x16814
   129c7:	e8 fa 33 00 00       	call   15dc6 <log_printf>
   129cc:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_US)
   129cf:	8b 45 08             	mov    0x8(%ebp),%eax
   129d2:	8b 40 34             	mov    0x34(%eax),%eax
   129d5:	83 e0 02             	and    $0x2,%eax
   129d8:	85 c0                	test   %eax,%eax
   129da:	74 12                	je     129ee <do_handler_page_fault+0xaf>
    {
        log_printf("\tA supervisor-mode access caused the fault.");
   129dc:	83 ec 0c             	sub    $0xc,%esp
   129df:	68 40 68 01 00       	push   $0x16840
   129e4:	e8 dd 33 00 00       	call   15dc6 <log_printf>
   129e9:	83 c4 10             	add    $0x10,%esp
   129ec:	eb 10                	jmp    129fe <do_handler_page_fault+0xbf>
    }
    else
    {
        log_printf("\tA user-mode access caused the fault.");
   129ee:	83 ec 0c             	sub    $0xc,%esp
   129f1:	68 6c 68 01 00       	push   $0x1686c
   129f6:	e8 cb 33 00 00       	call   15dc6 <log_printf>
   129fb:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   129fe:	83 ec 0c             	sub    $0xc,%esp
   12a01:	ff 75 08             	pushl  0x8(%ebp)
   12a04:	e8 3c fb ff ff       	call   12545 <dump_core_regs>
   12a09:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   12a0c:	e8 12 fb ff ff       	call   12523 <hlt>
   12a11:	eb f9                	jmp    12a0c <do_handler_page_fault+0xcd>

00012a13 <init_pic>:
    //     }
    // }
}

static void init_pic(void)
{
   12a13:	55                   	push   %ebp
   12a14:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12a16:	6a 11                	push   $0x11
   12a18:	6a 20                	push   $0x20
   12a1a:	e8 9e fa ff ff       	call   124bd <outb>
   12a1f:	83 c4 08             	add    $0x8,%esp
    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12a22:	6a 20                	push   $0x20
   12a24:	6a 21                	push   $0x21
   12a26:	e8 92 fa ff ff       	call   124bd <outb>
   12a2b:	83 c4 08             	add    $0x8,%esp
    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   12a2e:	6a 04                	push   $0x4
   12a30:	6a 21                	push   $0x21
   12a32:	e8 86 fa ff ff       	call   124bd <outb>
   12a37:	83 c4 08             	add    $0x8,%esp
    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12a3a:	6a 01                	push   $0x1
   12a3c:	6a 21                	push   $0x21
   12a3e:	e8 7a fa ff ff       	call   124bd <outb>
   12a43:	83 c4 08             	add    $0x8,%esp

    // 第二块芯片
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12a46:	6a 11                	push   $0x11
   12a48:	68 a0 00 00 00       	push   $0xa0
   12a4d:	e8 6b fa ff ff       	call   124bd <outb>
   12a52:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12a55:	6a 28                	push   $0x28
   12a57:	68 a1 00 00 00       	push   $0xa1
   12a5c:	e8 5c fa ff ff       	call   124bd <outb>
   12a61:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12a64:	6a 02                	push   $0x2
   12a66:	68 a1 00 00 00       	push   $0xa1
   12a6b:	e8 4d fa ff ff       	call   124bd <outb>
   12a70:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12a73:	6a 01                	push   $0x1
   12a75:	68 a1 00 00 00       	push   $0xa1
   12a7a:	e8 3e fa ff ff       	call   124bd <outb>
   12a7f:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12a82:	68 fb 00 00 00       	push   $0xfb
   12a87:	6a 21                	push   $0x21
   12a89:	e8 2f fa ff ff       	call   124bd <outb>
   12a8e:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12a91:	68 ff 00 00 00       	push   $0xff
   12a96:	68 a1 00 00 00       	push   $0xa1
   12a9b:	e8 1d fa ff ff       	call   124bd <outb>
   12aa0:	83 c4 08             	add    $0x8,%esp
}
   12aa3:	90                   	nop
   12aa4:	c9                   	leave  
   12aa5:	c3                   	ret    

00012aa6 <irq_init>:

void irq_init(void)
{
   12aa6:	55                   	push   %ebp
   12aa7:	89 e5                	mov    %esp,%ebp
   12aa9:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   12aac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12ab3:	eb 25                	jmp    12ada <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   12ab5:	ba 35 00 01 00       	mov    $0x10035,%edx
   12aba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12abd:	c1 e0 03             	shl    $0x3,%eax
   12ac0:	05 00 40 03 00       	add    $0x34000,%eax
   12ac5:	68 00 8e 00 00       	push   $0x8e00
   12aca:	52                   	push   %edx
   12acb:	6a 08                	push   $0x8
   12acd:	50                   	push   %eax
   12ace:	e8 55 f9 ff ff       	call   12428 <gate_desc_set>
   12ad3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   12ad6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12ada:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12ade:	7e d5                	jle    12ab5 <irq_init+0xf>
    }
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   12ae0:	83 ec 08             	sub    $0x8,%esp
   12ae3:	68 54 00 01 00       	push   $0x10054
   12ae8:	6a 00                	push   $0x0
   12aea:	e8 65 01 00 00       	call   12c54 <irq_install>
   12aef:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   12af2:	83 ec 08             	sub    $0x8,%esp
   12af5:	68 73 00 01 00       	push   $0x10073
   12afa:	6a 01                	push   $0x1
   12afc:	e8 53 01 00 00       	call   12c54 <irq_install>
   12b01:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   12b04:	83 ec 08             	sub    $0x8,%esp
   12b07:	68 92 00 01 00       	push   $0x10092
   12b0c:	6a 02                	push   $0x2
   12b0e:	e8 41 01 00 00       	call   12c54 <irq_install>
   12b13:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   12b16:	83 ec 08             	sub    $0x8,%esp
   12b19:	68 b1 00 01 00       	push   $0x100b1
   12b1e:	6a 03                	push   $0x3
   12b20:	e8 2f 01 00 00       	call   12c54 <irq_install>
   12b25:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   12b28:	83 ec 08             	sub    $0x8,%esp
   12b2b:	68 d0 00 01 00       	push   $0x100d0
   12b30:	6a 04                	push   $0x4
   12b32:	e8 1d 01 00 00       	call   12c54 <irq_install>
   12b37:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   12b3a:	83 ec 08             	sub    $0x8,%esp
   12b3d:	68 ef 00 01 00       	push   $0x100ef
   12b42:	6a 05                	push   $0x5
   12b44:	e8 0b 01 00 00       	call   12c54 <irq_install>
   12b49:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   12b4c:	83 ec 08             	sub    $0x8,%esp
   12b4f:	68 0e 01 01 00       	push   $0x1010e
   12b54:	6a 06                	push   $0x6
   12b56:	e8 f9 00 00 00       	call   12c54 <irq_install>
   12b5b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   12b5e:	83 ec 08             	sub    $0x8,%esp
   12b61:	68 2d 01 01 00       	push   $0x1012d
   12b66:	6a 07                	push   $0x7
   12b68:	e8 e7 00 00 00       	call   12c54 <irq_install>
   12b6d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   12b70:	83 ec 08             	sub    $0x8,%esp
   12b73:	68 4c 01 01 00       	push   $0x1014c
   12b78:	6a 08                	push   $0x8
   12b7a:	e8 d5 00 00 00       	call   12c54 <irq_install>
   12b7f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   12b82:	83 ec 08             	sub    $0x8,%esp
   12b85:	68 69 01 01 00       	push   $0x10169
   12b8a:	6a 0a                	push   $0xa
   12b8c:	e8 c3 00 00 00       	call   12c54 <irq_install>
   12b91:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   12b94:	83 ec 08             	sub    $0x8,%esp
   12b97:	68 86 01 01 00       	push   $0x10186
   12b9c:	6a 0b                	push   $0xb
   12b9e:	e8 b1 00 00 00       	call   12c54 <irq_install>
   12ba3:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   12ba6:	83 ec 08             	sub    $0x8,%esp
   12ba9:	68 a3 01 01 00       	push   $0x101a3
   12bae:	6a 0c                	push   $0xc
   12bb0:	e8 9f 00 00 00       	call   12c54 <irq_install>
   12bb5:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   12bb8:	83 ec 08             	sub    $0x8,%esp
   12bbb:	68 c0 01 01 00       	push   $0x101c0
   12bc0:	6a 0d                	push   $0xd
   12bc2:	e8 8d 00 00 00       	call   12c54 <irq_install>
   12bc7:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   12bca:	83 ec 08             	sub    $0x8,%esp
   12bcd:	68 dd 01 01 00       	push   $0x101dd
   12bd2:	6a 0e                	push   $0xe
   12bd4:	e8 7b 00 00 00       	call   12c54 <irq_install>
   12bd9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   12bdc:	83 ec 08             	sub    $0x8,%esp
   12bdf:	68 fa 01 01 00       	push   $0x101fa
   12be4:	6a 10                	push   $0x10
   12be6:	e8 69 00 00 00       	call   12c54 <irq_install>
   12beb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   12bee:	83 ec 08             	sub    $0x8,%esp
   12bf1:	68 19 02 01 00       	push   $0x10219
   12bf6:	6a 11                	push   $0x11
   12bf8:	e8 57 00 00 00       	call   12c54 <irq_install>
   12bfd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   12c00:	83 ec 08             	sub    $0x8,%esp
   12c03:	68 36 02 01 00       	push   $0x10236
   12c08:	6a 12                	push   $0x12
   12c0a:	e8 45 00 00 00       	call   12c54 <irq_install>
   12c0f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   12c12:	83 ec 08             	sub    $0x8,%esp
   12c15:	68 55 02 01 00       	push   $0x10255
   12c1a:	6a 13                	push   $0x13
   12c1c:	e8 33 00 00 00       	call   12c54 <irq_install>
   12c21:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   12c24:	83 ec 08             	sub    $0x8,%esp
   12c27:	68 74 02 01 00       	push   $0x10274
   12c2c:	6a 14                	push   $0x14
   12c2e:	e8 21 00 00 00       	call   12c54 <irq_install>
   12c33:	83 c4 10             	add    $0x10,%esp
    lidt((uint32_t)idt_table, sizeof(idt_table));
   12c36:	b8 00 40 03 00       	mov    $0x34000,%eax
   12c3b:	83 ec 08             	sub    $0x8,%esp
   12c3e:	68 00 04 00 00       	push   $0x400
   12c43:	50                   	push   %eax
   12c44:	e8 a1 f8 ff ff       	call   124ea <lidt>
   12c49:	83 c4 10             	add    $0x10,%esp

    init_pic();
   12c4c:	e8 c2 fd ff ff       	call   12a13 <init_pic>
}
   12c51:	90                   	nop
   12c52:	c9                   	leave  
   12c53:	c3                   	ret    

00012c54 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   12c54:	55                   	push   %ebp
   12c55:	89 e5                	mov    %esp,%ebp
   12c57:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   12c5a:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12c5e:	7e 07                	jle    12c67 <irq_install+0x13>
    {
        return -1;
   12c60:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12c65:	eb 25                	jmp    12c8c <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   12c67:	8b 45 0c             	mov    0xc(%ebp),%eax
   12c6a:	8b 55 08             	mov    0x8(%ebp),%edx
   12c6d:	c1 e2 03             	shl    $0x3,%edx
   12c70:	81 c2 00 40 03 00    	add    $0x34000,%edx
   12c76:	68 00 8e 00 00       	push   $0x8e00
   12c7b:	50                   	push   %eax
   12c7c:	6a 08                	push   $0x8
   12c7e:	52                   	push   %edx
   12c7f:	e8 a4 f7 ff ff       	call   12428 <gate_desc_set>
   12c84:	83 c4 10             	add    $0x10,%esp
    return 0;
   12c87:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12c8c:	c9                   	leave  
   12c8d:	c3                   	ret    

00012c8e <irq_enable>:

void irq_enable(int irq_num)
{
   12c8e:	55                   	push   %ebp
   12c8f:	89 e5                	mov    %esp,%ebp
   12c91:	53                   	push   %ebx
   12c92:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12c95:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12c99:	7e 78                	jle    12d13 <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12c9b:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12c9f:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12ca3:	7f 32                	jg     12cd7 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12ca5:	6a 21                	push   $0x21
   12ca7:	e8 f4 f7 ff ff       	call   124a0 <inb>
   12cac:	83 c4 04             	add    $0x4,%esp
   12caf:	89 c2                	mov    %eax,%edx
   12cb1:	8b 45 08             	mov    0x8(%ebp),%eax
   12cb4:	bb 01 00 00 00       	mov    $0x1,%ebx
   12cb9:	89 c1                	mov    %eax,%ecx
   12cbb:	d3 e3                	shl    %cl,%ebx
   12cbd:	89 d8                	mov    %ebx,%eax
   12cbf:	f7 d0                	not    %eax
   12cc1:	21 d0                	and    %edx,%eax
   12cc3:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12cc6:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12cca:	50                   	push   %eax
   12ccb:	6a 21                	push   $0x21
   12ccd:	e8 eb f7 ff ff       	call   124bd <outb>
   12cd2:	83 c4 08             	add    $0x8,%esp
   12cd5:	eb 3d                	jmp    12d14 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   12cd7:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   12cdb:	68 a1 00 00 00       	push   $0xa1
   12ce0:	e8 bb f7 ff ff       	call   124a0 <inb>
   12ce5:	83 c4 04             	add    $0x4,%esp
   12ce8:	89 c2                	mov    %eax,%edx
   12cea:	8b 45 08             	mov    0x8(%ebp),%eax
   12ced:	bb 01 00 00 00       	mov    $0x1,%ebx
   12cf2:	89 c1                	mov    %eax,%ecx
   12cf4:	d3 e3                	shl    %cl,%ebx
   12cf6:	89 d8                	mov    %ebx,%eax
   12cf8:	f7 d0                	not    %eax
   12cfa:	21 d0                	and    %edx,%eax
   12cfc:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   12cff:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12d03:	50                   	push   %eax
   12d04:	68 a1 00 00 00       	push   $0xa1
   12d09:	e8 af f7 ff ff       	call   124bd <outb>
   12d0e:	83 c4 08             	add    $0x8,%esp
   12d11:	eb 01                	jmp    12d14 <irq_enable+0x86>
        return;
   12d13:	90                   	nop
    }
}
   12d14:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12d17:	c9                   	leave  
   12d18:	c3                   	ret    

00012d19 <irq_disable>:

void irq_disable(int irq_num)
{
   12d19:	55                   	push   %ebp
   12d1a:	89 e5                	mov    %esp,%ebp
   12d1c:	53                   	push   %ebx
   12d1d:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12d20:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12d24:	7e 74                	jle    12d9a <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12d26:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12d2a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12d2e:	7f 30                	jg     12d60 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12d30:	6a 21                	push   $0x21
   12d32:	e8 69 f7 ff ff       	call   124a0 <inb>
   12d37:	83 c4 04             	add    $0x4,%esp
   12d3a:	89 c3                	mov    %eax,%ebx
   12d3c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d3f:	ba 01 00 00 00       	mov    $0x1,%edx
   12d44:	89 c1                	mov    %eax,%ecx
   12d46:	d3 e2                	shl    %cl,%edx
   12d48:	89 d0                	mov    %edx,%eax
   12d4a:	09 d8                	or     %ebx,%eax
   12d4c:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12d4f:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12d53:	50                   	push   %eax
   12d54:	6a 21                	push   $0x21
   12d56:	e8 62 f7 ff ff       	call   124bd <outb>
   12d5b:	83 c4 08             	add    $0x8,%esp
   12d5e:	eb 3b                	jmp    12d9b <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   12d60:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   12d64:	68 a1 00 00 00       	push   $0xa1
   12d69:	e8 32 f7 ff ff       	call   124a0 <inb>
   12d6e:	83 c4 04             	add    $0x4,%esp
   12d71:	89 c3                	mov    %eax,%ebx
   12d73:	8b 45 08             	mov    0x8(%ebp),%eax
   12d76:	ba 01 00 00 00       	mov    $0x1,%edx
   12d7b:	89 c1                	mov    %eax,%ecx
   12d7d:	d3 e2                	shl    %cl,%edx
   12d7f:	89 d0                	mov    %edx,%eax
   12d81:	09 d8                	or     %ebx,%eax
   12d83:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   12d86:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12d8a:	50                   	push   %eax
   12d8b:	68 a1 00 00 00       	push   $0xa1
   12d90:	e8 28 f7 ff ff       	call   124bd <outb>
   12d95:	83 c4 08             	add    $0x8,%esp
   12d98:	eb 01                	jmp    12d9b <irq_disable+0x82>
        return;
   12d9a:	90                   	nop
    }
}
   12d9b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12d9e:	c9                   	leave  
   12d9f:	c3                   	ret    

00012da0 <irq_disable_global>:

void irq_disable_global(void)
{
   12da0:	55                   	push   %ebp
   12da1:	89 e5                	mov    %esp,%ebp
    cli();
   12da3:	e8 34 f7 ff ff       	call   124dc <cli>
}
   12da8:	90                   	nop
   12da9:	5d                   	pop    %ebp
   12daa:	c3                   	ret    

00012dab <irq_enable_global>:

void irq_enable_global(void)
{
   12dab:	55                   	push   %ebp
   12dac:	89 e5                	mov    %esp,%ebp
    sti();
   12dae:	e8 30 f7 ff ff       	call   124e3 <sti>
}
   12db3:	90                   	nop
   12db4:	5d                   	pop    %ebp
   12db5:	c3                   	ret    

00012db6 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   12db6:	55                   	push   %ebp
   12db7:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12db9:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    // 从片也可能需要发送EOI
    if (irq_num >= 8)
   12dbd:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12dc1:	7e 0f                	jle    12dd2 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12dc3:	6a 20                	push   $0x20
   12dc5:	68 a0 00 00 00       	push   $0xa0
   12dca:	e8 ee f6 ff ff       	call   124bd <outb>
   12dcf:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12dd2:	6a 20                	push   $0x20
   12dd4:	6a 20                	push   $0x20
   12dd6:	e8 e2 f6 ff ff       	call   124bd <outb>
   12ddb:	83 c4 08             	add    $0x8,%esp
}
   12dde:	90                   	nop
   12ddf:	c9                   	leave  
   12de0:	c3                   	ret    

00012de1 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection(void)
{
   12de1:	55                   	push   %ebp
   12de2:	89 e5                	mov    %esp,%ebp
   12de4:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags(); // 保存之前的中断状态
   12de7:	e8 3e f7 ff ff       	call   1252a <read_eflags>
   12dec:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   12def:	e8 ac ff ff ff       	call   12da0 <irq_disable_global>
    return state;
   12df4:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12df7:	c9                   	leave  
   12df8:	c3                   	ret    

00012df9 <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection(irq_state_t state)
{
   12df9:	55                   	push   %ebp
   12dfa:	89 e5                	mov    %esp,%ebp
    write_eflags(state); // 恢复之前的中断状态
   12dfc:	ff 75 08             	pushl  0x8(%ebp)
   12dff:	e8 36 f7 ff ff       	call   1253a <write_eflags>
   12e04:	83 c4 04             	add    $0x4,%esp
   12e07:	90                   	nop
   12e08:	c9                   	leave  
   12e09:	c3                   	ret    

00012e0a <inb>:
{
   12e0a:	55                   	push   %ebp
   12e0b:	89 e5                	mov    %esp,%ebp
   12e0d:	83 ec 14             	sub    $0x14,%esp
   12e10:	8b 45 08             	mov    0x8(%ebp),%eax
   12e13:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   12e17:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12e1b:	89 c2                	mov    %eax,%edx
   12e1d:	ec                   	in     (%dx),%al
   12e1e:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12e21:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12e25:	c9                   	leave  
   12e26:	c3                   	ret    

00012e27 <outb>:
{
   12e27:	55                   	push   %ebp
   12e28:	89 e5                	mov    %esp,%ebp
   12e2a:	83 ec 08             	sub    $0x8,%esp
   12e2d:	8b 55 08             	mov    0x8(%ebp),%edx
   12e30:	8b 45 0c             	mov    0xc(%ebp),%eax
   12e33:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12e37:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   12e3a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12e3e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12e42:	ee                   	out    %al,(%dx)
}
   12e43:	90                   	nop
   12e44:	c9                   	leave  
   12e45:	c3                   	ret    

00012e46 <read_cursor_pos>:
/**
 * @brief 读取当前光标的位置
 */
static int
read_cursor_pos(void)
{
   12e46:	55                   	push   %ebp
   12e47:	89 e5                	mov    %esp,%ebp
   12e49:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   12e4c:	e8 90 ff ff ff       	call   12de1 <irq_enter_protection>
   12e51:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   12e54:	83 ec 08             	sub    $0x8,%esp
   12e57:	6a 0f                	push   $0xf
   12e59:	68 d4 03 00 00       	push   $0x3d4
   12e5e:	e8 c4 ff ff ff       	call   12e27 <outb>
   12e63:	83 c4 10             	add    $0x10,%esp
    pos = inb(0x3D5);
   12e66:	83 ec 0c             	sub    $0xc,%esp
   12e69:	68 d5 03 00 00       	push   $0x3d5
   12e6e:	e8 97 ff ff ff       	call   12e0a <inb>
   12e73:	83 c4 10             	add    $0x10,%esp
   12e76:	0f b6 c0             	movzbl %al,%eax
   12e79:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0E); // 写高地址
   12e7c:	83 ec 08             	sub    $0x8,%esp
   12e7f:	6a 0e                	push   $0xe
   12e81:	68 d4 03 00 00       	push   $0x3d4
   12e86:	e8 9c ff ff ff       	call   12e27 <outb>
   12e8b:	83 c4 10             	add    $0x10,%esp
    pos |= inb(0x3D5) << 8;
   12e8e:	83 ec 0c             	sub    $0xc,%esp
   12e91:	68 d5 03 00 00       	push   $0x3d5
   12e96:	e8 6f ff ff ff       	call   12e0a <inb>
   12e9b:	83 c4 10             	add    $0x10,%esp
   12e9e:	0f b6 c0             	movzbl %al,%eax
   12ea1:	c1 e0 08             	shl    $0x8,%eax
   12ea4:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   12ea7:	83 ec 0c             	sub    $0xc,%esp
   12eaa:	ff 75 f4             	pushl  -0xc(%ebp)
   12ead:	e8 47 ff ff ff       	call   12df9 <irq_leave_protection>
   12eb2:	83 c4 10             	add    $0x10,%esp
    return pos;
   12eb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   12eb8:	c9                   	leave  
   12eb9:	c3                   	ret    

00012eba <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos(console_t *console)
{
   12eba:	55                   	push   %ebp
   12ebb:	89 e5                	mov    %esp,%ebp
   12ebd:	83 ec 18             	sub    $0x18,%esp
    uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   12ec0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ec3:	ba 00 44 03 00       	mov    $0x34400,%edx
   12ec8:	29 d0                	sub    %edx,%eax
   12eca:	c1 f8 03             	sar    $0x3,%eax
   12ecd:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   12ed3:	89 c2                	mov    %eax,%edx
   12ed5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ed8:	8b 40 14             	mov    0x14(%eax),%eax
   12edb:	89 c1                	mov    %eax,%ecx
   12edd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ee0:	8b 40 10             	mov    0x10(%eax),%eax
   12ee3:	0f af c1             	imul   %ecx,%eax
   12ee6:	0f af c2             	imul   %edx,%eax
   12ee9:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row * console->display_cols + console->cursor_col;
   12eed:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef0:	8b 40 08             	mov    0x8(%eax),%eax
   12ef3:	89 c2                	mov    %eax,%edx
   12ef5:	8b 45 08             	mov    0x8(%ebp),%eax
   12ef8:	8b 40 14             	mov    0x14(%eax),%eax
   12efb:	0f af d0             	imul   %eax,%edx
   12efe:	8b 45 08             	mov    0x8(%ebp),%eax
   12f01:	8b 40 0c             	mov    0xc(%eax),%eax
   12f04:	01 d0                	add    %edx,%eax
   12f06:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   12f0a:	e8 d2 fe ff ff       	call   12de1 <irq_enter_protection>
   12f0f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   12f12:	83 ec 08             	sub    $0x8,%esp
   12f15:	6a 0f                	push   $0xf
   12f17:	68 d4 03 00 00       	push   $0x3d4
   12f1c:	e8 06 ff ff ff       	call   12e27 <outb>
   12f21:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)(pos & 0xFF));
   12f24:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12f28:	0f b6 c0             	movzbl %al,%eax
   12f2b:	83 ec 08             	sub    $0x8,%esp
   12f2e:	50                   	push   %eax
   12f2f:	68 d5 03 00 00       	push   $0x3d5
   12f34:	e8 ee fe ff ff       	call   12e27 <outb>
   12f39:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 0x0E); // 写高地址
   12f3c:	83 ec 08             	sub    $0x8,%esp
   12f3f:	6a 0e                	push   $0xe
   12f41:	68 d4 03 00 00       	push   $0x3d4
   12f46:	e8 dc fe ff ff       	call   12e27 <outb>
   12f4b:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
   12f4e:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12f52:	66 c1 e8 08          	shr    $0x8,%ax
   12f56:	0f b6 c0             	movzbl %al,%eax
   12f59:	83 ec 08             	sub    $0x8,%esp
   12f5c:	50                   	push   %eax
   12f5d:	68 d5 03 00 00       	push   $0x3d5
   12f62:	e8 c0 fe ff ff       	call   12e27 <outb>
   12f67:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   12f6a:	83 ec 0c             	sub    $0xc,%esp
   12f6d:	ff 75 f0             	pushl  -0x10(%ebp)
   12f70:	e8 84 fe ff ff       	call   12df9 <irq_leave_protection>
   12f75:	83 c4 10             	add    $0x10,%esp
}
   12f78:	90                   	nop
   12f79:	c9                   	leave  
   12f7a:	c3                   	ret    

00012f7b <clear_display>:

static void clear_display(console_t *console)
{
   12f7b:	55                   	push   %ebp
   12f7c:	89 e5                	mov    %esp,%ebp
   12f7e:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   12f81:	8b 45 08             	mov    0x8(%ebp),%eax
   12f84:	8b 50 14             	mov    0x14(%eax),%edx
   12f87:	8b 45 08             	mov    0x8(%ebp),%eax
   12f8a:	8b 40 10             	mov    0x10(%eax),%eax
   12f8d:	0f af c2             	imul   %edx,%eax
   12f90:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t *start = console->disp_base;
   12f93:	8b 45 08             	mov    0x8(%ebp),%eax
   12f96:	8b 00                	mov    (%eax),%eax
   12f98:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++)
   12f9b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   12fa2:	eb 51                	jmp    12ff5 <clear_display+0x7a>
    {
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   12fa4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12fa7:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   12faa:	8b 45 08             	mov    0x8(%ebp),%eax
   12fad:	8b 40 24             	mov    0x24(%eax),%eax
   12fb0:	c1 e0 05             	shl    $0x5,%eax
   12fb3:	c0 f8 05             	sar    $0x5,%al
   12fb6:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12fb9:	83 e0 07             	and    $0x7,%eax
   12fbc:	c1 e0 04             	shl    $0x4,%eax
   12fbf:	89 c1                	mov    %eax,%ecx
   12fc1:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   12fc5:	83 e0 8f             	and    $0xffffff8f,%eax
   12fc8:	09 c8                	or     %ecx,%eax
   12fca:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   12fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   12fd0:	8b 40 20             	mov    0x20(%eax),%eax
   12fd3:	c1 e0 04             	shl    $0x4,%eax
   12fd6:	c0 f8 04             	sar    $0x4,%al
   12fd9:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12fdc:	83 e0 0f             	and    $0xf,%eax
   12fdf:	89 c1                	mov    %eax,%ecx
   12fe1:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   12fe5:	83 e0 f0             	and    $0xfffffff0,%eax
   12fe8:	09 c8                	or     %ecx,%eax
   12fea:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++)
   12fed:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   12ff1:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   12ff5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ff8:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   12ffb:	7c a7                	jl     12fa4 <clear_display+0x29>
    }
}
   12ffd:	90                   	nop
   12ffe:	c9                   	leave  
   12fff:	c3                   	ret    

00013000 <erase_rows>:

/**
 * @brief 擦除从start到end的行
 */
static void erase_rows(console_t *console, int start, int end)
{
   13000:	55                   	push   %ebp
   13001:	89 e5                	mov    %esp,%ebp
   13003:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   13006:	8b 45 08             	mov    0x8(%ebp),%eax
   13009:	8b 10                	mov    (%eax),%edx
   1300b:	8b 45 08             	mov    0x8(%ebp),%eax
   1300e:	8b 40 14             	mov    0x14(%eax),%eax
   13011:	0f af 45 0c          	imul   0xc(%ebp),%eax
   13015:	01 c0                	add    %eax,%eax
   13017:	01 d0                	add    %edx,%eax
   13019:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t *disp_end = console->disp_base + console->display_cols * (end + 1);
   1301c:	8b 45 08             	mov    0x8(%ebp),%eax
   1301f:	8b 10                	mov    (%eax),%edx
   13021:	8b 45 08             	mov    0x8(%ebp),%eax
   13024:	8b 40 14             	mov    0x14(%eax),%eax
   13027:	8b 4d 10             	mov    0x10(%ebp),%ecx
   1302a:	83 c1 01             	add    $0x1,%ecx
   1302d:	0f af c1             	imul   %ecx,%eax
   13030:	01 c0                	add    %eax,%eax
   13032:	01 d0                	add    %edx,%eax
   13034:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end)
   13037:	eb 4d                	jmp    13086 <erase_rows+0x86>
    {
        disp_start->c = ' ';
   13039:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1303c:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   1303f:	8b 45 08             	mov    0x8(%ebp),%eax
   13042:	8b 40 20             	mov    0x20(%eax),%eax
   13045:	c1 e0 04             	shl    $0x4,%eax
   13048:	c0 f8 04             	sar    $0x4,%al
   1304b:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1304e:	83 e0 0f             	and    $0xf,%eax
   13051:	89 c1                	mov    %eax,%ecx
   13053:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13057:	83 e0 f0             	and    $0xfffffff0,%eax
   1305a:	09 c8                	or     %ecx,%eax
   1305c:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   1305f:	8b 45 08             	mov    0x8(%ebp),%eax
   13062:	8b 40 24             	mov    0x24(%eax),%eax
   13065:	c1 e0 05             	shl    $0x5,%eax
   13068:	c0 f8 05             	sar    $0x5,%al
   1306b:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1306e:	83 e0 07             	and    $0x7,%eax
   13071:	c1 e0 04             	shl    $0x4,%eax
   13074:	89 c1                	mov    %eax,%ecx
   13076:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1307a:	83 e0 8f             	and    $0xffffff8f,%eax
   1307d:	09 c8                	or     %ecx,%eax
   1307f:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   13082:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end)
   13086:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13089:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   1308c:	72 ab                	jb     13039 <erase_rows+0x39>
    }
}
   1308e:	90                   	nop
   1308f:	c9                   	leave  
   13090:	c3                   	ret    

00013091 <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t *console, int lines)
{
   13091:	55                   	push   %ebp
   13092:	89 e5                	mov    %esp,%ebp
   13094:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t *dest = console->disp_base;
   13097:	8b 45 08             	mov    0x8(%ebp),%eax
   1309a:	8b 00                	mov    (%eax),%eax
   1309c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *src = console->disp_base + console->display_cols * lines;
   1309f:	8b 45 08             	mov    0x8(%ebp),%eax
   130a2:	8b 10                	mov    (%eax),%edx
   130a4:	8b 45 08             	mov    0x8(%ebp),%eax
   130a7:	8b 40 14             	mov    0x14(%eax),%eax
   130aa:	0f af 45 0c          	imul   0xc(%ebp),%eax
   130ae:	01 c0                	add    %eax,%eax
   130b0:	01 d0                	add    %edx,%eax
   130b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   130b5:	8b 45 08             	mov    0x8(%ebp),%eax
   130b8:	8b 40 10             	mov    0x10(%eax),%eax
   130bb:	2b 45 0c             	sub    0xc(%ebp),%eax
   130be:	89 c2                	mov    %eax,%edx
   130c0:	8b 45 08             	mov    0x8(%ebp),%eax
   130c3:	8b 40 14             	mov    0x14(%eax),%eax
   130c6:	0f af c2             	imul   %edx,%eax
   130c9:	01 c0                	add    %eax,%eax
   130cb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   130ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
   130d1:	83 ec 04             	sub    $0x4,%esp
   130d4:	50                   	push   %eax
   130d5:	ff 75 f0             	pushl  -0x10(%ebp)
   130d8:	ff 75 f4             	pushl  -0xc(%ebp)
   130db:	e8 9e 26 00 00       	call   1577e <kernel_memcpy>
   130e0:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   130e3:	8b 45 08             	mov    0x8(%ebp),%eax
   130e6:	8b 40 10             	mov    0x10(%eax),%eax
   130e9:	8d 50 ff             	lea    -0x1(%eax),%edx
   130ec:	8b 45 08             	mov    0x8(%ebp),%eax
   130ef:	8b 40 10             	mov    0x10(%eax),%eax
   130f2:	2b 45 0c             	sub    0xc(%ebp),%eax
   130f5:	83 ec 04             	sub    $0x4,%esp
   130f8:	52                   	push   %edx
   130f9:	50                   	push   %eax
   130fa:	ff 75 08             	pushl  0x8(%ebp)
   130fd:	e8 fe fe ff ff       	call   13000 <erase_rows>
   13102:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   13105:	8b 45 08             	mov    0x8(%ebp),%eax
   13108:	8b 40 08             	mov    0x8(%eax),%eax
   1310b:	2b 45 0c             	sub    0xc(%ebp),%eax
   1310e:	89 c2                	mov    %eax,%edx
   13110:	8b 45 08             	mov    0x8(%ebp),%eax
   13113:	89 50 08             	mov    %edx,0x8(%eax)
}
   13116:	90                   	nop
   13117:	c9                   	leave  
   13118:	c3                   	ret    

00013119 <move_to_col0>:

static void move_to_col0(console_t *console)
{
   13119:	55                   	push   %ebp
   1311a:	89 e5                	mov    %esp,%ebp
    console->cursor_col = 0;
   1311c:	8b 45 08             	mov    0x8(%ebp),%eax
   1311f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   13126:	90                   	nop
   13127:	5d                   	pop    %ebp
   13128:	c3                   	ret    

00013129 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line(console_t *console)
{
   13129:	55                   	push   %ebp
   1312a:	89 e5                	mov    %esp,%ebp
   1312c:	83 ec 08             	sub    $0x8,%esp
    console->cursor_row++;
   1312f:	8b 45 08             	mov    0x8(%ebp),%eax
   13132:	8b 40 08             	mov    0x8(%eax),%eax
   13135:	8d 50 01             	lea    0x1(%eax),%edx
   13138:	8b 45 08             	mov    0x8(%ebp),%eax
   1313b:	89 50 08             	mov    %edx,0x8(%eax)

    // 超出当前屏幕显示的所有行，上移一行
    if (console->cursor_row >= console->display_rows)
   1313e:	8b 45 08             	mov    0x8(%ebp),%eax
   13141:	8b 50 08             	mov    0x8(%eax),%edx
   13144:	8b 45 08             	mov    0x8(%ebp),%eax
   13147:	8b 40 10             	mov    0x10(%eax),%eax
   1314a:	39 c2                	cmp    %eax,%edx
   1314c:	7c 10                	jl     1315e <move_next_line+0x35>
    {
        scroll_up(console, 1);
   1314e:	83 ec 08             	sub    $0x8,%esp
   13151:	6a 01                	push   $0x1
   13153:	ff 75 08             	pushl  0x8(%ebp)
   13156:	e8 36 ff ff ff       	call   13091 <scroll_up>
   1315b:	83 c4 10             	add    $0x10,%esp
    }
}
   1315e:	90                   	nop
   1315f:	c9                   	leave  
   13160:	c3                   	ret    

00013161 <move_forward>:

/**
 * 将光标往前移n个字符
 */
static void move_forward(console_t *console, int n)
{
   13161:	55                   	push   %ebp
   13162:	89 e5                	mov    %esp,%ebp
   13164:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < n; i++)
   13167:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1316e:	eb 5c                	jmp    131cc <move_forward+0x6b>
    {
        // 超过最后一列需要换行
        if (++console->cursor_col >= console->display_cols)
   13170:	8b 45 08             	mov    0x8(%ebp),%eax
   13173:	8b 40 0c             	mov    0xc(%eax),%eax
   13176:	8d 50 01             	lea    0x1(%eax),%edx
   13179:	8b 45 08             	mov    0x8(%ebp),%eax
   1317c:	89 50 0c             	mov    %edx,0xc(%eax)
   1317f:	8b 45 08             	mov    0x8(%ebp),%eax
   13182:	8b 50 0c             	mov    0xc(%eax),%edx
   13185:	8b 45 08             	mov    0x8(%ebp),%eax
   13188:	8b 40 14             	mov    0x14(%eax),%eax
   1318b:	39 c2                	cmp    %eax,%edx
   1318d:	7c 39                	jl     131c8 <move_forward+0x67>
        {
            console->cursor_col = 0;
   1318f:	8b 45 08             	mov    0x8(%ebp),%eax
   13192:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   13199:	8b 45 08             	mov    0x8(%ebp),%eax
   1319c:	8b 40 08             	mov    0x8(%eax),%eax
   1319f:	8d 50 01             	lea    0x1(%eax),%edx
   131a2:	8b 45 08             	mov    0x8(%ebp),%eax
   131a5:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows)
   131a8:	8b 45 08             	mov    0x8(%ebp),%eax
   131ab:	8b 50 08             	mov    0x8(%eax),%edx
   131ae:	8b 45 08             	mov    0x8(%ebp),%eax
   131b1:	8b 40 10             	mov    0x10(%eax),%eax
   131b4:	39 c2                	cmp    %eax,%edx
   131b6:	7c 10                	jl     131c8 <move_forward+0x67>
            {
                // 超出末端，上移
                scroll_up(console, 1);
   131b8:	83 ec 08             	sub    $0x8,%esp
   131bb:	6a 01                	push   $0x1
   131bd:	ff 75 08             	pushl  0x8(%ebp)
   131c0:	e8 cc fe ff ff       	call   13091 <scroll_up>
   131c5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < n; i++)
   131c8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   131cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131cf:	3b 45 0c             	cmp    0xc(%ebp),%eax
   131d2:	7c 9c                	jl     13170 <move_forward+0xf>
            }
        }
    }
}
   131d4:	90                   	nop
   131d5:	c9                   	leave  
   131d6:	c3                   	ret    

000131d7 <show_char>:

static void show_char(console_t *console, char c)
{
   131d7:	55                   	push   %ebp
   131d8:	89 e5                	mov    %esp,%ebp
   131da:	83 ec 28             	sub    $0x28,%esp
   131dd:	8b 45 0c             	mov    0xc(%ebp),%eax
   131e0:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   131e3:	8b 45 08             	mov    0x8(%ebp),%eax
   131e6:	8b 50 0c             	mov    0xc(%eax),%edx
   131e9:	8b 45 08             	mov    0x8(%ebp),%eax
   131ec:	8b 48 08             	mov    0x8(%eax),%ecx
   131ef:	8b 45 08             	mov    0x8(%ebp),%eax
   131f2:	8b 40 14             	mov    0x14(%eax),%eax
   131f5:	0f af c1             	imul   %ecx,%eax
   131f8:	01 d0                	add    %edx,%eax
   131fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *p = console->disp_base + offset;
   131fd:	8b 45 08             	mov    0x8(%ebp),%eax
   13200:	8b 00                	mov    (%eax),%eax
   13202:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13205:	01 d2                	add    %edx,%edx
   13207:	01 d0                	add    %edx,%eax
   13209:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   1320c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1320f:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   13213:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   13215:	8b 45 08             	mov    0x8(%ebp),%eax
   13218:	8b 40 20             	mov    0x20(%eax),%eax
   1321b:	c1 e0 04             	shl    $0x4,%eax
   1321e:	c0 f8 04             	sar    $0x4,%al
   13221:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13224:	83 e0 0f             	and    $0xf,%eax
   13227:	89 c1                	mov    %eax,%ecx
   13229:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1322d:	83 e0 f0             	and    $0xfffffff0,%eax
   13230:	09 c8                	or     %ecx,%eax
   13232:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   13235:	8b 45 08             	mov    0x8(%ebp),%eax
   13238:	8b 40 24             	mov    0x24(%eax),%eax
   1323b:	c1 e0 05             	shl    $0x5,%eax
   1323e:	c0 f8 05             	sar    $0x5,%al
   13241:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13244:	83 e0 07             	and    $0x7,%eax
   13247:	c1 e0 04             	shl    $0x4,%eax
   1324a:	89 c1                	mov    %eax,%ecx
   1324c:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13250:	83 e0 8f             	and    $0xffffff8f,%eax
   13253:	09 c8                	or     %ecx,%eax
   13255:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   13258:	83 ec 08             	sub    $0x8,%esp
   1325b:	6a 01                	push   $0x1
   1325d:	ff 75 08             	pushl  0x8(%ebp)
   13260:	e8 fc fe ff ff       	call   13161 <move_forward>
   13265:	83 c4 10             	add    $0x10,%esp
}
   13268:	90                   	nop
   13269:	c9                   	leave  
   1326a:	c3                   	ret    

0001326b <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t *console)
{
   1326b:	55                   	push   %ebp
   1326c:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   1326e:	8b 45 08             	mov    0x8(%ebp),%eax
   13271:	8b 50 0c             	mov    0xc(%eax),%edx
   13274:	8b 45 08             	mov    0x8(%ebp),%eax
   13277:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   1327a:	8b 45 08             	mov    0x8(%ebp),%eax
   1327d:	8b 50 08             	mov    0x8(%eax),%edx
   13280:	8b 45 08             	mov    0x8(%ebp),%eax
   13283:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   13286:	90                   	nop
   13287:	5d                   	pop    %ebp
   13288:	c3                   	ret    

00013289 <restore_cursor>:

void restore_cursor(console_t *console)
{
   13289:	55                   	push   %ebp
   1328a:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   1328c:	8b 45 08             	mov    0x8(%ebp),%eax
   1328f:	8b 50 18             	mov    0x18(%eax),%edx
   13292:	8b 45 08             	mov    0x8(%ebp),%eax
   13295:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   13298:	8b 45 08             	mov    0x8(%ebp),%eax
   1329b:	8b 50 1c             	mov    0x1c(%eax),%edx
   1329e:	8b 45 08             	mov    0x8(%ebp),%eax
   132a1:	89 50 08             	mov    %edx,0x8(%eax)
}
   132a4:	90                   	nop
   132a5:	5d                   	pop    %ebp
   132a6:	c3                   	ret    

000132a7 <console_init>:

/**
 * 初始化控制台及键盘
 */
int console_init(int idx)
{
   132a7:	55                   	push   %ebp
   132a8:	89 e5                	mov    %esp,%ebp
   132aa:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   132ad:	8b 45 08             	mov    0x8(%ebp),%eax
   132b0:	6b c0 68             	imul   $0x68,%eax,%eax
   132b3:	05 00 44 03 00       	add    $0x34400,%eax
   132b8:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   132bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132be:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   132c5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132c8:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *)CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   132cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132d2:	8b 40 14             	mov    0x14(%eax),%eax
   132d5:	0f af 45 08          	imul   0x8(%ebp),%eax
   132d9:	89 c2                	mov    %eax,%edx
   132db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132de:	8b 40 10             	mov    0x10(%eax),%eax
   132e1:	0f af c2             	imul   %edx,%eax
   132e4:	01 c0                	add    %eax,%eax
   132e6:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   132ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132ef:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   132f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132f4:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   132fb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   132fe:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0)
   13305:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13309:	75 30                	jne    1333b <console_init+0x94>
    {
        int cursor_pos = read_cursor_pos();
   1330b:	e8 36 fb ff ff       	call   12e46 <read_cursor_pos>
   13310:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   13313:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13316:	8b 48 14             	mov    0x14(%eax),%ecx
   13319:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1331c:	99                   	cltd   
   1331d:	f7 f9                	idiv   %ecx
   1331f:	89 c2                	mov    %eax,%edx
   13321:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13324:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   13327:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1332a:	8b 48 14             	mov    0x14(%eax),%ecx
   1332d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13330:	99                   	cltd   
   13331:	f7 f9                	idiv   %ecx
   13333:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13336:	89 50 0c             	mov    %edx,0xc(%eax)
   13339:	eb 22                	jmp    1335d <console_init+0xb6>
    }
    else
    {
        console->cursor_row = 0;
   1333b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1333e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   13345:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13348:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   1334f:	83 ec 0c             	sub    $0xc,%esp
   13352:	ff 75 f4             	pushl  -0xc(%ebp)
   13355:	e8 21 fc ff ff       	call   12f7b <clear_display>
   1335a:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   1335d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13360:	8b 50 08             	mov    0x8(%eax),%edx
   13363:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13366:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   13369:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1336c:	8b 50 0c             	mov    0xc(%eax),%edx
   1336f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13372:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   13375:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13378:	83 c0 54             	add    $0x54,%eax
   1337b:	83 ec 0c             	sub    $0xc,%esp
   1337e:	50                   	push   %eax
   1337f:	e8 7b 1d 00 00       	call   150ff <mutex_init>
   13384:	83 c4 10             	add    $0x10,%esp
    return 0;
   13387:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1338c:	c9                   	leave  
   1338d:	c3                   	ret    

0001338e <move_backword>:
/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword(console_t *console, int n)
{
   1338e:	55                   	push   %ebp
   1338f:	89 e5                	mov    %esp,%ebp
   13391:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   13394:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++)
   1339b:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   133a2:	eb 55                	jmp    133f9 <move_backword+0x6b>
    {
        if (console->cursor_col > 0)
   133a4:	8b 45 08             	mov    0x8(%ebp),%eax
   133a7:	8b 40 0c             	mov    0xc(%eax),%eax
   133aa:	85 c0                	test   %eax,%eax
   133ac:	7e 18                	jle    133c6 <move_backword+0x38>
        {
            // 非列超始处,可回退
            console->cursor_col--;
   133ae:	8b 45 08             	mov    0x8(%ebp),%eax
   133b1:	8b 40 0c             	mov    0xc(%eax),%eax
   133b4:	8d 50 ff             	lea    -0x1(%eax),%edx
   133b7:	8b 45 08             	mov    0x8(%ebp),%eax
   133ba:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   133bd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   133c4:	eb 2f                	jmp    133f5 <move_backword+0x67>
        }
        else if (console->cursor_row > 0)
   133c6:	8b 45 08             	mov    0x8(%ebp),%eax
   133c9:	8b 40 08             	mov    0x8(%eax),%eax
   133cc:	85 c0                	test   %eax,%eax
   133ce:	7e 25                	jle    133f5 <move_backword+0x67>
        {
            // 列起始处，但非首行，可回退
            console->cursor_row--;
   133d0:	8b 45 08             	mov    0x8(%ebp),%eax
   133d3:	8b 40 08             	mov    0x8(%eax),%eax
   133d6:	8d 50 ff             	lea    -0x1(%eax),%edx
   133d9:	8b 45 08             	mov    0x8(%ebp),%eax
   133dc:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   133df:	8b 45 08             	mov    0x8(%ebp),%eax
   133e2:	8b 40 14             	mov    0x14(%eax),%eax
   133e5:	8d 50 ff             	lea    -0x1(%eax),%edx
   133e8:	8b 45 08             	mov    0x8(%ebp),%eax
   133eb:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   133ee:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++)
   133f5:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   133f9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   133fc:	3b 45 0c             	cmp    0xc(%ebp),%eax
   133ff:	7c a3                	jl     133a4 <move_backword+0x16>
        }
    }

    return status;
   13401:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13404:	c9                   	leave  
   13405:	c3                   	ret    

00013406 <erase_backword>:
/**
 * 擦除左边一个字符 光标左移一个，输出空格，再左移一个
 * @param console
 */
static void erase_backword(console_t *console)
{
   13406:	55                   	push   %ebp
   13407:	89 e5                	mov    %esp,%ebp
   13409:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0)
   1340c:	6a 01                	push   $0x1
   1340e:	ff 75 08             	pushl  0x8(%ebp)
   13411:	e8 78 ff ff ff       	call   1338e <move_backword>
   13416:	83 c4 08             	add    $0x8,%esp
   13419:	85 c0                	test   %eax,%eax
   1341b:	75 20                	jne    1343d <erase_backword+0x37>
    {
        show_char(console, ' ');
   1341d:	83 ec 08             	sub    $0x8,%esp
   13420:	6a 20                	push   $0x20
   13422:	ff 75 08             	pushl  0x8(%ebp)
   13425:	e8 ad fd ff ff       	call   131d7 <show_char>
   1342a:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   1342d:	83 ec 08             	sub    $0x8,%esp
   13430:	6a 01                	push   $0x1
   13432:	ff 75 08             	pushl  0x8(%ebp)
   13435:	e8 54 ff ff ff       	call   1338e <move_backword>
   1343a:	83 c4 10             	add    $0x10,%esp
    }
}
   1343d:	90                   	nop
   1343e:	c9                   	leave  
   1343f:	c3                   	ret    

00013440 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t *console)
{
   13440:	55                   	push   %ebp
   13441:	89 e5                	mov    %esp,%ebp
   13443:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   13446:	8b 45 08             	mov    0x8(%ebp),%eax
   13449:	8b 40 0c             	mov    0xc(%eax),%eax
   1344c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8; // 下一显示位置
   1344f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13452:	83 c0 07             	add    $0x7,%eax
   13455:	8d 50 07             	lea    0x7(%eax),%edx
   13458:	85 c0                	test   %eax,%eax
   1345a:	0f 48 c2             	cmovs  %edx,%eax
   1345d:	c1 f8 03             	sar    $0x3,%eax
   13460:	c1 e0 03             	shl    $0x3,%eax
   13463:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols)
   13466:	8b 45 08             	mov    0x8(%ebp),%eax
   13469:	8b 40 14             	mov    0x14(%eax),%eax
   1346c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1346f:	7c 36                	jl     134a7 <move_next_tab+0x67>
    {
        col = 0;
   13471:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   13478:	8b 45 08             	mov    0x8(%ebp),%eax
   1347b:	8b 40 08             	mov    0x8(%eax),%eax
   1347e:	8d 50 01             	lea    0x1(%eax),%edx
   13481:	8b 45 08             	mov    0x8(%ebp),%eax
   13484:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows)
   13487:	8b 45 08             	mov    0x8(%ebp),%eax
   1348a:	8b 50 08             	mov    0x8(%eax),%edx
   1348d:	8b 45 08             	mov    0x8(%ebp),%eax
   13490:	8b 40 10             	mov    0x10(%eax),%eax
   13493:	39 c2                	cmp    %eax,%edx
   13495:	7c 10                	jl     134a7 <move_next_tab+0x67>
        {
            // 超出末端，上移
            scroll_up(console, 1);
   13497:	83 ec 08             	sub    $0x8,%esp
   1349a:	6a 01                	push   $0x1
   1349c:	ff 75 08             	pushl  0x8(%ebp)
   1349f:	e8 ed fb ff ff       	call   13091 <scroll_up>
   134a4:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   134a7:	8b 45 08             	mov    0x8(%ebp),%eax
   134aa:	8b 55 f4             	mov    -0xc(%ebp),%edx
   134ad:	89 50 0c             	mov    %edx,0xc(%eax)
}
   134b0:	90                   	nop
   134b1:	c9                   	leave  
   134b2:	c3                   	ret    

000134b3 <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal(console_t *console, char c)
{
   134b3:	55                   	push   %ebp
   134b4:	89 e5                	mov    %esp,%ebp
   134b6:	83 ec 18             	sub    $0x18,%esp
   134b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   134bc:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c)
   134bf:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   134c3:	83 f8 0a             	cmp    $0xa,%eax
   134c6:	74 70                	je     13538 <write_normal+0x85>
   134c8:	83 f8 0a             	cmp    $0xa,%eax
   134cb:	7f 0c                	jg     134d9 <write_normal+0x26>
   134cd:	83 f8 08             	cmp    $0x8,%eax
   134d0:	74 34                	je     13506 <write_normal+0x53>
   134d2:	83 f8 09             	cmp    $0x9,%eax
   134d5:	74 41                	je     13518 <write_normal+0x65>
   134d7:	eb 6f                	jmp    13548 <write_normal+0x95>
   134d9:	83 f8 1b             	cmp    $0x1b,%eax
   134dc:	74 0c                	je     134ea <write_normal+0x37>
   134de:	83 f8 7f             	cmp    $0x7f,%eax
   134e1:	74 13                	je     134f6 <write_normal+0x43>
   134e3:	83 f8 0d             	cmp    $0xd,%eax
   134e6:	74 40                	je     13528 <write_normal+0x75>
   134e8:	eb 5e                	jmp    13548 <write_normal+0x95>
    {
    case ASCII_ESC:
        console->write_state = CONSOLE_WRITE_ESC;
   134ea:	8b 45 08             	mov    0x8(%ebp),%eax
   134ed:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        break;
   134f4:	eb 72                	jmp    13568 <write_normal+0xb5>
    case 0x7F:
        erase_backword(console);
   134f6:	83 ec 0c             	sub    $0xc,%esp
   134f9:	ff 75 08             	pushl  0x8(%ebp)
   134fc:	e8 05 ff ff ff       	call   13406 <erase_backword>
   13501:	83 c4 10             	add    $0x10,%esp
        break;
   13504:	eb 62                	jmp    13568 <write_normal+0xb5>
    case '\b': // 左移一个字符
        move_backword(console, 1);
   13506:	83 ec 08             	sub    $0x8,%esp
   13509:	6a 01                	push   $0x1
   1350b:	ff 75 08             	pushl  0x8(%ebp)
   1350e:	e8 7b fe ff ff       	call   1338e <move_backword>
   13513:	83 c4 10             	add    $0x10,%esp
        break;
   13516:	eb 50                	jmp    13568 <write_normal+0xb5>
        // 换行处理
    case '\t': // 对齐的下一制表符
        move_next_tab(console);
   13518:	83 ec 0c             	sub    $0xc,%esp
   1351b:	ff 75 08             	pushl  0x8(%ebp)
   1351e:	e8 1d ff ff ff       	call   13440 <move_next_tab>
   13523:	83 c4 10             	add    $0x10,%esp
        break;
   13526:	eb 40                	jmp    13568 <write_normal+0xb5>
    case '\r':
        move_to_col0(console);
   13528:	83 ec 0c             	sub    $0xc,%esp
   1352b:	ff 75 08             	pushl  0x8(%ebp)
   1352e:	e8 e6 fb ff ff       	call   13119 <move_to_col0>
   13533:	83 c4 10             	add    $0x10,%esp
        break;
   13536:	eb 30                	jmp    13568 <write_normal+0xb5>
    case '\n': // 暂时这样处理
        // move_to_col0(console);
        move_next_line(console);
   13538:	83 ec 0c             	sub    $0xc,%esp
   1353b:	ff 75 08             	pushl  0x8(%ebp)
   1353e:	e8 e6 fb ff ff       	call   13129 <move_next_line>
   13543:	83 c4 10             	add    $0x10,%esp
        break;
   13546:	eb 20                	jmp    13568 <write_normal+0xb5>
        // 普通字符显示
    default:
    {
        if ((c >= ' ') && (c <= '~'))
   13548:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   1354c:	7e 19                	jle    13567 <write_normal+0xb4>
   1354e:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13552:	74 13                	je     13567 <write_normal+0xb4>
        {
            show_char(console, c);
   13554:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13558:	83 ec 08             	sub    $0x8,%esp
   1355b:	50                   	push   %eax
   1355c:	ff 75 08             	pushl  0x8(%ebp)
   1355f:	e8 73 fc ff ff       	call   131d7 <show_char>
   13564:	83 c4 10             	add    $0x10,%esp
        }
        break;
   13567:	90                   	nop
    }
    }
}
   13568:	90                   	nop
   13569:	c9                   	leave  
   1356a:	c3                   	ret    

0001356b <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left(console_t *console, int n)
{
   1356b:	55                   	push   %ebp
   1356c:	89 e5                	mov    %esp,%ebp
   1356e:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   13571:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13575:	75 07                	jne    1357e <move_left+0x13>
    {
        n = 1;
   13577:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   1357e:	8b 45 08             	mov    0x8(%ebp),%eax
   13581:	8b 40 0c             	mov    0xc(%eax),%eax
   13584:	2b 45 0c             	sub    0xc(%ebp),%eax
   13587:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   1358a:	b8 00 00 00 00       	mov    $0x0,%eax
   1358f:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   13593:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   13597:	89 c2                	mov    %eax,%edx
   13599:	8b 45 08             	mov    0x8(%ebp),%eax
   1359c:	89 50 0c             	mov    %edx,0xc(%eax)
}
   1359f:	90                   	nop
   135a0:	c9                   	leave  
   135a1:	c3                   	ret    

000135a2 <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right(console_t *console, int n)
{
   135a2:	55                   	push   %ebp
   135a3:	89 e5                	mov    %esp,%ebp
   135a5:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   135a8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   135ac:	75 07                	jne    135b5 <move_right+0x13>
    {
        n = 1;
   135ae:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   135b5:	8b 45 08             	mov    0x8(%ebp),%eax
   135b8:	8b 50 0c             	mov    0xc(%eax),%edx
   135bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   135be:	01 d0                	add    %edx,%eax
   135c0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols)
   135c3:	8b 45 08             	mov    0x8(%ebp),%eax
   135c6:	8b 40 14             	mov    0x14(%eax),%eax
   135c9:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   135cc:	7c 11                	jl     135df <move_right+0x3d>
    {
        console->cursor_col = console->display_cols - 1;
   135ce:	8b 45 08             	mov    0x8(%ebp),%eax
   135d1:	8b 40 14             	mov    0x14(%eax),%eax
   135d4:	8d 50 ff             	lea    -0x1(%eax),%edx
   135d7:	8b 45 08             	mov    0x8(%ebp),%eax
   135da:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    else
    {
        console->cursor_col = col;
    }
}
   135dd:	eb 09                	jmp    135e8 <move_right+0x46>
        console->cursor_col = col;
   135df:	8b 45 08             	mov    0x8(%ebp),%eax
   135e2:	8b 55 fc             	mov    -0x4(%ebp),%edx
   135e5:	89 50 0c             	mov    %edx,0xc(%eax)
}
   135e8:	90                   	nop
   135e9:	c9                   	leave  
   135ea:	c3                   	ret    

000135eb <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t *console)
{
   135eb:	55                   	push   %ebp
   135ec:	89 e5                	mov    %esp,%ebp
    if (console->curr_param_index >= 1)
   135ee:	8b 45 08             	mov    0x8(%ebp),%eax
   135f1:	8b 40 50             	mov    0x50(%eax),%eax
   135f4:	85 c0                	test   %eax,%eax
   135f6:	7e 0c                	jle    13604 <move_cursor+0x19>
    {
        console->cursor_row = console->esc_param[0];
   135f8:	8b 45 08             	mov    0x8(%ebp),%eax
   135fb:	8b 50 28             	mov    0x28(%eax),%edx
   135fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13601:	89 50 08             	mov    %edx,0x8(%eax)
    }

    if (console->curr_param_index >= 2)
   13604:	8b 45 08             	mov    0x8(%ebp),%eax
   13607:	8b 40 50             	mov    0x50(%eax),%eax
   1360a:	83 f8 01             	cmp    $0x1,%eax
   1360d:	7e 0c                	jle    1361b <move_cursor+0x30>
    {
        console->cursor_col = console->esc_param[1];
   1360f:	8b 45 08             	mov    0x8(%ebp),%eax
   13612:	8b 50 2c             	mov    0x2c(%eax),%edx
   13615:	8b 45 08             	mov    0x8(%ebp),%eax
   13618:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
   1361b:	90                   	nop
   1361c:	5d                   	pop    %ebp
   1361d:	c3                   	ret    

0001361e <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param(console_t *console)
{
   1361e:	55                   	push   %ebp
   1361f:	89 e5                	mov    %esp,%ebp
   13621:	83 ec 08             	sub    $0x8,%esp
    kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13624:	8b 45 08             	mov    0x8(%ebp),%eax
   13627:	83 c0 28             	add    $0x28,%eax
   1362a:	83 ec 04             	sub    $0x4,%esp
   1362d:	6a 28                	push   $0x28
   1362f:	6a 00                	push   $0x0
   13631:	50                   	push   %eax
   13632:	e8 96 21 00 00       	call   157cd <kernel_memset>
   13637:	83 c4 10             	add    $0x10,%esp
    console->curr_param_index = 0;
   1363a:	8b 45 08             	mov    0x8(%ebp),%eax
   1363d:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13644:	90                   	nop
   13645:	c9                   	leave  
   13646:	c3                   	ret    

00013647 <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc(console_t *console, char c)
{
   13647:	55                   	push   %ebp
   13648:	89 e5                	mov    %esp,%ebp
   1364a:	83 ec 18             	sub    $0x18,%esp
   1364d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13650:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c)
   13653:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13657:	83 f8 38             	cmp    $0x38,%eax
   1365a:	74 21                	je     1367d <write_esc+0x36>
   1365c:	83 f8 5b             	cmp    $0x5b,%eax
   1365f:	74 33                	je     13694 <write_esc+0x4d>
   13661:	83 f8 37             	cmp    $0x37,%eax
   13664:	75 48                	jne    136ae <write_esc+0x67>
    {
    case '7': // ESC 7 保存光标
        save_cursor(console);
   13666:	ff 75 08             	pushl  0x8(%ebp)
   13669:	e8 fd fb ff ff       	call   1326b <save_cursor>
   1366e:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   13671:	8b 45 08             	mov    0x8(%ebp),%eax
   13674:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   1367b:	eb 3c                	jmp    136b9 <write_esc+0x72>
    case '8': // ESC 8 恢复光标
        restore_cursor(console);
   1367d:	ff 75 08             	pushl  0x8(%ebp)
   13680:	e8 04 fc ff ff       	call   13289 <restore_cursor>
   13685:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   13688:	8b 45 08             	mov    0x8(%ebp),%eax
   1368b:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   13692:	eb 25                	jmp    136b9 <write_esc+0x72>
    case '[':
        clear_esc_param(console);
   13694:	83 ec 0c             	sub    $0xc,%esp
   13697:	ff 75 08             	pushl  0x8(%ebp)
   1369a:	e8 7f ff ff ff       	call   1361e <clear_esc_param>
   1369f:	83 c4 10             	add    $0x10,%esp
        console->write_state = CONSOLE_WRITE_SQUARE;
   136a2:	8b 45 08             	mov    0x8(%ebp),%eax
   136a5:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
        break;
   136ac:	eb 0b                	jmp    136b9 <write_esc+0x72>
    default:
        console->write_state = CONSOLE_WRITE_NORMAL;
   136ae:	8b 45 08             	mov    0x8(%ebp),%eax
   136b1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   136b8:	90                   	nop
    }
}
   136b9:	90                   	nop
   136ba:	c9                   	leave  
   136bb:	c3                   	ret    

000136bc <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t *console)
{
   136bc:	55                   	push   %ebp
   136bd:	89 e5                	mov    %esp,%ebp
   136bf:	83 ec 10             	sub    $0x10,%esp
    if (console->curr_param_index <= 0)
   136c2:	8b 45 08             	mov    0x8(%ebp),%eax
   136c5:	8b 40 50             	mov    0x50(%eax),%eax
   136c8:	85 c0                	test   %eax,%eax
   136ca:	7e 3e                	jle    1370a <erase_in_display+0x4e>
    {
        return;
    }

    int param = console->esc_param[0];
   136cc:	8b 45 08             	mov    0x8(%ebp),%eax
   136cf:	8b 40 28             	mov    0x28(%eax),%eax
   136d2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (param == 2)
   136d5:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   136d9:	75 30                	jne    1370b <erase_in_display+0x4f>
    {
        // 擦除整个屏幕
        erase_rows(console, 0, console->display_rows - 1);
   136db:	8b 45 08             	mov    0x8(%ebp),%eax
   136de:	8b 40 10             	mov    0x10(%eax),%eax
   136e1:	83 e8 01             	sub    $0x1,%eax
   136e4:	50                   	push   %eax
   136e5:	6a 00                	push   $0x0
   136e7:	ff 75 08             	pushl  0x8(%ebp)
   136ea:	e8 11 f9 ff ff       	call   13000 <erase_rows>
   136ef:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   136f2:	8b 45 08             	mov    0x8(%ebp),%eax
   136f5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   136fc:	8b 45 08             	mov    0x8(%ebp),%eax
   136ff:	8b 50 08             	mov    0x8(%eax),%edx
   13702:	8b 45 08             	mov    0x8(%ebp),%eax
   13705:	89 50 0c             	mov    %edx,0xc(%eax)
   13708:	eb 01                	jmp    1370b <erase_in_display+0x4f>
        return;
   1370a:	90                   	nop
    }
}
   1370b:	c9                   	leave  
   1370c:	c3                   	ret    

0001370d <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style(console_t *console)
{
   1370d:	55                   	push   %ebp
   1370e:	89 e5                	mov    %esp,%ebp
   13710:	83 ec 10             	sub    $0x10,%esp
    static const cclor_t color_table[] = {
        COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow,  // 0-3
        COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
    };

    for (int i = 0; i < console->curr_param_index; i++)
   13713:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1371a:	eb 78                	jmp    13794 <set_font_style+0x87>
    {
        int param = console->esc_param[i];
   1371c:	8b 45 08             	mov    0x8(%ebp),%eax
   1371f:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13722:	83 c2 08             	add    $0x8,%edx
   13725:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13729:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if ((param >= 30) && (param <= 37))
   1372c:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13730:	7e 1b                	jle    1374d <set_font_style+0x40>
   13732:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13736:	7f 15                	jg     1374d <set_font_style+0x40>
        { // 前景色：30-37
            console->foreground = color_table[param - 30];
   13738:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1373b:	83 e8 1e             	sub    $0x1e,%eax
   1373e:	8b 14 85 60 69 01 00 	mov    0x16960(,%eax,4),%edx
   13745:	8b 45 08             	mov    0x8(%ebp),%eax
   13748:	89 50 20             	mov    %edx,0x20(%eax)
   1374b:	eb 43                	jmp    13790 <set_font_style+0x83>
        }
        else if ((param >= 40) && (param <= 47))
   1374d:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13751:	7e 1b                	jle    1376e <set_font_style+0x61>
   13753:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13757:	7f 15                	jg     1376e <set_font_style+0x61>
        {
            console->background = color_table[param - 40];
   13759:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1375c:	83 e8 28             	sub    $0x28,%eax
   1375f:	8b 14 85 60 69 01 00 	mov    0x16960(,%eax,4),%edx
   13766:	8b 45 08             	mov    0x8(%ebp),%eax
   13769:	89 50 24             	mov    %edx,0x24(%eax)
   1376c:	eb 22                	jmp    13790 <set_font_style+0x83>
        }
        else if (param == 39)
   1376e:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13772:	75 0c                	jne    13780 <set_font_style+0x73>
        { // 39=默认前景色
            console->foreground = COLOR_White;
   13774:	8b 45 08             	mov    0x8(%ebp),%eax
   13777:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   1377e:	eb 10                	jmp    13790 <set_font_style+0x83>
        }
        else if (param == 49)
   13780:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13784:	75 0a                	jne    13790 <set_font_style+0x83>
        { // 49=默认背景色
            console->background = COLOR_Black;
   13786:	8b 45 08             	mov    0x8(%ebp),%eax
   13789:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    for (int i = 0; i < console->curr_param_index; i++)
   13790:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13794:	8b 45 08             	mov    0x8(%ebp),%eax
   13797:	8b 40 50             	mov    0x50(%eax),%eax
   1379a:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1379d:	0f 8c 79 ff ff ff    	jl     1371c <set_font_style+0xf>
        }
    }
}
   137a3:	90                   	nop
   137a4:	c9                   	leave  
   137a5:	c3                   	ret    

000137a6 <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square(console_t *console, char c)
{
   137a6:	55                   	push   %ebp
   137a7:	89 e5                	mov    %esp,%ebp
   137a9:	83 ec 14             	sub    $0x14,%esp
   137ac:	8b 45 0c             	mov    0xc(%ebp),%eax
   137af:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9'))
   137b2:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   137b6:	7e 44                	jle    137fc <write_esc_square+0x56>
   137b8:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   137bc:	7f 3e                	jg     137fc <write_esc_square+0x56>
    {
        // 解析当前参数
        int *param = &console->esc_param[console->curr_param_index];
   137be:	8b 45 08             	mov    0x8(%ebp),%eax
   137c1:	8b 40 50             	mov    0x50(%eax),%eax
   137c4:	83 c0 08             	add    $0x8,%eax
   137c7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   137ce:	8b 45 08             	mov    0x8(%ebp),%eax
   137d1:	01 d0                	add    %edx,%eax
   137d3:	83 c0 08             	add    $0x8,%eax
   137d6:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   137d9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   137dc:	8b 10                	mov    (%eax),%edx
   137de:	89 d0                	mov    %edx,%eax
   137e0:	c1 e0 02             	shl    $0x2,%eax
   137e3:	01 d0                	add    %edx,%eax
   137e5:	01 c0                	add    %eax,%eax
   137e7:	89 c2                	mov    %eax,%edx
   137e9:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   137ed:	01 d0                	add    %edx,%eax
   137ef:	8d 50 d0             	lea    -0x30(%eax),%edx
   137f2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   137f5:	89 10                	mov    %edx,(%eax)
    {
   137f7:	e9 ae 00 00 00       	jmp    138aa <write_esc_square+0x104>
    }
    else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX)
   137fc:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13800:	75 1f                	jne    13821 <write_esc_square+0x7b>
   13802:	8b 45 08             	mov    0x8(%ebp),%eax
   13805:	8b 40 50             	mov    0x50(%eax),%eax
   13808:	83 f8 09             	cmp    $0x9,%eax
   1380b:	7f 14                	jg     13821 <write_esc_square+0x7b>
    {
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   1380d:	8b 45 08             	mov    0x8(%ebp),%eax
   13810:	8b 40 50             	mov    0x50(%eax),%eax
   13813:	8d 50 01             	lea    0x1(%eax),%edx
   13816:	8b 45 08             	mov    0x8(%ebp),%eax
   13819:	89 50 50             	mov    %edx,0x50(%eax)
   1381c:	e9 89 00 00 00       	jmp    138aa <write_esc_square+0x104>
    }
    else
    {
        // 结束上一字符的处理
        console->curr_param_index++;
   13821:	8b 45 08             	mov    0x8(%ebp),%eax
   13824:	8b 40 50             	mov    0x50(%eax),%eax
   13827:	8d 50 01             	lea    0x1(%eax),%edx
   1382a:	8b 45 08             	mov    0x8(%ebp),%eax
   1382d:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c)
   13830:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13834:	83 e8 43             	sub    $0x43,%eax
   13837:	83 f8 2a             	cmp    $0x2a,%eax
   1383a:	77 64                	ja     138a0 <write_esc_square+0xfa>
   1383c:	8b 04 85 a0 68 01 00 	mov    0x168a0(,%eax,4),%eax
   13843:	ff e0                	jmp    *%eax
        {
        case 'm': // 设置字符属性
            set_font_style(console);
   13845:	ff 75 08             	pushl  0x8(%ebp)
   13848:	e8 c0 fe ff ff       	call   1370d <set_font_style>
   1384d:	83 c4 04             	add    $0x4,%esp
            break;
   13850:	eb 4e                	jmp    138a0 <write_esc_square+0xfa>
        case 'D': // 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13852:	8b 45 08             	mov    0x8(%ebp),%eax
   13855:	8b 40 28             	mov    0x28(%eax),%eax
   13858:	50                   	push   %eax
   13859:	ff 75 08             	pushl  0x8(%ebp)
   1385c:	e8 0a fd ff ff       	call   1356b <move_left>
   13861:	83 c4 08             	add    $0x8,%esp
            break;
   13864:	eb 3a                	jmp    138a0 <write_esc_square+0xfa>
        case 'C':
            move_right(console, console->esc_param[0]);
   13866:	8b 45 08             	mov    0x8(%ebp),%eax
   13869:	8b 40 28             	mov    0x28(%eax),%eax
   1386c:	50                   	push   %eax
   1386d:	ff 75 08             	pushl  0x8(%ebp)
   13870:	e8 2d fd ff ff       	call   135a2 <move_right>
   13875:	83 c4 08             	add    $0x8,%esp
            break;
   13878:	eb 26                	jmp    138a0 <write_esc_square+0xfa>
        case 'H':
            move_cursor(console);
   1387a:	ff 75 08             	pushl  0x8(%ebp)
   1387d:	e8 69 fd ff ff       	call   135eb <move_cursor>
   13882:	83 c4 04             	add    $0x4,%esp
            break;
   13885:	eb 19                	jmp    138a0 <write_esc_square+0xfa>
        case 'f':
            move_cursor(console);
   13887:	ff 75 08             	pushl  0x8(%ebp)
   1388a:	e8 5c fd ff ff       	call   135eb <move_cursor>
   1388f:	83 c4 04             	add    $0x4,%esp
            break;
   13892:	eb 0c                	jmp    138a0 <write_esc_square+0xfa>
        case 'J':
            erase_in_display(console);
   13894:	ff 75 08             	pushl  0x8(%ebp)
   13897:	e8 20 fe ff ff       	call   136bc <erase_in_display>
   1389c:	83 c4 04             	add    $0x4,%esp
            break;
   1389f:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   138a0:	8b 45 08             	mov    0x8(%ebp),%eax
   138a3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   138aa:	90                   	nop
   138ab:	c9                   	leave  
   138ac:	c3                   	ret    

000138ad <console_select>:

void console_select(int idx)
{
   138ad:	55                   	push   %ebp
   138ae:	89 e5                	mov    %esp,%ebp
   138b0:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   138b3:	8b 45 08             	mov    0x8(%ebp),%eax
   138b6:	6b c0 68             	imul   $0x68,%eax,%eax
   138b9:	05 00 44 03 00       	add    $0x34400,%eax
   138be:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0)
   138c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138c4:	8b 00                	mov    (%eax),%eax
   138c6:	85 c0                	test   %eax,%eax
   138c8:	75 0e                	jne    138d8 <console_select+0x2b>
    {
        // 可能没有初始化，先初始化一下
        console_init(idx);
   138ca:	83 ec 0c             	sub    $0xc,%esp
   138cd:	ff 75 08             	pushl  0x8(%ebp)
   138d0:	e8 d2 f9 ff ff       	call   132a7 <console_init>
   138d5:	83 c4 10             	add    $0x10,%esp
    }

    uint16_t pos = idx * console->display_cols * console->display_rows;
   138d8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138db:	8b 40 14             	mov    0x14(%eax),%eax
   138de:	89 c2                	mov    %eax,%edx
   138e0:	8b 45 08             	mov    0x8(%ebp),%eax
   138e3:	0f af d0             	imul   %eax,%edx
   138e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138e9:	8b 40 10             	mov    0x10(%eax),%eax
   138ec:	0f af c2             	imul   %edx,%eax
   138ef:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    outb(0x3D4, 0xC); // 写高地址
   138f3:	83 ec 08             	sub    $0x8,%esp
   138f6:	6a 0c                	push   $0xc
   138f8:	68 d4 03 00 00       	push   $0x3d4
   138fd:	e8 25 f5 ff ff       	call   12e27 <outb>
   13902:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
   13905:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13909:	66 c1 e8 08          	shr    $0x8,%ax
   1390d:	0f b6 c0             	movzbl %al,%eax
   13910:	83 ec 08             	sub    $0x8,%esp
   13913:	50                   	push   %eax
   13914:	68 d5 03 00 00       	push   $0x3d5
   13919:	e8 09 f5 ff ff       	call   12e27 <outb>
   1391e:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 0xD); // 写低地址
   13921:	83 ec 08             	sub    $0x8,%esp
   13924:	6a 0d                	push   $0xd
   13926:	68 d4 03 00 00       	push   $0x3d4
   1392b:	e8 f7 f4 ff ff       	call   12e27 <outb>
   13930:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)(pos & 0xFF));
   13933:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13937:	0f b6 c0             	movzbl %al,%eax
   1393a:	83 ec 08             	sub    $0x8,%esp
   1393d:	50                   	push   %eax
   1393e:	68 d5 03 00 00       	push   $0x3d5
   13943:	e8 df f4 ff ff       	call   12e27 <outb>
   13948:	83 c4 10             	add    $0x10,%esp

    // 更新光标到当前屏幕
    curr_console_idx = idx;
   1394b:	8b 45 08             	mov    0x8(%ebp),%eax
   1394e:	a3 40 47 03 00       	mov    %eax,0x34740
    update_cursor_pos(console);
   13953:	83 ec 0c             	sub    $0xc,%esp
   13956:	ff 75 f4             	pushl  -0xc(%ebp)
   13959:	e8 5c f5 ff ff       	call   12eba <update_cursor_pos>
   1395e:	83 c4 10             	add    $0x10,%esp
}
   13961:	90                   	nop
   13962:	c9                   	leave  
   13963:	c3                   	ret    

00013964 <console_set_cursor>:

void console_set_cursor(int idx, int visiable)
{
   13964:	55                   	push   %ebp
   13965:	89 e5                	mov    %esp,%ebp
   13967:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   1396a:	8b 45 08             	mov    0x8(%ebp),%eax
   1396d:	6b c0 68             	imul   $0x68,%eax,%eax
   13970:	05 00 44 03 00       	add    $0x34400,%eax
   13975:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   13978:	e8 64 f4 ff ff       	call   12de1 <irq_enter_protection>
   1397d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (visiable)
   13980:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13984:	74 79                	je     139ff <console_set_cursor+0x9b>
    {
        outb(0x3D4, 0x0A);
   13986:	83 ec 08             	sub    $0x8,%esp
   13989:	6a 0a                	push   $0xa
   1398b:	68 d4 03 00 00       	push   $0x3d4
   13990:	e8 92 f4 ff ff       	call   12e27 <outb>
   13995:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xC0) | 0);
   13998:	83 ec 0c             	sub    $0xc,%esp
   1399b:	68 d5 03 00 00       	push   $0x3d5
   139a0:	e8 65 f4 ff ff       	call   12e0a <inb>
   139a5:	83 c4 10             	add    $0x10,%esp
   139a8:	0f b6 c0             	movzbl %al,%eax
   139ab:	25 c0 00 00 00       	and    $0xc0,%eax
   139b0:	83 ec 08             	sub    $0x8,%esp
   139b3:	50                   	push   %eax
   139b4:	68 d5 03 00 00       	push   $0x3d5
   139b9:	e8 69 f4 ff ff       	call   12e27 <outb>
   139be:	83 c4 10             	add    $0x10,%esp
        outb(0x3D4, 0x0B);
   139c1:	83 ec 08             	sub    $0x8,%esp
   139c4:	6a 0b                	push   $0xb
   139c6:	68 d4 03 00 00       	push   $0x3d4
   139cb:	e8 57 f4 ff ff       	call   12e27 <outb>
   139d0:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xE0) | 15);
   139d3:	83 ec 0c             	sub    $0xc,%esp
   139d6:	68 d5 03 00 00       	push   $0x3d5
   139db:	e8 2a f4 ff ff       	call   12e0a <inb>
   139e0:	83 c4 10             	add    $0x10,%esp
   139e3:	83 e0 e0             	and    $0xffffffe0,%eax
   139e6:	83 c8 0f             	or     $0xf,%eax
   139e9:	0f b6 c0             	movzbl %al,%eax
   139ec:	83 ec 08             	sub    $0x8,%esp
   139ef:	50                   	push   %eax
   139f0:	68 d5 03 00 00       	push   $0x3d5
   139f5:	e8 2d f4 ff ff       	call   12e27 <outb>
   139fa:	83 c4 10             	add    $0x10,%esp
   139fd:	eb 24                	jmp    13a23 <console_set_cursor+0xbf>
    }
    else
    {
        outb(0x3D4, 0x0A);
   139ff:	83 ec 08             	sub    $0x8,%esp
   13a02:	6a 0a                	push   $0xa
   13a04:	68 d4 03 00 00       	push   $0x3d4
   13a09:	e8 19 f4 ff ff       	call   12e27 <outb>
   13a0e:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, 0x20);
   13a11:	83 ec 08             	sub    $0x8,%esp
   13a14:	6a 20                	push   $0x20
   13a16:	68 d5 03 00 00       	push   $0x3d5
   13a1b:	e8 07 f4 ff ff       	call   12e27 <outb>
   13a20:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   13a23:	83 ec 0c             	sub    $0xc,%esp
   13a26:	ff 75 f0             	pushl  -0x10(%ebp)
   13a29:	e8 cb f3 ff ff       	call   12df9 <irq_leave_protection>
   13a2e:	83 c4 10             	add    $0x10,%esp
}
   13a31:	90                   	nop
   13a32:	c9                   	leave  
   13a33:	c3                   	ret    

00013a34 <console_write>:
/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write(tty_t *tty)
{
   13a34:	55                   	push   %ebp
   13a35:	89 e5                	mov    %esp,%ebp
   13a37:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + tty->console_idx;
   13a3a:	8b 45 08             	mov    0x8(%ebp),%eax
   13a3d:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13a43:	6b c0 68             	imul   $0x68,%eax,%eax
   13a46:	05 00 44 03 00       	add    $0x34400,%eax
   13a4b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 下面的写序列涉及到状态机，还有多进程同时写，因此加上锁
    mutex_lock(&console->mutex);
   13a4e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a51:	83 c0 54             	add    $0x54,%eax
   13a54:	83 ec 0c             	sub    $0xc,%esp
   13a57:	50                   	push   %eax
   13a58:	e8 d0 16 00 00       	call   1512d <mutex_lock>
   13a5d:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13a60:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do
    {
        char c;

        // 取字节数据
        int err = tty_fifo_get(&tty->ofifo, &c);
   13a67:	8b 45 08             	mov    0x8(%ebp),%eax
   13a6a:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13a70:	83 ec 08             	sub    $0x8,%esp
   13a73:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13a76:	50                   	push   %eax
   13a77:	52                   	push   %edx
   13a78:	e8 a4 09 00 00       	call   14421 <tty_fifo_get>
   13a7d:	83 c4 10             	add    $0x10,%esp
   13a80:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0)
   13a83:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13a87:	79 1b                	jns    13aa4 <console_write+0x70>
            break;
        }
        len++;
    } while (1);

    if (tty->console_idx == curr_console_idx)
   13a89:	8b 45 08             	mov    0x8(%ebp),%eax
   13a8c:	8b 90 50 04 00 00    	mov    0x450(%eax),%edx
   13a92:	a1 40 47 03 00       	mov    0x34740,%eax
   13a97:	39 c2                	cmp    %eax,%edx
   13a99:	0f 84 80 00 00 00    	je     13b1f <console_write+0xeb>
   13a9f:	e9 9b 00 00 00       	jmp    13b3f <console_write+0x10b>
        sem_notify(&tty->osem);
   13aa4:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa7:	05 14 02 00 00       	add    $0x214,%eax
   13aac:	83 ec 0c             	sub    $0xc,%esp
   13aaf:	50                   	push   %eax
   13ab0:	e8 62 18 00 00       	call   15317 <sem_notify>
   13ab5:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state)
   13ab8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13abb:	8b 40 04             	mov    0x4(%eax),%eax
   13abe:	83 f8 01             	cmp    $0x1,%eax
   13ac1:	74 24                	je     13ae7 <console_write+0xb3>
   13ac3:	83 f8 01             	cmp    $0x1,%eax
   13ac6:	72 07                	jb     13acf <console_write+0x9b>
   13ac8:	83 f8 02             	cmp    $0x2,%eax
   13acb:	74 32                	je     13aff <console_write+0xcb>
   13acd:	eb 47                	jmp    13b16 <console_write+0xe2>
            write_normal(console, c);
   13acf:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13ad3:	0f be c0             	movsbl %al,%eax
   13ad6:	83 ec 08             	sub    $0x8,%esp
   13ad9:	50                   	push   %eax
   13ada:	ff 75 f0             	pushl  -0x10(%ebp)
   13add:	e8 d1 f9 ff ff       	call   134b3 <write_normal>
   13ae2:	83 c4 10             	add    $0x10,%esp
            break;
   13ae5:	eb 2f                	jmp    13b16 <console_write+0xe2>
            write_esc(console, c);
   13ae7:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13aeb:	0f be c0             	movsbl %al,%eax
   13aee:	83 ec 08             	sub    $0x8,%esp
   13af1:	50                   	push   %eax
   13af2:	ff 75 f0             	pushl  -0x10(%ebp)
   13af5:	e8 4d fb ff ff       	call   13647 <write_esc>
   13afa:	83 c4 10             	add    $0x10,%esp
            break;
   13afd:	eb 17                	jmp    13b16 <console_write+0xe2>
            write_esc_square(console, c);
   13aff:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13b03:	0f be c0             	movsbl %al,%eax
   13b06:	83 ec 08             	sub    $0x8,%esp
   13b09:	50                   	push   %eax
   13b0a:	ff 75 f0             	pushl  -0x10(%ebp)
   13b0d:	e8 94 fc ff ff       	call   137a6 <write_esc_square>
   13b12:	83 c4 10             	add    $0x10,%esp
            break;
   13b15:	90                   	nop
        len++;
   13b16:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    {
   13b1a:	e9 48 ff ff ff       	jmp    13a67 <console_write+0x33>
    {
        mutex_unlock(&console->mutex);
   13b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13b22:	83 c0 54             	add    $0x54,%eax
   13b25:	83 ec 0c             	sub    $0xc,%esp
   13b28:	50                   	push   %eax
   13b29:	e8 93 16 00 00       	call   151c1 <mutex_unlock>
   13b2e:	83 c4 10             	add    $0x10,%esp
        update_cursor_pos(console);
   13b31:	83 ec 0c             	sub    $0xc,%esp
   13b34:	ff 75 f0             	pushl  -0x10(%ebp)
   13b37:	e8 7e f3 ff ff       	call   12eba <update_cursor_pos>
   13b3c:	83 c4 10             	add    $0x10,%esp
    }

    return len;
   13b3f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13b42:	c9                   	leave  
   13b43:	c3                   	ret    

00013b44 <console_close>:

/**
 * @brief 关闭控制台及键盘
 */
void console_close(int dev)
{
   13b44:	55                   	push   %ebp
   13b45:	89 e5                	mov    %esp,%ebp
    // 似乎不太需要做点什么
   13b47:	90                   	nop
   13b48:	5d                   	pop    %ebp
   13b49:	c3                   	ret    

00013b4a <is_devid_bad>:

// 特定设备表
static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad(int dev_id)
{
   13b4a:	55                   	push   %ebp
   13b4b:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >= sizeof(dev_tbl) / sizeof(dev_tbl[0])))
   13b4d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13b51:	78 08                	js     13b5b <is_devid_bad+0x11>
   13b53:	8b 45 08             	mov    0x8(%ebp),%eax
   13b56:	83 f8 7f             	cmp    $0x7f,%eax
   13b59:	76 07                	jbe    13b62 <is_devid_bad+0x18>
    {
        return 1;
   13b5b:	b8 01 00 00 00       	mov    $0x1,%eax
   13b60:	eb 24                	jmp    13b86 <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0)
   13b62:	8b 55 08             	mov    0x8(%ebp),%edx
   13b65:	89 d0                	mov    %edx,%eax
   13b67:	c1 e0 02             	shl    $0x2,%eax
   13b6a:	01 d0                	add    %edx,%eax
   13b6c:	c1 e0 02             	shl    $0x2,%eax
   13b6f:	05 60 47 03 00       	add    $0x34760,%eax
   13b74:	8b 00                	mov    (%eax),%eax
   13b76:	85 c0                	test   %eax,%eax
   13b78:	75 07                	jne    13b81 <is_devid_bad+0x37>
    {
        return 1;
   13b7a:	b8 01 00 00 00       	mov    $0x1,%eax
   13b7f:	eb 05                	jmp    13b86 <is_devid_bad+0x3c>
    }

    return 0;
   13b81:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13b86:	5d                   	pop    %ebp
   13b87:	c3                   	ret    

00013b88 <dev_open>:

/**
 * @brief 打开指定的设备
 */
int dev_open(int major, int minor, void *data)
{
   13b88:	55                   	push   %ebp
   13b89:	89 e5                	mov    %esp,%ebp
   13b8b:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13b8e:	e8 4e f2 ff ff       	call   12de1 <irq_enter_protection>
   13b93:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 遍历：遇到已经打开的直接返回；否则找一个空闲项
    device_t *free_dev = (device_t *)0;
   13b96:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++)
   13b9d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13ba4:	eb 68                	jmp    13c0e <dev_open+0x86>
    {
        device_t *dev = dev_tbl + i;
   13ba6:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13ba9:	89 d0                	mov    %edx,%eax
   13bab:	c1 e0 02             	shl    $0x2,%eax
   13bae:	01 d0                	add    %edx,%eax
   13bb0:	c1 e0 02             	shl    $0x2,%eax
   13bb3:	05 60 47 03 00       	add    $0x34760,%eax
   13bb8:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0)
   13bbb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13bbe:	8b 40 10             	mov    0x10(%eax),%eax
   13bc1:	85 c0                	test   %eax,%eax
   13bc3:	75 08                	jne    13bcd <dev_open+0x45>
        {
            // 纪录空闲值
            free_dev = dev;
   13bc5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13bc8:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13bcb:	eb 3d                	jmp    13c0a <dev_open+0x82>
        }
        else if ((dev->desc->major == major) && (dev->minor == minor))
   13bcd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13bd0:	8b 00                	mov    (%eax),%eax
   13bd2:	8b 40 20             	mov    0x20(%eax),%eax
   13bd5:	39 45 08             	cmp    %eax,0x8(%ebp)
   13bd8:	75 30                	jne    13c0a <dev_open+0x82>
   13bda:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13bdd:	8b 40 08             	mov    0x8(%eax),%eax
   13be0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13be3:	75 25                	jne    13c0a <dev_open+0x82>
        {
            // 找到了已经打开的？直接返回就好
            dev->open_count++;
   13be5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13be8:	8b 40 10             	mov    0x10(%eax),%eax
   13beb:	8d 50 01             	lea    0x1(%eax),%edx
   13bee:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13bf1:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13bf4:	83 ec 0c             	sub    $0xc,%esp
   13bf7:	ff 75 e4             	pushl  -0x1c(%ebp)
   13bfa:	e8 fa f1 ff ff       	call   12df9 <irq_leave_protection>
   13bff:	83 c4 10             	add    $0x10,%esp
            return i;
   13c02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c05:	e9 c6 00 00 00       	jmp    13cd0 <dev_open+0x148>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++)
   13c0a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13c11:	83 f8 7f             	cmp    $0x7f,%eax
   13c14:	76 90                	jbe    13ba6 <dev_open+0x1e>
        }
    }

    // 新打开设备？查找设备类型描述符, 看看是不是支持的类型
    dev_desc_t *desc = (dev_desc_t *)0;
   13c16:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++)
   13c1d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13c24:	eb 24                	jmp    13c4a <dev_open+0xc2>
    {
        dev_desc_t *d = dev_desc_tbl[i];
   13c26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13c29:	8b 04 85 50 70 01 00 	mov    0x17050(,%eax,4),%eax
   13c30:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major)
   13c33:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13c36:	8b 40 20             	mov    0x20(%eax),%eax
   13c39:	39 45 08             	cmp    %eax,0x8(%ebp)
   13c3c:	75 08                	jne    13c46 <dev_open+0xbe>
        {
            desc = d;
   13c3e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13c41:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13c44:	eb 0a                	jmp    13c50 <dev_open+0xc8>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++)
   13c46:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13c4a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   13c4e:	74 d6                	je     13c26 <dev_open+0x9e>
        }
    }

    // 有空闲且有对应的描述项
    if (desc && free_dev)
   13c50:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13c54:	74 67                	je     13cbd <dev_open+0x135>
   13c56:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13c5a:	74 61                	je     13cbd <dev_open+0x135>
    {
        free_dev->minor = minor;
   13c5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c5f:	8b 55 0c             	mov    0xc(%ebp),%edx
   13c62:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13c65:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c68:	8b 55 10             	mov    0x10(%ebp),%edx
   13c6b:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13c6e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c71:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13c74:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13c76:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13c79:	8b 40 24             	mov    0x24(%eax),%eax
   13c7c:	83 ec 0c             	sub    $0xc,%esp
   13c7f:	ff 75 f4             	pushl  -0xc(%ebp)
   13c82:	ff d0                	call   *%eax
   13c84:	83 c4 10             	add    $0x10,%esp
   13c87:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0)
   13c8a:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13c8e:	75 2d                	jne    13cbd <dev_open+0x135>
        {
            free_dev->open_count = 1;
   13c90:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c93:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13c9a:	83 ec 0c             	sub    $0xc,%esp
   13c9d:	ff 75 e4             	pushl  -0x1c(%ebp)
   13ca0:	e8 54 f1 ff ff       	call   12df9 <irq_leave_protection>
   13ca5:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   13ca8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13cab:	ba 60 47 03 00       	mov    $0x34760,%edx
   13cb0:	29 d0                	sub    %edx,%eax
   13cb2:	c1 f8 02             	sar    $0x2,%eax
   13cb5:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13cbb:	eb 13                	jmp    13cd0 <dev_open+0x148>
        }
    }

    irq_leave_protection(state);
   13cbd:	83 ec 0c             	sub    $0xc,%esp
   13cc0:	ff 75 e4             	pushl  -0x1c(%ebp)
   13cc3:	e8 31 f1 ff ff       	call   12df9 <irq_leave_protection>
   13cc8:	83 c4 10             	add    $0x10,%esp
    return -1;
   13ccb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13cd0:	c9                   	leave  
   13cd1:	c3                   	ret    

00013cd2 <dev_read>:

/**
 * @brief 读取指定字节的数据
 */
int dev_read(int dev_id, int addr, char *buf, int size)
{
   13cd2:	55                   	push   %ebp
   13cd3:	89 e5                	mov    %esp,%ebp
   13cd5:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   13cd8:	ff 75 08             	pushl  0x8(%ebp)
   13cdb:	e8 6a fe ff ff       	call   13b4a <is_devid_bad>
   13ce0:	83 c4 04             	add    $0x4,%esp
   13ce3:	85 c0                	test   %eax,%eax
   13ce5:	74 07                	je     13cee <dev_read+0x1c>
    {
        return -1;
   13ce7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13cec:	eb 2e                	jmp    13d1c <dev_read+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   13cee:	8b 55 08             	mov    0x8(%ebp),%edx
   13cf1:	89 d0                	mov    %edx,%eax
   13cf3:	c1 e0 02             	shl    $0x2,%eax
   13cf6:	01 d0                	add    %edx,%eax
   13cf8:	c1 e0 02             	shl    $0x2,%eax
   13cfb:	05 60 47 03 00       	add    $0x34760,%eax
   13d00:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   13d03:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d06:	8b 00                	mov    (%eax),%eax
   13d08:	8b 40 28             	mov    0x28(%eax),%eax
   13d0b:	ff 75 14             	pushl  0x14(%ebp)
   13d0e:	ff 75 10             	pushl  0x10(%ebp)
   13d11:	ff 75 0c             	pushl  0xc(%ebp)
   13d14:	ff 75 f4             	pushl  -0xc(%ebp)
   13d17:	ff d0                	call   *%eax
   13d19:	83 c4 10             	add    $0x10,%esp
}
   13d1c:	c9                   	leave  
   13d1d:	c3                   	ret    

00013d1e <dev_write>:

/**
 * @brief 写指定字节的数据
 */
int dev_write(int dev_id, int addr, char *buf, int size)
{
   13d1e:	55                   	push   %ebp
   13d1f:	89 e5                	mov    %esp,%ebp
   13d21:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   13d24:	ff 75 08             	pushl  0x8(%ebp)
   13d27:	e8 1e fe ff ff       	call   13b4a <is_devid_bad>
   13d2c:	83 c4 04             	add    $0x4,%esp
   13d2f:	85 c0                	test   %eax,%eax
   13d31:	74 07                	je     13d3a <dev_write+0x1c>
    {
        return -1;
   13d33:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13d38:	eb 2e                	jmp    13d68 <dev_write+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   13d3a:	8b 55 08             	mov    0x8(%ebp),%edx
   13d3d:	89 d0                	mov    %edx,%eax
   13d3f:	c1 e0 02             	shl    $0x2,%eax
   13d42:	01 d0                	add    %edx,%eax
   13d44:	c1 e0 02             	shl    $0x2,%eax
   13d47:	05 60 47 03 00       	add    $0x34760,%eax
   13d4c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   13d4f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d52:	8b 00                	mov    (%eax),%eax
   13d54:	8b 40 2c             	mov    0x2c(%eax),%eax
   13d57:	ff 75 14             	pushl  0x14(%ebp)
   13d5a:	ff 75 10             	pushl  0x10(%ebp)
   13d5d:	ff 75 0c             	pushl  0xc(%ebp)
   13d60:	ff 75 f4             	pushl  -0xc(%ebp)
   13d63:	ff d0                	call   *%eax
   13d65:	83 c4 10             	add    $0x10,%esp
}
   13d68:	c9                   	leave  
   13d69:	c3                   	ret    

00013d6a <dev_control>:
/**
 * @brief 发送控制命令
 */

int dev_control(int dev_id, int cmd, int arg0, int arg1)
{
   13d6a:	55                   	push   %ebp
   13d6b:	89 e5                	mov    %esp,%ebp
   13d6d:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   13d70:	ff 75 08             	pushl  0x8(%ebp)
   13d73:	e8 d2 fd ff ff       	call   13b4a <is_devid_bad>
   13d78:	83 c4 04             	add    $0x4,%esp
   13d7b:	85 c0                	test   %eax,%eax
   13d7d:	74 07                	je     13d86 <dev_control+0x1c>
    {
        return -1;
   13d7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13d84:	eb 2e                	jmp    13db4 <dev_control+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   13d86:	8b 55 08             	mov    0x8(%ebp),%edx
   13d89:	89 d0                	mov    %edx,%eax
   13d8b:	c1 e0 02             	shl    $0x2,%eax
   13d8e:	01 d0                	add    %edx,%eax
   13d90:	c1 e0 02             	shl    $0x2,%eax
   13d93:	05 60 47 03 00       	add    $0x34760,%eax
   13d98:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   13d9b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d9e:	8b 00                	mov    (%eax),%eax
   13da0:	8b 40 30             	mov    0x30(%eax),%eax
   13da3:	ff 75 14             	pushl  0x14(%ebp)
   13da6:	ff 75 10             	pushl  0x10(%ebp)
   13da9:	ff 75 0c             	pushl  0xc(%ebp)
   13dac:	ff 75 f4             	pushl  -0xc(%ebp)
   13daf:	ff d0                	call   *%eax
   13db1:	83 c4 10             	add    $0x10,%esp
}
   13db4:	c9                   	leave  
   13db5:	c3                   	ret    

00013db6 <dev_close>:

/**
 * @brief 关闭设备
 */
void dev_close(int dev_id)
{
   13db6:	55                   	push   %ebp
   13db7:	89 e5                	mov    %esp,%ebp
   13db9:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   13dbc:	ff 75 08             	pushl  0x8(%ebp)
   13dbf:	e8 86 fd ff ff       	call   13b4a <is_devid_bad>
   13dc4:	83 c4 04             	add    $0x4,%esp
   13dc7:	85 c0                	test   %eax,%eax
   13dc9:	75 6b                	jne    13e36 <dev_close+0x80>
    {
        return;
    }

    device_t *dev = dev_tbl + dev_id;
   13dcb:	8b 55 08             	mov    0x8(%ebp),%edx
   13dce:	89 d0                	mov    %edx,%eax
   13dd0:	c1 e0 02             	shl    $0x2,%eax
   13dd3:	01 d0                	add    %edx,%eax
   13dd5:	c1 e0 02             	shl    $0x2,%eax
   13dd8:	05 60 47 03 00       	add    $0x34760,%eax
   13ddd:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   13de0:	e8 fc ef ff ff       	call   12de1 <irq_enter_protection>
   13de5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0)
   13de8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13deb:	8b 40 10             	mov    0x10(%eax),%eax
   13dee:	8d 50 ff             	lea    -0x1(%eax),%edx
   13df1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13df4:	89 50 10             	mov    %edx,0x10(%eax)
   13df7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13dfa:	8b 40 10             	mov    0x10(%eax),%eax
   13dfd:	85 c0                	test   %eax,%eax
   13dff:	75 25                	jne    13e26 <dev_close+0x70>
    {
        dev->desc->close(dev);
   13e01:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13e04:	8b 00                	mov    (%eax),%eax
   13e06:	8b 40 34             	mov    0x34(%eax),%eax
   13e09:	83 ec 0c             	sub    $0xc,%esp
   13e0c:	ff 75 f4             	pushl  -0xc(%ebp)
   13e0f:	ff d0                	call   *%eax
   13e11:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   13e14:	83 ec 04             	sub    $0x4,%esp
   13e17:	6a 14                	push   $0x14
   13e19:	6a 00                	push   $0x0
   13e1b:	ff 75 f4             	pushl  -0xc(%ebp)
   13e1e:	e8 aa 19 00 00       	call   157cd <kernel_memset>
   13e23:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   13e26:	83 ec 0c             	sub    $0xc,%esp
   13e29:	ff 75 f0             	pushl  -0x10(%ebp)
   13e2c:	e8 c8 ef ff ff       	call   12df9 <irq_leave_protection>
   13e31:	83 c4 10             	add    $0x10,%esp
   13e34:	eb 01                	jmp    13e37 <dev_close+0x81>
        return;
   13e36:	90                   	nop
   13e37:	c9                   	leave  
   13e38:	c3                   	ret    

00013e39 <inb>:
{
   13e39:	55                   	push   %ebp
   13e3a:	89 e5                	mov    %esp,%ebp
   13e3c:	83 ec 14             	sub    $0x14,%esp
   13e3f:	8b 45 08             	mov    0x8(%ebp),%eax
   13e42:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   13e46:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13e4a:	89 c2                	mov    %eax,%edx
   13e4c:	ec                   	in     (%dx),%al
   13e4d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   13e50:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13e54:	c9                   	leave  
   13e55:	c3                   	ret    

00013e56 <outb>:
{
   13e56:	55                   	push   %ebp
   13e57:	89 e5                	mov    %esp,%ebp
   13e59:	83 ec 08             	sub    $0x8,%esp
   13e5c:	8b 55 08             	mov    0x8(%ebp),%edx
   13e5f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e62:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13e66:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   13e69:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13e6d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13e71:	ee                   	out    %al,(%dx)
}
   13e72:	90                   	nop
   13e73:	c9                   	leave  
   13e74:	c3                   	ret    

00013e75 <get_key>:
    [0x35] = {'/', '?'},
    [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code)
{
   13e75:	55                   	push   %ebp
   13e76:	89 e5                	mov    %esp,%ebp
   13e78:	83 ec 04             	sub    $0x4,%esp
   13e7b:	8b 45 08             	mov    0x8(%ebp),%eax
   13e7e:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   13e81:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   13e85:	83 e0 7f             	and    $0x7f,%eax
}
   13e88:	c9                   	leave  
   13e89:	c3                   	ret    

00013e8a <is_make_code>:

static inline int is_make_code(uint8_t key_code)
{
   13e8a:	55                   	push   %ebp
   13e8b:	89 e5                	mov    %esp,%ebp
   13e8d:	83 ec 04             	sub    $0x4,%esp
   13e90:	8b 45 08             	mov    0x8(%ebp),%eax
   13e93:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   13e96:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   13e9a:	f7 d0                	not    %eax
   13e9c:	c0 e8 07             	shr    $0x7,%al
   13e9f:	0f b6 c0             	movzbl %al,%eax
}
   13ea2:	c9                   	leave  
   13ea3:	c3                   	ret    

00013ea4 <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void)
{
   13ea4:	55                   	push   %ebp
   13ea5:	89 e5                	mov    %esp,%ebp
   13ea7:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   13eaa:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   13eb1:	eb 14                	jmp    13ec7 <kbd_wait_send_ready+0x23>
    {
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0)
   13eb3:	6a 64                	push   $0x64
   13eb5:	e8 7f ff ff ff       	call   13e39 <inb>
   13eba:	83 c4 04             	add    $0x4,%esp
   13ebd:	0f b6 c0             	movzbl %al,%eax
   13ec0:	83 e0 02             	and    $0x2,%eax
   13ec3:	85 c0                	test   %eax,%eax
   13ec5:	74 0f                	je     13ed6 <kbd_wait_send_ready+0x32>
    while (time_out--)
   13ec7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13eca:	8d 50 ff             	lea    -0x1(%eax),%edx
   13ecd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13ed0:	85 c0                	test   %eax,%eax
   13ed2:	75 df                	jne    13eb3 <kbd_wait_send_ready+0xf>
   13ed4:	eb 01                	jmp    13ed7 <kbd_wait_send_ready+0x33>
        {
            return;
   13ed6:	90                   	nop
        }
    }
}
   13ed7:	c9                   	leave  
   13ed8:	c3                   	ret    

00013ed9 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data)
{
   13ed9:	55                   	push   %ebp
   13eda:	89 e5                	mov    %esp,%ebp
   13edc:	83 ec 08             	sub    $0x8,%esp
   13edf:	8b 55 08             	mov    0x8(%ebp),%edx
   13ee2:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ee5:	88 55 fc             	mov    %dl,-0x4(%ebp)
   13ee8:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   13eeb:	e8 b4 ff ff ff       	call   13ea4 <kbd_wait_send_ready>
    outb(port, data);
   13ef0:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   13ef4:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   13ef8:	52                   	push   %edx
   13ef9:	50                   	push   %eax
   13efa:	e8 57 ff ff ff       	call   13e56 <outb>
   13eff:	83 c4 08             	add    $0x8,%esp
}
   13f02:	90                   	nop
   13f03:	c9                   	leave  
   13f04:	c3                   	ret    

00013f05 <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void)
{
   13f05:	55                   	push   %ebp
   13f06:	89 e5                	mov    %esp,%ebp
   13f08:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   13f0b:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   13f12:	eb 14                	jmp    13f28 <kbd_wait_recv_ready+0x23>
    {
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY)
   13f14:	6a 64                	push   $0x64
   13f16:	e8 1e ff ff ff       	call   13e39 <inb>
   13f1b:	83 c4 04             	add    $0x4,%esp
   13f1e:	0f b6 c0             	movzbl %al,%eax
   13f21:	83 e0 01             	and    $0x1,%eax
   13f24:	85 c0                	test   %eax,%eax
   13f26:	75 0f                	jne    13f37 <kbd_wait_recv_ready+0x32>
    while (time_out--)
   13f28:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f2b:	8d 50 ff             	lea    -0x1(%eax),%edx
   13f2e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   13f31:	85 c0                	test   %eax,%eax
   13f33:	75 df                	jne    13f14 <kbd_wait_recv_ready+0xf>
   13f35:	eb 01                	jmp    13f38 <kbd_wait_recv_ready+0x33>
        {
            return;
   13f37:	90                   	nop
        }
    }
}
   13f38:	c9                   	leave  
   13f39:	c3                   	ret    

00013f3a <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void)
{
   13f3a:	55                   	push   %ebp
   13f3b:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   13f3d:	e8 c3 ff ff ff       	call   13f05 <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   13f42:	6a 60                	push   $0x60
   13f44:	e8 f0 fe ff ff       	call   13e39 <inb>
   13f49:	83 c4 04             	add    $0x4,%esp
}
   13f4c:	c9                   	leave  
   13f4d:	c3                   	ret    

00013f4e <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status(void)
{
   13f4e:	55                   	push   %ebp
   13f4f:	89 e5                	mov    %esp,%ebp
   13f51:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   13f54:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   13f5b:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   13f62:	0f b6 c0             	movzbl %al,%eax
   13f65:	83 e0 01             	and    $0x1,%eax
   13f68:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   13f6b:	68 ed 00 00 00       	push   $0xed
   13f70:	6a 60                	push   $0x60
   13f72:	e8 62 ff ff ff       	call   13ed9 <kbd_write>
   13f77:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   13f7a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13f7d:	0f b6 c0             	movzbl %al,%eax
   13f80:	50                   	push   %eax
   13f81:	6a 60                	push   $0x60
   13f83:	e8 51 ff ff ff       	call   13ed9 <kbd_write>
   13f88:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   13f8b:	e8 aa ff ff ff       	call   13f3a <kbd_read>
}
   13f90:	90                   	nop
   13f91:	c9                   	leave  
   13f92:	c3                   	ret    

00013f93 <do_fx_key>:

static void do_fx_key(int key)
{
   13f93:	55                   	push   %ebp
   13f94:	89 e5                	mov    %esp,%ebp
   13f96:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   13f99:	8b 45 08             	mov    0x8(%ebp),%eax
   13f9c:	83 e8 3b             	sub    $0x3b,%eax
   13f9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press)
   13fa2:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   13fa9:	83 e0 20             	and    $0x20,%eax
   13fac:	84 c0                	test   %al,%al
   13fae:	75 0e                	jne    13fbe <do_fx_key+0x2b>
   13fb0:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   13fb7:	83 e0 40             	and    $0x40,%eax
   13fba:	84 c0                	test   %al,%al
   13fbc:	74 0e                	je     13fcc <do_fx_key+0x39>
    {
        tty_select(index);
   13fbe:	83 ec 0c             	sub    $0xc,%esp
   13fc1:	ff 75 f4             	pushl  -0xc(%ebp)
   13fc4:	e8 e4 09 00 00       	call   149ad <tty_select>
   13fc9:	83 c4 10             	add    $0x10,%esp
    }
}
   13fcc:	90                   	nop
   13fcd:	c9                   	leave  
   13fce:	c3                   	ret    

00013fcf <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key(uint8_t raw_code)
{
   13fcf:	55                   	push   %ebp
   13fd0:	89 e5                	mov    %esp,%ebp
   13fd2:	83 ec 28             	sub    $0x28,%esp
   13fd5:	8b 45 08             	mov    0x8(%ebp),%eax
   13fd8:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);         // 去掉最高位
   13fdb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   13fdf:	50                   	push   %eax
   13fe0:	e8 90 fe ff ff       	call   13e75 <get_key>
   13fe5:	83 c4 04             	add    $0x4,%esp
   13fe8:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code); // 是否是按键按下的键值
   13feb:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   13fef:	50                   	push   %eax
   13ff0:	e8 95 fe ff ff       	call   13e8a <is_make_code>
   13ff5:	83 c4 04             	add    $0x4,%esp
   13ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
    switch (key)
   13ffb:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13fff:	83 e8 1d             	sub    $0x1d,%eax
   14002:	83 f8 25             	cmp    $0x25,%eax
   14005:	0f 87 f9 00 00 00    	ja     14104 <do_normal_key+0x135>
   1400b:	8b 04 85 80 6b 01 00 	mov    0x16b80(,%eax,4),%eax
   14012:	ff e0                	jmp    *%eax
    {
        // shift, alt, ctrl键，记录标志位
    case KEY_RSHIFT:
        kbd_state.rshift_press = is_make; // 仅设置标志位
   14014:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14017:	c1 e0 07             	shl    $0x7,%eax
   1401a:	c0 f8 07             	sar    $0x7,%al
   1401d:	83 e0 01             	and    $0x1,%eax
   14020:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14027:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   1402e:	83 e0 fb             	and    $0xfffffffb,%eax
   14031:	09 d0                	or     %edx,%eax
   14033:	a2 60 51 03 00       	mov    %al,0x35160
        break;
   14038:	e9 5f 01 00 00       	jmp    1419c <do_normal_key+0x1cd>
    case KEY_LSHIFT:
        kbd_state.lshift_press = is_make; // 仅设置标志位
   1403d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14040:	c1 e0 07             	shl    $0x7,%eax
   14043:	c0 f8 07             	sar    $0x7,%al
   14046:	83 e0 01             	and    $0x1,%eax
   14049:	8d 14 00             	lea    (%eax,%eax,1),%edx
   1404c:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   14053:	83 e0 fd             	and    $0xfffffffd,%eax
   14056:	09 d0                	or     %edx,%eax
   14058:	a2 60 51 03 00       	mov    %al,0x35160
        break;
   1405d:	e9 3a 01 00 00       	jmp    1419c <do_normal_key+0x1cd>
    case KEY_CAPS: // 大小写键，设置大小写状态
        if (is_make)
   14062:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14066:	0f 84 2c 01 00 00    	je     14198 <do_normal_key+0x1c9>
        {
            kbd_state.caps_lock = ~kbd_state.caps_lock;
   1406c:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   14073:	c1 e0 07             	shl    $0x7,%eax
   14076:	c0 f8 07             	sar    $0x7,%al
   14079:	f7 d0                	not    %eax
   1407b:	c1 e0 07             	shl    $0x7,%eax
   1407e:	c0 f8 07             	sar    $0x7,%al
   14081:	83 e0 01             	and    $0x1,%eax
   14084:	89 c2                	mov    %eax,%edx
   14086:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   1408d:	83 e0 fe             	and    $0xfffffffe,%eax
   14090:	09 d0                	or     %edx,%eax
   14092:	a2 60 51 03 00       	mov    %al,0x35160
            update_led_status();
   14097:	e8 b2 fe ff ff       	call   13f4e <update_led_status>
        }
        break;
   1409c:	e9 f7 00 00 00       	jmp    14198 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make; // 仅设置标志位
   140a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   140a4:	c1 e0 07             	shl    $0x7,%eax
   140a7:	c0 f8 07             	sar    $0x7,%al
   140aa:	83 e0 01             	and    $0x1,%eax
   140ad:	c1 e0 04             	shl    $0x4,%eax
   140b0:	89 c2                	mov    %eax,%edx
   140b2:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   140b9:	83 e0 ef             	and    $0xffffffef,%eax
   140bc:	09 d0                	or     %edx,%eax
   140be:	a2 60 51 03 00       	mov    %al,0x35160
        break;
   140c3:	e9 d4 00 00 00       	jmp    1419c <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make; // 仅设置标志位
   140c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   140cb:	c1 e0 07             	shl    $0x7,%eax
   140ce:	c0 f8 07             	sar    $0x7,%al
   140d1:	83 e0 01             	and    $0x1,%eax
   140d4:	c1 e0 05             	shl    $0x5,%eax
   140d7:	89 c2                	mov    %eax,%edx
   140d9:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   140e0:	83 e0 df             	and    $0xffffffdf,%eax
   140e3:	09 d0                	or     %edx,%eax
   140e5:	a2 60 51 03 00       	mov    %al,0x35160
        break;
   140ea:	e9 ad 00 00 00       	jmp    1419c <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
        do_fx_key(key);
   140ef:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   140f3:	83 ec 0c             	sub    $0xc,%esp
   140f6:	50                   	push   %eax
   140f7:	e8 97 fe ff ff       	call   13f93 <do_fx_key>
   140fc:	83 c4 10             	add    $0x10,%esp
        break;
   140ff:	e9 98 00 00 00       	jmp    1419c <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make)
   14104:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14108:	0f 84 8d 00 00 00    	je     1419b <do_normal_key+0x1cc>
        {
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press)
   1410e:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   14115:	83 e0 04             	and    $0x4,%eax
   14118:	84 c0                	test   %al,%al
   1411a:	75 0e                	jne    1412a <do_normal_key+0x15b>
   1411c:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   14123:	83 e0 02             	and    $0x2,%eax
   14126:	84 c0                	test   %al,%al
   14128:	74 11                	je     1413b <do_normal_key+0x16c>
            {
                key = map_table[key].func; // 第2功能
   1412a:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1412e:	0f b6 84 00 81 69 01 	movzbl 0x16981(%eax,%eax,1),%eax
   14135:	00 
   14136:	88 45 f7             	mov    %al,-0x9(%ebp)
   14139:	eb 0f                	jmp    1414a <do_normal_key+0x17b>
            }
            else
            {
                key = map_table[key].normal; // 第1功能
   1413b:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1413f:	0f b6 84 00 80 69 01 	movzbl 0x16980(%eax,%eax,1),%eax
   14146:	00 
   14147:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock)
   1414a:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   14151:	83 e0 01             	and    $0x1,%eax
   14154:	84 c0                	test   %al,%al
   14156:	74 2e                	je     14186 <do_normal_key+0x1b7>
            {
                if ((key >= 'A') && (key <= 'Z'))
   14158:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   1415c:	7e 12                	jle    14170 <do_normal_key+0x1a1>
   1415e:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14162:	7f 0c                	jg     14170 <do_normal_key+0x1a1>
                {
                    // 大写转小写
                    key = key - 'A' + 'a';
   14164:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14168:	83 c0 20             	add    $0x20,%eax
   1416b:	88 45 f7             	mov    %al,-0x9(%ebp)
   1416e:	eb 16                	jmp    14186 <do_normal_key+0x1b7>
                }
                else if ((key >= 'a') && (key <= 'z'))
   14170:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14174:	7e 10                	jle    14186 <do_normal_key+0x1b7>
   14176:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   1417a:	7f 0a                	jg     14186 <do_normal_key+0x1b7>
                {
                    // 小写转大小
                    key = key - 'a' + 'A';
   1417c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14180:	83 e8 20             	sub    $0x20,%eax
   14183:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            // log_printf("key=%c", key);
            tty_in(key);
   14186:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   1418a:	83 ec 0c             	sub    $0xc,%esp
   1418d:	50                   	push   %eax
   1418e:	e8 ad 07 00 00       	call   14940 <tty_in>
   14193:	83 c4 10             	add    $0x10,%esp
        }
        break;
   14196:	eb 03                	jmp    1419b <do_normal_key+0x1cc>
        break;
   14198:	90                   	nop
   14199:	eb 01                	jmp    1419c <do_normal_key+0x1cd>
        break;
   1419b:	90                   	nop
    }
}
   1419c:	90                   	nop
   1419d:	c9                   	leave  
   1419e:	c3                   	ret    

0001419f <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key(uint8_t raw_code)
{
   1419f:	55                   	push   %ebp
   141a0:	89 e5                	mov    %esp,%ebp
   141a2:	83 ec 14             	sub    $0x14,%esp
   141a5:	8b 45 08             	mov    0x8(%ebp),%eax
   141a8:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);          // 去掉最高位
   141ab:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   141af:	50                   	push   %eax
   141b0:	e8 c0 fc ff ff       	call   13e75 <get_key>
   141b5:	83 c4 04             	add    $0x4,%esp
   141b8:	0f be c0             	movsbl %al,%eax
   141bb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code); // 按下或释放
   141be:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   141c2:	50                   	push   %eax
   141c3:	e8 c2 fc ff ff       	call   13e8a <is_make_code>
   141c8:	83 c4 04             	add    $0x4,%esp
   141cb:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key)
   141ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   141d1:	83 f8 1d             	cmp    $0x1d,%eax
   141d4:	74 07                	je     141dd <do_e0_key+0x3e>
   141d6:	83 f8 38             	cmp    $0x38,%eax
   141d9:	74 26                	je     14201 <do_e0_key+0x62>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make; // 仅设置标志位
        break;
    }
}
   141db:	eb 49                	jmp    14226 <do_e0_key+0x87>
        kbd_state.rctrl_press = is_make; // 仅设置标志位
   141dd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   141e0:	c1 e0 07             	shl    $0x7,%eax
   141e3:	c0 f8 07             	sar    $0x7,%al
   141e6:	83 e0 01             	and    $0x1,%eax
   141e9:	c1 e0 06             	shl    $0x6,%eax
   141ec:	89 c2                	mov    %eax,%edx
   141ee:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   141f5:	83 e0 bf             	and    $0xffffffbf,%eax
   141f8:	09 d0                	or     %edx,%eax
   141fa:	a2 60 51 03 00       	mov    %al,0x35160
        break;
   141ff:	eb 25                	jmp    14226 <do_e0_key+0x87>
        kbd_state.ralt_press = is_make; // 仅设置标志位
   14201:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14204:	c1 e0 07             	shl    $0x7,%eax
   14207:	c0 f8 07             	sar    $0x7,%al
   1420a:	83 e0 01             	and    $0x1,%eax
   1420d:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14214:	0f b6 05 60 51 03 00 	movzbl 0x35160,%eax
   1421b:	83 e0 f7             	and    $0xfffffff7,%eax
   1421e:	09 d0                	or     %edx,%eax
   14220:	a2 60 51 03 00       	mov    %al,0x35160
        break;
   14225:	90                   	nop
}
   14226:	90                   	nop
   14227:	c9                   	leave  
   14228:	c3                   	ret    

00014229 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame)
{
   14229:	55                   	push   %ebp
   1422a:	89 e5                	mov    %esp,%ebp
   1422c:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, // 收到e0字符
        BEGIN_E1, // 收到e1字符
    } recv_state = NORMAL;

    // 检查是否有数据，无数据则退出
    uint8_t status = inb(KBD_PORT_STAT);
   1422f:	6a 64                	push   $0x64
   14231:	e8 03 fc ff ff       	call   13e39 <inb>
   14236:	83 c4 04             	add    $0x4,%esp
   14239:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (!(status & KBD_STAT_RECV_READY))
   1423c:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14240:	83 e0 01             	and    $0x1,%eax
   14243:	85 c0                	test   %eax,%eax
   14245:	75 12                	jne    14259 <do_handler_kbd+0x30>
    {
        pic_send_eoi(IRQ1_KEYBOARD);
   14247:	83 ec 0c             	sub    $0xc,%esp
   1424a:	6a 21                	push   $0x21
   1424c:	e8 65 eb ff ff       	call   12db6 <pic_send_eoi>
   14251:	83 c4 10             	add    $0x10,%esp
        return;
   14254:	e9 90 00 00 00       	jmp    142e9 <do_handler_kbd+0xc0>
    }

    // 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   14259:	83 ec 0c             	sub    $0xc,%esp
   1425c:	6a 60                	push   $0x60
   1425e:	e8 d6 fb ff ff       	call   13e39 <inb>
   14263:	83 c4 10             	add    $0x10,%esp
   14266:	88 45 f6             	mov    %al,-0xa(%ebp)

    // 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
    // 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   14269:	83 ec 0c             	sub    $0xc,%esp
   1426c:	6a 21                	push   $0x21
   1426e:	e8 43 eb ff ff       	call   12db6 <pic_send_eoi>
   14273:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
    if (raw_code == KEY_E0)
   14276:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   1427a:	75 0c                	jne    14288 <do_handler_kbd+0x5f>
    {
        // E0字符
        recv_state = BEGIN_E0;
   1427c:	c7 05 64 51 03 00 01 	movl   $0x1,0x35164
   14283:	00 00 00 
   14286:	eb 61                	jmp    142e9 <do_handler_kbd+0xc0>
    }
    else if (raw_code == KEY_E1)
   14288:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   1428c:	75 0c                	jne    1429a <do_handler_kbd+0x71>
    {
        // E1字符，不处理
        recv_state = BEGIN_E1;
   1428e:	c7 05 64 51 03 00 02 	movl   $0x2,0x35164
   14295:	00 00 00 
   14298:	eb 4f                	jmp    142e9 <do_handler_kbd+0xc0>
    }
    else
    {
        switch (recv_state)
   1429a:	a1 64 51 03 00       	mov    0x35164,%eax
   1429f:	83 f8 01             	cmp    $0x1,%eax
   142a2:	74 1e                	je     142c2 <do_handler_kbd+0x99>
   142a4:	83 f8 01             	cmp    $0x1,%eax
   142a7:	72 07                	jb     142b0 <do_handler_kbd+0x87>
   142a9:	83 f8 02             	cmp    $0x2,%eax
   142ac:	74 30                	je     142de <do_handler_kbd+0xb5>
   142ae:	eb 39                	jmp    142e9 <do_handler_kbd+0xc0>
        {
        case NORMAL:
            do_normal_key(raw_code);
   142b0:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   142b4:	83 ec 0c             	sub    $0xc,%esp
   142b7:	50                   	push   %eax
   142b8:	e8 12 fd ff ff       	call   13fcf <do_normal_key>
   142bd:	83 c4 10             	add    $0x10,%esp
            break;
   142c0:	eb 27                	jmp    142e9 <do_handler_kbd+0xc0>
        case BEGIN_E0: // 不处理print scr
            do_e0_key(raw_code);
   142c2:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   142c6:	83 ec 0c             	sub    $0xc,%esp
   142c9:	50                   	push   %eax
   142ca:	e8 d0 fe ff ff       	call   1419f <do_e0_key>
   142cf:	83 c4 10             	add    $0x10,%esp
            recv_state = NORMAL;
   142d2:	c7 05 64 51 03 00 00 	movl   $0x0,0x35164
   142d9:	00 00 00 
            break;
   142dc:	eb 0b                	jmp    142e9 <do_handler_kbd+0xc0>
        case BEGIN_E1: // 不处理pause
            recv_state = NORMAL;
   142de:	c7 05 64 51 03 00 00 	movl   $0x0,0x35164
   142e5:	00 00 00 
            break;
   142e8:	90                   	nop
        }
    }
}
   142e9:	c9                   	leave  
   142ea:	c3                   	ret    

000142eb <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void)
{
   142eb:	55                   	push   %ebp
   142ec:	89 e5                	mov    %esp,%ebp
   142ee:	83 ec 08             	sub    $0x8,%esp
    // 限制只调用一次
    static int inited = 0;

    if (!inited)
   142f1:	a1 68 51 03 00       	mov    0x35168,%eax
   142f6:	85 c0                	test   %eax,%eax
   142f8:	75 2e                	jne    14328 <kbd_init+0x3d>
    {
        update_led_status();
   142fa:	e8 4f fc ff ff       	call   13f4e <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   142ff:	83 ec 08             	sub    $0x8,%esp
   14302:	68 b2 02 01 00       	push   $0x102b2
   14307:	6a 21                	push   $0x21
   14309:	e8 46 e9 ff ff       	call   12c54 <irq_install>
   1430e:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   14311:	83 ec 0c             	sub    $0xc,%esp
   14314:	6a 21                	push   $0x21
   14316:	e8 73 e9 ff ff       	call   12c8e <irq_enable>
   1431b:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   1431e:	c7 05 68 51 03 00 01 	movl   $0x1,0x35168
   14325:	00 00 00 
    }
   14328:	90                   	nop
   14329:	c9                   	leave  
   1432a:	c3                   	ret    

0001432b <outb>:
{
   1432b:	55                   	push   %ebp
   1432c:	89 e5                	mov    %esp,%ebp
   1432e:	83 ec 08             	sub    $0x8,%esp
   14331:	8b 55 08             	mov    0x8(%ebp),%edx
   14334:	8b 45 0c             	mov    0xc(%ebp),%eax
   14337:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1433b:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   1433e:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14342:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14346:	ee                   	out    %al,(%dx)
}
   14347:	90                   	nop
   14348:	c9                   	leave  
   14349:	c3                   	ret    

0001434a <init_pic>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
static void init_pic(void)
{
   1434a:	55                   	push   %ebp
   1434b:	89 e5                	mov    %esp,%ebp
   1434d:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS); // 每隔10ms+1
   14350:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   14357:	6a 36                	push   $0x36
   14359:	6a 43                	push   $0x43
   1435b:	e8 cb ff ff ff       	call   1432b <outb>
   14360:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);        // 加载低8位
   14363:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14366:	0f b6 c0             	movzbl %al,%eax
   14369:	50                   	push   %eax
   1436a:	6a 40                	push   $0x40
   1436c:	e8 ba ff ff ff       	call   1432b <outb>
   14371:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   14374:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14377:	c1 e8 08             	shr    $0x8,%eax
   1437a:	0f b6 c0             	movzbl %al,%eax
   1437d:	50                   	push   %eax
   1437e:	6a 40                	push   $0x40
   14380:	e8 a6 ff ff ff       	call   1432b <outb>
   14385:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   14388:	83 ec 08             	sub    $0x8,%esp
   1438b:	68 93 02 01 00       	push   $0x10293
   14390:	6a 20                	push   $0x20
   14392:	e8 bd e8 ff ff       	call   12c54 <irq_install>
   14397:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1439a:	83 ec 0c             	sub    $0xc,%esp
   1439d:	6a 20                	push   $0x20
   1439f:	e8 ea e8 ff ff       	call   12c8e <irq_enable>
   143a4:	83 c4 10             	add    $0x10,%esp
}
   143a7:	90                   	nop
   143a8:	c9                   	leave  
   143a9:	c3                   	ret    

000143aa <do_handler_timer>:
void do_handler_timer(exception_frame_t *frame)
{
   143aa:	55                   	push   %ebp
   143ab:	89 e5                	mov    %esp,%ebp
   143ad:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   143b0:	a1 6c 51 03 00       	mov    0x3516c,%eax
   143b5:	83 c0 01             	add    $0x1,%eax
   143b8:	a3 6c 51 03 00       	mov    %eax,0x3516c
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   143bd:	83 ec 0c             	sub    $0xc,%esp
   143c0:	6a 20                	push   $0x20
   143c2:	e8 ef e9 ff ff       	call   12db6 <pic_send_eoi>
   143c7:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   143ca:	e8 bb d2 ff ff       	call   1168a <task_time_tick>
}
   143cf:	90                   	nop
   143d0:	c9                   	leave  
   143d1:	c3                   	ret    

000143d2 <time_init>:
void time_init(void)
{
   143d2:	55                   	push   %ebp
   143d3:	89 e5                	mov    %esp,%ebp
   143d5:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   143d8:	c7 05 6c 51 03 00 00 	movl   $0x0,0x3516c
   143df:	00 00 00 
    init_pic();
   143e2:	e8 63 ff ff ff       	call   1434a <init_pic>
   143e7:	90                   	nop
   143e8:	c9                   	leave  
   143e9:	c3                   	ret    

000143ea <tty_fifo_init>:

/**
 * @brief FIFO初始化
 */
void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size)
{
   143ea:	55                   	push   %ebp
   143eb:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   143ed:	8b 45 08             	mov    0x8(%ebp),%eax
   143f0:	8b 55 0c             	mov    0xc(%ebp),%edx
   143f3:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   143f5:	8b 45 08             	mov    0x8(%ebp),%eax
   143f8:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   143ff:	8b 45 08             	mov    0x8(%ebp),%eax
   14402:	8b 55 10             	mov    0x10(%ebp),%edx
   14405:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   14408:	8b 45 08             	mov    0x8(%ebp),%eax
   1440b:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   14412:	8b 45 08             	mov    0x8(%ebp),%eax
   14415:	8b 50 0c             	mov    0xc(%eax),%edx
   14418:	8b 45 08             	mov    0x8(%ebp),%eax
   1441b:	89 50 08             	mov    %edx,0x8(%eax)
}
   1441e:	90                   	nop
   1441f:	5d                   	pop    %ebp
   14420:	c3                   	ret    

00014421 <tty_fifo_get>:

/**
 * @brief 取一字节数据
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c)
{
   14421:	55                   	push   %ebp
   14422:	89 e5                	mov    %esp,%ebp
   14424:	53                   	push   %ebx
   14425:	83 ec 14             	sub    $0x14,%esp
    if (fifo->count <= 0)
   14428:	8b 45 08             	mov    0x8(%ebp),%eax
   1442b:	8b 40 10             	mov    0x10(%eax),%eax
   1442e:	85 c0                	test   %eax,%eax
   14430:	7f 07                	jg     14439 <tty_fifo_get+0x18>
    {
        return -1;
   14432:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14437:	eb 62                	jmp    1449b <tty_fifo_get+0x7a>
    }

    irq_state_t state = irq_enter_protection();
   14439:	e8 a3 e9 ff ff       	call   12de1 <irq_enter_protection>
   1443e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *c = fifo->buf[fifo->read++];
   14441:	8b 45 08             	mov    0x8(%ebp),%eax
   14444:	8b 18                	mov    (%eax),%ebx
   14446:	8b 45 08             	mov    0x8(%ebp),%eax
   14449:	8b 40 08             	mov    0x8(%eax),%eax
   1444c:	8d 48 01             	lea    0x1(%eax),%ecx
   1444f:	8b 55 08             	mov    0x8(%ebp),%edx
   14452:	89 4a 08             	mov    %ecx,0x8(%edx)
   14455:	01 d8                	add    %ebx,%eax
   14457:	0f b6 10             	movzbl (%eax),%edx
   1445a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1445d:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size)
   1445f:	8b 45 08             	mov    0x8(%ebp),%eax
   14462:	8b 50 08             	mov    0x8(%eax),%edx
   14465:	8b 45 08             	mov    0x8(%ebp),%eax
   14468:	8b 40 04             	mov    0x4(%eax),%eax
   1446b:	39 c2                	cmp    %eax,%edx
   1446d:	7c 0a                	jl     14479 <tty_fifo_get+0x58>
    {
        fifo->read = 0;
   1446f:	8b 45 08             	mov    0x8(%ebp),%eax
   14472:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    fifo->count--;
   14479:	8b 45 08             	mov    0x8(%ebp),%eax
   1447c:	8b 40 10             	mov    0x10(%eax),%eax
   1447f:	8d 50 ff             	lea    -0x1(%eax),%edx
   14482:	8b 45 08             	mov    0x8(%ebp),%eax
   14485:	89 50 10             	mov    %edx,0x10(%eax)
    irq_leave_protection(state);
   14488:	83 ec 0c             	sub    $0xc,%esp
   1448b:	ff 75 f4             	pushl  -0xc(%ebp)
   1448e:	e8 66 e9 ff ff       	call   12df9 <irq_leave_protection>
   14493:	83 c4 10             	add    $0x10,%esp
    return 0;
   14496:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1449b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1449e:	c9                   	leave  
   1449f:	c3                   	ret    

000144a0 <tty_fifo_put>:

/**
 * @brief 写一字节数据
 */
int tty_fifo_put(tty_fifo_t *fifo, char c)
{
   144a0:	55                   	push   %ebp
   144a1:	89 e5                	mov    %esp,%ebp
   144a3:	53                   	push   %ebx
   144a4:	83 ec 24             	sub    $0x24,%esp
   144a7:	8b 45 0c             	mov    0xc(%ebp),%eax
   144aa:	88 45 e4             	mov    %al,-0x1c(%ebp)
    if (fifo->count >= fifo->size)
   144ad:	8b 45 08             	mov    0x8(%ebp),%eax
   144b0:	8b 50 10             	mov    0x10(%eax),%edx
   144b3:	8b 45 08             	mov    0x8(%ebp),%eax
   144b6:	8b 40 04             	mov    0x4(%eax),%eax
   144b9:	39 c2                	cmp    %eax,%edx
   144bb:	7c 07                	jl     144c4 <tty_fifo_put+0x24>
    {
        return -1;
   144bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   144c2:	eb 61                	jmp    14525 <tty_fifo_put+0x85>
    }

    irq_state_t state = irq_enter_protection();
   144c4:	e8 18 e9 ff ff       	call   12de1 <irq_enter_protection>
   144c9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fifo->buf[fifo->write++] = c;
   144cc:	8b 45 08             	mov    0x8(%ebp),%eax
   144cf:	8b 18                	mov    (%eax),%ebx
   144d1:	8b 45 08             	mov    0x8(%ebp),%eax
   144d4:	8b 40 0c             	mov    0xc(%eax),%eax
   144d7:	8d 48 01             	lea    0x1(%eax),%ecx
   144da:	8b 55 08             	mov    0x8(%ebp),%edx
   144dd:	89 4a 0c             	mov    %ecx,0xc(%edx)
   144e0:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   144e3:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   144e7:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size)
   144e9:	8b 45 08             	mov    0x8(%ebp),%eax
   144ec:	8b 50 0c             	mov    0xc(%eax),%edx
   144ef:	8b 45 08             	mov    0x8(%ebp),%eax
   144f2:	8b 40 04             	mov    0x4(%eax),%eax
   144f5:	39 c2                	cmp    %eax,%edx
   144f7:	7c 0a                	jl     14503 <tty_fifo_put+0x63>
    {
        fifo->write = 0;
   144f9:	8b 45 08             	mov    0x8(%ebp),%eax
   144fc:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }
    fifo->count++;
   14503:	8b 45 08             	mov    0x8(%ebp),%eax
   14506:	8b 40 10             	mov    0x10(%eax),%eax
   14509:	8d 50 01             	lea    0x1(%eax),%edx
   1450c:	8b 45 08             	mov    0x8(%ebp),%eax
   1450f:	89 50 10             	mov    %edx,0x10(%eax)
    irq_leave_protection(state);
   14512:	83 ec 0c             	sub    $0xc,%esp
   14515:	ff 75 f4             	pushl  -0xc(%ebp)
   14518:	e8 dc e8 ff ff       	call   12df9 <irq_leave_protection>
   1451d:	83 c4 10             	add    $0x10,%esp

    return 0;
   14520:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14525:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14528:	c9                   	leave  
   14529:	c3                   	ret    

0001452a <get_tty>:

/**
 * @brief 判断tty是否有效
 */
static inline tty_t *get_tty(device_t *dev)
{
   1452a:	55                   	push   %ebp
   1452b:	89 e5                	mov    %esp,%ebp
   1452d:	83 ec 18             	sub    $0x18,%esp
    int tty = dev->minor;
   14530:	8b 45 08             	mov    0x8(%ebp),%eax
   14533:	8b 40 08             	mov    0x8(%eax),%eax
   14536:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count))
   14539:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1453d:	78 10                	js     1454f <get_tty+0x25>
   1453f:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   14543:	7f 0a                	jg     1454f <get_tty+0x25>
   14545:	8b 45 08             	mov    0x8(%ebp),%eax
   14548:	8b 40 10             	mov    0x10(%eax),%eax
   1454b:	85 c0                	test   %eax,%eax
   1454d:	75 1a                	jne    14569 <get_tty+0x3f>
    {
        log_printf("tty is not opened. tty = %d", tty);
   1454f:	83 ec 08             	sub    $0x8,%esp
   14552:	ff 75 f4             	pushl  -0xc(%ebp)
   14555:	68 18 6c 01 00       	push   $0x16c18
   1455a:	e8 67 18 00 00       	call   15dc6 <log_printf>
   1455f:	83 c4 10             	add    $0x10,%esp
        return (tty_t *)0;
   14562:	b8 00 00 00 00       	mov    $0x0,%eax
   14567:	eb 0e                	jmp    14577 <get_tty+0x4d>
    }

    return tty_devs + tty;
   14569:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1456c:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14572:	05 80 51 03 00       	add    $0x35180,%eax
}
   14577:	c9                   	leave  
   14578:	c3                   	ret    

00014579 <tty_open>:

/**
 * @brief 打开tty设备
 */
int tty_open(device_t *dev)
{
   14579:	55                   	push   %ebp
   1457a:	89 e5                	mov    %esp,%ebp
   1457c:	83 ec 18             	sub    $0x18,%esp
    int idx = dev->minor;
   1457f:	8b 45 08             	mov    0x8(%ebp),%eax
   14582:	8b 40 08             	mov    0x8(%eax),%eax
   14585:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((idx < 0) || (idx >= TTY_NR))
   14588:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1458c:	78 06                	js     14594 <tty_open+0x1b>
   1458e:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   14592:	7e 1d                	jle    145b1 <tty_open+0x38>
    {
        log_printf("open tty failed. incorrect tty num = %d", idx);
   14594:	83 ec 08             	sub    $0x8,%esp
   14597:	ff 75 f4             	pushl  -0xc(%ebp)
   1459a:	68 34 6c 01 00       	push   $0x16c34
   1459f:	e8 22 18 00 00       	call   15dc6 <log_printf>
   145a4:	83 c4 10             	add    $0x10,%esp
        return -1;
   145a7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   145ac:	e9 bf 00 00 00       	jmp    14670 <tty_open+0xf7>
    }

    tty_t *tty = tty_devs + idx;
   145b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145b4:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   145ba:	05 80 51 03 00       	add    $0x35180,%eax
   145bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   145c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145c5:	8b 55 f0             	mov    -0x10(%ebp),%edx
   145c8:	81 c2 00 02 00 00    	add    $0x200,%edx
   145ce:	83 ec 04             	sub    $0x4,%esp
   145d1:	68 00 02 00 00       	push   $0x200
   145d6:	50                   	push   %eax
   145d7:	52                   	push   %edx
   145d8:	e8 0d fe ff ff       	call   143ea <tty_fifo_init>
   145dd:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->osem, TTY_OBUF_SIZE);
   145e0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145e3:	05 14 02 00 00       	add    $0x214,%eax
   145e8:	83 ec 08             	sub    $0x8,%esp
   145eb:	68 00 02 00 00       	push   $0x200
   145f0:	50                   	push   %eax
   145f1:	e8 93 0c 00 00       	call   15289 <sem_init>
   145f6:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   145f9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145fc:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   14602:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14605:	05 24 04 00 00       	add    $0x424,%eax
   1460a:	83 ec 04             	sub    $0x4,%esp
   1460d:	68 00 02 00 00       	push   $0x200
   14612:	52                   	push   %edx
   14613:	50                   	push   %eax
   14614:	e8 d1 fd ff ff       	call   143ea <tty_fifo_init>
   14619:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->isem, 0);
   1461c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1461f:	05 38 04 00 00       	add    $0x438,%eax
   14624:	83 ec 08             	sub    $0x8,%esp
   14627:	6a 00                	push   $0x0
   14629:	50                   	push   %eax
   1462a:	e8 5a 0c 00 00       	call   15289 <sem_init>
   1462f:	83 c4 10             	add    $0x10,%esp

    tty->iflags = TTY_INLCR | TTY_IECHO;
   14632:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14635:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   1463c:	00 00 00 
    tty->oflags = TTY_OCRLF;
   1463f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14642:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   14649:	00 00 00 

    tty->console_idx = idx;
   1464c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1464f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14652:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

    kbd_init();
   14658:	e8 8e fc ff ff       	call   142eb <kbd_init>
    console_init(idx);
   1465d:	83 ec 0c             	sub    $0xc,%esp
   14660:	ff 75 f4             	pushl  -0xc(%ebp)
   14663:	e8 3f ec ff ff       	call   132a7 <console_init>
   14668:	83 c4 10             	add    $0x10,%esp
    return 0;
   1466b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14670:	c9                   	leave  
   14671:	c3                   	ret    

00014672 <tty_write>:

/**
 * @brief 向tty写入数据
 */
int tty_write(device_t *dev, int addr, char *buf, int size)
{
   14672:	55                   	push   %ebp
   14673:	89 e5                	mov    %esp,%ebp
   14675:	83 ec 28             	sub    $0x28,%esp
    if (size < 0)
   14678:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1467c:	79 0a                	jns    14688 <tty_write+0x16>
    {
        return -1;
   1467e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14683:	e9 d5 00 00 00       	jmp    1475d <tty_write+0xeb>
    }

    tty_t *tty = get_tty(dev);
   14688:	83 ec 0c             	sub    $0xc,%esp
   1468b:	ff 75 08             	pushl  0x8(%ebp)
   1468e:	e8 97 fe ff ff       	call   1452a <get_tty>
   14693:	83 c4 10             	add    $0x10,%esp
   14696:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int len = 0;
   14699:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    // 先将所有数据写入缓存中
    while (size)
   146a0:	e9 a5 00 00 00       	jmp    1474a <tty_write+0xd8>
    {
        char c = *buf++;
   146a5:	8b 45 10             	mov    0x10(%ebp),%eax
   146a8:	8d 50 01             	lea    0x1(%eax),%edx
   146ab:	89 55 10             	mov    %edx,0x10(%ebp)
   146ae:	0f b6 00             	movzbl (%eax),%eax
   146b1:	88 45 ef             	mov    %al,-0x11(%ebp)

        // 如果遇到\n，根据配置决定是否转换成\r\n
        if (c == '\n' && (tty->oflags & TTY_OCRLF))
   146b4:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   146b8:	75 43                	jne    146fd <tty_write+0x8b>
   146ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146bd:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   146c3:	83 e0 01             	and    $0x1,%eax
   146c6:	85 c0                	test   %eax,%eax
   146c8:	74 33                	je     146fd <tty_write+0x8b>
        {
            sem_wait(&tty->osem);
   146ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146cd:	05 14 02 00 00       	add    $0x214,%eax
   146d2:	83 ec 0c             	sub    $0xc,%esp
   146d5:	50                   	push   %eax
   146d6:	e8 d1 0b 00 00       	call   152ac <sem_wait>
   146db:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->ofifo, '\r');
   146de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146e1:	05 00 02 00 00       	add    $0x200,%eax
   146e6:	83 ec 08             	sub    $0x8,%esp
   146e9:	6a 0d                	push   $0xd
   146eb:	50                   	push   %eax
   146ec:	e8 af fd ff ff       	call   144a0 <tty_fifo_put>
   146f1:	83 c4 10             	add    $0x10,%esp
   146f4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0)
   146f7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   146fb:	78 59                	js     14756 <tty_write+0xe4>
                break;
            }
        }

        // 写入当前字符
        sem_wait(&tty->osem);
   146fd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14700:	05 14 02 00 00       	add    $0x214,%eax
   14705:	83 ec 0c             	sub    $0xc,%esp
   14708:	50                   	push   %eax
   14709:	e8 9e 0b 00 00       	call   152ac <sem_wait>
   1470e:	83 c4 10             	add    $0x10,%esp
        int err = tty_fifo_put(&tty->ofifo, c);
   14711:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   14715:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14718:	81 c2 00 02 00 00    	add    $0x200,%edx
   1471e:	83 ec 08             	sub    $0x8,%esp
   14721:	50                   	push   %eax
   14722:	52                   	push   %edx
   14723:	e8 78 fd ff ff       	call   144a0 <tty_fifo_put>
   14728:	83 c4 10             	add    $0x10,%esp
   1472b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   1472e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   14732:	78 25                	js     14759 <tty_write+0xe7>
        {
            break;
        }

        len++;
   14734:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   14738:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        // 启动输出, 这里是直接由console直接输出，无需中断
        console_write(tty);
   1473c:	83 ec 0c             	sub    $0xc,%esp
   1473f:	ff 75 f0             	pushl  -0x10(%ebp)
   14742:	e8 ed f2 ff ff       	call   13a34 <console_write>
   14747:	83 c4 10             	add    $0x10,%esp
    while (size)
   1474a:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1474e:	0f 85 51 ff ff ff    	jne    146a5 <tty_write+0x33>
   14754:	eb 04                	jmp    1475a <tty_write+0xe8>
                break;
   14756:	90                   	nop
   14757:	eb 01                	jmp    1475a <tty_write+0xe8>
            break;
   14759:	90                   	nop
    }

    return len;
   1475a:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   1475d:	c9                   	leave  
   1475e:	c3                   	ret    

0001475f <tty_read>:

/**
 * @brief 从tty读取数据
 */
int tty_read(device_t *dev, int addr, char *buf, int size)
{
   1475f:	55                   	push   %ebp
   14760:	89 e5                	mov    %esp,%ebp
   14762:	83 ec 18             	sub    $0x18,%esp
    if (size < 0)
   14765:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14769:	79 0a                	jns    14775 <tty_read+0x16>
    {
        return -1;
   1476b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14770:	e9 09 01 00 00       	jmp    1487e <tty_read+0x11f>
    }

    tty_t *tty = get_tty(dev);
   14775:	83 ec 0c             	sub    $0xc,%esp
   14778:	ff 75 08             	pushl  0x8(%ebp)
   1477b:	e8 aa fd ff ff       	call   1452a <get_tty>
   14780:	83 c4 10             	add    $0x10,%esp
   14783:	89 45 ec             	mov    %eax,-0x14(%ebp)
    char *pbuf = buf;
   14786:	8b 45 10             	mov    0x10(%ebp),%eax
   14789:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   1478c:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 不断读取，直到遇到文件结束符或者行结束符
    while (len < size)
   14793:	e9 d7 00 00 00       	jmp    1486f <tty_read+0x110>
    {
        // 等待可用的数据
        sem_wait(&tty->isem);
   14798:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1479b:	05 38 04 00 00       	add    $0x438,%eax
   147a0:	83 ec 0c             	sub    $0xc,%esp
   147a3:	50                   	push   %eax
   147a4:	e8 03 0b 00 00       	call   152ac <sem_wait>
   147a9:	83 c4 10             	add    $0x10,%esp

        // 取出数据
        char ch;
        tty_fifo_get(&tty->ififo, &ch);
   147ac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   147af:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   147b5:	83 ec 08             	sub    $0x8,%esp
   147b8:	8d 45 eb             	lea    -0x15(%ebp),%eax
   147bb:	50                   	push   %eax
   147bc:	52                   	push   %edx
   147bd:	e8 5f fc ff ff       	call   14421 <tty_fifo_get>
   147c2:	83 c4 10             	add    $0x10,%esp
        switch (ch)
   147c5:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   147c9:	0f be c0             	movsbl %al,%eax
   147cc:	83 f8 0a             	cmp    $0xa,%eax
   147cf:	74 1a                	je     147eb <tty_read+0x8c>
   147d1:	83 f8 7f             	cmp    $0x7f,%eax
   147d4:	75 52                	jne    14828 <tty_read+0xc9>
        {
        case ASCII_DEL:
            if (len == 0)
   147d6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   147da:	75 05                	jne    147e1 <tty_read+0x82>
   147dc:	e9 8e 00 00 00       	jmp    1486f <tty_read+0x110>
            {
                continue;
            }
            len--;
   147e1:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            pbuf--;
   147e5:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
            break;
   147e9:	eb 51                	jmp    1483c <tty_read+0xdd>
        case '\n':
            if ((tty->iflags & TTY_INLCR) && (len < size - 1))
   147eb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   147ee:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   147f4:	83 e0 01             	and    $0x1,%eax
   147f7:	85 c0                	test   %eax,%eax
   147f9:	74 1b                	je     14816 <tty_read+0xb7>
   147fb:	8b 45 14             	mov    0x14(%ebp),%eax
   147fe:	83 e8 01             	sub    $0x1,%eax
   14801:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14804:	7d 10                	jge    14816 <tty_read+0xb7>
            { // \n变成\r\n
                *pbuf++ = '\r';
   14806:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14809:	8d 50 01             	lea    0x1(%eax),%edx
   1480c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1480f:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   14812:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *pbuf++ = '\n';
   14816:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14819:	8d 50 01             	lea    0x1(%eax),%edx
   1481c:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1481f:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   14822:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   14826:	eb 14                	jmp    1483c <tty_read+0xdd>
        default:
            *pbuf++ = ch;
   14828:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1482b:	8d 50 01             	lea    0x1(%eax),%edx
   1482e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   14831:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   14835:	88 10                	mov    %dl,(%eax)
            len++;
   14837:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   1483b:	90                   	nop
        }

        if (tty->iflags & TTY_IECHO)
   1483c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1483f:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   14845:	83 e0 04             	and    $0x4,%eax
   14848:	85 c0                	test   %eax,%eax
   1484a:	74 13                	je     1485f <tty_read+0x100>
        {
            tty_write(dev, 0, &ch, 1);
   1484c:	6a 01                	push   $0x1
   1484e:	8d 45 eb             	lea    -0x15(%ebp),%eax
   14851:	50                   	push   %eax
   14852:	6a 00                	push   $0x0
   14854:	ff 75 08             	pushl  0x8(%ebp)
   14857:	e8 16 fe ff ff       	call   14672 <tty_write>
   1485c:	83 c4 10             	add    $0x10,%esp
            // tty_fifo_put(&tty->ofifo, ch);
        }

        // 遇到一行结束，也直接跳出
        if ((ch == '\r') || (ch == '\n'))
   1485f:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   14863:	3c 0d                	cmp    $0xd,%al
   14865:	74 14                	je     1487b <tty_read+0x11c>
   14867:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1486b:	3c 0a                	cmp    $0xa,%al
   1486d:	74 0c                	je     1487b <tty_read+0x11c>
    while (len < size)
   1486f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14872:	3b 45 14             	cmp    0x14(%ebp),%eax
   14875:	0f 8c 1d ff ff ff    	jl     14798 <tty_read+0x39>
        {
            break;
        }
    }

    return len;
   1487b:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1487e:	c9                   	leave  
   1487f:	c3                   	ret    

00014880 <tty_control>:

/**
 * @brief 向tty设备发送命令
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1)
{
   14880:	55                   	push   %ebp
   14881:	89 e5                	mov    %esp,%ebp
   14883:	53                   	push   %ebx
   14884:	83 ec 14             	sub    $0x14,%esp
    tty_t *tty = get_tty(dev);
   14887:	83 ec 0c             	sub    $0xc,%esp
   1488a:	ff 75 08             	pushl  0x8(%ebp)
   1488d:	e8 98 fc ff ff       	call   1452a <get_tty>
   14892:	83 c4 10             	add    $0x10,%esp
   14895:	89 45 f4             	mov    %eax,-0xc(%ebp)

    switch (cmd)
   14898:	8b 45 0c             	mov    0xc(%ebp),%eax
   1489b:	83 f8 01             	cmp    $0x1,%eax
   1489e:	74 0a                	je     148aa <tty_control+0x2a>
   148a0:	83 f8 02             	cmp    $0x2,%eax
   148a3:	74 6b                	je     14910 <tty_control+0x90>
        {
            *(int *)arg0 = sem_count(&tty->isem);
        }
        break;
    default:
        break;
   148a5:	e9 86 00 00 00       	jmp    14930 <tty_control+0xb0>
        if (arg0)
   148aa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   148ae:	74 30                	je     148e0 <tty_control+0x60>
            tty->iflags |= TTY_IECHO;
   148b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148b3:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   148b9:	83 c8 04             	or     $0x4,%eax
   148bc:	89 c2                	mov    %eax,%edx
   148be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148c1:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
            console_set_cursor(tty->console_idx, 1);
   148c7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148ca:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   148d0:	83 ec 08             	sub    $0x8,%esp
   148d3:	6a 01                	push   $0x1
   148d5:	50                   	push   %eax
   148d6:	e8 89 f0 ff ff       	call   13964 <console_set_cursor>
   148db:	83 c4 10             	add    $0x10,%esp
        break;
   148de:	eb 50                	jmp    14930 <tty_control+0xb0>
            tty->iflags &= ~TTY_IECHO;
   148e0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148e3:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   148e9:	83 e0 fb             	and    $0xfffffffb,%eax
   148ec:	89 c2                	mov    %eax,%edx
   148ee:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148f1:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
            console_set_cursor(tty->console_idx, 0);
   148f7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   148fa:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   14900:	83 ec 08             	sub    $0x8,%esp
   14903:	6a 00                	push   $0x0
   14905:	50                   	push   %eax
   14906:	e8 59 f0 ff ff       	call   13964 <console_set_cursor>
   1490b:	83 c4 10             	add    $0x10,%esp
        break;
   1490e:	eb 20                	jmp    14930 <tty_control+0xb0>
        if (arg0)
   14910:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14914:	74 19                	je     1492f <tty_control+0xaf>
            *(int *)arg0 = sem_count(&tty->isem);
   14916:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14919:	05 38 04 00 00       	add    $0x438,%eax
   1491e:	8b 5d 10             	mov    0x10(%ebp),%ebx
   14921:	83 ec 0c             	sub    $0xc,%esp
   14924:	50                   	push   %eax
   14925:	e8 6f 0a 00 00       	call   15399 <sem_count>
   1492a:	83 c4 10             	add    $0x10,%esp
   1492d:	89 03                	mov    %eax,(%ebx)
        break;
   1492f:	90                   	nop
    }
    return 0;
   14930:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14935:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14938:	c9                   	leave  
   14939:	c3                   	ret    

0001493a <tty_close>:

/**
 * @brief 关闭tty设备
 */
void tty_close(device_t *dev)
{
   1493a:	55                   	push   %ebp
   1493b:	89 e5                	mov    %esp,%ebp
}
   1493d:	90                   	nop
   1493e:	5d                   	pop    %ebp
   1493f:	c3                   	ret    

00014940 <tty_in>:

/**
 * @brief 输入tty字符
 */
void tty_in(char ch)
{
   14940:	55                   	push   %ebp
   14941:	89 e5                	mov    %esp,%ebp
   14943:	83 ec 28             	sub    $0x28,%esp
   14946:	8b 45 08             	mov    0x8(%ebp),%eax
   14949:	88 45 e4             	mov    %al,-0x1c(%ebp)
    tty_t *tty = tty_devs + curr_tty;
   1494c:	a1 20 74 03 00       	mov    0x37420,%eax
   14951:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   14957:	05 80 51 03 00       	add    $0x35180,%eax
   1495c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 辅助队列要有空闲空间可代写入
    if (sem_count(&tty->isem) >= TTY_IBUF_SIZE)
   1495f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14962:	05 38 04 00 00       	add    $0x438,%eax
   14967:	83 ec 0c             	sub    $0xc,%esp
   1496a:	50                   	push   %eax
   1496b:	e8 29 0a 00 00       	call   15399 <sem_count>
   14970:	83 c4 10             	add    $0x10,%esp
   14973:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   14978:	7f 30                	jg     149aa <tty_in+0x6a>
    {
        return;
    }

    // 写入辅助队列，通知数据到达
    tty_fifo_put(&tty->ififo, ch);
   1497a:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   1497e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14981:	81 c2 24 04 00 00    	add    $0x424,%edx
   14987:	83 ec 08             	sub    $0x8,%esp
   1498a:	50                   	push   %eax
   1498b:	52                   	push   %edx
   1498c:	e8 0f fb ff ff       	call   144a0 <tty_fifo_put>
   14991:	83 c4 10             	add    $0x10,%esp
    sem_notify(&tty->isem);
   14994:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14997:	05 38 04 00 00       	add    $0x438,%eax
   1499c:	83 ec 0c             	sub    $0xc,%esp
   1499f:	50                   	push   %eax
   149a0:	e8 72 09 00 00       	call   15317 <sem_notify>
   149a5:	83 c4 10             	add    $0x10,%esp
   149a8:	eb 01                	jmp    149ab <tty_in+0x6b>
        return;
   149aa:	90                   	nop
}
   149ab:	c9                   	leave  
   149ac:	c3                   	ret    

000149ad <tty_select>:

/**
 * @brief 选择tty
 */
void tty_select(int tty)
{
   149ad:	55                   	push   %ebp
   149ae:	89 e5                	mov    %esp,%ebp
   149b0:	83 ec 08             	sub    $0x8,%esp
    if (tty != curr_tty)
   149b3:	a1 20 74 03 00       	mov    0x37420,%eax
   149b8:	39 45 08             	cmp    %eax,0x8(%ebp)
   149bb:	74 16                	je     149d3 <tty_select+0x26>
    {
        console_select(tty);
   149bd:	83 ec 0c             	sub    $0xc,%esp
   149c0:	ff 75 08             	pushl  0x8(%ebp)
   149c3:	e8 e5 ee ff ff       	call   138ad <console_select>
   149c8:	83 c4 10             	add    $0x10,%esp
        curr_tty = tty;
   149cb:	8b 45 08             	mov    0x8(%ebp),%eax
   149ce:	a3 20 74 03 00       	mov    %eax,0x37420
    }
}
   149d3:	90                   	nop
   149d4:	c9                   	leave  
   149d5:	c3                   	ret    

000149d6 <file_alloc>:

/**
 * @brief 分配一个文件描述符
 */
file_t *file_alloc(void)
{
   149d6:	55                   	push   %ebp
   149d7:	89 e5                	mov    %esp,%ebp
   149d9:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t *)0;
   149dc:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   149e3:	83 ec 0c             	sub    $0xc,%esp
   149e6:	68 40 b4 05 00       	push   $0x5b440
   149eb:	e8 3d 07 00 00       	call   1512d <mutex_lock>
   149f0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++)
   149f3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   149fa:	eb 47                	jmp    14a43 <file_alloc+0x6d>
    {
        file_t *p_file = file_table + i;
   149fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
   149ff:	89 d0                	mov    %edx,%eax
   14a01:	c1 e0 03             	shl    $0x3,%eax
   14a04:	01 d0                	add    %edx,%eax
   14a06:	c1 e0 03             	shl    $0x3,%eax
   14a09:	05 40 74 03 00       	add    $0x37440,%eax
   14a0e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0)
   14a11:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a14:	8b 40 28             	mov    0x28(%eax),%eax
   14a17:	85 c0                	test   %eax,%eax
   14a19:	75 24                	jne    14a3f <file_alloc+0x69>
        {
            kernel_memset(p_file, 0, sizeof(file_t));
   14a1b:	83 ec 04             	sub    $0x4,%esp
   14a1e:	6a 48                	push   $0x48
   14a20:	6a 00                	push   $0x0
   14a22:	ff 75 ec             	pushl  -0x14(%ebp)
   14a25:	e8 a3 0d 00 00       	call   157cd <kernel_memset>
   14a2a:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   14a2d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a30:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
            file = p_file;
   14a37:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   14a3d:	eb 0d                	jmp    14a4c <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++)
   14a3f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   14a43:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   14a4a:	7e b0                	jle    149fc <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   14a4c:	83 ec 0c             	sub    $0xc,%esp
   14a4f:	68 40 b4 05 00       	push   $0x5b440
   14a54:	e8 68 07 00 00       	call   151c1 <mutex_unlock>
   14a59:	83 c4 10             	add    $0x10,%esp
    return file;
   14a5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14a5f:	c9                   	leave  
   14a60:	c3                   	ret    

00014a61 <file_free>:

/**
 * @brief 释放文件描述符
 */
void file_free(file_t *file)
{
   14a61:	55                   	push   %ebp
   14a62:	89 e5                	mov    %esp,%ebp
   14a64:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   14a67:	83 ec 0c             	sub    $0xc,%esp
   14a6a:	68 40 b4 05 00       	push   $0x5b440
   14a6f:	e8 b9 06 00 00       	call   1512d <mutex_lock>
   14a74:	83 c4 10             	add    $0x10,%esp
    if (file->ref)
   14a77:	8b 45 08             	mov    0x8(%ebp),%eax
   14a7a:	8b 40 28             	mov    0x28(%eax),%eax
   14a7d:	85 c0                	test   %eax,%eax
   14a7f:	74 0f                	je     14a90 <file_free+0x2f>
    {
        file->ref--;
   14a81:	8b 45 08             	mov    0x8(%ebp),%eax
   14a84:	8b 40 28             	mov    0x28(%eax),%eax
   14a87:	8d 50 ff             	lea    -0x1(%eax),%edx
   14a8a:	8b 45 08             	mov    0x8(%ebp),%eax
   14a8d:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   14a90:	83 ec 0c             	sub    $0xc,%esp
   14a93:	68 40 b4 05 00       	push   $0x5b440
   14a98:	e8 24 07 00 00       	call   151c1 <mutex_unlock>
   14a9d:	83 c4 10             	add    $0x10,%esp
}
   14aa0:	90                   	nop
   14aa1:	c9                   	leave  
   14aa2:	c3                   	ret    

00014aa3 <file_inc_ref>:

/**
 * @brief 增加file的引用计数
 */
void file_inc_ref(file_t *file)
{
   14aa3:	55                   	push   %ebp
   14aa4:	89 e5                	mov    %esp,%ebp
   14aa6:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   14aa9:	83 ec 0c             	sub    $0xc,%esp
   14aac:	68 40 b4 05 00       	push   $0x5b440
   14ab1:	e8 77 06 00 00       	call   1512d <mutex_lock>
   14ab6:	83 c4 10             	add    $0x10,%esp
    file->ref++;
   14ab9:	8b 45 08             	mov    0x8(%ebp),%eax
   14abc:	8b 40 28             	mov    0x28(%eax),%eax
   14abf:	8d 50 01             	lea    0x1(%eax),%edx
   14ac2:	8b 45 08             	mov    0x8(%ebp),%eax
   14ac5:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   14ac8:	83 ec 0c             	sub    $0xc,%esp
   14acb:	68 40 b4 05 00       	push   $0x5b440
   14ad0:	e8 ec 06 00 00       	call   151c1 <mutex_unlock>
   14ad5:	83 c4 10             	add    $0x10,%esp
}
   14ad8:	90                   	nop
   14ad9:	c9                   	leave  
   14ada:	c3                   	ret    

00014adb <file_table_init>:

/**
 * @brief 文件表初始化
 */
void file_table_init(void)
{
   14adb:	55                   	push   %ebp
   14adc:	89 e5                	mov    %esp,%ebp
   14ade:	83 ec 08             	sub    $0x8,%esp
    // 文件描述符表初始化
    kernel_memset(&file_table, 0, sizeof(file_table));
   14ae1:	83 ec 04             	sub    $0x4,%esp
   14ae4:	68 00 40 02 00       	push   $0x24000
   14ae9:	6a 00                	push   $0x0
   14aeb:	68 40 74 03 00       	push   $0x37440
   14af0:	e8 d8 0c 00 00       	call   157cd <kernel_memset>
   14af5:	83 c4 10             	add    $0x10,%esp
    mutex_init(&file_alloc_mutex);
   14af8:	83 ec 0c             	sub    $0xc,%esp
   14afb:	68 40 b4 05 00       	push   $0x5b440
   14b00:	e8 fa 05 00 00       	call   150ff <mutex_init>
   14b05:	83 c4 10             	add    $0x10,%esp
}
   14b08:	90                   	nop
   14b09:	c9                   	leave  
   14b0a:	c3                   	ret    

00014b0b <inb>:
{
   14b0b:	55                   	push   %ebp
   14b0c:	89 e5                	mov    %esp,%ebp
   14b0e:	83 ec 14             	sub    $0x14,%esp
   14b11:	8b 45 08             	mov    0x8(%ebp),%eax
   14b14:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   14b18:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14b1c:	89 c2                	mov    %eax,%edx
   14b1e:	ec                   	in     (%dx),%al
   14b1f:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   14b22:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14b26:	c9                   	leave  
   14b27:	c3                   	ret    

00014b28 <inw>:
{
   14b28:	55                   	push   %ebp
   14b29:	89 e5                	mov    %esp,%ebp
   14b2b:	83 ec 14             	sub    $0x14,%esp
   14b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   14b31:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("in %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   14b35:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14b39:	89 c2                	mov    %eax,%edx
   14b3b:	66 ed                	in     (%dx),%ax
   14b3d:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    return rv;
   14b41:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14b45:	c9                   	leave  
   14b46:	c3                   	ret    

00014b47 <outb>:
{
   14b47:	55                   	push   %ebp
   14b48:	89 e5                	mov    %esp,%ebp
   14b4a:	83 ec 08             	sub    $0x8,%esp
   14b4d:	8b 55 08             	mov    0x8(%ebp),%edx
   14b50:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b53:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14b57:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   14b5a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14b5e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14b62:	ee                   	out    %al,(%dx)
}
   14b63:	90                   	nop
   14b64:	c9                   	leave  
   14b65:	c3                   	ret    

00014b66 <is_fd_bad>:

/**
 * @brief 判断文件描述符是否正确
 */
static int is_fd_bad(int file)
{
   14b66:	55                   	push   %ebp
   14b67:	89 e5                	mov    %esp,%ebp
    if ((file < 0) && (file >= TASK_OFILE_NR))
   14b69:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14b6d:	79 0d                	jns    14b7c <is_fd_bad+0x16>
   14b6f:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   14b73:	7e 07                	jle    14b7c <is_fd_bad+0x16>
    {
        return 1;
   14b75:	b8 01 00 00 00       	mov    $0x1,%eax
   14b7a:	eb 05                	jmp    14b81 <is_fd_bad+0x1b>
    }

    return 0;
   14b7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b81:	5d                   	pop    %ebp
   14b82:	c3                   	ret    

00014b83 <read_disk>:

static void read_disk(int sector, int sector_count, uint8_t *buf)
{
   14b83:	55                   	push   %ebp
   14b84:	89 e5                	mov    %esp,%ebp
   14b86:	53                   	push   %ebx
   14b87:	83 ec 10             	sub    $0x10,%esp
    outb(0x1F6, (uint8_t)(0xE0)); // 选择磁盘
   14b8a:	68 e0 00 00 00       	push   $0xe0
   14b8f:	68 f6 01 00 00       	push   $0x1f6
   14b94:	e8 ae ff ff ff       	call   14b47 <outb>
   14b99:	83 c4 08             	add    $0x8,%esp
    outb(0x1F2, (uint8_t)(sector_count >> 8));
   14b9c:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b9f:	c1 f8 08             	sar    $0x8,%eax
   14ba2:	0f b6 c0             	movzbl %al,%eax
   14ba5:	50                   	push   %eax
   14ba6:	68 f2 01 00 00       	push   $0x1f2
   14bab:	e8 97 ff ff ff       	call   14b47 <outb>
   14bb0:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector >> 24));
   14bb3:	8b 45 08             	mov    0x8(%ebp),%eax
   14bb6:	c1 f8 18             	sar    $0x18,%eax
   14bb9:	0f b6 c0             	movzbl %al,%eax
   14bbc:	50                   	push   %eax
   14bbd:	68 f3 01 00 00       	push   $0x1f3
   14bc2:	e8 80 ff ff ff       	call   14b47 <outb>
   14bc7:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(0));
   14bca:	6a 00                	push   $0x0
   14bcc:	68 f4 01 00 00       	push   $0x1f4
   14bd1:	e8 71 ff ff ff       	call   14b47 <outb>
   14bd6:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(0));
   14bd9:	6a 00                	push   $0x0
   14bdb:	68 f5 01 00 00       	push   $0x1f5
   14be0:	e8 62 ff ff ff       	call   14b47 <outb>
   14be5:	83 c4 08             	add    $0x8,%esp

    outb(0x1F2, (uint8_t)(sector_count));
   14be8:	8b 45 0c             	mov    0xc(%ebp),%eax
   14beb:	0f b6 c0             	movzbl %al,%eax
   14bee:	50                   	push   %eax
   14bef:	68 f2 01 00 00       	push   $0x1f2
   14bf4:	e8 4e ff ff ff       	call   14b47 <outb>
   14bf9:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector));
   14bfc:	8b 45 08             	mov    0x8(%ebp),%eax
   14bff:	0f b6 c0             	movzbl %al,%eax
   14c02:	50                   	push   %eax
   14c03:	68 f3 01 00 00       	push   $0x1f3
   14c08:	e8 3a ff ff ff       	call   14b47 <outb>
   14c0d:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));
   14c10:	8b 45 08             	mov    0x8(%ebp),%eax
   14c13:	c1 f8 08             	sar    $0x8,%eax
   14c16:	0f b6 c0             	movzbl %al,%eax
   14c19:	50                   	push   %eax
   14c1a:	68 f4 01 00 00       	push   $0x1f4
   14c1f:	e8 23 ff ff ff       	call   14b47 <outb>
   14c24:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));
   14c27:	8b 45 08             	mov    0x8(%ebp),%eax
   14c2a:	c1 f8 10             	sar    $0x10,%eax
   14c2d:	0f b6 c0             	movzbl %al,%eax
   14c30:	50                   	push   %eax
   14c31:	68 f5 01 00 00       	push   $0x1f5
   14c36:	e8 0c ff ff ff       	call   14b47 <outb>
   14c3b:	83 c4 08             	add    $0x8,%esp

    outb(0x1F7, (uint8_t)(0x24));
   14c3e:	6a 24                	push   $0x24
   14c40:	68 f7 01 00 00       	push   $0x1f7
   14c45:	e8 fd fe ff ff       	call   14b47 <outb>
   14c4a:	83 c4 08             	add    $0x8,%esp

    uint16_t *data_buf = (uint16_t *)buf;
   14c4d:	8b 45 10             	mov    0x10(%ebp),%eax
   14c50:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count-- > 0)
   14c53:	eb 4a                	jmp    14c9f <read_disk+0x11c>
    {
        while ((inb(0x1F7) & 0x88) != 0x8)
   14c55:	90                   	nop
   14c56:	68 f7 01 00 00       	push   $0x1f7
   14c5b:	e8 ab fe ff ff       	call   14b0b <inb>
   14c60:	83 c4 04             	add    $0x4,%esp
   14c63:	0f b6 c0             	movzbl %al,%eax
   14c66:	25 88 00 00 00       	and    $0x88,%eax
   14c6b:	83 f8 08             	cmp    $0x8,%eax
   14c6e:	75 e6                	jne    14c56 <read_disk+0xd3>
        {
            /* code */
        }
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   14c70:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14c77:	eb 1d                	jmp    14c96 <read_disk+0x113>
        {
            *data_buf++ = inw(0x1F0);
   14c79:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14c7c:	8d 43 02             	lea    0x2(%ebx),%eax
   14c7f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   14c82:	68 f0 01 00 00       	push   $0x1f0
   14c87:	e8 9c fe ff ff       	call   14b28 <inw>
   14c8c:	83 c4 04             	add    $0x4,%esp
   14c8f:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   14c92:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14c96:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   14c9d:	7e da                	jle    14c79 <read_disk+0xf6>
    while (sector_count-- > 0)
   14c9f:	8b 45 0c             	mov    0xc(%ebp),%eax
   14ca2:	8d 50 ff             	lea    -0x1(%eax),%edx
   14ca5:	89 55 0c             	mov    %edx,0xc(%ebp)
   14ca8:	85 c0                	test   %eax,%eax
   14caa:	7f a9                	jg     14c55 <read_disk+0xd2>
            /* code */
        }
    }
}
   14cac:	90                   	nop
   14cad:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14cb0:	c9                   	leave  
   14cb1:	c3                   	ret    

00014cb2 <is_path_valid>:

static int is_path_valid(const char *path)
{
   14cb2:	55                   	push   %ebp
   14cb3:	89 e5                	mov    %esp,%ebp
    if ((path == (const char *)0) || (path[0] == '\0'))
   14cb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14cb9:	74 0a                	je     14cc5 <is_path_valid+0x13>
   14cbb:	8b 45 08             	mov    0x8(%ebp),%eax
   14cbe:	0f b6 00             	movzbl (%eax),%eax
   14cc1:	84 c0                	test   %al,%al
   14cc3:	75 07                	jne    14ccc <is_path_valid+0x1a>
    {
        return 0;
   14cc5:	b8 00 00 00 00       	mov    $0x0,%eax
   14cca:	eb 05                	jmp    14cd1 <is_path_valid+0x1f>
    }
    return 1;
   14ccc:	b8 01 00 00 00       	mov    $0x1,%eax
}
   14cd1:	5d                   	pop    %ebp
   14cd2:	c3                   	ret    

00014cd3 <sys_open>:

int sys_open(const char *name, int flags, ...)
{
   14cd3:	55                   	push   %ebp
   14cd4:	89 e5                	mov    %esp,%ebp
   14cd6:	83 ec 18             	sub    $0x18,%esp
    if (kernel_strncmp(name + 5, "tty", 3) == 0)
   14cd9:	8b 45 08             	mov    0x8(%ebp),%eax
   14cdc:	83 c0 05             	add    $0x5,%eax
   14cdf:	83 ec 04             	sub    $0x4,%esp
   14ce2:	6a 03                	push   $0x3
   14ce4:	68 5c 6c 01 00       	push   $0x16c5c
   14ce9:	50                   	push   %eax
   14cea:	e8 d6 09 00 00       	call   156c5 <kernel_strncmp>
   14cef:	83 c4 10             	add    $0x10,%esp
   14cf2:	85 c0                	test   %eax,%eax
   14cf4:	0f 85 0f 01 00 00    	jne    14e09 <sys_open+0x136>
    {
        if (!is_path_valid(name))
   14cfa:	83 ec 0c             	sub    $0xc,%esp
   14cfd:	ff 75 08             	pushl  0x8(%ebp)
   14d00:	e8 ad ff ff ff       	call   14cb2 <is_path_valid>
   14d05:	83 c4 10             	add    $0x10,%esp
   14d08:	85 c0                	test   %eax,%eax
   14d0a:	75 0a                	jne    14d16 <sys_open+0x43>
        {
            return -1;
   14d0c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14d11:	e9 2a 01 00 00       	jmp    14e40 <sys_open+0x16d>
        }
        // 分配文件描述符链接
        file_t *file = file_alloc();
   14d16:	e8 bb fc ff ff       	call   149d6 <file_alloc>
   14d1b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!file)
   14d1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14d22:	75 0a                	jne    14d2e <sys_open+0x5b>
        {
            return -1;
   14d24:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14d29:	e9 12 01 00 00       	jmp    14e40 <sys_open+0x16d>
        }
        int fd = task_alloc_fd(file);
   14d2e:	83 ec 0c             	sub    $0xc,%esp
   14d31:	ff 75 f4             	pushl  -0xc(%ebp)
   14d34:	e8 7b d4 ff ff       	call   121b4 <task_alloc_fd>
   14d39:	83 c4 10             	add    $0x10,%esp
   14d3c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (fd < 0)
   14d3f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14d43:	0f 88 8a 00 00 00    	js     14dd3 <sys_open+0x100>
        {
            goto sys_open_failed;
        }
        if (kernel_strlen(name) < 5)
   14d49:	83 ec 0c             	sub    $0xc,%esp
   14d4c:	ff 75 08             	pushl  0x8(%ebp)
   14d4f:	e8 ef 09 00 00       	call   15743 <kernel_strlen>
   14d54:	83 c4 10             	add    $0x10,%esp
   14d57:	83 f8 04             	cmp    $0x4,%eax
   14d5a:	7e 7a                	jle    14dd6 <sys_open+0x103>
        {
            goto sys_open_failed;
        }
        int num = name[8] - '0';
   14d5c:	8b 45 08             	mov    0x8(%ebp),%eax
   14d5f:	83 c0 08             	add    $0x8,%eax
   14d62:	0f b6 00             	movzbl (%eax),%eax
   14d65:	0f be c0             	movsbl %al,%eax
   14d68:	83 e8 30             	sub    $0x30,%eax
   14d6b:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int dev_id = dev_open(DEV_TTY, num, 0);
   14d6e:	83 ec 04             	sub    $0x4,%esp
   14d71:	6a 00                	push   $0x0
   14d73:	ff 75 ec             	pushl  -0x14(%ebp)
   14d76:	6a 01                	push   $0x1
   14d78:	e8 0b ee ff ff       	call   13b88 <dev_open>
   14d7d:	83 c4 10             	add    $0x10,%esp
   14d80:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (dev_id < 0)
   14d83:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14d87:	78 50                	js     14dd9 <sys_open+0x106>
        {
            goto sys_open_failed;
        }
        file->dev_id = dev_id;
   14d89:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14d8c:	8b 55 e8             	mov    -0x18(%ebp),%edx
   14d8f:	89 50 2c             	mov    %edx,0x2c(%eax)
        file->mode = 0;
   14d92:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14d95:	c7 40 40 00 00 00 00 	movl   $0x0,0x40(%eax)
        file->pos = 0;
   14d9c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14d9f:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
        file->ref = 1;
   14da6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14da9:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
        file->type = FILE_TTY;
   14db0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14db3:	c7 40 20 01 00 00 00 	movl   $0x1,0x20(%eax)
        kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   14dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14dbd:	83 ec 04             	sub    $0x4,%esp
   14dc0:	6a 20                	push   $0x20
   14dc2:	ff 75 08             	pushl  0x8(%ebp)
   14dc5:	50                   	push   %eax
   14dc6:	e8 8a 08 00 00       	call   15655 <kernel_strncpy>
   14dcb:	83 c4 10             	add    $0x10,%esp
        return fd;
   14dce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14dd1:	eb 6d                	jmp    14e40 <sys_open+0x16d>
            goto sys_open_failed;
   14dd3:	90                   	nop
   14dd4:	eb 04                	jmp    14dda <sys_open+0x107>
            goto sys_open_failed;
   14dd6:	90                   	nop
   14dd7:	eb 01                	jmp    14dda <sys_open+0x107>
            goto sys_open_failed;
   14dd9:	90                   	nop
    sys_open_failed:
        if (file)
   14dda:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14dde:	74 0e                	je     14dee <sys_open+0x11b>
        {
            file_free(file);
   14de0:	83 ec 0c             	sub    $0xc,%esp
   14de3:	ff 75 f4             	pushl  -0xc(%ebp)
   14de6:	e8 76 fc ff ff       	call   14a61 <file_free>
   14deb:	83 c4 10             	add    $0x10,%esp
        }

        if (fd >= 0)
   14dee:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14df2:	78 0e                	js     14e02 <sys_open+0x12f>
        {
            task_remove_fd(fd);
   14df4:	83 ec 0c             	sub    $0xc,%esp
   14df7:	ff 75 f0             	pushl  -0x10(%ebp)
   14dfa:	e8 08 d4 ff ff       	call   12207 <task_remove_fd>
   14dff:	83 c4 10             	add    $0x10,%esp
        }
        return -1;
   14e02:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14e07:	eb 37                	jmp    14e40 <sys_open+0x16d>
    }
    else
    {
        if (name[0] == '/')
   14e09:	8b 45 08             	mov    0x8(%ebp),%eax
   14e0c:	0f b6 00             	movzbl (%eax),%eax
   14e0f:	3c 2f                	cmp    $0x2f,%al
   14e11:	75 28                	jne    14e3b <sys_open+0x168>
        {
            read_disk(5000, 80, (uint8_t *)TEMP_ADDR);
   14e13:	83 ec 04             	sub    $0x4,%esp
   14e16:	68 60 b4 05 00       	push   $0x5b460
   14e1b:	6a 50                	push   $0x50
   14e1d:	68 88 13 00 00       	push   $0x1388
   14e22:	e8 5c fd ff ff       	call   14b83 <read_disk>
   14e27:	83 c4 10             	add    $0x10,%esp
            temp_pos = (uint8_t *)TEMP_ADDR;
   14e2a:	c7 05 60 44 07 00 60 	movl   $0x5b460,0x74460
   14e31:	b4 05 00 
            return TEMP_FILE_ID;
   14e34:	b8 64 00 00 00       	mov    $0x64,%eax
   14e39:	eb 05                	jmp    14e40 <sys_open+0x16d>
        }
    }
    return -1;
   14e3b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14e40:	c9                   	leave  
   14e41:	c3                   	ret    

00014e42 <sys_read>:

int sys_read(int file, char *ptr, int len)
{
   14e42:	55                   	push   %ebp
   14e43:	89 e5                	mov    %esp,%ebp
   14e45:	83 ec 18             	sub    $0x18,%esp
    if (file == TEMP_FILE_ID)
   14e48:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   14e4c:	75 2c                	jne    14e7a <sys_read+0x38>
    {
        kernel_memcpy(ptr, temp_pos, len);
   14e4e:	a1 60 44 07 00       	mov    0x74460,%eax
   14e53:	83 ec 04             	sub    $0x4,%esp
   14e56:	ff 75 10             	pushl  0x10(%ebp)
   14e59:	50                   	push   %eax
   14e5a:	ff 75 0c             	pushl  0xc(%ebp)
   14e5d:	e8 1c 09 00 00       	call   1577e <kernel_memcpy>
   14e62:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   14e65:	8b 15 60 44 07 00    	mov    0x74460,%edx
   14e6b:	8b 45 10             	mov    0x10(%ebp),%eax
   14e6e:	01 d0                	add    %edx,%eax
   14e70:	a3 60 44 07 00       	mov    %eax,0x74460
        return len;
   14e75:	8b 45 10             	mov    0x10(%ebp),%eax
   14e78:	eb 4c                	jmp    14ec6 <sys_read+0x84>
    }
    else
    {
        file = 0;
   14e7a:	c7 45 08 00 00 00 00 	movl   $0x0,0x8(%ebp)
        file_t *p_file = task_file(file);
   14e81:	83 ec 0c             	sub    $0xc,%esp
   14e84:	ff 75 08             	pushl  0x8(%ebp)
   14e87:	e8 f6 d2 ff ff       	call   12182 <task_file>
   14e8c:	83 c4 10             	add    $0x10,%esp
   14e8f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (!p_file)
   14e92:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14e96:	75 17                	jne    14eaf <sys_read+0x6d>
        {
            log_printf("file not opened");
   14e98:	83 ec 0c             	sub    $0xc,%esp
   14e9b:	68 60 6c 01 00       	push   $0x16c60
   14ea0:	e8 21 0f 00 00       	call   15dc6 <log_printf>
   14ea5:	83 c4 10             	add    $0x10,%esp
            return -1;
   14ea8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14ead:	eb 17                	jmp    14ec6 <sys_read+0x84>
        }
        return dev_read(p_file->dev_id, 0, ptr, len);
   14eaf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14eb2:	8b 40 2c             	mov    0x2c(%eax),%eax
   14eb5:	ff 75 10             	pushl  0x10(%ebp)
   14eb8:	ff 75 0c             	pushl  0xc(%ebp)
   14ebb:	6a 00                	push   $0x0
   14ebd:	50                   	push   %eax
   14ebe:	e8 0f ee ff ff       	call   13cd2 <dev_read>
   14ec3:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
}
   14ec6:	c9                   	leave  
   14ec7:	c3                   	ret    

00014ec8 <sys_write>:

int sys_write(int file, char *ptr, int len)
{
   14ec8:	55                   	push   %ebp
   14ec9:	89 e5                	mov    %esp,%ebp
   14ecb:	83 ec 18             	sub    $0x18,%esp
    // file = 0; // 临时, dup实现后取消
    file_t *p_file = task_file(file);
   14ece:	83 ec 0c             	sub    $0xc,%esp
   14ed1:	ff 75 08             	pushl  0x8(%ebp)
   14ed4:	e8 a9 d2 ff ff       	call   12182 <task_file>
   14ed9:	83 c4 10             	add    $0x10,%esp
   14edc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   14edf:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14ee3:	75 17                	jne    14efc <sys_write+0x34>
    {
        log_printf("file not opened");
   14ee5:	83 ec 0c             	sub    $0xc,%esp
   14ee8:	68 60 6c 01 00       	push   $0x16c60
   14eed:	e8 d4 0e 00 00       	call   15dc6 <log_printf>
   14ef2:	83 c4 10             	add    $0x10,%esp
        return -1;
   14ef5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14efa:	eb 17                	jmp    14f13 <sys_write+0x4b>
    }
    return dev_write(p_file->dev_id, 0, ptr, len);
   14efc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14eff:	8b 40 2c             	mov    0x2c(%eax),%eax
   14f02:	ff 75 10             	pushl  0x10(%ebp)
   14f05:	ff 75 0c             	pushl  0xc(%ebp)
   14f08:	6a 00                	push   $0x0
   14f0a:	50                   	push   %eax
   14f0b:	e8 0e ee ff ff       	call   13d1e <dev_write>
   14f10:	83 c4 10             	add    $0x10,%esp
}
   14f13:	c9                   	leave  
   14f14:	c3                   	ret    

00014f15 <sys_lseek>:

int sys_lseek(int file, int ptr, int dir)
{
   14f15:	55                   	push   %ebp
   14f16:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID)
   14f18:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   14f1c:	75 14                	jne    14f32 <sys_lseek+0x1d>
    {
        temp_pos = (uint8_t *)(TEMP_ADDR + ptr);
   14f1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   14f21:	05 60 b4 05 00       	add    $0x5b460,%eax
   14f26:	a3 60 44 07 00       	mov    %eax,0x74460
        return 0;
   14f2b:	b8 00 00 00 00       	mov    $0x0,%eax
   14f30:	eb 05                	jmp    14f37 <sys_lseek+0x22>
    }

    return -1;
   14f32:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14f37:	5d                   	pop    %ebp
   14f38:	c3                   	ret    

00014f39 <sys_close>:

int sys_close(int file)
{
   14f39:	55                   	push   %ebp
   14f3a:	89 e5                	mov    %esp,%ebp
    return 0;
   14f3c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14f41:	5d                   	pop    %ebp
   14f42:	c3                   	ret    

00014f43 <sys_isatty>:

/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file)
{
   14f43:	55                   	push   %ebp
   14f44:	89 e5                	mov    %esp,%ebp
    return 0;
   14f46:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14f4b:	5d                   	pop    %ebp
   14f4c:	c3                   	ret    

00014f4d <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st)
{
   14f4d:	55                   	push   %ebp
   14f4e:	89 e5                	mov    %esp,%ebp
    return 0;
   14f50:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14f55:	5d                   	pop    %ebp
   14f56:	c3                   	ret    

00014f57 <fs_init>:

/**
 * @brief 文件系统初始化
 */
void fs_init(void)
{
   14f57:	55                   	push   %ebp
   14f58:	89 e5                	mov    %esp,%ebp
   14f5a:	83 ec 08             	sub    $0x8,%esp
    // mount_list_init();
    file_table_init();
   14f5d:	e8 79 fb ff ff       	call   14adb <file_table_init>
    // ASSERT(fs != (fs_t *)0);

    // // 挂载根文件系统
    // root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
    // ASSERT(root_fs != (fs_t *)0);
}
   14f62:	90                   	nop
   14f63:	c9                   	leave  
   14f64:	c3                   	ret    

00014f65 <sys_dup>:

/**
 * 复制一个文件描述符
 */
int sys_dup(int file)
{
   14f65:	55                   	push   %ebp
   14f66:	89 e5                	mov    %esp,%ebp
   14f68:	83 ec 18             	sub    $0x18,%esp
    // 超出进程所能打开的全部，退出
    if (is_fd_bad(file))
   14f6b:	ff 75 08             	pushl  0x8(%ebp)
   14f6e:	e8 f3 fb ff ff       	call   14b66 <is_fd_bad>
   14f73:	83 c4 04             	add    $0x4,%esp
   14f76:	85 c0                	test   %eax,%eax
   14f78:	74 1a                	je     14f94 <sys_dup+0x2f>
    {
        log_printf("file(%d) is not valid.", file);
   14f7a:	83 ec 08             	sub    $0x8,%esp
   14f7d:	ff 75 08             	pushl  0x8(%ebp)
   14f80:	68 70 6c 01 00       	push   $0x16c70
   14f85:	e8 3c 0e 00 00       	call   15dc6 <log_printf>
   14f8a:	83 c4 10             	add    $0x10,%esp
        return -1;
   14f8d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14f92:	eb 6d                	jmp    15001 <sys_dup+0x9c>
    }

    file_t *p_file = task_file(file);
   14f94:	83 ec 0c             	sub    $0xc,%esp
   14f97:	ff 75 08             	pushl  0x8(%ebp)
   14f9a:	e8 e3 d1 ff ff       	call   12182 <task_file>
   14f9f:	83 c4 10             	add    $0x10,%esp
   14fa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   14fa5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14fa9:	75 17                	jne    14fc2 <sys_dup+0x5d>
    {
        log_printf("file not opened");
   14fab:	83 ec 0c             	sub    $0xc,%esp
   14fae:	68 60 6c 01 00       	push   $0x16c60
   14fb3:	e8 0e 0e 00 00       	call   15dc6 <log_printf>
   14fb8:	83 c4 10             	add    $0x10,%esp
        return -1;
   14fbb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14fc0:	eb 3f                	jmp    15001 <sys_dup+0x9c>
    }

    int fd = task_alloc_fd(p_file); // 新fd指向同一描述符
   14fc2:	83 ec 0c             	sub    $0xc,%esp
   14fc5:	ff 75 f4             	pushl  -0xc(%ebp)
   14fc8:	e8 e7 d1 ff ff       	call   121b4 <task_alloc_fd>
   14fcd:	83 c4 10             	add    $0x10,%esp
   14fd0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (fd >= 0)
   14fd3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14fd7:	78 13                	js     14fec <sys_dup+0x87>
    {
        file_inc_ref(p_file);
   14fd9:	83 ec 0c             	sub    $0xc,%esp
   14fdc:	ff 75 f4             	pushl  -0xc(%ebp)
   14fdf:	e8 bf fa ff ff       	call   14aa3 <file_inc_ref>
   14fe4:	83 c4 10             	add    $0x10,%esp
        return fd;
   14fe7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14fea:	eb 15                	jmp    15001 <sys_dup+0x9c>
    }

    log_printf("No task file avaliable");
   14fec:	83 ec 0c             	sub    $0xc,%esp
   14fef:	68 87 6c 01 00       	push   $0x16c87
   14ff4:	e8 cd 0d 00 00       	call   15dc6 <log_printf>
   14ff9:	83 c4 10             	add    $0x10,%esp
    return -1;
   14ffc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15001:	c9                   	leave  
   15002:	c3                   	ret    

00015003 <kernel_init>:
#include "dev/console.h"
#include "dev/kbd.h"
#include "fs/fs.h"

void kernel_init(boot_info_t *boot_info)
{
   15003:	55                   	push   %ebp
   15004:	89 e5                	mov    %esp,%ebp
   15006:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   15009:	e8 61 d4 ff ff       	call   1246f <cpu_init>
    irq_init();
   1500e:	e8 93 da ff ff       	call   12aa6 <irq_init>
    log_init();
   15013:	e8 7f 0d 00 00       	call   15d97 <log_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   15018:	83 ec 0c             	sub    $0xc,%esp
   1501b:	ff 75 08             	pushl  0x8(%ebp)
   1501e:	e8 d3 bc ff ff       	call   10cf6 <memory_init>
   15023:	83 c4 10             	add    $0x10,%esp
    fs_init();
   15026:	e8 2c ff ff ff       	call   14f57 <fs_init>

    time_init();
   1502b:	e8 a2 f3 ff ff       	call   143d2 <time_init>

    task_manager_init();
   15030:	e8 03 c4 ff ff       	call   11438 <task_manager_init>
}
   15035:	90                   	nop
   15036:	c9                   	leave  
   15037:	c3                   	ret    

00015038 <move_to_first_task>:

/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void)
{
   15038:	55                   	push   %ebp
   15039:	89 e5                	mov    %esp,%ebp
   1503b:	56                   	push   %esi
   1503c:	53                   	push   %ebx
   1503d:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t *curr = task_current();
   15040:	e8 3c c5 ff ff       	call   11581 <task_current>
   15045:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   15048:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1504c:	75 19                	jne    15067 <move_to_first_task+0x2f>
   1504e:	68 c4 6c 01 00       	push   $0x16cc4
   15053:	68 40 6d 01 00       	push   $0x16d40
   15058:	6a 58                	push   $0x58
   1505a:	68 d0 6c 01 00       	push   $0x16cd0
   1505f:	e8 92 0a 00 00       	call   15af6 <panic>
   15064:	83 c4 10             	add    $0x10,%esp

    tss_t *tss = &(curr->tss);
   15067:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1506a:	05 58 02 00 00       	add    $0x258,%eax
   1506f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"     // SS
        "push %[esp]\n\t"    // ESP
        "push %[eflags]\n\t" // EFLAGS
        "push %[cs]\n\t"     // CS
        "push %[eip]\n\t"    // ip
        "iret\n\t" ::[ss] "r"(tss->ss),
   15072:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15075:	8b 40 50             	mov    0x50(%eax),%eax
        [esp] "r"(tss->esp), [eflags] "r"(tss->eflags),
   15078:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1507b:	8b 52 38             	mov    0x38(%edx),%edx
   1507e:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   15081:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs] "r"(tss->cs), [eip] "r"(tss->eip));
   15084:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   15087:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   1508a:	8b 75 f0             	mov    -0x10(%ebp),%esi
   1508d:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   15090:	50                   	push   %eax
   15091:	52                   	push   %edx
   15092:	51                   	push   %ecx
   15093:	53                   	push   %ebx
   15094:	56                   	push   %esi
   15095:	cf                   	iret   
}
   15096:	90                   	nop
   15097:	8d 65 f8             	lea    -0x8(%ebp),%esp
   1509a:	5b                   	pop    %ebx
   1509b:	5e                   	pop    %esi
   1509c:	5d                   	pop    %ebp
   1509d:	c3                   	ret    

0001509e <init_main>:

void init_main(void)
{
   1509e:	55                   	push   %ebp
   1509f:	89 e5                	mov    %esp,%ebp
   150a1:	83 ec 08             	sub    $0x8,%esp
    // list_test();

    log_printf("Kernel is running...");
   150a4:	83 ec 0c             	sub    $0xc,%esp
   150a7:	68 0a 6d 01 00       	push   $0x16d0a
   150ac:	e8 15 0d 00 00       	call   15dc6 <log_printf>
   150b1:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   150b4:	83 ec 08             	sub    $0x8,%esp
   150b7:	68 1f 6d 01 00       	push   $0x16d1f
   150bc:	68 25 6d 01 00       	push   $0x16d25
   150c1:	e8 00 0d 00 00       	call   15dc6 <log_printf>
   150c6:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 123456, -123, 0x123456, 'a');
   150c9:	83 ec 0c             	sub    $0xc,%esp
   150cc:	6a 61                	push   $0x61
   150ce:	68 56 34 12 00       	push   $0x123456
   150d3:	6a 85                	push   $0xffffff85
   150d5:	68 40 e2 01 00       	push   $0x1e240
   150da:	68 31 6d 01 00       	push   $0x16d31
   150df:	e8 e2 0c 00 00       	call   15dc6 <log_printf>
   150e4:	83 c4 20             	add    $0x20,%esp

    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]); // 压栈先-4再入栈
    task_first_init();
   150e7:	e8 4e c2 ff ff       	call   1133a <task_first_init>
    move_to_first_task();
   150ec:	e8 47 ff ff ff       	call   15038 <move_to_first_task>
    //     sem_notify(&sem);
    //     // sys_msleep(1000);
    //     // task_switch_from_to(task_first_task(), &init_task);
    //     // sys_sched_yield();
    // }
   150f1:	90                   	nop
   150f2:	c9                   	leave  
   150f3:	c3                   	ret    

000150f4 <list_count>:
{
   150f4:	55                   	push   %ebp
   150f5:	89 e5                	mov    %esp,%ebp
    return list->count;
   150f7:	8b 45 08             	mov    0x8(%ebp),%eax
   150fa:	8b 40 08             	mov    0x8(%eax),%eax
}
   150fd:	5d                   	pop    %ebp
   150fe:	c3                   	ret    

000150ff <mutex_init>:

/**
 * 锁初始化
 */
void mutex_init(mutex_t *mutex)
{
   150ff:	55                   	push   %ebp
   15100:	89 e5                	mov    %esp,%ebp
   15102:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   15105:	8b 45 08             	mov    0x8(%ebp),%eax
   15108:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   1510f:	8b 45 08             	mov    0x8(%ebp),%eax
   15112:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   15118:	8b 45 08             	mov    0x8(%ebp),%eax
   1511b:	83 c0 08             	add    $0x8,%eax
   1511e:	83 ec 0c             	sub    $0xc,%esp
   15121:	50                   	push   %eax
   15122:	e8 8b 0a 00 00       	call   15bb2 <list_init>
   15127:	83 c4 10             	add    $0x10,%esp
}
   1512a:	90                   	nop
   1512b:	c9                   	leave  
   1512c:	c3                   	ret    

0001512d <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock(mutex_t *mutex)
{
   1512d:	55                   	push   %ebp
   1512e:	89 e5                	mov    %esp,%ebp
   15130:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   15133:	e8 a9 dc ff ff       	call   12de1 <irq_enter_protection>
   15138:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t *curr = task_current();
   1513b:	e8 41 c4 ff ff       	call   11581 <task_current>
   15140:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0)
   15143:	8b 45 08             	mov    0x8(%ebp),%eax
   15146:	8b 40 04             	mov    0x4(%eax),%eax
   15149:	85 c0                	test   %eax,%eax
   1514b:	75 14                	jne    15161 <mutex_lock+0x34>
    {
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   1514d:	8b 45 08             	mov    0x8(%ebp),%eax
   15150:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   15157:	8b 45 08             	mov    0x8(%ebp),%eax
   1515a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1515d:	89 10                	mov    %edx,(%eax)
   1515f:	eb 4f                	jmp    151b0 <mutex_lock+0x83>
    }
    else if (mutex->owner == curr)
   15161:	8b 45 08             	mov    0x8(%ebp),%eax
   15164:	8b 00                	mov    (%eax),%eax
   15166:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   15169:	75 11                	jne    1517c <mutex_lock+0x4f>
    {
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   1516b:	8b 45 08             	mov    0x8(%ebp),%eax
   1516e:	8b 40 04             	mov    0x4(%eax),%eax
   15171:	8d 50 01             	lea    0x1(%eax),%edx
   15174:	8b 45 08             	mov    0x8(%ebp),%eax
   15177:	89 50 04             	mov    %edx,0x4(%eax)
   1517a:	eb 34                	jmp    151b0 <mutex_lock+0x83>
    }
    else
    {
        // 有其它任务占用，则进入队列等待
        task_t *curr = task_current();
   1517c:	e8 00 c4 ff ff       	call   11581 <task_current>
   15181:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   15184:	83 ec 0c             	sub    $0xc,%esp
   15187:	ff 75 ec             	pushl  -0x14(%ebp)
   1518a:	e8 c7 c3 ff ff       	call   11556 <task_set_block>
   1518f:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   15192:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15195:	8d 50 48             	lea    0x48(%eax),%edx
   15198:	8b 45 08             	mov    0x8(%ebp),%eax
   1519b:	83 c0 08             	add    $0x8,%eax
   1519e:	83 ec 08             	sub    $0x8,%esp
   151a1:	52                   	push   %edx
   151a2:	50                   	push   %eax
   151a3:	e8 8e 0a 00 00       	call   15c36 <list_insert_last>
   151a8:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   151ab:	e8 7f c4 ff ff       	call   1162f <task_dispatch>
    }

    irq_leave_protection(irq_state);
   151b0:	83 ec 0c             	sub    $0xc,%esp
   151b3:	ff 75 f4             	pushl  -0xc(%ebp)
   151b6:	e8 3e dc ff ff       	call   12df9 <irq_leave_protection>
   151bb:	83 c4 10             	add    $0x10,%esp
}
   151be:	90                   	nop
   151bf:	c9                   	leave  
   151c0:	c3                   	ret    

000151c1 <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock(mutex_t *mutex)
{
   151c1:	55                   	push   %ebp
   151c2:	89 e5                	mov    %esp,%ebp
   151c4:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   151c7:	e8 15 dc ff ff       	call   12de1 <irq_enter_protection>
   151cc:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t *curr = task_current();
   151cf:	e8 ad c3 ff ff       	call   11581 <task_current>
   151d4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr)
   151d7:	8b 45 08             	mov    0x8(%ebp),%eax
   151da:	8b 00                	mov    (%eax),%eax
   151dc:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   151df:	0f 85 88 00 00 00    	jne    1526d <mutex_unlock+0xac>
    {
        if (--mutex->locked_count == 0)
   151e5:	8b 45 08             	mov    0x8(%ebp),%eax
   151e8:	8b 40 04             	mov    0x4(%eax),%eax
   151eb:	8d 50 ff             	lea    -0x1(%eax),%edx
   151ee:	8b 45 08             	mov    0x8(%ebp),%eax
   151f1:	89 50 04             	mov    %edx,0x4(%eax)
   151f4:	8b 45 08             	mov    0x8(%ebp),%eax
   151f7:	8b 40 04             	mov    0x4(%eax),%eax
   151fa:	85 c0                	test   %eax,%eax
   151fc:	75 6f                	jne    1526d <mutex_unlock+0xac>
        {
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   151fe:	8b 45 08             	mov    0x8(%ebp),%eax
   15201:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list))
   15207:	8b 45 08             	mov    0x8(%ebp),%eax
   1520a:	83 c0 08             	add    $0x8,%eax
   1520d:	83 ec 0c             	sub    $0xc,%esp
   15210:	50                   	push   %eax
   15211:	e8 de fe ff ff       	call   150f4 <list_count>
   15216:	83 c4 10             	add    $0x10,%esp
   15219:	85 c0                	test   %eax,%eax
   1521b:	74 50                	je     1526d <mutex_unlock+0xac>
            {
                list_node_t *task_node = list_remove_first(&mutex->wait_list);
   1521d:	8b 45 08             	mov    0x8(%ebp),%eax
   15220:	83 c0 08             	add    $0x8,%eax
   15223:	83 ec 0c             	sub    $0xc,%esp
   15226:	50                   	push   %eax
   15227:	e8 6e 0a 00 00       	call   15c9a <list_remove_first>
   1522c:	83 c4 10             	add    $0x10,%esp
   1522f:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t *task = list_node_parent(task_node, task_t, wait_node);
   15232:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   15236:	74 08                	je     15240 <mutex_unlock+0x7f>
   15238:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1523b:	83 e8 48             	sub    $0x48,%eax
   1523e:	eb 05                	jmp    15245 <mutex_unlock+0x84>
   15240:	b8 00 00 00 00       	mov    $0x0,%eax
   15245:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   15248:	83 ec 0c             	sub    $0xc,%esp
   1524b:	ff 75 e8             	pushl  -0x18(%ebp)
   1524e:	e8 cf c2 ff ff       	call   11522 <task_set_ready>
   15253:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   15256:	8b 45 08             	mov    0x8(%ebp),%eax
   15259:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   15260:	8b 45 08             	mov    0x8(%ebp),%eax
   15263:	8b 55 e8             	mov    -0x18(%ebp),%edx
   15266:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   15268:	e8 c2 c3 ff ff       	call   1162f <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   1526d:	83 ec 0c             	sub    $0xc,%esp
   15270:	ff 75 f4             	pushl  -0xc(%ebp)
   15273:	e8 81 db ff ff       	call   12df9 <irq_leave_protection>
   15278:	83 c4 10             	add    $0x10,%esp
   1527b:	90                   	nop
   1527c:	c9                   	leave  
   1527d:	c3                   	ret    

0001527e <list_count>:
{
   1527e:	55                   	push   %ebp
   1527f:	89 e5                	mov    %esp,%ebp
    return list->count;
   15281:	8b 45 08             	mov    0x8(%ebp),%eax
   15284:	8b 40 08             	mov    0x8(%eax),%eax
}
   15287:	5d                   	pop    %ebp
   15288:	c3                   	ret    

00015289 <sem_init>:

/**
 * 信号量初始化
 */
void sem_init(sem_t *sem, int init_count)
{
   15289:	55                   	push   %ebp
   1528a:	89 e5                	mov    %esp,%ebp
   1528c:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   1528f:	8b 45 08             	mov    0x8(%ebp),%eax
   15292:	8b 55 0c             	mov    0xc(%ebp),%edx
   15295:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   15297:	8b 45 08             	mov    0x8(%ebp),%eax
   1529a:	83 c0 04             	add    $0x4,%eax
   1529d:	83 ec 0c             	sub    $0xc,%esp
   152a0:	50                   	push   %eax
   152a1:	e8 0c 09 00 00       	call   15bb2 <list_init>
   152a6:	83 c4 10             	add    $0x10,%esp
}
   152a9:	90                   	nop
   152aa:	c9                   	leave  
   152ab:	c3                   	ret    

000152ac <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait(sem_t *sem)
{
   152ac:	55                   	push   %ebp
   152ad:	89 e5                	mov    %esp,%ebp
   152af:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   152b2:	e8 2a db ff ff       	call   12de1 <irq_enter_protection>
   152b7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0)
   152ba:	8b 45 08             	mov    0x8(%ebp),%eax
   152bd:	8b 00                	mov    (%eax),%eax
   152bf:	85 c0                	test   %eax,%eax
   152c1:	7e 0f                	jle    152d2 <sem_wait+0x26>
    {
        sem->count--;
   152c3:	8b 45 08             	mov    0x8(%ebp),%eax
   152c6:	8b 00                	mov    (%eax),%eax
   152c8:	8d 50 ff             	lea    -0x1(%eax),%edx
   152cb:	8b 45 08             	mov    0x8(%ebp),%eax
   152ce:	89 10                	mov    %edx,(%eax)
   152d0:	eb 34                	jmp    15306 <sem_wait+0x5a>
    }
    else
    {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t *curr = task_current();
   152d2:	e8 aa c2 ff ff       	call   11581 <task_current>
   152d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   152da:	83 ec 0c             	sub    $0xc,%esp
   152dd:	ff 75 f0             	pushl  -0x10(%ebp)
   152e0:	e8 71 c2 ff ff       	call   11556 <task_set_block>
   152e5:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   152e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   152eb:	8d 50 48             	lea    0x48(%eax),%edx
   152ee:	8b 45 08             	mov    0x8(%ebp),%eax
   152f1:	83 c0 04             	add    $0x4,%eax
   152f4:	83 ec 08             	sub    $0x8,%esp
   152f7:	52                   	push   %edx
   152f8:	50                   	push   %eax
   152f9:	e8 38 09 00 00       	call   15c36 <list_insert_last>
   152fe:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   15301:	e8 29 c3 ff ff       	call   1162f <task_dispatch>
    }

    irq_leave_protection(irq_state);
   15306:	83 ec 0c             	sub    $0xc,%esp
   15309:	ff 75 f4             	pushl  -0xc(%ebp)
   1530c:	e8 e8 da ff ff       	call   12df9 <irq_leave_protection>
   15311:	83 c4 10             	add    $0x10,%esp
}
   15314:	90                   	nop
   15315:	c9                   	leave  
   15316:	c3                   	ret    

00015317 <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify(sem_t *sem)
{
   15317:	55                   	push   %ebp
   15318:	89 e5                	mov    %esp,%ebp
   1531a:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1531d:	e8 bf da ff ff       	call   12de1 <irq_enter_protection>
   15322:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list))
   15325:	8b 45 08             	mov    0x8(%ebp),%eax
   15328:	83 c0 04             	add    $0x4,%eax
   1532b:	83 ec 0c             	sub    $0xc,%esp
   1532e:	50                   	push   %eax
   1532f:	e8 4a ff ff ff       	call   1527e <list_count>
   15334:	83 c4 10             	add    $0x10,%esp
   15337:	85 c0                	test   %eax,%eax
   15339:	74 40                	je     1537b <sem_notify+0x64>
    {
        // 有进程等待，则唤醒加入就绪队列
        list_node_t *node = list_remove_first(&sem->wait_list);
   1533b:	8b 45 08             	mov    0x8(%ebp),%eax
   1533e:	83 c0 04             	add    $0x4,%eax
   15341:	83 ec 0c             	sub    $0xc,%esp
   15344:	50                   	push   %eax
   15345:	e8 50 09 00 00       	call   15c9a <list_remove_first>
   1534a:	83 c4 10             	add    $0x10,%esp
   1534d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   15350:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15354:	74 08                	je     1535e <sem_notify+0x47>
   15356:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15359:	83 e8 48             	sub    $0x48,%eax
   1535c:	eb 05                	jmp    15363 <sem_notify+0x4c>
   1535e:	b8 00 00 00 00       	mov    $0x0,%eax
   15363:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   15366:	83 ec 0c             	sub    $0xc,%esp
   15369:	ff 75 ec             	pushl  -0x14(%ebp)
   1536c:	e8 b1 c1 ff ff       	call   11522 <task_set_ready>
   15371:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   15374:	e8 b6 c2 ff ff       	call   1162f <task_dispatch>
   15379:	eb 0d                	jmp    15388 <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   1537b:	8b 45 08             	mov    0x8(%ebp),%eax
   1537e:	8b 00                	mov    (%eax),%eax
   15380:	8d 50 01             	lea    0x1(%eax),%edx
   15383:	8b 45 08             	mov    0x8(%ebp),%eax
   15386:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   15388:	83 ec 0c             	sub    $0xc,%esp
   1538b:	ff 75 f4             	pushl  -0xc(%ebp)
   1538e:	e8 66 da ff ff       	call   12df9 <irq_leave_protection>
   15393:	83 c4 10             	add    $0x10,%esp
}
   15396:	90                   	nop
   15397:	c9                   	leave  
   15398:	c3                   	ret    

00015399 <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count(sem_t *sem)
{
   15399:	55                   	push   %ebp
   1539a:	89 e5                	mov    %esp,%ebp
   1539c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1539f:	e8 3d da ff ff       	call   12de1 <irq_enter_protection>
   153a4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   153a7:	8b 45 08             	mov    0x8(%ebp),%eax
   153aa:	8b 00                	mov    (%eax),%eax
   153ac:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   153af:	83 ec 0c             	sub    $0xc,%esp
   153b2:	ff 75 f4             	pushl  -0xc(%ebp)
   153b5:	e8 3f da ff ff       	call   12df9 <irq_leave_protection>
   153ba:	83 c4 10             	add    $0x10,%esp
    return count;
   153bd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153c0:	c9                   	leave  
   153c1:	c3                   	ret    

000153c2 <bitmap_byte_count>:

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count(int bit_count)
{
   153c2:	55                   	push   %ebp
   153c3:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   153c5:	8b 45 08             	mov    0x8(%ebp),%eax
   153c8:	83 c0 07             	add    $0x7,%eax
   153cb:	8d 50 07             	lea    0x7(%eax),%edx
   153ce:	85 c0                	test   %eax,%eax
   153d0:	0f 48 c2             	cmovs  %edx,%eax
   153d3:	c1 f8 03             	sar    $0x3,%eax
}
   153d6:	5d                   	pop    %ebp
   153d7:	c3                   	ret    

000153d8 <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   153d8:	55                   	push   %ebp
   153d9:	89 e5                	mov    %esp,%ebp
   153db:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   153de:	8b 45 08             	mov    0x8(%ebp),%eax
   153e1:	8b 55 10             	mov    0x10(%ebp),%edx
   153e4:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   153e6:	8b 45 08             	mov    0x8(%ebp),%eax
   153e9:	8b 55 0c             	mov    0xc(%ebp),%edx
   153ec:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   153ef:	8b 45 08             	mov    0x8(%ebp),%eax
   153f2:	8b 00                	mov    (%eax),%eax
   153f4:	50                   	push   %eax
   153f5:	e8 c8 ff ff ff       	call   153c2 <bitmap_byte_count>
   153fa:	83 c4 04             	add    $0x4,%esp
   153fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes); // 将bitmap置位
   15400:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15404:	74 07                	je     1540d <bitmap_init+0x35>
   15406:	ba ff 00 00 00       	mov    $0xff,%edx
   1540b:	eb 05                	jmp    15412 <bitmap_init+0x3a>
   1540d:	ba 00 00 00 00       	mov    $0x0,%edx
   15412:	8b 45 08             	mov    0x8(%ebp),%eax
   15415:	8b 40 04             	mov    0x4(%eax),%eax
   15418:	83 ec 04             	sub    $0x4,%esp
   1541b:	ff 75 f4             	pushl  -0xc(%ebp)
   1541e:	52                   	push   %edx
   1541f:	50                   	push   %eax
   15420:	e8 a8 03 00 00       	call   157cd <kernel_memset>
   15425:	83 c4 10             	add    $0x10,%esp
}
   15428:	90                   	nop
   15429:	c9                   	leave  
   1542a:	c3                   	ret    

0001542b <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   1542b:	55                   	push   %ebp
   1542c:	89 e5                	mov    %esp,%ebp
   1542e:	56                   	push   %esi
   1542f:	53                   	push   %ebx
   15430:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   15433:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1543a:	e9 a2 00 00 00       	jmp    154e1 <bitmap_set_bit+0xb6>
    {
        // 可以考虑进行一定程序的优化!!
        if (bit)
   1543f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15443:	74 4a                	je     1548f <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= 1 << (index % 8);
   15445:	8b 45 08             	mov    0x8(%ebp),%eax
   15448:	8b 50 04             	mov    0x4(%eax),%edx
   1544b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1544e:	8d 48 07             	lea    0x7(%eax),%ecx
   15451:	85 c0                	test   %eax,%eax
   15453:	0f 48 c1             	cmovs  %ecx,%eax
   15456:	c1 f8 03             	sar    $0x3,%eax
   15459:	89 c3                	mov    %eax,%ebx
   1545b:	89 d8                	mov    %ebx,%eax
   1545d:	01 d0                	add    %edx,%eax
   1545f:	0f b6 00             	movzbl (%eax),%eax
   15462:	89 c6                	mov    %eax,%esi
   15464:	8b 45 0c             	mov    0xc(%ebp),%eax
   15467:	99                   	cltd   
   15468:	c1 ea 1d             	shr    $0x1d,%edx
   1546b:	01 d0                	add    %edx,%eax
   1546d:	83 e0 07             	and    $0x7,%eax
   15470:	29 d0                	sub    %edx,%eax
   15472:	ba 01 00 00 00       	mov    $0x1,%edx
   15477:	89 c1                	mov    %eax,%ecx
   15479:	d3 e2                	shl    %cl,%edx
   1547b:	89 d0                	mov    %edx,%eax
   1547d:	89 f2                	mov    %esi,%edx
   1547f:	09 c2                	or     %eax,%edx
   15481:	8b 45 08             	mov    0x8(%ebp),%eax
   15484:	8b 40 04             	mov    0x4(%eax),%eax
   15487:	89 d9                	mov    %ebx,%ecx
   15489:	01 c8                	add    %ecx,%eax
   1548b:	88 10                	mov    %dl,(%eax)
   1548d:	eb 4a                	jmp    154d9 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   1548f:	8b 45 08             	mov    0x8(%ebp),%eax
   15492:	8b 50 04             	mov    0x4(%eax),%edx
   15495:	8b 45 0c             	mov    0xc(%ebp),%eax
   15498:	8d 48 07             	lea    0x7(%eax),%ecx
   1549b:	85 c0                	test   %eax,%eax
   1549d:	0f 48 c1             	cmovs  %ecx,%eax
   154a0:	c1 f8 03             	sar    $0x3,%eax
   154a3:	89 c3                	mov    %eax,%ebx
   154a5:	89 d8                	mov    %ebx,%eax
   154a7:	01 d0                	add    %edx,%eax
   154a9:	0f b6 00             	movzbl (%eax),%eax
   154ac:	89 c6                	mov    %eax,%esi
   154ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   154b1:	99                   	cltd   
   154b2:	c1 ea 1d             	shr    $0x1d,%edx
   154b5:	01 d0                	add    %edx,%eax
   154b7:	83 e0 07             	and    $0x7,%eax
   154ba:	29 d0                	sub    %edx,%eax
   154bc:	ba 01 00 00 00       	mov    $0x1,%edx
   154c1:	89 c1                	mov    %eax,%ecx
   154c3:	d3 e2                	shl    %cl,%edx
   154c5:	89 d0                	mov    %edx,%eax
   154c7:	f7 d0                	not    %eax
   154c9:	89 f2                	mov    %esi,%edx
   154cb:	21 c2                	and    %eax,%edx
   154cd:	8b 45 08             	mov    0x8(%ebp),%eax
   154d0:	8b 40 04             	mov    0x4(%eax),%eax
   154d3:	89 d9                	mov    %ebx,%ecx
   154d5:	01 c8                	add    %ecx,%eax
   154d7:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   154d9:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   154dd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   154e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   154e4:	3b 45 10             	cmp    0x10(%ebp),%eax
   154e7:	7d 0e                	jge    154f7 <bitmap_set_bit+0xcc>
   154e9:	8b 45 08             	mov    0x8(%ebp),%eax
   154ec:	8b 00                	mov    (%eax),%eax
   154ee:	39 45 0c             	cmp    %eax,0xc(%ebp)
   154f1:	0f 8c 48 ff ff ff    	jl     1543f <bitmap_set_bit+0x14>
        }
    }
}
   154f7:	90                   	nop
   154f8:	83 c4 10             	add    $0x10,%esp
   154fb:	5b                   	pop    %ebx
   154fc:	5e                   	pop    %esi
   154fd:	5d                   	pop    %ebp
   154fe:	c3                   	ret    

000154ff <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   154ff:	55                   	push   %ebp
   15500:	89 e5                	mov    %esp,%ebp
   15502:	53                   	push   %ebx
    // return bitmap->bits[index / 8] & (1 << (index % 8));
    //  2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   15503:	8b 45 08             	mov    0x8(%ebp),%eax
   15506:	8b 50 04             	mov    0x4(%eax),%edx
   15509:	8b 45 0c             	mov    0xc(%ebp),%eax
   1550c:	8d 48 07             	lea    0x7(%eax),%ecx
   1550f:	85 c0                	test   %eax,%eax
   15511:	0f 48 c1             	cmovs  %ecx,%eax
   15514:	c1 f8 03             	sar    $0x3,%eax
   15517:	01 d0                	add    %edx,%eax
   15519:	0f b6 00             	movzbl (%eax),%eax
   1551c:	0f b6 d8             	movzbl %al,%ebx
   1551f:	8b 45 0c             	mov    0xc(%ebp),%eax
   15522:	99                   	cltd   
   15523:	c1 ea 1d             	shr    $0x1d,%edx
   15526:	01 d0                	add    %edx,%eax
   15528:	83 e0 07             	and    $0x7,%eax
   1552b:	29 d0                	sub    %edx,%eax
   1552d:	89 c1                	mov    %eax,%ecx
   1552f:	d3 fb                	sar    %cl,%ebx
   15531:	89 d8                	mov    %ebx,%eax
   15533:	83 e0 01             	and    $0x1,%eax
}
   15536:	5b                   	pop    %ebx
   15537:	5d                   	pop    %ebp
   15538:	c3                   	ret    

00015539 <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   15539:	55                   	push   %ebp
   1553a:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1553c:	ff 75 0c             	pushl  0xc(%ebp)
   1553f:	ff 75 08             	pushl  0x8(%ebp)
   15542:	e8 b8 ff ff ff       	call   154ff <bitmap_get_bit>
   15547:	83 c4 08             	add    $0x8,%esp
   1554a:	85 c0                	test   %eax,%eax
   1554c:	0f 95 c0             	setne  %al
   1554f:	0f b6 c0             	movzbl %al,%eax
}
   15552:	c9                   	leave  
   15553:	c3                   	ret    

00015554 <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   15554:	55                   	push   %ebp
   15555:	89 e5                	mov    %esp,%ebp
   15557:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1555a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   15561:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count)
   15568:	e9 85 00 00 00       	jmp    155f2 <bitmap_alloc_nbits+0x9e>
    {
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   1556d:	ff 75 fc             	pushl  -0x4(%ebp)
   15570:	ff 75 08             	pushl  0x8(%ebp)
   15573:	e8 87 ff ff ff       	call   154ff <bitmap_get_bit>
   15578:	83 c4 08             	add    $0x8,%esp
   1557b:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1557e:	74 06                	je     15586 <bitmap_alloc_nbits+0x32>
        {
            // 不同，继续寻找起始的bit
            search_idx++;
   15580:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   15584:	eb 6c                	jmp    155f2 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   15586:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15589:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   1558c:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   15593:	eb 27                	jmp    155bc <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   15595:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15598:	8d 50 01             	lea    0x1(%eax),%edx
   1559b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1559e:	50                   	push   %eax
   1559f:	ff 75 08             	pushl  0x8(%ebp)
   155a2:	e8 58 ff ff ff       	call   154ff <bitmap_get_bit>
   155a7:	83 c4 08             	add    $0x8,%esp
   155aa:	39 45 0c             	cmp    %eax,0xc(%ebp)
   155ad:	74 09                	je     155b8 <bitmap_alloc_nbits+0x64>
            {
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   155af:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   155b6:	eb 16                	jmp    155ce <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   155b8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   155bc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155bf:	3b 45 10             	cmp    0x10(%ebp),%eax
   155c2:	7d 0a                	jge    155ce <bitmap_alloc_nbits+0x7a>
   155c4:	8b 45 08             	mov    0x8(%ebp),%eax
   155c7:	8b 00                	mov    (%eax),%eax
   155c9:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   155cc:	7c c7                	jl     15595 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count)
   155ce:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155d1:	3b 45 10             	cmp    0x10(%ebp),%eax
   155d4:	7c 1c                	jl     155f2 <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   155d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   155d9:	f7 d0                	not    %eax
   155db:	50                   	push   %eax
   155dc:	ff 75 10             	pushl  0x10(%ebp)
   155df:	ff 75 f8             	pushl  -0x8(%ebp)
   155e2:	ff 75 08             	pushl  0x8(%ebp)
   155e5:	e8 41 fe ff ff       	call   1542b <bitmap_set_bit>
   155ea:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   155ed:	8b 45 f8             	mov    -0x8(%ebp),%eax
   155f0:	eb 13                	jmp    15605 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   155f2:	8b 45 08             	mov    0x8(%ebp),%eax
   155f5:	8b 00                	mov    (%eax),%eax
   155f7:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   155fa:	0f 8c 6d ff ff ff    	jl     1556d <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   15600:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15605:	c9                   	leave  
   15606:	c3                   	ret    

00015607 <hlt>:
{
   15607:	55                   	push   %ebp
   15608:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1560a:	f4                   	hlt    
}
   1560b:	90                   	nop
   1560c:	5d                   	pop    %ebp
   1560d:	c3                   	ret    

0001560e <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char *dest, const char *src)
{
   1560e:	55                   	push   %ebp
   1560f:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   15611:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15615:	74 3b                	je     15652 <kernel_strcpy+0x44>
   15617:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1561b:	74 35                	je     15652 <kernel_strcpy+0x44>
    {
        return;
    }

    while (*dest && *src)
   1561d:	eb 17                	jmp    15636 <kernel_strcpy+0x28>
    {
        *dest++ = *src++;
   1561f:	8b 55 0c             	mov    0xc(%ebp),%edx
   15622:	8d 42 01             	lea    0x1(%edx),%eax
   15625:	89 45 0c             	mov    %eax,0xc(%ebp)
   15628:	8b 45 08             	mov    0x8(%ebp),%eax
   1562b:	8d 48 01             	lea    0x1(%eax),%ecx
   1562e:	89 4d 08             	mov    %ecx,0x8(%ebp)
   15631:	0f b6 12             	movzbl (%edx),%edx
   15634:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   15636:	8b 45 08             	mov    0x8(%ebp),%eax
   15639:	0f b6 00             	movzbl (%eax),%eax
   1563c:	84 c0                	test   %al,%al
   1563e:	74 0a                	je     1564a <kernel_strcpy+0x3c>
   15640:	8b 45 0c             	mov    0xc(%ebp),%eax
   15643:	0f b6 00             	movzbl (%eax),%eax
   15646:	84 c0                	test   %al,%al
   15648:	75 d5                	jne    1561f <kernel_strcpy+0x11>
    }
    *dest = '\0';
   1564a:	8b 45 08             	mov    0x8(%ebp),%eax
   1564d:	c6 00 00             	movb   $0x0,(%eax)
   15650:	eb 01                	jmp    15653 <kernel_strcpy+0x45>
        return;
   15652:	90                   	nop
}
   15653:	5d                   	pop    %ebp
   15654:	c3                   	ret    

00015655 <kernel_strncpy>:

void kernel_strncpy(char *dest, const char *src, int size)
{
   15655:	55                   	push   %ebp
   15656:	89 e5                	mov    %esp,%ebp
   15658:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   1565b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1565f:	74 61                	je     156c2 <kernel_strncpy+0x6d>
   15661:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15665:	74 5b                	je     156c2 <kernel_strncpy+0x6d>
   15667:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1566b:	74 55                	je     156c2 <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   1566d:	8b 45 08             	mov    0x8(%ebp),%eax
   15670:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   15673:	8b 45 0c             	mov    0xc(%ebp),%eax
   15676:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   15679:	eb 17                	jmp    15692 <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   1567b:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1567e:	8d 42 01             	lea    0x1(%edx),%eax
   15681:	89 45 f8             	mov    %eax,-0x8(%ebp)
   15684:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15687:	8d 48 01             	lea    0x1(%eax),%ecx
   1568a:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1568d:	0f b6 12             	movzbl (%edx),%edx
   15690:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   15692:	8b 45 10             	mov    0x10(%ebp),%eax
   15695:	8d 50 ff             	lea    -0x1(%eax),%edx
   15698:	89 55 10             	mov    %edx,0x10(%ebp)
   1569b:	85 c0                	test   %eax,%eax
   1569d:	7e 0a                	jle    156a9 <kernel_strncpy+0x54>
   1569f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   156a2:	0f b6 00             	movzbl (%eax),%eax
   156a5:	84 c0                	test   %al,%al
   156a7:	75 d2                	jne    1567b <kernel_strncpy+0x26>
    }
    if (size == 0)
   156a9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   156ad:	75 0b                	jne    156ba <kernel_strncpy+0x65>
    {
        *(d - 1) = '\0';
   156af:	8b 45 fc             	mov    -0x4(%ebp),%eax
   156b2:	83 e8 01             	sub    $0x1,%eax
   156b5:	c6 00 00             	movb   $0x0,(%eax)
   156b8:	eb 09                	jmp    156c3 <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   156ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   156bd:	c6 00 00             	movb   $0x0,(%eax)
   156c0:	eb 01                	jmp    156c3 <kernel_strncpy+0x6e>
        return;
   156c2:	90                   	nop
    }
}
   156c3:	c9                   	leave  
   156c4:	c3                   	ret    

000156c5 <kernel_strncmp>:

int kernel_strncmp(const char *s1, const char *s2, int size)
{
   156c5:	55                   	push   %ebp
   156c6:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   156c8:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   156cc:	74 06                	je     156d4 <kernel_strncmp+0xf>
   156ce:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   156d2:	75 13                	jne    156e7 <kernel_strncmp+0x22>
    {
        return -1;
   156d4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   156d9:	eb 66                	jmp    15741 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   156db:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   156df:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   156e3:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   156e7:	8b 45 08             	mov    0x8(%ebp),%eax
   156ea:	0f b6 00             	movzbl (%eax),%eax
   156ed:	84 c0                	test   %al,%al
   156ef:	74 20                	je     15711 <kernel_strncmp+0x4c>
   156f1:	8b 45 0c             	mov    0xc(%ebp),%eax
   156f4:	0f b6 00             	movzbl (%eax),%eax
   156f7:	84 c0                	test   %al,%al
   156f9:	74 16                	je     15711 <kernel_strncmp+0x4c>
   156fb:	8b 45 08             	mov    0x8(%ebp),%eax
   156fe:	0f b6 10             	movzbl (%eax),%edx
   15701:	8b 45 0c             	mov    0xc(%ebp),%eax
   15704:	0f b6 00             	movzbl (%eax),%eax
   15707:	38 c2                	cmp    %al,%dl
   15709:	75 06                	jne    15711 <kernel_strncmp+0x4c>
   1570b:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1570f:	75 ca                	jne    156db <kernel_strncmp+0x16>
    }
    // 相等返回0
    // s1="abc",s2="abcdef" 也属于相等
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   15711:	8b 45 08             	mov    0x8(%ebp),%eax
   15714:	0f b6 00             	movzbl (%eax),%eax
   15717:	84 c0                	test   %al,%al
   15719:	74 21                	je     1573c <kernel_strncmp+0x77>
   1571b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1571e:	0f b6 00             	movzbl (%eax),%eax
   15721:	84 c0                	test   %al,%al
   15723:	74 17                	je     1573c <kernel_strncmp+0x77>
   15725:	8b 45 08             	mov    0x8(%ebp),%eax
   15728:	0f b6 10             	movzbl (%eax),%edx
   1572b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1572e:	0f b6 00             	movzbl (%eax),%eax
   15731:	38 c2                	cmp    %al,%dl
   15733:	74 07                	je     1573c <kernel_strncmp+0x77>
   15735:	b8 01 00 00 00       	mov    $0x1,%eax
   1573a:	eb 05                	jmp    15741 <kernel_strncmp+0x7c>
   1573c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15741:	5d                   	pop    %ebp
   15742:	c3                   	ret    

00015743 <kernel_strlen>:

int kernel_strlen(const char *str)
{
   15743:	55                   	push   %ebp
   15744:	89 e5                	mov    %esp,%ebp
   15746:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   15749:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1574d:	75 07                	jne    15756 <kernel_strlen+0x13>
    {
        return 0;
   1574f:	b8 00 00 00 00       	mov    $0x0,%eax
   15754:	eb 26                	jmp    1577c <kernel_strlen+0x39>
    }

    const char *c = str;
   15756:	8b 45 08             	mov    0x8(%ebp),%eax
   15759:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   1575c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   15763:	eb 04                	jmp    15769 <kernel_strlen+0x26>
    {
        len++;
   15765:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   15769:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1576c:	8d 50 01             	lea    0x1(%eax),%edx
   1576f:	89 55 fc             	mov    %edx,-0x4(%ebp)
   15772:	0f b6 00             	movzbl (%eax),%eax
   15775:	84 c0                	test   %al,%al
   15777:	75 ec                	jne    15765 <kernel_strlen+0x22>
    }

    return len;
   15779:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   1577c:	c9                   	leave  
   1577d:	c3                   	ret    

0001577e <kernel_memcpy>:

void kernel_memcpy(void *dest, void *src, int size)
{
   1577e:	55                   	push   %ebp
   1577f:	89 e5                	mov    %esp,%ebp
   15781:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   15784:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15788:	74 40                	je     157ca <kernel_memcpy+0x4c>
   1578a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1578e:	74 3a                	je     157ca <kernel_memcpy+0x4c>
   15790:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15794:	74 34                	je     157ca <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   15796:	8b 45 0c             	mov    0xc(%ebp),%eax
   15799:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   1579c:	8b 45 08             	mov    0x8(%ebp),%eax
   1579f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   157a2:	eb 17                	jmp    157bb <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   157a4:	8b 55 fc             	mov    -0x4(%ebp),%edx
   157a7:	8d 42 01             	lea    0x1(%edx),%eax
   157aa:	89 45 fc             	mov    %eax,-0x4(%ebp)
   157ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
   157b0:	8d 48 01             	lea    0x1(%eax),%ecx
   157b3:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   157b6:	0f b6 12             	movzbl (%edx),%edx
   157b9:	88 10                	mov    %dl,(%eax)
    while (size--)
   157bb:	8b 45 10             	mov    0x10(%ebp),%eax
   157be:	8d 50 ff             	lea    -0x1(%eax),%edx
   157c1:	89 55 10             	mov    %edx,0x10(%ebp)
   157c4:	85 c0                	test   %eax,%eax
   157c6:	75 dc                	jne    157a4 <kernel_memcpy+0x26>
   157c8:	eb 01                	jmp    157cb <kernel_memcpy+0x4d>
        return;
   157ca:	90                   	nop
    }
}
   157cb:	c9                   	leave  
   157cc:	c3                   	ret    

000157cd <kernel_memset>:

// 内存逐字节设置v
void kernel_memset(void *dest, uint8_t v, int size)
{
   157cd:	55                   	push   %ebp
   157ce:	89 e5                	mov    %esp,%ebp
   157d0:	83 ec 14             	sub    $0x14,%esp
   157d3:	8b 45 0c             	mov    0xc(%ebp),%eax
   157d6:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   157d9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   157dd:	74 2c                	je     1580b <kernel_memset+0x3e>
   157df:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   157e3:	74 26                	je     1580b <kernel_memset+0x3e>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   157e5:	8b 45 08             	mov    0x8(%ebp),%eax
   157e8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   157eb:	eb 0f                	jmp    157fc <kernel_memset+0x2f>
    {
        *d++ = v;
   157ed:	8b 45 fc             	mov    -0x4(%ebp),%eax
   157f0:	8d 50 01             	lea    0x1(%eax),%edx
   157f3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   157f6:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   157fa:	88 10                	mov    %dl,(%eax)
    while (size--)
   157fc:	8b 45 10             	mov    0x10(%ebp),%eax
   157ff:	8d 50 ff             	lea    -0x1(%eax),%edx
   15802:	89 55 10             	mov    %edx,0x10(%ebp)
   15805:	85 c0                	test   %eax,%eax
   15807:	75 e4                	jne    157ed <kernel_memset+0x20>
   15809:	eb 01                	jmp    1580c <kernel_memset+0x3f>
        return;
   1580b:	90                   	nop
    }
}
   1580c:	c9                   	leave  
   1580d:	c3                   	ret    

0001580e <kernel_memcmp>:

int kernel_memcmp(void *d1, void *d2, int size)
{
   1580e:	55                   	push   %ebp
   1580f:	89 e5                	mov    %esp,%ebp
   15811:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   15814:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15818:	74 06                	je     15820 <kernel_memcmp+0x12>
   1581a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1581e:	75 07                	jne    15827 <kernel_memcmp+0x19>
    {
        return 1;
   15820:	b8 01 00 00 00       	mov    $0x1,%eax
   15825:	eb 43                	jmp    1586a <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   15827:	8b 45 08             	mov    0x8(%ebp),%eax
   1582a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   1582d:	8b 45 0c             	mov    0xc(%ebp),%eax
   15830:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   15833:	eb 23                	jmp    15858 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   15835:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15838:	8d 50 01             	lea    0x1(%eax),%edx
   1583b:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1583e:	0f b6 08             	movzbl (%eax),%ecx
   15841:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15844:	8d 50 01             	lea    0x1(%eax),%edx
   15847:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1584a:	0f b6 00             	movzbl (%eax),%eax
   1584d:	38 c1                	cmp    %al,%cl
   1584f:	74 07                	je     15858 <kernel_memcmp+0x4a>
        {
            return 1;
   15851:	b8 01 00 00 00       	mov    $0x1,%eax
   15856:	eb 12                	jmp    1586a <kernel_memcmp+0x5c>
    while (size--)
   15858:	8b 45 10             	mov    0x10(%ebp),%eax
   1585b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1585e:	89 55 10             	mov    %edx,0x10(%ebp)
   15861:	85 c0                	test   %eax,%eax
   15863:	75 d0                	jne    15835 <kernel_memcmp+0x27>
        }
    }

    // 内存一样返回0
    return 0;
   15865:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1586a:	c9                   	leave  
   1586b:	c3                   	ret    

0001586c <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   1586c:	55                   	push   %ebp
   1586d:	89 e5                	mov    %esp,%ebp
   1586f:	53                   	push   %ebx
   15870:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   15873:	8b 45 08             	mov    0x8(%ebp),%eax
   15876:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   15879:	8b 45 0c             	mov    0xc(%ebp),%eax
   1587c:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   1587f:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   15883:	74 1d                	je     158a2 <kernel_itoa+0x36>
   15885:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   15889:	74 17                	je     158a2 <kernel_itoa+0x36>
   1588b:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1588f:	74 11                	je     158a2 <kernel_itoa+0x36>
   15891:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   15895:	74 0b                	je     158a2 <kernel_itoa+0x36>
    {
        *p = '\0';
   15897:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1589a:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1589d:	e9 03 01 00 00       	jmp    159a5 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   158a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   158a9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   158ad:	79 19                	jns    158c8 <kernel_itoa+0x5c>
   158af:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   158b3:	75 13                	jne    158c8 <kernel_itoa+0x5c>
    {
        *p++ = '-';
   158b5:	8b 45 f8             	mov    -0x8(%ebp),%eax
   158b8:	8d 50 01             	lea    0x1(%eax),%edx
   158bb:	89 55 f8             	mov    %edx,-0x8(%ebp)
   158be:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   158c1:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   158c8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   158cc:	74 3b                	je     15909 <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   158ce:	8b 0d 98 70 01 00    	mov    0x17098,%ecx
   158d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   158d7:	99                   	cltd   
   158d8:	f7 7d 10             	idivl  0x10(%ebp)
   158db:	89 d0                	mov    %edx,%eax
   158dd:	83 c0 0f             	add    $0xf,%eax
   158e0:	01 c8                	add    %ecx,%eax
   158e2:	0f b6 00             	movzbl (%eax),%eax
   158e5:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   158e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   158eb:	8d 50 01             	lea    0x1(%eax),%edx
   158ee:	89 55 f8             	mov    %edx,-0x8(%ebp)
   158f1:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   158f5:	88 10                	mov    %dl,(%eax)
            num /= base;
   158f7:	8b 45 0c             	mov    0xc(%ebp),%eax
   158fa:	99                   	cltd   
   158fb:	f7 7d 10             	idivl  0x10(%ebp)
   158fe:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   15901:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15905:	75 c7                	jne    158ce <kernel_itoa+0x62>
   15907:	eb 4b                	jmp    15954 <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   15909:	8b 45 0c             	mov    0xc(%ebp),%eax
   1590c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   1590f:	8b 0d 98 70 01 00    	mov    0x17098,%ecx
   15915:	8b 5d 10             	mov    0x10(%ebp),%ebx
   15918:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1591b:	ba 00 00 00 00       	mov    $0x0,%edx
   15920:	f7 f3                	div    %ebx
   15922:	89 d0                	mov    %edx,%eax
   15924:	83 c0 0f             	add    $0xf,%eax
   15927:	01 c8                	add    %ecx,%eax
   15929:	0f b6 00             	movzbl (%eax),%eax
   1592c:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   1592f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15932:	8d 50 01             	lea    0x1(%eax),%edx
   15935:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15938:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1593c:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   1593e:	8b 5d 10             	mov    0x10(%ebp),%ebx
   15941:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15944:	ba 00 00 00 00       	mov    $0x0,%edx
   15949:	f7 f3                	div    %ebx
   1594b:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   1594e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15952:	75 bb                	jne    1590f <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   15954:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15957:	8d 50 ff             	lea    -0x1(%eax),%edx
   1595a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1595d:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   15960:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15964:	74 08                	je     1596e <kernel_itoa+0x102>
   15966:	8b 45 08             	mov    0x8(%ebp),%eax
   15969:	83 c0 01             	add    $0x1,%eax
   1596c:	eb 03                	jmp    15971 <kernel_itoa+0x105>
   1596e:	8b 45 08             	mov    0x8(%ebp),%eax
   15971:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   15974:	eb 27                	jmp    1599d <kernel_itoa+0x131>
    {
        char ch = *start;
   15976:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15979:	0f b6 00             	movzbl (%eax),%eax
   1597c:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1597f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15982:	0f b6 10             	movzbl (%eax),%edx
   15985:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15988:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   1598a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1598d:	8d 50 ff             	lea    -0x1(%eax),%edx
   15990:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15993:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   15997:	88 10                	mov    %dl,(%eax)
        start++;
   15999:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   1599d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   159a0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   159a3:	72 d1                	jb     15976 <kernel_itoa+0x10a>
    }
}
   159a5:	83 c4 20             	add    $0x20,%esp
   159a8:	5b                   	pop    %ebx
   159a9:	5d                   	pop    %ebp
   159aa:	c3                   	ret    

000159ab <kernel_vsprintf>:
// buf 为最终显示的目标
// fmt 为整个字符串
// args 为va_list 可变变量
void kernel_vsprintf(char *buf, const char *fmt, va_list args)
{
   159ab:	55                   	push   %ebp
   159ac:	89 e5                	mov    %esp,%ebp
   159ae:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   159b1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buf;
   159b8:	8b 45 08             	mov    0x8(%ebp),%eax
   159bb:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   159be:	e9 17 01 00 00       	jmp    15ada <kernel_vsprintf+0x12f>
    {
        switch (state)
   159c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   159c6:	85 c0                	test   %eax,%eax
   159c8:	74 0a                	je     159d4 <kernel_vsprintf+0x29>
   159ca:	83 f8 01             	cmp    $0x1,%eax
   159cd:	74 2b                	je     159fa <kernel_vsprintf+0x4f>
   159cf:	e9 06 01 00 00       	jmp    15ada <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   159d4:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   159d8:	75 0c                	jne    159e6 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   159da:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   159e1:	e9 f4 00 00 00       	jmp    15ada <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   159e6:	8b 45 f8             	mov    -0x8(%ebp),%eax
   159e9:	8d 50 01             	lea    0x1(%eax),%edx
   159ec:	89 55 f8             	mov    %edx,-0x8(%ebp)
   159ef:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   159f3:	88 10                	mov    %dl,(%eax)
            }
            break;
   159f5:	e9 e0 00 00 00       	jmp    15ada <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   159fa:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   159fe:	75 31                	jne    15a31 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   15a00:	8b 45 10             	mov    0x10(%ebp),%eax
   15a03:	8d 50 04             	lea    0x4(%eax),%edx
   15a06:	89 55 10             	mov    %edx,0x10(%ebp)
   15a09:	8b 00                	mov    (%eax),%eax
   15a0b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   15a0e:	6a 0a                	push   $0xa
   15a10:	ff 75 e4             	pushl  -0x1c(%ebp)
   15a13:	ff 75 f8             	pushl  -0x8(%ebp)
   15a16:	e8 51 fe ff ff       	call   1586c <kernel_itoa>
   15a1b:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr); // 移动到下一个
   15a1e:	ff 75 f8             	pushl  -0x8(%ebp)
   15a21:	e8 1d fd ff ff       	call   15743 <kernel_strlen>
   15a26:	83 c4 04             	add    $0x4,%esp
   15a29:	01 45 f8             	add    %eax,-0x8(%ebp)
   15a2c:	e9 a1 00 00 00       	jmp    15ad2 <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   15a31:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   15a35:	75 2e                	jne    15a65 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   15a37:	8b 45 10             	mov    0x10(%ebp),%eax
   15a3a:	8d 50 04             	lea    0x4(%eax),%edx
   15a3d:	89 55 10             	mov    %edx,0x10(%ebp)
   15a40:	8b 00                	mov    (%eax),%eax
   15a42:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   15a45:	6a 10                	push   $0x10
   15a47:	ff 75 e8             	pushl  -0x18(%ebp)
   15a4a:	ff 75 f8             	pushl  -0x8(%ebp)
   15a4d:	e8 1a fe ff ff       	call   1586c <kernel_itoa>
   15a52:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   15a55:	ff 75 f8             	pushl  -0x8(%ebp)
   15a58:	e8 e6 fc ff ff       	call   15743 <kernel_strlen>
   15a5d:	83 c4 04             	add    $0x4,%esp
   15a60:	01 45 f8             	add    %eax,-0x8(%ebp)
   15a63:	eb 6d                	jmp    15ad2 <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   15a65:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   15a69:	75 1f                	jne    15a8a <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   15a6b:	8b 45 10             	mov    0x10(%ebp),%eax
   15a6e:	8d 50 04             	lea    0x4(%eax),%edx
   15a71:	89 55 10             	mov    %edx,0x10(%ebp)
   15a74:	8b 00                	mov    (%eax),%eax
   15a76:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   15a79:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15a7c:	8d 50 01             	lea    0x1(%eax),%edx
   15a7f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   15a82:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   15a86:	88 10                	mov    %dl,(%eax)
   15a88:	eb 48                	jmp    15ad2 <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   15a8a:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   15a8e:	75 42                	jne    15ad2 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   15a90:	8b 45 10             	mov    0x10(%ebp),%eax
   15a93:	8d 50 04             	lea    0x4(%eax),%edx
   15a96:	89 55 10             	mov    %edx,0x10(%ebp)
   15a99:	8b 00                	mov    (%eax),%eax
   15a9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   15a9e:	ff 75 f4             	pushl  -0xc(%ebp)
   15aa1:	e8 9d fc ff ff       	call   15743 <kernel_strlen>
   15aa6:	83 c4 04             	add    $0x4,%esp
   15aa9:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   15aac:	eb 17                	jmp    15ac5 <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   15aae:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15ab1:	8d 42 01             	lea    0x1(%edx),%eax
   15ab4:	89 45 f4             	mov    %eax,-0xc(%ebp)
   15ab7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   15aba:	8d 48 01             	lea    0x1(%eax),%ecx
   15abd:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   15ac0:	0f b6 12             	movzbl (%edx),%edx
   15ac3:	88 10                	mov    %dl,(%eax)
                while (len--)
   15ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15ac8:	8d 50 ff             	lea    -0x1(%eax),%edx
   15acb:	89 55 f0             	mov    %edx,-0x10(%ebp)
   15ace:	85 c0                	test   %eax,%eax
   15ad0:	75 dc                	jne    15aae <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   15ad2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   15ad9:	90                   	nop
    while ((ch = *fmt++))
   15ada:	8b 45 0c             	mov    0xc(%ebp),%eax
   15add:	8d 50 01             	lea    0x1(%eax),%edx
   15ae0:	89 55 0c             	mov    %edx,0xc(%ebp)
   15ae3:	0f b6 00             	movzbl (%eax),%eax
   15ae6:	88 45 ef             	mov    %al,-0x11(%ebp)
   15ae9:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   15aed:	0f 85 d0 fe ff ff    	jne    159c3 <kernel_vsprintf+0x18>
        }
    }
}
   15af3:	90                   	nop
   15af4:	c9                   	leave  
   15af5:	c3                   	ret    

00015af6 <panic>:

void panic(const char *file, int line, const char *func, const char *cond)
{
   15af6:	55                   	push   %ebp
   15af7:	89 e5                	mov    %esp,%ebp
   15af9:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   15afc:	83 ec 08             	sub    $0x8,%esp
   15aff:	ff 75 14             	pushl  0x14(%ebp)
   15b02:	68 54 6d 01 00       	push   $0x16d54
   15b07:	e8 ba 02 00 00       	call   15dc6 <log_printf>
   15b0c:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   15b0f:	ff 75 10             	pushl  0x10(%ebp)
   15b12:	ff 75 0c             	pushl  0xc(%ebp)
   15b15:	ff 75 08             	pushl  0x8(%ebp)
   15b18:	68 66 6d 01 00       	push   $0x16d66
   15b1d:	e8 a4 02 00 00       	call   15dc6 <log_printf>
   15b22:	83 c4 10             	add    $0x10,%esp

    for (;;)
    {
        hlt();
   15b25:	e8 dd fa ff ff       	call   15607 <hlt>
   15b2a:	eb f9                	jmp    15b25 <panic+0x2f>

00015b2c <get_file_name>:

/**
 * @brief 从路径中解释文件名
 */
char *get_file_name(char *name)
{
   15b2c:	55                   	push   %ebp
   15b2d:	89 e5                	mov    %esp,%ebp
   15b2f:	83 ec 10             	sub    $0x10,%esp
    char *s = name;
   15b32:	8b 45 08             	mov    0x8(%ebp),%eax
   15b35:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0')
   15b38:	eb 04                	jmp    15b3e <get_file_name+0x12>
    {
        s++;
   15b3a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0')
   15b3e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15b41:	0f b6 00             	movzbl (%eax),%eax
   15b44:	84 c0                	test   %al,%al
   15b46:	75 f2                	jne    15b3a <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name))
   15b48:	eb 04                	jmp    15b4e <get_file_name+0x22>
    {
        s--;
   15b4a:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name))
   15b4e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15b51:	0f b6 00             	movzbl (%eax),%eax
   15b54:	3c 5c                	cmp    $0x5c,%al
   15b56:	74 12                	je     15b6a <get_file_name+0x3e>
   15b58:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15b5b:	0f b6 00             	movzbl (%eax),%eax
   15b5e:	3c 2f                	cmp    $0x2f,%al
   15b60:	74 08                	je     15b6a <get_file_name+0x3e>
   15b62:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15b65:	3b 45 08             	cmp    0x8(%ebp),%eax
   15b68:	73 e0                	jae    15b4a <get_file_name+0x1e>
    }
    return s + 1;
   15b6a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15b6d:	83 c0 01             	add    $0x1,%eax
}
   15b70:	c9                   	leave  
   15b71:	c3                   	ret    

00015b72 <strings_count>:

/**
 * @brief 计算字符串的数量
 */
int strings_count(char **start)
{
   15b72:	55                   	push   %ebp
   15b73:	89 e5                	mov    %esp,%ebp
   15b75:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   15b78:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start)
   15b7f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   15b83:	74 15                	je     15b9a <strings_count+0x28>
    {
        while (*start++)
   15b85:	eb 04                	jmp    15b8b <strings_count+0x19>
        {
            count++;
   15b87:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++)
   15b8b:	8b 45 08             	mov    0x8(%ebp),%eax
   15b8e:	8d 50 04             	lea    0x4(%eax),%edx
   15b91:	89 55 08             	mov    %edx,0x8(%ebp)
   15b94:	8b 00                	mov    (%eax),%eax
   15b96:	85 c0                	test   %eax,%eax
   15b98:	75 ed                	jne    15b87 <strings_count+0x15>
        }
    }
    return count;
   15b9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15b9d:	c9                   	leave  
   15b9e:	c3                   	ret    

00015b9f <list_is_empty>:
{
   15b9f:	55                   	push   %ebp
   15ba0:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   15ba2:	8b 45 08             	mov    0x8(%ebp),%eax
   15ba5:	8b 40 08             	mov    0x8(%eax),%eax
   15ba8:	85 c0                	test   %eax,%eax
   15baa:	0f 94 c0             	sete   %al
   15bad:	0f b6 c0             	movzbl %al,%eax
}
   15bb0:	5d                   	pop    %ebp
   15bb1:	c3                   	ret    

00015bb2 <list_init>:
/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list)
{
   15bb2:	55                   	push   %ebp
   15bb3:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   15bb5:	8b 45 08             	mov    0x8(%ebp),%eax
   15bb8:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15bbf:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc2:	8b 50 04             	mov    0x4(%eax),%edx
   15bc5:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc8:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   15bca:	8b 45 08             	mov    0x8(%ebp),%eax
   15bcd:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   15bd4:	90                   	nop
   15bd5:	5d                   	pop    %ebp
   15bd6:	c3                   	ret    

00015bd7 <list_insert_first>:
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node)
{
   15bd7:	55                   	push   %ebp
   15bd8:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   15bda:	8b 45 08             	mov    0x8(%ebp),%eax
   15bdd:	8b 10                	mov    (%eax),%edx
   15bdf:	8b 45 0c             	mov    0xc(%ebp),%eax
   15be2:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   15be5:	8b 45 0c             	mov    0xc(%ebp),%eax
   15be8:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list))
   15bee:	ff 75 08             	pushl  0x8(%ebp)
   15bf1:	e8 a9 ff ff ff       	call   15b9f <list_is_empty>
   15bf6:	83 c4 04             	add    $0x4,%esp
   15bf9:	85 c0                	test   %eax,%eax
   15bfb:	74 15                	je     15c12 <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   15bfd:	8b 45 08             	mov    0x8(%ebp),%eax
   15c00:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c03:	89 10                	mov    %edx,(%eax)
   15c05:	8b 45 08             	mov    0x8(%ebp),%eax
   15c08:	8b 10                	mov    (%eax),%edx
   15c0a:	8b 45 08             	mov    0x8(%ebp),%eax
   15c0d:	89 50 04             	mov    %edx,0x4(%eax)
   15c10:	eb 12                	jmp    15c24 <list_insert_first+0x4d>
    }
    else
    {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   15c12:	8b 45 08             	mov    0x8(%ebp),%eax
   15c15:	8b 00                	mov    (%eax),%eax
   15c17:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c1a:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   15c1c:	8b 45 08             	mov    0x8(%ebp),%eax
   15c1f:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c22:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   15c24:	8b 45 08             	mov    0x8(%ebp),%eax
   15c27:	8b 40 08             	mov    0x8(%eax),%eax
   15c2a:	8d 50 01             	lea    0x1(%eax),%edx
   15c2d:	8b 45 08             	mov    0x8(%ebp),%eax
   15c30:	89 50 08             	mov    %edx,0x8(%eax)
}
   15c33:	90                   	nop
   15c34:	c9                   	leave  
   15c35:	c3                   	ret    

00015c36 <list_insert_last>:
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node)
{
   15c36:	55                   	push   %ebp
   15c37:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   15c39:	8b 45 08             	mov    0x8(%ebp),%eax
   15c3c:	8b 50 04             	mov    0x4(%eax),%edx
   15c3f:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c42:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   15c44:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c47:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list))
   15c4e:	ff 75 08             	pushl  0x8(%ebp)
   15c51:	e8 49 ff ff ff       	call   15b9f <list_is_empty>
   15c56:	83 c4 04             	add    $0x4,%esp
   15c59:	85 c0                	test   %eax,%eax
   15c5b:	74 16                	je     15c73 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   15c5d:	8b 45 08             	mov    0x8(%ebp),%eax
   15c60:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c63:	89 50 04             	mov    %edx,0x4(%eax)
   15c66:	8b 45 08             	mov    0x8(%ebp),%eax
   15c69:	8b 50 04             	mov    0x4(%eax),%edx
   15c6c:	8b 45 08             	mov    0x8(%ebp),%eax
   15c6f:	89 10                	mov    %edx,(%eax)
   15c71:	eb 15                	jmp    15c88 <list_insert_last+0x52>
    }
    else
    {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   15c73:	8b 45 08             	mov    0x8(%ebp),%eax
   15c76:	8b 40 04             	mov    0x4(%eax),%eax
   15c79:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c7c:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   15c7f:	8b 45 08             	mov    0x8(%ebp),%eax
   15c82:	8b 55 0c             	mov    0xc(%ebp),%edx
   15c85:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   15c88:	8b 45 08             	mov    0x8(%ebp),%eax
   15c8b:	8b 40 08             	mov    0x8(%eax),%eax
   15c8e:	8d 50 01             	lea    0x1(%eax),%edx
   15c91:	8b 45 08             	mov    0x8(%ebp),%eax
   15c94:	89 50 08             	mov    %edx,0x8(%eax)
}
   15c97:	90                   	nop
   15c98:	c9                   	leave  
   15c99:	c3                   	ret    

00015c9a <list_remove_first>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t *list_remove_first(list_t *list)
{
   15c9a:	55                   	push   %ebp
   15c9b:	89 e5                	mov    %esp,%ebp
   15c9d:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list))
   15ca0:	ff 75 08             	pushl  0x8(%ebp)
   15ca3:	e8 f7 fe ff ff       	call   15b9f <list_is_empty>
   15ca8:	83 c4 04             	add    $0x4,%esp
   15cab:	85 c0                	test   %eax,%eax
   15cad:	74 07                	je     15cb6 <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   15caf:	b8 00 00 00 00       	mov    $0x0,%eax
   15cb4:	eb 5a                	jmp    15d10 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t *remove_node = list->first;
   15cb6:	8b 45 08             	mov    0x8(%ebp),%eax
   15cb9:	8b 00                	mov    (%eax),%eax
   15cbb:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   15cbe:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15cc1:	8b 50 04             	mov    0x4(%eax),%edx
   15cc4:	8b 45 08             	mov    0x8(%ebp),%eax
   15cc7:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0)
   15cc9:	8b 45 08             	mov    0x8(%ebp),%eax
   15ccc:	8b 00                	mov    (%eax),%eax
   15cce:	85 c0                	test   %eax,%eax
   15cd0:	75 0c                	jne    15cde <list_remove_first+0x44>
    {
        // node为最后一个结点
        list->last = (list_node_t *)0;
   15cd2:	8b 45 08             	mov    0x8(%ebp),%eax
   15cd5:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15cdc:	eb 0c                	jmp    15cea <list_remove_first+0x50>
    }
    else
    {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   15cde:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15ce1:	8b 40 04             	mov    0x4(%eax),%eax
   15ce4:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t *)0;
   15cea:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15ced:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   15cf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15cf6:	8b 10                	mov    (%eax),%edx
   15cf8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   15cfb:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   15cfe:	8b 45 08             	mov    0x8(%ebp),%eax
   15d01:	8b 40 08             	mov    0x8(%eax),%eax
   15d04:	8d 50 ff             	lea    -0x1(%eax),%edx
   15d07:	8b 45 08             	mov    0x8(%ebp),%eax
   15d0a:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   15d0d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   15d10:	c9                   	leave  
   15d11:	c3                   	ret    

00015d12 <list_remove>:
/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t *list_remove(list_t *list, list_node_t *remove_node)
{
   15d12:	55                   	push   %ebp
   15d13:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first)
   15d15:	8b 45 08             	mov    0x8(%ebp),%eax
   15d18:	8b 00                	mov    (%eax),%eax
   15d1a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15d1d:	75 0b                	jne    15d2a <list_remove+0x18>
    {
        list->first = remove_node->next;
   15d1f:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d22:	8b 50 04             	mov    0x4(%eax),%edx
   15d25:	8b 45 08             	mov    0x8(%ebp),%eax
   15d28:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last)
   15d2a:	8b 45 08             	mov    0x8(%ebp),%eax
   15d2d:	8b 40 04             	mov    0x4(%eax),%eax
   15d30:	39 45 0c             	cmp    %eax,0xc(%ebp)
   15d33:	75 0b                	jne    15d40 <list_remove+0x2e>
    {
        list->last = remove_node->pre;
   15d35:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d38:	8b 10                	mov    (%eax),%edx
   15d3a:	8b 45 08             	mov    0x8(%ebp),%eax
   15d3d:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre)
   15d40:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d43:	8b 00                	mov    (%eax),%eax
   15d45:	85 c0                	test   %eax,%eax
   15d47:	74 0e                	je     15d57 <list_remove+0x45>
    {
        remove_node->pre->next = remove_node->next;
   15d49:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d4c:	8b 00                	mov    (%eax),%eax
   15d4e:	8b 55 0c             	mov    0xc(%ebp),%edx
   15d51:	8b 52 04             	mov    0x4(%edx),%edx
   15d54:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next)
   15d57:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d5a:	8b 40 04             	mov    0x4(%eax),%eax
   15d5d:	85 c0                	test   %eax,%eax
   15d5f:	74 0d                	je     15d6e <list_remove+0x5c>
    {
        remove_node->next->pre = remove_node->pre;
   15d61:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d64:	8b 40 04             	mov    0x4(%eax),%eax
   15d67:	8b 55 0c             	mov    0xc(%ebp),%edx
   15d6a:	8b 12                	mov    (%edx),%edx
   15d6c:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t *)0;
   15d6e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d71:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   15d78:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d7b:	8b 50 04             	mov    0x4(%eax),%edx
   15d7e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15d81:	89 10                	mov    %edx,(%eax)
    --list->count;
   15d83:	8b 45 08             	mov    0x8(%ebp),%eax
   15d86:	8b 40 08             	mov    0x8(%eax),%eax
   15d89:	8d 50 ff             	lea    -0x1(%eax),%edx
   15d8c:	8b 45 08             	mov    0x8(%ebp),%eax
   15d8f:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   15d92:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   15d95:	5d                   	pop    %ebp
   15d96:	c3                   	ret    

00015d97 <log_init>:

static int log_dev_id;
static mutex_t mutex;

void log_init(void)
{
   15d97:	55                   	push   %ebp
   15d98:	89 e5                	mov    %esp,%ebp
   15d9a:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   15d9d:	83 ec 0c             	sub    $0xc,%esp
   15da0:	68 68 44 07 00       	push   $0x74468
   15da5:	e8 55 f3 ff ff       	call   150ff <mutex_init>
   15daa:	83 c4 10             	add    $0x10,%esp
    log_dev_id = dev_open(DEV_TTY, 0, (void *)0);
   15dad:	83 ec 04             	sub    $0x4,%esp
   15db0:	6a 00                	push   $0x0
   15db2:	6a 00                	push   $0x0
   15db4:	6a 01                	push   $0x1
   15db6:	e8 cd dd ff ff       	call   13b88 <dev_open>
   15dbb:	83 c4 10             	add    $0x10,%esp
   15dbe:	a3 64 44 07 00       	mov    %eax,0x74464
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
    mutex_init(&mutex);
#endif
}
   15dc3:	90                   	nop
   15dc4:	c9                   	leave  
   15dc5:	c3                   	ret    

00015dc6 <log_printf>:

void log_printf(const char *fmt, ...)
{
   15dc6:	55                   	push   %ebp
   15dc7:	89 e5                	mov    %esp,%ebp
   15dc9:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   15dcf:	83 ec 04             	sub    $0x4,%esp
   15dd2:	68 80 00 00 00       	push   $0x80
   15dd7:	6a 00                	push   $0x0
   15dd9:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   15ddf:	50                   	push   %eax
   15de0:	e8 e8 f9 ff ff       	call   157cd <kernel_memset>
   15de5:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   15de8:	8d 45 0c             	lea    0xc(%ebp),%eax
   15deb:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   15df1:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   15df7:	83 ec 04             	sub    $0x4,%esp
   15dfa:	50                   	push   %eax
   15dfb:	ff 75 08             	pushl  0x8(%ebp)
   15dfe:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   15e04:	50                   	push   %eax
   15e05:	e8 a1 fb ff ff       	call   159ab <kernel_vsprintf>
   15e0a:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 临界区进入
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   15e0d:	83 ec 0c             	sub    $0xc,%esp
   15e10:	68 68 44 07 00       	push   $0x74468
   15e15:	e8 13 f3 ff ff       	call   1512d <mutex_lock>
   15e1a:	83 c4 10             	add    $0x10,%esp
    // 增加默认换行
    outb(COM1_PORT, '\r'); // 行号不变，列号归零
    outb(COM1_PORT, '\n'); // 列号不变，行号+1
#else
    // console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   15e1d:	83 ec 0c             	sub    $0xc,%esp
   15e20:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   15e26:	50                   	push   %eax
   15e27:	e8 17 f9 ff ff       	call   15743 <kernel_strlen>
   15e2c:	83 c4 10             	add    $0x10,%esp
   15e2f:	89 c2                	mov    %eax,%edx
   15e31:	a1 64 44 07 00       	mov    0x74464,%eax
   15e36:	52                   	push   %edx
   15e37:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
   15e3d:	52                   	push   %edx
   15e3e:	6a 00                	push   $0x0
   15e40:	50                   	push   %eax
   15e41:	e8 d8 de ff ff       	call   13d1e <dev_write>
   15e46:	83 c4 10             	add    $0x10,%esp
    char c = '\n';
   15e49:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    // console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   15e50:	a1 64 44 07 00       	mov    0x74464,%eax
   15e55:	6a 01                	push   $0x1
   15e57:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   15e5d:	52                   	push   %edx
   15e5e:	6a 00                	push   $0x0
   15e60:	50                   	push   %eax
   15e61:	e8 b8 de ff ff       	call   13d1e <dev_write>
   15e66:	83 c4 10             	add    $0x10,%esp
#endif
    // irq_leave_protection(state); // 临界区退出
    mutex_unlock(&mutex);
   15e69:	83 ec 0c             	sub    $0xc,%esp
   15e6c:	68 68 44 07 00       	push   $0x74468
   15e71:	e8 4b f3 ff ff       	call   151c1 <mutex_unlock>
   15e76:	83 c4 10             	add    $0x10,%esp
   15e79:	90                   	nop
   15e7a:	c9                   	leave  
   15e7b:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include "core/task.h"
#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main(void)
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    {
        print_msg("child task id=%d\n", pid);
        print_msg("parent: %d\n", count);
    }
#endif
    for (int i = 0; i < TTY_NR; i++)
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
    {
        int pid = fork();
80000022:	e8 60 01 00 00       	call   80000187 <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0)
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
        {
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 9e 6c 01 00       	push   $0x16c9e
8000003a:	e8 20 01 00 00       	call   8000015f <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        }
        else if (pid == 0)
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
        {
            // 子进程
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char *argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("/shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 b7 6c 01 00       	push   $0x16cb7
80000082:	e8 1b 01 00 00       	call   800001a2 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 9e 6c 01 00       	push   $0x16c9e
80000094:	e8 c6 00 00 00       	call   8000015f <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1)
            {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 71 00 00 00       	call   8000011a <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++)
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>
    for (;;)
    {
        // print_msg("task id=%d", pid);
        // log_printf("first task.");
        // sys_msleep(1000);
        msleep(1000);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	68 e8 03 00 00       	push   $0x3e8
800000c4:	e8 51 00 00 00       	call   8000011a <msleep>
800000c9:	83 c4 10             	add    $0x10,%esp
800000cc:	eb ee                	jmp    800000bc <first_task_main+0xac>

800000ce <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
800000ce:	55                   	push   %ebp
800000cf:	89 e5                	mov    %esp,%ebp
800000d1:	57                   	push   %edi
800000d2:	56                   	push   %esi
800000d3:	53                   	push   %ebx
800000d4:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
800000d7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000de:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
800000e5:	8b 45 08             	mov    0x8(%ebp),%eax
800000e8:	8b 40 10             	mov    0x10(%eax),%eax
800000eb:	8b 55 08             	mov    0x8(%ebp),%edx
800000ee:	8b 52 0c             	mov    0xc(%edx),%edx
800000f1:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f4:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
800000f7:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000fa:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fd:	8b 75 08             	mov    0x8(%ebp),%esi
80000100:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000102:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000105:	50                   	push   %eax
80000106:	52                   	push   %edx
80000107:	51                   	push   %ecx
80000108:	53                   	push   %ebx
80000109:	56                   	push   %esi
8000010a:	ff 1f                	lcall  *(%edi)
8000010c:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
8000010f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000112:	83 c4 10             	add    $0x10,%esp
80000115:	5b                   	pop    %ebx
80000116:	5e                   	pop    %esi
80000117:	5f                   	pop    %edi
80000118:	5d                   	pop    %ebp
80000119:	c3                   	ret    

8000011a <msleep>:

int msleep(int ms)
{
8000011a:	55                   	push   %ebp
8000011b:	89 e5                	mov    %esp,%ebp
8000011d:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
80000120:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000124:	7e 1b                	jle    80000141 <msleep+0x27>
    {
        return;
    }

    syscall_args_t args;
    args.id = SYS_msleep;
80000126:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8000012d:	8b 45 08             	mov    0x8(%ebp),%eax
80000130:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000133:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000136:	50                   	push   %eax
80000137:	e8 92 ff ff ff       	call   800000ce <sys_call>
8000013c:	83 c4 04             	add    $0x4,%esp
8000013f:	eb 01                	jmp    80000142 <msleep+0x28>
        return;
80000141:	90                   	nop
}
80000142:	c9                   	leave  
80000143:	c3                   	ret    

80000144 <getpid>:

int getpid(void)
{
80000144:	55                   	push   %ebp
80000145:	89 e5                	mov    %esp,%ebp
80000147:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014a:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000151:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000154:	50                   	push   %eax
80000155:	e8 74 ff ff ff       	call   800000ce <sys_call>
8000015a:	83 c4 04             	add    $0x4,%esp
}
8000015d:	c9                   	leave  
8000015e:	c3                   	ret    

8000015f <print_msg>:

void print_msg(const char *fmt, int arg)
{
8000015f:	55                   	push   %ebp
80000160:	89 e5                	mov    %esp,%ebp
80000162:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000165:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016c:	8b 45 08             	mov    0x8(%ebp),%eax
8000016f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000172:	8b 45 0c             	mov    0xc(%ebp),%eax
80000175:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
80000178:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017b:	50                   	push   %eax
8000017c:	e8 4d ff ff ff       	call   800000ce <sys_call>
80000181:	83 c4 04             	add    $0x4,%esp
}
80000184:	90                   	nop
80000185:	c9                   	leave  
80000186:	c3                   	ret    

80000187 <fork>:

int fork(void)
{
80000187:	55                   	push   %ebp
80000188:	89 e5                	mov    %esp,%ebp
8000018a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018d:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000194:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000197:	50                   	push   %eax
80000198:	e8 31 ff ff ff       	call   800000ce <sys_call>
8000019d:	83 c4 04             	add    $0x4,%esp
}
800001a0:	c9                   	leave  
800001a1:	c3                   	ret    

800001a2 <execve>:

int execve(const char *name, char *const *argv, char *const *env)
{
800001a2:	55                   	push   %ebp
800001a3:	89 e5                	mov    %esp,%ebp
800001a5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001a8:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001af:	8b 45 08             	mov    0x8(%ebp),%eax
800001b2:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b5:	8b 45 0c             	mov    0xc(%ebp),%eax
800001b8:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001bb:	8b 45 10             	mov    0x10(%ebp),%eax
800001be:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c4:	50                   	push   %eax
800001c5:	e8 04 ff ff ff       	call   800000ce <sys_call>
800001ca:	83 c4 04             	add    $0x4,%esp
}
800001cd:	c9                   	leave  
800001ce:	c3                   	ret    

800001cf <yield>:

int yield(void)
{
800001cf:	55                   	push   %ebp
800001d0:	89 e5                	mov    %esp,%ebp
800001d2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d5:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001dc:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001df:	50                   	push   %eax
800001e0:	e8 e9 fe ff ff       	call   800000ce <sys_call>
800001e5:	83 c4 04             	add    $0x4,%esp
}
800001e8:	c9                   	leave  
800001e9:	c3                   	ret    

800001ea <open>:

int open(const char *name, int flags, ...)
{
800001ea:	55                   	push   %ebp
800001eb:	89 e5                	mov    %esp,%ebp
800001ed:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
800001f0:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
800001f7:	8b 45 08             	mov    0x8(%ebp),%eax
800001fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
800001fd:	8b 45 0c             	mov    0xc(%ebp),%eax
80000200:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000203:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000206:	50                   	push   %eax
80000207:	e8 c2 fe ff ff       	call   800000ce <sys_call>
8000020c:	83 c4 04             	add    $0x4,%esp
}
8000020f:	c9                   	leave  
80000210:	c3                   	ret    

80000211 <read>:

int read(int file, char *ptr, int len)
{
80000211:	55                   	push   %ebp
80000212:	89 e5                	mov    %esp,%ebp
80000214:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
80000217:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
8000021e:	8b 45 08             	mov    0x8(%ebp),%eax
80000221:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000224:	8b 45 0c             	mov    0xc(%ebp),%eax
80000227:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000022a:	8b 45 10             	mov    0x10(%ebp),%eax
8000022d:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000230:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000233:	50                   	push   %eax
80000234:	e8 95 fe ff ff       	call   800000ce <sys_call>
80000239:	83 c4 04             	add    $0x4,%esp
}
8000023c:	c9                   	leave  
8000023d:	c3                   	ret    

8000023e <write>:

int write(int file, char *ptr, int len)
{
8000023e:	55                   	push   %ebp
8000023f:	89 e5                	mov    %esp,%ebp
80000241:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000244:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000024b:	8b 45 08             	mov    0x8(%ebp),%eax
8000024e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000251:	8b 45 0c             	mov    0xc(%ebp),%eax
80000254:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
80000257:	8b 45 10             	mov    0x10(%ebp),%eax
8000025a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
8000025d:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000260:	50                   	push   %eax
80000261:	e8 68 fe ff ff       	call   800000ce <sys_call>
80000266:	83 c4 04             	add    $0x4,%esp
}
80000269:	c9                   	leave  
8000026a:	c3                   	ret    

8000026b <close>:

int close(int file)
{
8000026b:	55                   	push   %ebp
8000026c:	89 e5                	mov    %esp,%ebp
8000026e:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000271:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
80000278:	8b 45 08             	mov    0x8(%ebp),%eax
8000027b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
8000027e:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000281:	50                   	push   %eax
80000282:	e8 47 fe ff ff       	call   800000ce <sys_call>
80000287:	83 c4 04             	add    $0x4,%esp
}
8000028a:	c9                   	leave  
8000028b:	c3                   	ret    

8000028c <lseek>:

int lseek(int file, int ptr, int dir)
{
8000028c:	55                   	push   %ebp
8000028d:	89 e5                	mov    %esp,%ebp
8000028f:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
80000292:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
80000299:	8b 45 08             	mov    0x8(%ebp),%eax
8000029c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
8000029f:	8b 45 0c             	mov    0xc(%ebp),%eax
800002a2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002a5:	8b 45 10             	mov    0x10(%ebp),%eax
800002a8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002ab:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002ae:	50                   	push   %eax
800002af:	e8 1a fe ff ff       	call   800000ce <sys_call>
800002b4:	83 c4 04             	add    $0x4,%esp
}
800002b7:	c9                   	leave  
800002b8:	c3                   	ret    

800002b9 <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st)
{
800002b9:	55                   	push   %ebp
800002ba:	89 e5                	mov    %esp,%ebp
800002bc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002bf:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
800002c6:	8b 45 08             	mov    0x8(%ebp),%eax
800002c9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002cc:	8b 45 0c             	mov    0xc(%ebp),%eax
800002cf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
800002d2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002d5:	50                   	push   %eax
800002d6:	e8 f3 fd ff ff       	call   800000ce <sys_call>
800002db:	83 c4 04             	add    $0x4,%esp
}
800002de:	c9                   	leave  
800002df:	c3                   	ret    

800002e0 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file)
{
800002e0:	55                   	push   %ebp
800002e1:	89 e5                	mov    %esp,%ebp
800002e3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
800002e6:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
800002ed:	8b 45 08             	mov    0x8(%ebp),%eax
800002f0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002f3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f6:	50                   	push   %eax
800002f7:	e8 d2 fd ff ff       	call   800000ce <sys_call>
800002fc:	83 c4 04             	add    $0x4,%esp
}
800002ff:	c9                   	leave  
80000300:	c3                   	ret    

80000301 <sbrk>:

void *sbrk(ptrdiff_t incr)
{
80000301:	55                   	push   %ebp
80000302:	89 e5                	mov    %esp,%ebp
80000304:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
80000307:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
8000030e:	8b 45 08             	mov    0x8(%ebp),%eax
80000311:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000314:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000317:	50                   	push   %eax
80000318:	e8 b1 fd ff ff       	call   800000ce <sys_call>
8000031d:	83 c4 04             	add    $0x4,%esp
}
80000320:	c9                   	leave  
80000321:	c3                   	ret    

80000322 <dup>:

int dup(int file)
{
80000322:	55                   	push   %ebp
80000323:	89 e5                	mov    %esp,%ebp
80000325:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
80000328:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
8000032f:	8b 45 08             	mov    0x8(%ebp),%eax
80000332:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000335:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000338:	50                   	push   %eax
80000339:	e8 90 fd ff ff       	call   800000ce <sys_call>
8000033e:	83 c4 04             	add    $0x4,%esp
80000341:	c9                   	leave  
80000342:	c3                   	ret    
