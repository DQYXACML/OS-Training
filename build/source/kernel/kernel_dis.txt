
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x0000a0b1 memsz 0x0000a0b1 flags r-x
    LOAD off    0x0000c000 vaddr 0x0001b000 paddr 0x0001b000 align 2**12
         filesz 0x00000178 memsz 0x0005f0dc flags rw-
    LOAD off    0x0000d000 vaddr 0x80000000 paddr 0x0007a0dc align 2**12
         filesz 0x00000388 memsz 0x00000388 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008d0d  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .first_task   00000388  80000000  0007a0dc  0000d000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  2 .data         00000178  0001b000  0001b000  0000c000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          0005e0dc  0001c000  0001c000  0000c178  2**12
                  ALLOC
  4 .debug_line   00004e98  00000000  00000000  0000d388  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00012ea8  00000000  00000000  00012220  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000033ec  00000000  00000000  000250c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000340  00000000  00000000  000284b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .rodata       00001391  00018d20  00018d20  00009d20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_ranges 000000d8  00000000  00000000  000287f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002ceb  00000000  00000000  000288d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0002b5bb  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002c6c  00000000  00000000  0002b5cc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
80000000 l    d  .first_task	00000000 .first_task
0001b000 l    d  .data	00000000 .data
0001c000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00018d20 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010330 l     F .text	00000017 up2
00010347 l     F .text	0000000d down2
00010354 l     F .text	0000000c write_cr3
00010360 l     F .text	00000014 pde_index
00010374 l     F .text	00000027 pde_paddr
0001039b l     F .text	00000010 pte_index
000103ab l     F .text	00000027 pte_paddr
000103d2 l     F .text	0000000f get_pte_perm
000103e1 l     F .text	00000011 mmu_set_page_dir
0001e000 l     O .bss	00000028 paddr_alloc
0001f000 l     O .bss	00001000 kernel_page_dir
000103f2 l     F .text	00000013 current_page_dir
00010405 l     F .text	00000058 addr_alloc_init
0001045d l     F .text	00000067 addr_alloc_page
000104c4 l     F .text	00000062 addr_free_page
00010526 l     F .text	00000066 show_mem_info
0001058c l     F .text	0000003c total_mem_size
00018e88 l     O .rodata	00000012 __func__.2391
0001b000 l     O .data	00000050 kernel_map.2403
00018e9c l     O .rodata	00000013 __func__.2431
00018eb0 l     O .rodata	00000011 __func__.2504
00018ec4 l     O .rodata	0000000c __func__.2516
00018ed0 l     O .rodata	00000009 __func__.2524
00000000 l    df *ABS*	00000000 syscall.c
00018ee0 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010fb4 l     F .text	0000001b list_node_init
00010fcf l     F .text	0000000b list_node_next
00010fda l     F .text	0000000b list_count
00010fe5 l     F .text	0000000a list_first
00010fef l     F .text	0000000c write_cr3
00010ffb l     F .text	00000007 hlt
00011002 l     F .text	0000000c write_tr
0001100e l     F .text	00000011 mmu_set_page_dir
00020000 l     O .bss	00001000 idle_task_stack
00021000 l     O .bss	000005c0 task_manager
000215c0 l     O .bss	00016400 task_table
000379c0 l     O .bss	00000014 task_table_mutex
0001101f l     F .text	000001ab tss_init
0001922c l     O .rodata	0000000a __func__.3074
00019238 l     O .rodata	00000010 __func__.3094
0001144d l     F .text	0000000a idle_task_entry
0001160b l     F .text	00000043 task_next_run
00011851 l     F .text	00000069 alloc_task
000118ba l     F .text	00000030 free_task
00011989 l     F .text	00000062 copy_opened_files
00011b87 l     F .text	00000129 load_phdr
00019248 l     O .rodata	0000000a __func__.3198
00011cb0 l     F .text	00000213 load_elf_file
00011ec3 l     F .text	00000130 copy_args
00019254 l     O .rodata	0000000a __func__.3233
00000000 l    df *ABS*	00000000 cpu.c
00012525 l     F .text	00000028 lgdt
0001254d l     F .text	0000001a far_jump
000379e0 l     O .bss	00000800 gdt_table
000381e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00012797 l     F .text	0000001d inb
000127b4 l     F .text	0000001f outb
000127d3 l     F .text	00000007 cli
000127da l     F .text	00000007 sti
000127e1 l     F .text	00000028 lidt
00012809 l     F .text	00000011 read_cr2
0001281a l     F .text	00000007 hlt
00012821 l     F .text	00000010 read_eflags
00012831 l     F .text	0000000b write_eflags
00038200 l     O .bss	00000400 idt_table
0001283c l     F .text	000000ff dump_core_regs
0001293b l     F .text	00000071 do_default_handler
00012d73 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
0001316a l     F .text	0000001d inb
00013187 l     F .text	0000001f outb
00038600 l     O .bss	00000340 console_buf
00038940 l     O .bss	00000004 curr_console_idx
000131a6 l     F .text	00000074 read_cursor_pos
0001321a l     F .text	000000c1 update_cursor_pos
000132db l     F .text	00000085 clear_display
00013360 l     F .text	00000091 erase_rows
000133f1 l     F .text	00000088 scroll_up
00013479 l     F .text	00000010 move_to_col0
00013489 l     F .text	00000038 move_next_line
000134c1 l     F .text	00000076 move_forward
00013537 l     F .text	00000094 show_char
000136ee l     F .text	00000078 move_backword
00013766 l     F .text	0000003a erase_backword
000137a0 l     F .text	00000073 move_next_tab
00013813 l     F .text	000000b8 write_normal
000138cb l     F .text	00000037 move_left
00013902 l     F .text	00000049 move_right
0001394b l     F .text	00000033 move_cursor
0001397e l     F .text	00000029 clear_esc_param
000139a7 l     F .text	00000075 write_esc
00013a1c l     F .text	00000051 erase_in_display
00013a6d l     F .text	00000099 set_font_style
00019800 l     O .rodata	00000020 color_table.2414
00013b06 l     F .text	00000107 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001b050 l     O .data	00000008 dev_desc_tbl
00038960 l     O .bss	00000a00 dev_tbl
00013eaa l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 disk.c
0001419b l     F .text	0000001d inb
000141b8 l     F .text	0000001f inw
000141d7 l     F .text	0000001f outb
000141f6 l     F .text	00000021 outw
00039360 l     O .bss	00000250 disk_buf
000395b0 l     O .bss	00000014 mutex
000395c4 l     O .bss	00000010 op_sem
000395d4 l     O .bss	00000004 task_on_op
00014217 l     F .text	00000130 ata_send_cmd
00014347 l     F .text	00000050 ata_read_data
00014397 l     F .text	00000050 ata_write_data
000143e7 l     F .text	0000004b ata_wait_data
00014432 l     F .text	00000119 detect_part_info
0001454b l     F .text	00000127 identify_disk
00014672 l     F .text	000000fe print_disk_info
00000000 l    df *ABS*	00000000 kbd.c
00014c25 l     F .text	0000001d inb
00014c42 l     F .text	0000001f outb
000395d8 l     O .bss	00000004 kbd_state
000199e0 l     O .rodata	00000200 map_table
00014c61 l     F .text	00000015 get_key
00014c76 l     F .text	0000001a is_make_code
00014d3a l     F .text	00000045 update_led_status
00014d7f l     F .text	0000003c do_fx_key
00014dbb l     F .text	000001d0 do_normal_key
00014f8b l     F .text	0000008a do_e0_key
000395dc l     O .bss	00000004 recv_state.2133
000395e0 l     O .bss	00000004 inited.2143
00000000 l    df *ABS*	00000000 time.c
00015117 l     F .text	0000001f outb
000395e4 l     O .bss	00000004 sys_tick
00015136 l     F .text	00000060 init_pic
00000000 l    df *ABS*	00000000 tty.c
00039600 l     O .bss	000022a0 tty_devs
0003b8a0 l     O .bss	00000004 curr_tty
00015316 l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 devfs.c
0001b0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
0001599d l     F .text	00000017 up2
000159b4 l     F .text	00000059 bread_sector
00015a0d l     F .text	0000003e bwrite_secotr
00015de8 l     F .text	00000087 to_sfn
00016024 l     F .text	00000080 read_dir_entry
000160a4 l     F .text	000000aa write_dir_entry
0001614e l     F .text	00000175 expand_file
000162c3 l     F .text	000000c2 move_file_pos
00016600 l     F .text	00000065 read_from_diritem
00000000 l    df *ABS*	00000000 file.c
0003b8c0 l     O .bss	00024000 file_table
0005f8c0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
0001705b l     F .text	0000000b list_node_next
00017066 l     F .text	0000000a list_first
00017070 l     F .text	0000001d inb
0001708d l     F .text	0000001f inw
000170ac l     F .text	0000001f outb
0005f8e0 l     O .bss	00019000 TEMP_ADDR
000788e0 l     O .bss	00000004 temp_pos
000788e4 l     O .bss	0000000c mounted_list
000788f0 l     O .bss	0000000c free_list
00078900 l     O .bss	000017c0 fs_tbl
0007a0c0 l     O .bss	00000004 root_fs
000170cb l     F .text	0000002b fs_protect
000170f6 l     F .text	0000002b fs_unprotect
00017121 l     F .text	0000001d is_fd_bad
0001713e l     F .text	0000012f read_disk
0001726d l     F .text	00000021 is_path_valid
00019f7c l     O .rodata	0000000a __func__.3127
000179b3 l     F .text	00000026 get_fs_op
000179d9 l     F .text	000001c7 mount
00017ba0 l     F .text	00000060 mount_list_init
00019f88 l     O .rodata	00000008 __func__.3206
00000000 l    df *ABS*	00000000 init.c
0001a048 l     O .rodata	00000013 __func__.3095
00000000 l    df *ABS*	00000000 mutex.c
00017f4d l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000180d7 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00018460 l     F .text	00000007 hlt
0001b174 l     O .data	00000004 num2ch.1934
00000000 l    df *ABS*	00000000 list.c
00018a19 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0007a0c4 l     O .bss	00000004 log_dev_id
0007a0c8 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000cd l     F .first_task	0000004c sys_call
00015fc7 g     F .text	0000005d diritem_get_type
00018358 g     F .text	0000003a bitmap_get_bit
000185d7 g     F .text	0000004f kernel_memcpy
00017638 g     F .text	000000fc sys_close
000115a0 g     F .text	0000000a task_current
0001790b g     F .text	00000050 path_begin_with
800001d2 g     F .first_task	0000001b yield
0001310b g     F .text	0000000b irq_enable_global
00018ab0 g     F .text	00000064 list_insert_last
00012211 g     F .text	00000032 task_file
000102b2 g       .text	00000000 exception_handler_kbd
00010df9 g     F .text	0000010c sys_sbrk
000121b0 g     F .text	00000061 sys_yield
000117ed g     F .text	00000064 sys_msleep
00012ae0 g     F .text	0000001c do_handler_segment_not_present
00011541 g     F .text	00000034 task_set_ready
00015cbb g     F .text	0000012d cluster_alloc_free
00018392 g     F .text	0000001b bitmap_is_set
00018626 g     F .text	00000041 kernel_memset
00014080 g     F .text	0000004c dev_write
000175a3 g     F .text	00000095 sys_lseek
000150d7 g     F .text	00000040 kbd_init
00015b32 g     F .text	0000012f cluster_set_next
00010274 g       .text	00000000 exception_handler_virtual_exception
00014aef g     F .text	00000006 disk_close
00010f1f g     F .text	00000095 do_handler_syscall
000189ec g     F .text	0000002d strings_count
00012766 g     F .text	0000001e cpu_init
00018c11 g     F .text	0000002f log_init
00016d3c g     F .text	000000f4 fatfs_readdir
000119eb g     F .text	0000019c sys_fork
00017ef5 g     F .text	00000058 init_main
00010219 g       .text	00000000 exception_handler_alignment_check
00014ae5 g     F .text	0000000a disk_control
000125e6 g     F .text	00000039 gdt_free_sel
00010f05 g     F .text	0000001a sys_print_msg
0001b140 g     O .data	00000034 fatfs_op
00018467 g     F .text	00000047 kernel_strcpy
0001b000 g       .data	00000000 s_data
800001a5 g     F .first_task	0000002d execve
80000147 g     F .first_task	0000001b getpid
00012fee g     F .text	0000008b irq_enable
00010035 g       .text	00000000 exception_handler_unknown
00015f34 g     F .text	00000093 diritem_get_name
00015e6f g     F .text	00000037 diritem_name_match
000100b1 g       .text	00000000 exception_handler_breakpoint
00012a38 g     F .text	0000001c do_handler_overflow
00012b34 g     F .text	0000001c do_handler_alignment_check
00010678 g     F .text	0000008c memory_create_map
0001741a g     F .text	000000c5 sys_read
0001795b g     F .text	00000058 path_next_child
00014cf1 g     F .text	00000035 kbd_wait_recv_ready
00016998 g     F .text	0000021e fatfs_write
00013c0d g     F .text	000000b7 console_select
000101c0 g       .text	00000000 exception_handler_general_protection
00012ba4 g     F .text	000000d8 do_handler_general_protection
000135e9 g     F .text	0000001e restore_cursor
000181f2 g     F .text	00000029 sem_count
80000010 g     F .first_task	000000bd first_task_main
000129c8 g     F .text	0000001c do_handler_divider
00018284 g     F .text	000000d4 bitmap_set_bit
00012aa8 g     F .text	0000001c do_handler_double_fault
00016e30 g     F .text	0000000a fatfs_closedir
00012c7c g     F .text	000000f7 do_handler_page_fault
00016385 g     F .text	0000023f fatfs_mount
80000325 g     F .first_task	00000021 isatty
000167f3 g     F .text	000001a5 fatfs_read
0001014c g       .text	00000000 exception_handler_double_fault
00013116 g     F .text	0000002b pic_send_eoi
00011443 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107bf g     F .text	00000085 memory_create_uvm
00018105 g     F .text	0000006b sem_wait
00010cf0 g     F .text	00000025 memory_alloc_page_for
00015196 g     F .text	00000028 do_handler_timer
000101a3 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
0001777f g     F .text	00000093 sys_fstat
00014034 g     F .text	0000004c dev_read
00016bb6 g     F .text	000000df fatfs_seek
00016c9f g     F .text	0000008a fatfs_close
00012b88 g     F .text	0000001c do_handler_virtual_exception
00015973 g     F .text	0000000a devfs_stat
000100d0 g       .text	00000000 exception_handler_overflow
0001261f g     F .text	00000075 get_alloc_desc
000102f0 g       .text	00000000 simple_switch
000102d1 g       .text	00000000 exception_handler_ide_primary
000165c4 g     F .text	0000003c fatfs_unmount
800002d1 g     F .first_task	0000002d lseek
0001c000 g     O .bss	00002000 stack
00014b2d g     F .text	000000f8 disk_init
00017c00 g     F .text	00000090 fs_init
00016ff3 g     F .text	00000038 file_inc_ref
00010c57 g     F .text	00000099 memory_free_page
0007a0dc g       *ABS*	00000000 s_first_task
00012296 g     F .text	00000027 task_remove_fd
0001566c g     F .text	000000ba tty_control
00013607 g     F .text	000000e7 console_init
0001554b g     F .text	00000121 tty_read
00011900 g     F .text	00000089 task_uninit
00010b71 g     F .text	000000cc memory_alloc_for_page_dir
0001597d g     F .text	00000020 devfs_ioctl
0001520d g     F .text	0000007f tty_fifo_get
000100ef g       .text	00000000 exception_handler_bound_range
0001572c g     F .text	0000006d tty_in
00015a74 g     F .text	000000be cluster_get_next
00018170 g     F .text	00000082 sem_notify
00010aee g     F .text	00000083 memory_copy_uvm_data
000140cc g     F .text	0000004c dev_control
00015015 g     F .text	000000c2 do_handler_kbd
00012a70 g     F .text	0000001c do_handler_invalid_opcode
00010169 g       .text	00000000 exception_handler_invalid_tss
00017ce3 g     F .text	00000053 sys_readdir
00012b18 g     F .text	0000001c do_handler_fpu_error
00011359 g     F .text	000000ea task_first_init
00012b50 g     F .text	0000001c do_handler_machine_check
80000283 g     F .first_task	0000002d write
0001728e g     F .text	0000018c sys_open
000129e4 g     F .text	0000001c do_handler_Debug
800002fe g     F .first_task	00000027 fstat
00017734 g     F .text	0000004b sys_isatty
00018a51 g     F .text	0000005f list_insert_first
00013ee8 g     F .text	0000014c dev_open
000178b0 g     F .text	0000005b path_to_num
000117cd g     F .text	00000020 task_set_wakeup
00012a00 g     F .text	0000001c do_handler_NMI
00010054 g       .text	00000000 exception_handler_divider
000151d6 g     F .text	00000037 tty_fifo_init
0001b060 g     O .data	00000038 dev_disk_desc
000184ae g     F .text	00000070 kernel_strncpy
00013100 g     F .text	0000000b irq_disable_global
000115aa g     F .text	00000061 sys_sched_yield
000174df g     F .text	000000c4 sys_write
800001ed g     F .first_task	00000021 wait
0007a464 g       *ABS*	00000000 mem_free_start
00014cc5 g     F .text	0000002c kbd_write
00017e5a g     F .text	00000035 kernel_init
000180e2 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
00018804 g     F .text	0000014b kernel_vsprintf
000189a6 g     F .text	00000046 get_file_name
0001012d g       .text	00000000 exception_handler_device_unavailable
0001010e g       .text	00000000 exception_handler_invalid_opcode
00014118 g     F .text	00000083 dev_close
000135cb g     F .text	0000001e save_cursor
0007a0dc g       .bss	00000000 e_data
80000256 g     F .first_task	0000002d read
00017f86 g     F .text	00000094 mutex_lock
00017d36 g     F .text	00000050 sys_closedir
00016e3a g     F .text	000000ec fatfs_unlink
00012243 g     F .text	00000053 task_alloc_fd
00015969 g     F .text	0000000a devfs_seek
00010236 g       .text	00000000 exception_handler_machine_check
0001545e g     F .text	000000ed tty_write
00012ac4 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0001528c g     F .text	0000008a tty_fifo_put
0007a464 g       *ABS*	00000000 e_first_task
00011793 g     F .text	0000003a task_set_sleep
00017812 g     F .text	0000009e sys_dup
00018970 g     F .text	00000036 panic
00010293 g       .text	00000000 exception_handler_timer
00012fb4 g     F .text	0000003a irq_install
00012694 g     F .text	0000008b init_gdt
000157c2 g     F .text	00000017 devfs_mount
00015365 g     F .text	000000f9 tty_open
8000018a g     F .first_task	0000001b fork
00013141 g     F .text	00000018 irq_enter_protection
00017f58 g     F .text	0000002e mutex_init
00013079 g     F .text	00000087 irq_disable
80000346 g     F .first_task	00000021 sbrk
0001b100 g     O .data	00000034 devfs_op
000157df g     F .text	00000127 devfs_open
00010255 g       .text	00000000 exception_handler_smd_exception
00017dd6 g     F .text	00000084 sys_ioctl
00010844 g     F .text	0000010f memory_destroy_uvm
0001821b g     F .text	00000016 bitmap_byte_count
00012a8c g     F .text	0000001c do_handler_device_unavailable
00017d86 g     F .text	00000050 sys_unlink
00015a4b g     F .text	00000029 cluster_is_valid
00016d29 g     F .text	00000013 fatfs_opendir
0001164e g     F .text	0000005b task_dispatch
00010953 g     F .text	00000155 memory_copy_uvm
00015726 g     F .text	00000006 tty_close
0001592a g     F .text	00000024 devfs_write
00017e8f g     F .text	00000066 move_to_first_task
00012784 g     F .text	00000013 switch_to_tss
0001594e g     F .text	0000001b devfs_close
00013d94 g     F .text	00000110 console_write
00014c90 g     F .text	00000035 kbd_wait_send_ready
80000367 g     F .first_task	00000021 dup
00018667 g     F .text	0000005e kernel_memcmp
00010704 g     F .text	000000bb create_kernel_table
00018a2c g     F .text	00000025 list_init
00012b6c g     F .text	0000001c do_handler_smd_exception
000101dd g       .text	00000000 exception_handler_page_fault
00011575 g     F .text	0000002b task_set_block
000129ac g     F .text	0000001c do_handler_unknown
00010c3d g     F .text	0000001a memory_alloc_page
000101fa g       .text	00000000 exception_handler_fpu_error
0001130e g     F .text	0000001e task_switch_from_to
00012e06 g     F .text	000001ae irq_init
0001801a g     F .text	000000bd mutex_unlock
0001702b g     F .text	00000030 file_table_init
00013159 g     F .text	00000011 irq_leave_protection
00016fb1 g     F .text	00000042 file_free
00014d26 g     F .text	00000014 kbd_read
00015ea6 g     F .text	0000008e diritem_init
80000162 g     F .first_task	00000028 print_msg
0001859c g     F .text	0000003b kernel_strlen
00012567 g     F .text	0000007f segment_desc_set
00012a54 g     F .text	0000001c do_handler_bound_range
00010305 g       .text	00000000 exception_handler_syscall
00014770 g     F .text	000000f5 disk_open
00016665 g     F .text	0000018e fatfs_open
00018b14 g     F .text	00000078 list_remove_first
0001a0b1 g       .rodata	00000000 e_text
0001851e g     F .text	0000007e kernel_strncmp
00017c90 g     F .text	00000053 sys_opendir
00018231 g     F .text	00000053 bitmap_init
00010186 g       .text	00000000 exception_handler_segment_not_present
00013cc4 g     F .text	000000d0 console_set_cursor
00010092 g       .text	00000000 exception_handler_NMI
00016c95 g     F .text	0000000a fatfs_stat
000183ad g     F .text	000000b3 bitmap_alloc_nbits
00016f26 g     F .text	0000008b file_alloc
00011457 g     F .text	000000ea task_manager_init
0001132c g     F .text	0000002d task_start
00010073 g       .text	00000000 exception_handler_Debug
000116a9 g     F .text	000000ea task_time_tick
00010d15 g     F .text	000000e4 memory_init
00011ff3 g     F .text	000001bd sys_execve
000149a5 g     F .text	00000140 disk_write
000122bd g     F .text	00000115 sys_wait
000123d2 g     F .text	00000153 sys_exit
00015799 g     F .text	00000029 tty_select
00013ea4 g     F .text	00000006 console_close
00010aa8 g     F .text	00000046 memory_get_paddr
00012afc g     F .text	0000001c do_handler_stack_segment_fault
00012a1c g     F .text	0000001c do_handler_breakpoint
000157d9 g     F .text	00000006 devfs_unmount
8000020e g     F .first_task	00000021 _exit
00015906 g     F .text	00000024 devfs_read
00018c40 g     F .text	000000cd log_printf
000111ca g     F .text	00000144 task_init
00014865 g     F .text	00000140 disk_read
8000022f g     F .first_task	00000027 open
00015c61 g     F .text	0000005a cluster_free_chain
0001894f g     F .text	00000021 kernel_sprintf
000118ea g     F .text	00000016 sys_getpid
000186c5 g     F .text	0000013f kernel_itoa
00018b8c g     F .text	00000085 list_remove
0001271f g     F .text	00000047 gate_desc_set
80000119 g     F .first_task	0000002e msleep
800002b0 g     F .first_task	00000021 close
00014af5 g     F .text	00000038 do_handler_ide_primary
000105c8 g     F .text	000000b0 find_pte
000151be g     F .text	00000018 time_init
0001b0a0 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .extern init_main
    .global _start
    # void start (boot_info_t *boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax
    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 4e 7e 00 00       	call   17e5a <kernel_init>
    jmp $KERNEL_SELECTOR_CS, $gdt_reload # 重新加载GDT
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    ; mov $stack, %eax
   10021:	b8 00 c0 01 00       	mov    $0x1c000,%eax
    ; mov $KERNEL_STACK_SIZE, %ebx
   10026:	bb 00 20 00 00       	mov    $0x2000,%ebx

    mov $(stack + KERNEL_STACK_SIZE), %esp
   1002b:	bc 00 e0 01 00       	mov    $0x1e000,%esp
    jmp init_main
   10030:	e9 c0 7e 00 00       	jmp    17ef5 <init_main>

00010035 <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   10035:	6a 00                	push   $0x0
   10037:	6a ff                	push   $0xffffffff
   10039:	60                   	pusha  
   1003a:	1e                   	push   %ds
   1003b:	06                   	push   %es
   1003c:	0f a0                	push   %fs
   1003e:	0f a8                	push   %gs
   10040:	54                   	push   %esp
   10041:	e8 66 29 00 00       	call   129ac <do_handler_unknown>
   10046:	83 c4 04             	add    $0x4,%esp
   10049:	0f a9                	pop    %gs
   1004b:	0f a1                	pop    %fs
   1004d:	07                   	pop    %es
   1004e:	1f                   	pop    %ds
   1004f:	61                   	popa   
   10050:	83 c4 08             	add    $0x8,%esp
   10053:	cf                   	iret   

00010054 <exception_handler_divider>:
exception_handler divider, 0, 0
   10054:	6a 00                	push   $0x0
   10056:	6a 00                	push   $0x0
   10058:	60                   	pusha  
   10059:	1e                   	push   %ds
   1005a:	06                   	push   %es
   1005b:	0f a0                	push   %fs
   1005d:	0f a8                	push   %gs
   1005f:	54                   	push   %esp
   10060:	e8 63 29 00 00       	call   129c8 <do_handler_divider>
   10065:	83 c4 04             	add    $0x4,%esp
   10068:	0f a9                	pop    %gs
   1006a:	0f a1                	pop    %fs
   1006c:	07                   	pop    %es
   1006d:	1f                   	pop    %ds
   1006e:	61                   	popa   
   1006f:	83 c4 08             	add    $0x8,%esp
   10072:	cf                   	iret   

00010073 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10073:	6a 00                	push   $0x0
   10075:	6a 01                	push   $0x1
   10077:	60                   	pusha  
   10078:	1e                   	push   %ds
   10079:	06                   	push   %es
   1007a:	0f a0                	push   %fs
   1007c:	0f a8                	push   %gs
   1007e:	54                   	push   %esp
   1007f:	e8 60 29 00 00       	call   129e4 <do_handler_Debug>
   10084:	83 c4 04             	add    $0x4,%esp
   10087:	0f a9                	pop    %gs
   10089:	0f a1                	pop    %fs
   1008b:	07                   	pop    %es
   1008c:	1f                   	pop    %ds
   1008d:	61                   	popa   
   1008e:	83 c4 08             	add    $0x8,%esp
   10091:	cf                   	iret   

00010092 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10092:	6a 00                	push   $0x0
   10094:	6a 02                	push   $0x2
   10096:	60                   	pusha  
   10097:	1e                   	push   %ds
   10098:	06                   	push   %es
   10099:	0f a0                	push   %fs
   1009b:	0f a8                	push   %gs
   1009d:	54                   	push   %esp
   1009e:	e8 5d 29 00 00       	call   12a00 <do_handler_NMI>
   100a3:	83 c4 04             	add    $0x4,%esp
   100a6:	0f a9                	pop    %gs
   100a8:	0f a1                	pop    %fs
   100aa:	07                   	pop    %es
   100ab:	1f                   	pop    %ds
   100ac:	61                   	popa   
   100ad:	83 c4 08             	add    $0x8,%esp
   100b0:	cf                   	iret   

000100b1 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100b1:	6a 00                	push   $0x0
   100b3:	6a 03                	push   $0x3
   100b5:	60                   	pusha  
   100b6:	1e                   	push   %ds
   100b7:	06                   	push   %es
   100b8:	0f a0                	push   %fs
   100ba:	0f a8                	push   %gs
   100bc:	54                   	push   %esp
   100bd:	e8 5a 29 00 00       	call   12a1c <do_handler_breakpoint>
   100c2:	83 c4 04             	add    $0x4,%esp
   100c5:	0f a9                	pop    %gs
   100c7:	0f a1                	pop    %fs
   100c9:	07                   	pop    %es
   100ca:	1f                   	pop    %ds
   100cb:	61                   	popa   
   100cc:	83 c4 08             	add    $0x8,%esp
   100cf:	cf                   	iret   

000100d0 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100d0:	6a 00                	push   $0x0
   100d2:	6a 04                	push   $0x4
   100d4:	60                   	pusha  
   100d5:	1e                   	push   %ds
   100d6:	06                   	push   %es
   100d7:	0f a0                	push   %fs
   100d9:	0f a8                	push   %gs
   100db:	54                   	push   %esp
   100dc:	e8 57 29 00 00       	call   12a38 <do_handler_overflow>
   100e1:	83 c4 04             	add    $0x4,%esp
   100e4:	0f a9                	pop    %gs
   100e6:	0f a1                	pop    %fs
   100e8:	07                   	pop    %es
   100e9:	1f                   	pop    %ds
   100ea:	61                   	popa   
   100eb:	83 c4 08             	add    $0x8,%esp
   100ee:	cf                   	iret   

000100ef <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100ef:	6a 00                	push   $0x0
   100f1:	6a 05                	push   $0x5
   100f3:	60                   	pusha  
   100f4:	1e                   	push   %ds
   100f5:	06                   	push   %es
   100f6:	0f a0                	push   %fs
   100f8:	0f a8                	push   %gs
   100fa:	54                   	push   %esp
   100fb:	e8 54 29 00 00       	call   12a54 <do_handler_bound_range>
   10100:	83 c4 04             	add    $0x4,%esp
   10103:	0f a9                	pop    %gs
   10105:	0f a1                	pop    %fs
   10107:	07                   	pop    %es
   10108:	1f                   	pop    %ds
   10109:	61                   	popa   
   1010a:	83 c4 08             	add    $0x8,%esp
   1010d:	cf                   	iret   

0001010e <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   1010e:	6a 00                	push   $0x0
   10110:	6a 06                	push   $0x6
   10112:	60                   	pusha  
   10113:	1e                   	push   %ds
   10114:	06                   	push   %es
   10115:	0f a0                	push   %fs
   10117:	0f a8                	push   %gs
   10119:	54                   	push   %esp
   1011a:	e8 51 29 00 00       	call   12a70 <do_handler_invalid_opcode>
   1011f:	83 c4 04             	add    $0x4,%esp
   10122:	0f a9                	pop    %gs
   10124:	0f a1                	pop    %fs
   10126:	07                   	pop    %es
   10127:	1f                   	pop    %ds
   10128:	61                   	popa   
   10129:	83 c4 08             	add    $0x8,%esp
   1012c:	cf                   	iret   

0001012d <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   1012d:	6a 00                	push   $0x0
   1012f:	6a 07                	push   $0x7
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 4e 29 00 00       	call   12a8c <do_handler_device_unavailable>
   1013e:	83 c4 04             	add    $0x4,%esp
   10141:	0f a9                	pop    %gs
   10143:	0f a1                	pop    %fs
   10145:	07                   	pop    %es
   10146:	1f                   	pop    %ds
   10147:	61                   	popa   
   10148:	83 c4 08             	add    $0x8,%esp
   1014b:	cf                   	iret   

0001014c <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1014c:	6a 08                	push   $0x8
   1014e:	60                   	pusha  
   1014f:	1e                   	push   %ds
   10150:	06                   	push   %es
   10151:	0f a0                	push   %fs
   10153:	0f a8                	push   %gs
   10155:	54                   	push   %esp
   10156:	e8 4d 29 00 00       	call   12aa8 <do_handler_double_fault>
   1015b:	83 c4 04             	add    $0x4,%esp
   1015e:	0f a9                	pop    %gs
   10160:	0f a1                	pop    %fs
   10162:	07                   	pop    %es
   10163:	1f                   	pop    %ds
   10164:	61                   	popa   
   10165:	83 c4 08             	add    $0x8,%esp
   10168:	cf                   	iret   

00010169 <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   10169:	6a 0a                	push   $0xa
   1016b:	60                   	pusha  
   1016c:	1e                   	push   %ds
   1016d:	06                   	push   %es
   1016e:	0f a0                	push   %fs
   10170:	0f a8                	push   %gs
   10172:	54                   	push   %esp
   10173:	e8 4c 29 00 00       	call   12ac4 <do_handler_invalid_tss>
   10178:	83 c4 04             	add    $0x4,%esp
   1017b:	0f a9                	pop    %gs
   1017d:	0f a1                	pop    %fs
   1017f:	07                   	pop    %es
   10180:	1f                   	pop    %ds
   10181:	61                   	popa   
   10182:	83 c4 08             	add    $0x8,%esp
   10185:	cf                   	iret   

00010186 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10186:	6a 0b                	push   $0xb
   10188:	60                   	pusha  
   10189:	1e                   	push   %ds
   1018a:	06                   	push   %es
   1018b:	0f a0                	push   %fs
   1018d:	0f a8                	push   %gs
   1018f:	54                   	push   %esp
   10190:	e8 4b 29 00 00       	call   12ae0 <do_handler_segment_not_present>
   10195:	83 c4 04             	add    $0x4,%esp
   10198:	0f a9                	pop    %gs
   1019a:	0f a1                	pop    %fs
   1019c:	07                   	pop    %es
   1019d:	1f                   	pop    %ds
   1019e:	61                   	popa   
   1019f:	83 c4 08             	add    $0x8,%esp
   101a2:	cf                   	iret   

000101a3 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   101a3:	6a 0c                	push   $0xc
   101a5:	60                   	pusha  
   101a6:	1e                   	push   %ds
   101a7:	06                   	push   %es
   101a8:	0f a0                	push   %fs
   101aa:	0f a8                	push   %gs
   101ac:	54                   	push   %esp
   101ad:	e8 4a 29 00 00       	call   12afc <do_handler_stack_segment_fault>
   101b2:	83 c4 04             	add    $0x4,%esp
   101b5:	0f a9                	pop    %gs
   101b7:	0f a1                	pop    %fs
   101b9:	07                   	pop    %es
   101ba:	1f                   	pop    %ds
   101bb:	61                   	popa   
   101bc:	83 c4 08             	add    $0x8,%esp
   101bf:	cf                   	iret   

000101c0 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101c0:	6a 0d                	push   $0xd
   101c2:	60                   	pusha  
   101c3:	1e                   	push   %ds
   101c4:	06                   	push   %es
   101c5:	0f a0                	push   %fs
   101c7:	0f a8                	push   %gs
   101c9:	54                   	push   %esp
   101ca:	e8 d5 29 00 00       	call   12ba4 <do_handler_general_protection>
   101cf:	83 c4 04             	add    $0x4,%esp
   101d2:	0f a9                	pop    %gs
   101d4:	0f a1                	pop    %fs
   101d6:	07                   	pop    %es
   101d7:	1f                   	pop    %ds
   101d8:	61                   	popa   
   101d9:	83 c4 08             	add    $0x8,%esp
   101dc:	cf                   	iret   

000101dd <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101dd:	6a 0e                	push   $0xe
   101df:	60                   	pusha  
   101e0:	1e                   	push   %ds
   101e1:	06                   	push   %es
   101e2:	0f a0                	push   %fs
   101e4:	0f a8                	push   %gs
   101e6:	54                   	push   %esp
   101e7:	e8 90 2a 00 00       	call   12c7c <do_handler_page_fault>
   101ec:	83 c4 04             	add    $0x4,%esp
   101ef:	0f a9                	pop    %gs
   101f1:	0f a1                	pop    %fs
   101f3:	07                   	pop    %es
   101f4:	1f                   	pop    %ds
   101f5:	61                   	popa   
   101f6:	83 c4 08             	add    $0x8,%esp
   101f9:	cf                   	iret   

000101fa <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101fa:	6a 00                	push   $0x0
   101fc:	6a 10                	push   $0x10
   101fe:	60                   	pusha  
   101ff:	1e                   	push   %ds
   10200:	06                   	push   %es
   10201:	0f a0                	push   %fs
   10203:	0f a8                	push   %gs
   10205:	54                   	push   %esp
   10206:	e8 0d 29 00 00       	call   12b18 <do_handler_fpu_error>
   1020b:	83 c4 04             	add    $0x4,%esp
   1020e:	0f a9                	pop    %gs
   10210:	0f a1                	pop    %fs
   10212:	07                   	pop    %es
   10213:	1f                   	pop    %ds
   10214:	61                   	popa   
   10215:	83 c4 08             	add    $0x8,%esp
   10218:	cf                   	iret   

00010219 <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   10219:	6a 11                	push   $0x11
   1021b:	60                   	pusha  
   1021c:	1e                   	push   %ds
   1021d:	06                   	push   %es
   1021e:	0f a0                	push   %fs
   10220:	0f a8                	push   %gs
   10222:	54                   	push   %esp
   10223:	e8 0c 29 00 00       	call   12b34 <do_handler_alignment_check>
   10228:	83 c4 04             	add    $0x4,%esp
   1022b:	0f a9                	pop    %gs
   1022d:	0f a1                	pop    %fs
   1022f:	07                   	pop    %es
   10230:	1f                   	pop    %ds
   10231:	61                   	popa   
   10232:	83 c4 08             	add    $0x8,%esp
   10235:	cf                   	iret   

00010236 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10236:	6a 00                	push   $0x0
   10238:	6a 12                	push   $0x12
   1023a:	60                   	pusha  
   1023b:	1e                   	push   %ds
   1023c:	06                   	push   %es
   1023d:	0f a0                	push   %fs
   1023f:	0f a8                	push   %gs
   10241:	54                   	push   %esp
   10242:	e8 09 29 00 00       	call   12b50 <do_handler_machine_check>
   10247:	83 c4 04             	add    $0x4,%esp
   1024a:	0f a9                	pop    %gs
   1024c:	0f a1                	pop    %fs
   1024e:	07                   	pop    %es
   1024f:	1f                   	pop    %ds
   10250:	61                   	popa   
   10251:	83 c4 08             	add    $0x8,%esp
   10254:	cf                   	iret   

00010255 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10255:	6a 00                	push   $0x0
   10257:	6a 13                	push   $0x13
   10259:	60                   	pusha  
   1025a:	1e                   	push   %ds
   1025b:	06                   	push   %es
   1025c:	0f a0                	push   %fs
   1025e:	0f a8                	push   %gs
   10260:	54                   	push   %esp
   10261:	e8 06 29 00 00       	call   12b6c <do_handler_smd_exception>
   10266:	83 c4 04             	add    $0x4,%esp
   10269:	0f a9                	pop    %gs
   1026b:	0f a1                	pop    %fs
   1026d:	07                   	pop    %es
   1026e:	1f                   	pop    %ds
   1026f:	61                   	popa   
   10270:	83 c4 08             	add    $0x8,%esp
   10273:	cf                   	iret   

00010274 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10274:	6a 00                	push   $0x0
   10276:	6a 14                	push   $0x14
   10278:	60                   	pusha  
   10279:	1e                   	push   %ds
   1027a:	06                   	push   %es
   1027b:	0f a0                	push   %fs
   1027d:	0f a8                	push   %gs
   1027f:	54                   	push   %esp
   10280:	e8 03 29 00 00       	call   12b88 <do_handler_virtual_exception>
   10285:	83 c4 04             	add    $0x4,%esp
   10288:	0f a9                	pop    %gs
   1028a:	0f a1                	pop    %fs
   1028c:	07                   	pop    %es
   1028d:	1f                   	pop    %ds
   1028e:	61                   	popa   
   1028f:	83 c4 08             	add    $0x8,%esp
   10292:	cf                   	iret   

00010293 <exception_handler_timer>:

# 硬件中断
exception_handler timer, 0x20, 0
   10293:	6a 00                	push   $0x0
   10295:	6a 20                	push   $0x20
   10297:	60                   	pusha  
   10298:	1e                   	push   %ds
   10299:	06                   	push   %es
   1029a:	0f a0                	push   %fs
   1029c:	0f a8                	push   %gs
   1029e:	54                   	push   %esp
   1029f:	e8 f2 4e 00 00       	call   15196 <do_handler_timer>
   102a4:	83 c4 04             	add    $0x4,%esp
   102a7:	0f a9                	pop    %gs
   102a9:	0f a1                	pop    %fs
   102ab:	07                   	pop    %es
   102ac:	1f                   	pop    %ds
   102ad:	61                   	popa   
   102ae:	83 c4 08             	add    $0x8,%esp
   102b1:	cf                   	iret   

000102b2 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102b2:	6a 00                	push   $0x0
   102b4:	6a 21                	push   $0x21
   102b6:	60                   	pusha  
   102b7:	1e                   	push   %ds
   102b8:	06                   	push   %es
   102b9:	0f a0                	push   %fs
   102bb:	0f a8                	push   %gs
   102bd:	54                   	push   %esp
   102be:	e8 52 4d 00 00       	call   15015 <do_handler_kbd>
   102c3:	83 c4 04             	add    $0x4,%esp
   102c6:	0f a9                	pop    %gs
   102c8:	0f a1                	pop    %fs
   102ca:	07                   	pop    %es
   102cb:	1f                   	pop    %ds
   102cc:	61                   	popa   
   102cd:	83 c4 08             	add    $0x8,%esp
   102d0:	cf                   	iret   

000102d1 <exception_handler_ide_primary>:
exception_handler ide_primary, 0x2E, 0
   102d1:	6a 00                	push   $0x0
   102d3:	6a 2e                	push   $0x2e
   102d5:	60                   	pusha  
   102d6:	1e                   	push   %ds
   102d7:	06                   	push   %es
   102d8:	0f a0                	push   %fs
   102da:	0f a8                	push   %gs
   102dc:	54                   	push   %esp
   102dd:	e8 13 48 00 00       	call   14af5 <do_handler_ide_primary>
   102e2:	83 c4 04             	add    $0x4,%esp
   102e5:	0f a9                	pop    %gs
   102e7:	0f a1                	pop    %fs
   102e9:	07                   	pop    %es
   102ea:	1f                   	pop    %ds
   102eb:	61                   	popa   
   102ec:	83 c4 08             	add    $0x8,%esp
   102ef:	cf                   	iret   

000102f0 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
    .text
    .global simple_switch
simple_switch:
    movl 4(%esp), %eax   // 取from->stack
   102f0:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102f4:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102f8:	55                   	push   %ebp
	push %ebx
   102f9:	53                   	push   %ebx
	push %esi
   102fa:	56                   	push   %esi
	push %edi
   102fb:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102fc:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102fe:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   10300:	5f                   	pop    %edi
	pop %esi
   10301:	5e                   	pop    %esi
	pop %ebx
   10302:	5b                   	pop    %ebx
	pop %ebp
   10303:	5d                   	pop    %ebp
  	ret
   10304:	c3                   	ret    

00010305 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    # 保存前一任务的状态
	pusha
   10305:	60                   	pusha  
	push %ds
   10306:	1e                   	push   %ds
	push %es
   10307:	06                   	push   %es
	push %fs
   10308:	0f a0                	push   %fs
	push %gs
   1030a:	0f a8                	push   %gs
	pushf
   1030c:	9c                   	pushf  

    # 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   1030d:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   10312:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   10314:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   10316:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   10318:	8e e8                	mov    %eax,%gs

    # 调用处理函数
    mov %esp, %eax
   1031a:	89 e0                	mov    %esp,%eax
    push %eax
   1031c:	50                   	push   %eax
	call do_handler_syscall
   1031d:	e8 fd 0b 00 00       	call   10f1f <do_handler_syscall>
	add $4, %esp
   10322:	83 c4 04             	add    $0x4,%esp

    # 再切换回来
	popf
   10325:	9d                   	popf   
	pop %gs
   10326:	0f a9                	pop    %gs
	pop %fs
   10328:	0f a1                	pop    %fs
	pop %es
   1032a:	07                   	pop    %es
	pop %ds
   1032b:	1f                   	pop    %ds
	popa
   1032c:	61                   	popa   
   1032d:	ca 14 00             	lret   $0x14

00010330 <up2>:
#include "comm/types.h"
#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   10330:	55                   	push   %ebp
   10331:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10333:	8b 55 08             	mov    0x8(%ebp),%edx
   10336:	8b 45 0c             	mov    0xc(%ebp),%eax
   10339:	01 d0                	add    %edx,%eax
   1033b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1033e:	8b 45 0c             	mov    0xc(%ebp),%eax
   10341:	f7 d8                	neg    %eax
   10343:	21 d0                	and    %edx,%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <down2>:
// size = 0x1010 bound = 0x1000
// bound - 1 = 0x0FFF
// ~(bound-1) = 0xFFFF1000
// size & ~(bound-1) =  0x1010 & 0xFFFF1000 = 0x1000
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1034a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1034d:	f7 d8                	neg    %eax
   1034f:	23 45 08             	and    0x8(%ebp),%eax
}
   10352:	5d                   	pop    %ebp
   10353:	c3                   	ret    

00010354 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]" : [v] "=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   10354:	55                   	push   %ebp
   10355:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10357:	8b 45 08             	mov    0x8(%ebp),%eax
   1035a:	0f 22 d8             	mov    %eax,%cr3
}
   1035d:	90                   	nop
   1035e:	5d                   	pop    %ebp
   1035f:	c3                   	ret    

00010360 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index(uint32_t vaddr)
{
   10360:	55                   	push   %ebp
   10361:	89 e5                	mov    %esp,%ebp
   10363:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10366:	8b 45 08             	mov    0x8(%ebp),%eax
   10369:	c1 e8 16             	shr    $0x16,%eax
   1036c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   1036f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10372:	c9                   	leave  
   10373:	c3                   	ret    

00010374 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr(pde_t *pde)
{
   10374:	55                   	push   %ebp
   10375:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10377:	8b 45 08             	mov    0x8(%ebp),%eax
   1037a:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1037e:	c0 ea 04             	shr    $0x4,%dl
   10381:	0f b6 d2             	movzbl %dl,%edx
   10384:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10388:	c1 e1 04             	shl    $0x4,%ecx
   1038b:	09 ca                	or     %ecx,%edx
   1038d:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10391:	c1 e0 0c             	shl    $0xc,%eax
   10394:	09 d0                	or     %edx,%eax
   10396:	c1 e0 0c             	shl    $0xc,%eax
}
   10399:	5d                   	pop    %ebp
   1039a:	c3                   	ret    

0001039b <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index(uint32_t vaddr)
{
   1039b:	55                   	push   %ebp
   1039c:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   1039e:	8b 45 08             	mov    0x8(%ebp),%eax
   103a1:	c1 e8 0c             	shr    $0xc,%eax
   103a4:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   103a9:	5d                   	pop    %ebp
   103aa:	c3                   	ret    

000103ab <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr(pte_t *pte)
{
   103ab:	55                   	push   %ebp
   103ac:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   103ae:	8b 45 08             	mov    0x8(%ebp),%eax
   103b1:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   103b5:	c0 ea 04             	shr    $0x4,%dl
   103b8:	0f b6 d2             	movzbl %dl,%edx
   103bb:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103bf:	c1 e1 04             	shl    $0x4,%ecx
   103c2:	09 ca                	or     %ecx,%edx
   103c4:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103c8:	c1 e0 0c             	shl    $0xc,%eax
   103cb:	09 d0                	or     %edx,%eax
   103cd:	c1 e0 0c             	shl    $0xc,%eax
}
   103d0:	5d                   	pop    %ebp
   103d1:	c3                   	ret    

000103d2 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm(pte_t *pte)
{
   103d2:	55                   	push   %ebp
   103d3:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);
   103d5:	8b 45 08             	mov    0x8(%ebp),%eax
   103d8:	8b 00                	mov    (%eax),%eax
   103da:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103df:	5d                   	pop    %ebp
   103e0:	c3                   	ret    

000103e1 <mmu_set_page_dir>:
/**
 * @brief 重新加载整个页表至cr3高20位寄存器
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir(uint32_t paddr)
{
   103e1:	55                   	push   %ebp
   103e2:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103e4:	ff 75 08             	pushl  0x8(%ebp)
   103e7:	e8 68 ff ff ff       	call   10354 <write_cr3>
   103ec:	83 c4 04             	add    $0x4,%esp
}
   103ef:	90                   	nop
   103f0:	c9                   	leave  
   103f1:	c3                   	ret    

000103f2 <current_page_dir>:

/**
 * @brief 获取当前页表地址
 */
static pde_t *current_page_dir(void)
{
   103f2:	55                   	push   %ebp
   103f3:	89 e5                	mov    %esp,%ebp
   103f5:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103f8:	e8 a3 11 00 00       	call   115a0 <task_current>
   103fd:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
}
   10403:	c9                   	leave  
   10404:	c3                   	ret    

00010405 <addr_alloc_init>:
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits,
                            uint32_t start, uint32_t size, uint32_t page_size)
{
   10405:	55                   	push   %ebp
   10406:	89 e5                	mov    %esp,%ebp
   10408:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   1040b:	8b 45 08             	mov    0x8(%ebp),%eax
   1040e:	83 ec 0c             	sub    $0xc,%esp
   10411:	50                   	push   %eax
   10412:	e8 41 7b 00 00       	call   17f58 <mutex_init>
   10417:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1041a:	8b 45 08             	mov    0x8(%ebp),%eax
   1041d:	8b 55 10             	mov    0x10(%ebp),%edx
   10420:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	8b 55 14             	mov    0x14(%ebp),%edx
   10429:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1042c:	8b 45 08             	mov    0x8(%ebp),%eax
   1042f:	8b 55 18             	mov    0x18(%ebp),%edx
   10432:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10435:	8b 45 08             	mov    0x8(%ebp),%eax
   10438:	8b 40 24             	mov    0x24(%eax),%eax
   1043b:	ba 00 00 00 00       	mov    $0x0,%edx
   10440:	f7 75 18             	divl   0x18(%ebp)
   10443:	89 c2                	mov    %eax,%edx
   10445:	8b 45 08             	mov    0x8(%ebp),%eax
   10448:	83 c0 14             	add    $0x14,%eax
   1044b:	6a 00                	push   $0x0
   1044d:	52                   	push   %edx
   1044e:	ff 75 0c             	pushl  0xc(%ebp)
   10451:	50                   	push   %eax
   10452:	e8 da 7d 00 00       	call   18231 <bitmap_init>
   10457:	83 c4 10             	add    $0x10,%esp
}
   1045a:	90                   	nop
   1045b:	c9                   	leave  
   1045c:	c3                   	ret    

0001045d <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1045d:	55                   	push   %ebp
   1045e:	89 e5                	mov    %esp,%ebp
   10460:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10463:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1046a:	8b 45 08             	mov    0x8(%ebp),%eax
   1046d:	83 ec 0c             	sub    $0xc,%esp
   10470:	50                   	push   %eax
   10471:	e8 10 7b 00 00       	call   17f86 <mutex_lock>
   10476:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10479:	8b 45 08             	mov    0x8(%ebp),%eax
   1047c:	83 c0 14             	add    $0x14,%eax
   1047f:	83 ec 04             	sub    $0x4,%esp
   10482:	ff 75 0c             	pushl  0xc(%ebp)
   10485:	6a 00                	push   $0x0
   10487:	50                   	push   %eax
   10488:	e8 20 7f 00 00       	call   183ad <bitmap_alloc_nbits>
   1048d:	83 c4 10             	add    $0x10,%esp
   10490:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10493:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10497:	78 17                	js     104b0 <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   10499:	8b 45 08             	mov    0x8(%ebp),%eax
   1049c:	8b 50 20             	mov    0x20(%eax),%edx
   1049f:	8b 45 08             	mov    0x8(%ebp),%eax
   104a2:	8b 48 1c             	mov    0x1c(%eax),%ecx
   104a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   104a8:	0f af c1             	imul   %ecx,%eax
   104ab:	01 d0                	add    %edx,%eax
   104ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   104b0:	8b 45 08             	mov    0x8(%ebp),%eax
   104b3:	83 ec 0c             	sub    $0xc,%esp
   104b6:	50                   	push   %eax
   104b7:	e8 5e 7b 00 00       	call   1801a <mutex_unlock>
   104bc:	83 c4 10             	add    $0x10,%esp
    return addr;
   104bf:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104c2:	c9                   	leave  
   104c3:	c3                   	ret    

000104c4 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   104c4:	55                   	push   %ebp
   104c5:	89 e5                	mov    %esp,%ebp
   104c7:	53                   	push   %ebx
   104c8:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104cb:	8b 45 08             	mov    0x8(%ebp),%eax
   104ce:	83 ec 0c             	sub    $0xc,%esp
   104d1:	50                   	push   %eax
   104d2:	e8 af 7a 00 00       	call   17f86 <mutex_lock>
   104d7:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	8b 40 20             	mov    0x20(%eax),%eax
   104e0:	8b 55 0c             	mov    0xc(%ebp),%edx
   104e3:	89 d1                	mov    %edx,%ecx
   104e5:	29 c1                	sub    %eax,%ecx
   104e7:	8b 45 08             	mov    0x8(%ebp),%eax
   104ea:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104ed:	89 c8                	mov    %ecx,%eax
   104ef:	ba 00 00 00 00       	mov    $0x0,%edx
   104f4:	f7 f3                	div    %ebx
   104f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104f9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104fc:	8b 55 08             	mov    0x8(%ebp),%edx
   104ff:	83 c2 14             	add    $0x14,%edx
   10502:	6a 00                	push   $0x0
   10504:	ff 75 10             	pushl  0x10(%ebp)
   10507:	50                   	push   %eax
   10508:	52                   	push   %edx
   10509:	e8 76 7d 00 00       	call   18284 <bitmap_set_bit>
   1050e:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10511:	8b 45 08             	mov    0x8(%ebp),%eax
   10514:	83 ec 0c             	sub    $0xc,%esp
   10517:	50                   	push   %eax
   10518:	e8 fd 7a 00 00       	call   1801a <mutex_unlock>
   1051d:	83 c4 10             	add    $0x10,%esp
}
   10520:	90                   	nop
   10521:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10524:	c9                   	leave  
   10525:	c3                   	ret    

00010526 <show_mem_info>:

static void show_mem_info(boot_info_t *boot_info)
{
   10526:	55                   	push   %ebp
   10527:	89 e5                	mov    %esp,%ebp
   10529:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1052c:	83 ec 0c             	sub    $0xc,%esp
   1052f:	68 20 8d 01 00       	push   $0x18d20
   10534:	e8 07 87 00 00       	call   18c40 <log_printf>
   10539:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1053c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10543:	eb 29                	jmp    1056e <show_mem_info+0x48>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   10545:	8b 45 08             	mov    0x8(%ebp),%eax
   10548:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1054b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1054f:	8b 45 08             	mov    0x8(%ebp),%eax
   10552:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10555:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10558:	52                   	push   %edx
   10559:	50                   	push   %eax
   1055a:	ff 75 f4             	pushl  -0xc(%ebp)
   1055d:	68 2c 8d 01 00       	push   $0x18d2c
   10562:	e8 d9 86 00 00       	call   18c40 <log_printf>
   10567:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1056a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1056e:	8b 45 08             	mov    0x8(%ebp),%eax
   10571:	8b 40 50             	mov    0x50(%eax),%eax
   10574:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10577:	7c cc                	jl     10545 <show_mem_info+0x1f>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10579:	83 ec 0c             	sub    $0xc,%esp
   1057c:	68 3e 8d 01 00       	push   $0x18d3e
   10581:	e8 ba 86 00 00       	call   18c40 <log_printf>
   10586:	83 c4 10             	add    $0x10,%esp
}
   10589:	90                   	nop
   1058a:	c9                   	leave  
   1058b:	c3                   	ret    

0001058c <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   1058c:	55                   	push   %ebp
   1058d:	89 e5                	mov    %esp,%ebp
   1058f:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10592:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10599:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   105a0:	eb 16                	jmp    105b8 <total_mem_size+0x2c>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   105a2:	8b 45 08             	mov    0x8(%ebp),%eax
   105a5:	8b 55 f8             	mov    -0x8(%ebp),%edx
   105a8:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   105ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105af:	01 d0                	add    %edx,%eax
   105b1:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   105b4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   105b8:	8b 45 08             	mov    0x8(%ebp),%eax
   105bb:	8b 40 50             	mov    0x50(%eax),%eax
   105be:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105c1:	7c df                	jl     105a2 <total_mem_size+0x16>
    }
    return mem_size;
   105c3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105c6:	c9                   	leave  
   105c7:	c3                   	ret    

000105c8 <find_pte>:

pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   105c8:	55                   	push   %ebp
   105c9:	89 e5                	mov    %esp,%ebp
   105cb:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105ce:	ff 75 0c             	pushl  0xc(%ebp)
   105d1:	e8 8a fd ff ff       	call   10360 <pde_index>
   105d6:	83 c4 04             	add    $0x4,%esp
   105d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105e0:	8b 45 08             	mov    0x8(%ebp),%eax
   105e3:	01 d0                	add    %edx,%eax
   105e5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   105e8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105eb:	0f b6 00             	movzbl (%eax),%eax
   105ee:	83 e0 01             	and    $0x1,%eax
   105f1:	84 c0                	test   %al,%al
   105f3:	74 10                	je     10605 <find_pte+0x3d>
    {
        page_table = (pte_t *)pde_paddr(pde);
   105f5:	ff 75 f0             	pushl  -0x10(%ebp)
   105f8:	e8 77 fd ff ff       	call   10374 <pde_paddr>
   105fd:	83 c4 04             	add    $0x4,%esp
   10600:	89 45 f4             	mov    %eax,-0xc(%ebp)
   10603:	eb 57                	jmp    1065c <find_pte+0x94>
    }
    else
    {
        // 如果不存在，则考虑分配一个
        if (alloc == 0)
   10605:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   10609:	75 07                	jne    10612 <find_pte+0x4a>
        {
            return (pte_t *)0;
   1060b:	b8 00 00 00 00       	mov    $0x0,%eax
   10610:	eb 64                	jmp    10676 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10612:	83 ec 08             	sub    $0x8,%esp
   10615:	6a 01                	push   $0x1
   10617:	68 00 e0 01 00       	push   $0x1e000
   1061c:	e8 3c fe ff ff       	call   1045d <addr_alloc_page>
   10621:	83 c4 10             	add    $0x10,%esp
   10624:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0)
   10627:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1062b:	75 07                	jne    10634 <find_pte+0x6c>
        {
            return (pte_t *)0;
   1062d:	b8 00 00 00 00       	mov    $0x0,%eax
   10632:	eb 42                	jmp    10676 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10634:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10637:	83 c8 07             	or     $0x7,%eax
   1063a:	89 c2                	mov    %eax,%edx
   1063c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1063f:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        // kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   10641:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10644:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10647:	83 ec 04             	sub    $0x4,%esp
   1064a:	68 00 10 00 00       	push   $0x1000
   1064f:	6a 00                	push   $0x0
   10651:	ff 75 f4             	pushl  -0xc(%ebp)
   10654:	e8 cd 7f 00 00       	call   18626 <kernel_memset>
   10659:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1065c:	83 ec 0c             	sub    $0xc,%esp
   1065f:	ff 75 0c             	pushl  0xc(%ebp)
   10662:	e8 34 fd ff ff       	call   1039b <pte_index>
   10667:	83 c4 10             	add    $0x10,%esp
   1066a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10671:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10674:	01 d0                	add    %edx,%eax
}
   10676:	c9                   	leave  
   10677:	c3                   	ret    

00010678 <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10678:	55                   	push   %ebp
   10679:	89 e5                	mov    %esp,%ebp
   1067b:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   1067e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10685:	eb 6e                	jmp    106f5 <memory_create_map+0x7d>
    {
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t *pte = find_pte(page_dir, vaddr, 1);
   10687:	83 ec 04             	sub    $0x4,%esp
   1068a:	6a 01                	push   $0x1
   1068c:	ff 75 0c             	pushl  0xc(%ebp)
   1068f:	ff 75 08             	pushl  0x8(%ebp)
   10692:	e8 31 ff ff ff       	call   105c8 <find_pte>
   10697:	83 c4 10             	add    $0x10,%esp
   1069a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   1069d:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   106a1:	75 07                	jne    106aa <memory_create_map+0x32>
        {
            // log_printf("create pte failed. pte == 0");
            return -1;
   106a3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   106a8:	eb 58                	jmp    10702 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   106aa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106ad:	0f b6 00             	movzbl (%eax),%eax
   106b0:	83 e0 01             	and    $0x1,%eax
   106b3:	84 c0                	test   %al,%al
   106b5:	74 1c                	je     106d3 <memory_create_map+0x5b>
   106b7:	68 40 8d 01 00       	push   $0x18d40
   106bc:	68 88 8e 01 00       	push   $0x18e88
   106c1:	68 97 00 00 00       	push   $0x97
   106c6:	68 54 8d 01 00       	push   $0x18d54
   106cb:	e8 a0 82 00 00       	call   18970 <panic>
   106d0:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106d3:	8b 45 10             	mov    0x10(%ebp),%eax
   106d6:	0b 45 18             	or     0x18(%ebp),%eax
   106d9:	83 c8 01             	or     $0x1,%eax
   106dc:	89 c2                	mov    %eax,%edx
   106de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106e1:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106e3:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106ea:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   106f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106f8:	3b 45 14             	cmp    0x14(%ebp),%eax
   106fb:	7c 8a                	jl     10687 <memory_create_map+0xf>
    }

    return 0;
   106fd:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10702:	c9                   	leave  
   10703:	c3                   	ret    

00010704 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table(void)
{
   10704:	55                   	push   %ebp
   10705:	89 e5                	mov    %esp,%ebp
   10707:	83 ec 28             	sub    $0x28,%esp
        // 1M以上空间扩展V\P一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   1070a:	83 ec 04             	sub    $0x4,%esp
   1070d:	68 00 10 00 00       	push   $0x1000
   10712:	6a 00                	push   $0x0
   10714:	68 00 f0 01 00       	push   $0x1f000
   10719:	e8 08 7f 00 00       	call   18626 <kernel_memset>
   1071e:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   10721:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10728:	e9 83 00 00 00       	jmp    107b0 <create_kernel_table+0xac>
    {
        memory_map_t *map = kernel_map + i;
   1072d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10730:	c1 e0 04             	shl    $0x4,%eax
   10733:	05 00 b0 01 00       	add    $0x1b000,%eax
   10738:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1073b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1073e:	8b 00                	mov    (%eax),%eax
   10740:	83 ec 08             	sub    $0x8,%esp
   10743:	68 00 10 00 00       	push   $0x1000
   10748:	50                   	push   %eax
   10749:	e8 f9 fb ff ff       	call   10347 <down2>
   1074e:	83 c4 10             	add    $0x10,%esp
   10751:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10754:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10757:	8b 40 04             	mov    0x4(%eax),%eax
   1075a:	83 ec 08             	sub    $0x8,%esp
   1075d:	68 00 10 00 00       	push   $0x1000
   10762:	50                   	push   %eax
   10763:	e8 c8 fb ff ff       	call   10330 <up2>
   10768:	83 c4 10             	add    $0x10,%esp
   1076b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1076e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10771:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10774:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1077a:	85 c0                	test   %eax,%eax
   1077c:	0f 48 c2             	cmovs  %edx,%eax
   1077f:	c1 f8 0c             	sar    $0xc,%eax
   10782:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10785:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10788:	8b 50 0c             	mov    0xc(%eax),%edx
   1078b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1078e:	8b 40 08             	mov    0x8(%eax),%eax
   10791:	89 c1                	mov    %eax,%ecx
   10793:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10796:	83 ec 0c             	sub    $0xc,%esp
   10799:	52                   	push   %edx
   1079a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1079d:	51                   	push   %ecx
   1079e:	50                   	push   %eax
   1079f:	68 00 f0 01 00       	push   $0x1f000
   107a4:	e8 cf fe ff ff       	call   10678 <memory_create_map>
   107a9:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   107ac:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107b3:	83 f8 04             	cmp    $0x4,%eax
   107b6:	0f 86 71 ff ff ff    	jbe    1072d <create_kernel_table+0x29>
    }
}
   107bc:	90                   	nop
   107bd:	c9                   	leave  
   107be:	c3                   	ret    

000107bf <memory_create_uvm>:
/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm(void)
{
   107bf:	55                   	push   %ebp
   107c0:	89 e5                	mov    %esp,%ebp
   107c2:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107c5:	83 ec 08             	sub    $0x8,%esp
   107c8:	6a 01                	push   $0x1
   107ca:	68 00 e0 01 00       	push   $0x1e000
   107cf:	e8 89 fc ff ff       	call   1045d <addr_alloc_page>
   107d4:	83 c4 10             	add    $0x10,%esp
   107d7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   107da:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107de:	75 07                	jne    107e7 <memory_create_uvm+0x28>
    {
        return 0;
   107e0:	b8 00 00 00 00       	mov    $0x0,%eax
   107e5:	eb 5b                	jmp    10842 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107e7:	83 ec 04             	sub    $0x4,%esp
   107ea:	68 00 10 00 00       	push   $0x1000
   107ef:	6a 00                	push   $0x0
   107f1:	ff 75 f0             	pushl  -0x10(%ebp)
   107f4:	e8 2d 7e 00 00       	call   18626 <kernel_memset>
   107f9:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107fc:	83 ec 0c             	sub    $0xc,%esp
   107ff:	68 00 00 00 80       	push   $0x80000000
   10804:	e8 57 fb ff ff       	call   10360 <pde_index>
   10809:	83 c4 10             	add    $0x10,%esp
   1080c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   1080f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10816:	eb 1f                	jmp    10837 <memory_create_uvm+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   10818:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10822:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10825:	01 c2                	add    %eax,%edx
   10827:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1082a:	8b 04 85 00 f0 01 00 	mov    0x1f000(,%eax,4),%eax
   10831:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   10833:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10837:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1083a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1083d:	77 d9                	ja     10818 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   1083f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10842:	c9                   	leave  
   10843:	c3                   	ret    

00010844 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm(uint32_t page_dir)
{
   10844:	55                   	push   %ebp
   10845:	89 e5                	mov    %esp,%ebp
   10847:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1084a:	68 00 00 00 80       	push   $0x80000000
   1084f:	e8 0c fb ff ff       	call   10360 <pde_index>
   10854:	83 c4 04             	add    $0x4,%esp
   10857:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   1085a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1085d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10864:	8b 45 08             	mov    0x8(%ebp),%eax
   10867:	01 d0                	add    %edx,%eax
   10869:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1086c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10870:	75 1c                	jne    1088e <memory_destroy_uvm+0x4a>
   10872:	68 90 8d 01 00       	push   $0x18d90
   10877:	68 9c 8e 01 00       	push   $0x18e9c
   1087c:	68 e7 00 00 00       	push   $0xe7
   10881:	68 54 8d 01 00       	push   $0x18d54
   10886:	e8 e5 80 00 00       	call   18970 <panic>
   1088b:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   1088e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10891:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10894:	e9 95 00 00 00       	jmp    1092e <memory_destroy_uvm+0xea>
    {
        if (!pde->present)
   10899:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1089c:	0f b6 00             	movzbl (%eax),%eax
   1089f:	83 e0 01             	and    $0x1,%eax
   108a2:	84 c0                	test   %al,%al
   108a4:	74 7f                	je     10925 <memory_destroy_uvm+0xe1>
        {
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   108a6:	83 ec 0c             	sub    $0xc,%esp
   108a9:	ff 75 f4             	pushl  -0xc(%ebp)
   108ac:	e8 c3 fa ff ff       	call   10374 <pde_paddr>
   108b1:	83 c4 10             	add    $0x10,%esp
   108b4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   108b7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   108be:	eb 39                	jmp    108f9 <memory_destroy_uvm+0xb5>
        {
            if (!pte->present)
   108c0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108c3:	0f b6 00             	movzbl (%eax),%eax
   108c6:	83 e0 01             	and    $0x1,%eax
   108c9:	84 c0                	test   %al,%al
   108cb:	74 23                	je     108f0 <memory_destroy_uvm+0xac>
            {
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108cd:	83 ec 0c             	sub    $0xc,%esp
   108d0:	ff 75 ec             	pushl  -0x14(%ebp)
   108d3:	e8 d3 fa ff ff       	call   103ab <pte_paddr>
   108d8:	83 c4 10             	add    $0x10,%esp
   108db:	83 ec 04             	sub    $0x4,%esp
   108de:	6a 01                	push   $0x1
   108e0:	50                   	push   %eax
   108e1:	68 00 e0 01 00       	push   $0x1e000
   108e6:	e8 d9 fb ff ff       	call   104c4 <addr_free_page>
   108eb:	83 c4 10             	add    $0x10,%esp
   108ee:	eb 01                	jmp    108f1 <memory_destroy_uvm+0xad>
                continue;
   108f0:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   108f1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108f5:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108f9:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10900:	7e be                	jle    108c0 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   10902:	83 ec 0c             	sub    $0xc,%esp
   10905:	ff 75 f4             	pushl  -0xc(%ebp)
   10908:	e8 67 fa ff ff       	call   10374 <pde_paddr>
   1090d:	83 c4 10             	add    $0x10,%esp
   10910:	83 ec 04             	sub    $0x4,%esp
   10913:	6a 01                	push   $0x1
   10915:	50                   	push   %eax
   10916:	68 00 e0 01 00       	push   $0x1e000
   1091b:	e8 a4 fb ff ff       	call   104c4 <addr_free_page>
   10920:	83 c4 10             	add    $0x10,%esp
   10923:	eb 01                	jmp    10926 <memory_destroy_uvm+0xe2>
            continue;
   10925:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10926:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1092a:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   1092e:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10935:	0f 8e 5e ff ff ff    	jle    10899 <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   1093b:	83 ec 04             	sub    $0x4,%esp
   1093e:	6a 01                	push   $0x1
   10940:	ff 75 08             	pushl  0x8(%ebp)
   10943:	68 00 e0 01 00       	push   $0x1e000
   10948:	e8 77 fb ff ff       	call   104c4 <addr_free_page>
   1094d:	83 c4 10             	add    $0x10,%esp
}
   10950:	90                   	nop
   10951:	c9                   	leave  
   10952:	c3                   	ret    

00010953 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm(uint32_t page_dir)
{
   10953:	55                   	push   %ebp
   10954:	89 e5                	mov    %esp,%ebp
   10956:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   10959:	e8 61 fe ff ff       	call   107bf <memory_create_uvm>
   1095e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0)
   10961:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10965:	0f 84 1b 01 00 00    	je     10a86 <memory_copy_uvm+0x133>
    {
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1096b:	83 ec 0c             	sub    $0xc,%esp
   1096e:	68 00 00 00 80       	push   $0x80000000
   10973:	e8 e8 f9 ff ff       	call   10360 <pde_index>
   10978:	83 c4 10             	add    $0x10,%esp
   1097b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   1097e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10981:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10988:	8b 45 08             	mov    0x8(%ebp),%eax
   1098b:	01 d0                	add    %edx,%eax
   1098d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10990:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10993:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10996:	e9 d9 00 00 00       	jmp    10a74 <memory_copy_uvm+0x121>
    {
        if (!pde->present)
   1099b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1099e:	0f b6 00             	movzbl (%eax),%eax
   109a1:	83 e0 01             	and    $0x1,%eax
   109a4:	84 c0                	test   %al,%al
   109a6:	0f 84 bf 00 00 00    	je     10a6b <memory_copy_uvm+0x118>
        {
            continue;
        }

        // 遍历页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   109ac:	83 ec 0c             	sub    $0xc,%esp
   109af:	ff 75 f4             	pushl  -0xc(%ebp)
   109b2:	e8 bd f9 ff ff       	call   10374 <pde_paddr>
   109b7:	83 c4 10             	add    $0x10,%esp
   109ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   109bd:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109c4:	e9 93 00 00 00       	jmp    10a5c <memory_copy_uvm+0x109>
        {
            if (!pte->present)
   109c9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109cc:	0f b6 00             	movzbl (%eax),%eax
   109cf:	83 e0 01             	and    $0x1,%eax
   109d2:	84 c0                	test   %al,%al
   109d4:	74 7d                	je     10a53 <memory_copy_uvm+0x100>
            {
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109d6:	83 ec 08             	sub    $0x8,%esp
   109d9:	6a 01                	push   $0x1
   109db:	68 00 e0 01 00       	push   $0x1e000
   109e0:	e8 78 fa ff ff       	call   1045d <addr_alloc_page>
   109e5:	83 c4 10             	add    $0x10,%esp
   109e8:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0)
   109eb:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109ef:	0f 84 94 00 00 00    	je     10a89 <memory_copy_uvm+0x136>
            {
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109f5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109f8:	c1 e0 16             	shl    $0x16,%eax
   109fb:	89 c2                	mov    %eax,%edx
   109fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10a00:	c1 e0 0c             	shl    $0xc,%eax
   10a03:	09 d0                	or     %edx,%eax
   10a05:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   10a08:	83 ec 0c             	sub    $0xc,%esp
   10a0b:	ff 75 ec             	pushl  -0x14(%ebp)
   10a0e:	e8 bf f9 ff ff       	call   103d2 <get_pte_perm>
   10a13:	83 c4 10             	add    $0x10,%esp
   10a16:	89 c2                	mov    %eax,%edx
   10a18:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a1b:	83 ec 0c             	sub    $0xc,%esp
   10a1e:	52                   	push   %edx
   10a1f:	6a 01                	push   $0x1
   10a21:	ff 75 dc             	pushl  -0x24(%ebp)
   10a24:	ff 75 d8             	pushl  -0x28(%ebp)
   10a27:	50                   	push   %eax
   10a28:	e8 4b fc ff ff       	call   10678 <memory_create_map>
   10a2d:	83 c4 20             	add    $0x20,%esp
   10a30:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0)
   10a33:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a37:	78 53                	js     10a8c <memory_copy_uvm+0x139>
            {
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a39:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a3c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a3f:	83 ec 04             	sub    $0x4,%esp
   10a42:	68 00 10 00 00       	push   $0x1000
   10a47:	52                   	push   %edx
   10a48:	50                   	push   %eax
   10a49:	e8 89 7b 00 00       	call   185d7 <kernel_memcpy>
   10a4e:	83 c4 10             	add    $0x10,%esp
   10a51:	eb 01                	jmp    10a54 <memory_copy_uvm+0x101>
                continue;
   10a53:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   10a54:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a58:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a5c:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a63:	0f 8e 60 ff ff ff    	jle    109c9 <memory_copy_uvm+0x76>
   10a69:	eb 01                	jmp    10a6c <memory_copy_uvm+0x119>
            continue;
   10a6b:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10a6c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a70:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a74:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a7b:	0f 8e 1a ff ff ff    	jle    1099b <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a81:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a84:	eb 20                	jmp    10aa6 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a86:	90                   	nop
   10a87:	eb 04                	jmp    10a8d <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a89:	90                   	nop
   10a8a:	eb 01                	jmp    10a8d <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a8c:	90                   	nop

copy_uvm_failed:
    if (to_page_dir)
   10a8d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a91:	74 0e                	je     10aa1 <memory_copy_uvm+0x14e>
    {
        memory_destroy_uvm(to_page_dir);
   10a93:	83 ec 0c             	sub    $0xc,%esp
   10a96:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a99:	e8 a6 fd ff ff       	call   10844 <memory_destroy_uvm>
   10a9e:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10aa1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10aa6:	c9                   	leave  
   10aa7:	c3                   	ret    

00010aa8 <memory_get_paddr>:
/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr)
{
   10aa8:	55                   	push   %ebp
   10aa9:	89 e5                	mov    %esp,%ebp
   10aab:	83 ec 18             	sub    $0x18,%esp
    pte_t *pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10aae:	8b 45 08             	mov    0x8(%ebp),%eax
   10ab1:	83 ec 04             	sub    $0x4,%esp
   10ab4:	6a 00                	push   $0x0
   10ab6:	ff 75 0c             	pushl  0xc(%ebp)
   10ab9:	50                   	push   %eax
   10aba:	e8 09 fb ff ff       	call   105c8 <find_pte>
   10abf:	83 c4 10             	add    $0x10,%esp
   10ac2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0)
   10ac5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ac9:	75 07                	jne    10ad2 <memory_get_paddr+0x2a>
    {
        return 0;
   10acb:	b8 00 00 00 00       	mov    $0x0,%eax
   10ad0:	eb 1a                	jmp    10aec <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ad2:	83 ec 0c             	sub    $0xc,%esp
   10ad5:	ff 75 f4             	pushl  -0xc(%ebp)
   10ad8:	e8 ce f8 ff ff       	call   103ab <pte_paddr>
   10add:	83 c4 10             	add    $0x10,%esp
   10ae0:	89 c2                	mov    %eax,%edx
   10ae2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ae5:	25 ff 0f 00 00       	and    $0xfff,%eax
   10aea:	01 d0                	add    %edx,%eax
}
   10aec:	c9                   	leave  
   10aed:	c3                   	ret    

00010aee <memory_copy_uvm_data>:
/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size)
{
   10aee:	55                   	push   %ebp
   10aef:	89 e5                	mov    %esp,%ebp
   10af1:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while (size > 0)
   10af4:	eb 6e                	jmp    10b64 <memory_copy_uvm_data+0x76>
    {
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10af6:	83 ec 08             	sub    $0x8,%esp
   10af9:	ff 75 08             	pushl  0x8(%ebp)
   10afc:	ff 75 0c             	pushl  0xc(%ebp)
   10aff:	e8 a4 ff ff ff       	call   10aa8 <memory_get_paddr>
   10b04:	83 c4 10             	add    $0x10,%esp
   10b07:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0)
   10b0a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10b0e:	75 07                	jne    10b17 <memory_copy_uvm_data+0x29>
        {
            return -1;
   10b10:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b15:	eb 58                	jmp    10b6f <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10b17:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b1a:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b1f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b22:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b27:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b2a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size)
   10b2d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b30:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b33:	76 06                	jbe    10b3b <memory_copy_uvm_data+0x4d>
        {
            curr_size = size; // 如果比较大，超过页边界，则只拷贝此页内的
   10b35:	8b 45 14             	mov    0x14(%ebp),%eax
   10b38:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b3b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b3e:	8b 55 10             	mov    0x10(%ebp),%edx
   10b41:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b44:	83 ec 04             	sub    $0x4,%esp
   10b47:	51                   	push   %ecx
   10b48:	52                   	push   %edx
   10b49:	50                   	push   %eax
   10b4a:	e8 88 7a 00 00       	call   185d7 <kernel_memcpy>
   10b4f:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b52:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b55:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b58:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b5b:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b5e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b61:	01 45 10             	add    %eax,0x10(%ebp)
    while (size > 0)
   10b64:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b68:	75 8c                	jne    10af6 <memory_copy_uvm_data+0x8>
    }

    return 0;
   10b6a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b6f:	c9                   	leave  
   10b70:	c3                   	ret    

00010b71 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm)
{
   10b71:	55                   	push   %ebp
   10b72:	89 e5                	mov    %esp,%ebp
   10b74:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b77:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b7d:	68 00 10 00 00       	push   $0x1000
   10b82:	ff 75 10             	pushl  0x10(%ebp)
   10b85:	e8 a6 f7 ff ff       	call   10330 <up2>
   10b8a:	83 c4 08             	add    $0x8,%esp
   10b8d:	c1 e8 0c             	shr    $0xc,%eax
   10b90:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b93:	68 00 10 00 00       	push   $0x1000
   10b98:	ff 75 0c             	pushl  0xc(%ebp)
   10b9b:	e8 a7 f7 ff ff       	call   10347 <down2>
   10ba0:	83 c4 08             	add    $0x8,%esp
   10ba3:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++)
   10ba6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10bad:	eb 7b                	jmp    10c2a <memory_alloc_for_page_dir+0xb9>
    {
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10baf:	83 ec 08             	sub    $0x8,%esp
   10bb2:	6a 01                	push   $0x1
   10bb4:	68 00 e0 01 00       	push   $0x1e000
   10bb9:	e8 9f f8 ff ff       	call   1045d <addr_alloc_page>
   10bbe:	83 c4 10             	add    $0x10,%esp
   10bc1:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0)
   10bc4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bc8:	75 17                	jne    10be1 <memory_alloc_for_page_dir+0x70>
        {
            log_printf("mem alloc failed. no memory");
   10bca:	83 ec 0c             	sub    $0xc,%esp
   10bcd:	68 9e 8d 01 00       	push   $0x18d9e
   10bd2:	e8 69 80 00 00       	call   18c40 <log_printf>
   10bd7:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bda:	b8 00 00 00 00       	mov    $0x0,%eax
   10bdf:	eb 5a                	jmp    10c3b <memory_alloc_for_page_dir+0xca>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10be1:	8b 55 14             	mov    0x14(%ebp),%edx
   10be4:	8b 45 08             	mov    0x8(%ebp),%eax
   10be7:	83 ec 0c             	sub    $0xc,%esp
   10bea:	52                   	push   %edx
   10beb:	6a 01                	push   $0x1
   10bed:	ff 75 e8             	pushl  -0x18(%ebp)
   10bf0:	ff 75 f4             	pushl  -0xc(%ebp)
   10bf3:	50                   	push   %eax
   10bf4:	e8 7f fa ff ff       	call   10678 <memory_create_map>
   10bf9:	83 c4 20             	add    $0x20,%esp
   10bfc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   10bff:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10c03:	79 1a                	jns    10c1f <memory_alloc_for_page_dir+0xae>
        {
            log_printf("create memory map failed. err = %d", err);
   10c05:	83 ec 08             	sub    $0x8,%esp
   10c08:	ff 75 e4             	pushl  -0x1c(%ebp)
   10c0b:	68 bc 8d 01 00       	push   $0x18dbc
   10c10:	e8 2b 80 00 00       	call   18c40 <log_printf>
   10c15:	83 c4 10             	add    $0x10,%esp
            // addr_free_page(&paddr_alloc, vaddr, i + 1); 清理之前分配的页
            return -1;
   10c18:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c1d:	eb 1c                	jmp    10c3b <memory_alloc_for_page_dir+0xca>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c1f:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++)
   10c26:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c2d:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c30:	0f 8c 79 ff ff ff    	jl     10baf <memory_alloc_for_page_dir+0x3e>
    }

    return 0;
   10c36:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c3b:	c9                   	leave  
   10c3c:	c3                   	ret    

00010c3d <memory_alloc_page>:
/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page(void)
{
   10c3d:	55                   	push   %ebp
   10c3e:	89 e5                	mov    %esp,%ebp
   10c40:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c43:	83 ec 08             	sub    $0x8,%esp
   10c46:	6a 01                	push   $0x1
   10c48:	68 00 e0 01 00       	push   $0x1e000
   10c4d:	e8 0b f8 ff ff       	call   1045d <addr_alloc_page>
   10c52:	83 c4 10             	add    $0x10,%esp
}
   10c55:	c9                   	leave  
   10c56:	c3                   	ret    

00010c57 <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page(uint32_t addr)
{
   10c57:	55                   	push   %ebp
   10c58:	89 e5                	mov    %esp,%ebp
   10c5a:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE)
   10c5d:	8b 45 08             	mov    0x8(%ebp),%eax
   10c60:	85 c0                	test   %eax,%eax
   10c62:	78 17                	js     10c7b <memory_free_page+0x24>
    {
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c64:	83 ec 04             	sub    $0x4,%esp
   10c67:	6a 01                	push   $0x1
   10c69:	ff 75 08             	pushl  0x8(%ebp)
   10c6c:	68 00 e0 01 00       	push   $0x1e000
   10c71:	e8 4e f8 ff ff       	call   104c4 <addr_free_page>
   10c76:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10c79:	eb 72                	jmp    10ced <memory_free_page+0x96>
        pte_t *pte = find_pte(current_page_dir(), addr, 0);
   10c7b:	e8 72 f7 ff ff       	call   103f2 <current_page_dir>
   10c80:	83 ec 04             	sub    $0x4,%esp
   10c83:	6a 00                	push   $0x0
   10c85:	ff 75 08             	pushl  0x8(%ebp)
   10c88:	50                   	push   %eax
   10c89:	e8 3a f9 ff ff       	call   105c8 <find_pte>
   10c8e:	83 c4 10             	add    $0x10,%esp
   10c91:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10c94:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c98:	75 0d                	jne    10ca7 <memory_free_page+0x50>
   10c9a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c9d:	0f b6 00             	movzbl (%eax),%eax
   10ca0:	83 e0 01             	and    $0x1,%eax
   10ca3:	84 c0                	test   %al,%al
   10ca5:	75 1c                	jne    10cc3 <memory_free_page+0x6c>
   10ca7:	68 e0 8d 01 00       	push   $0x18de0
   10cac:	68 b0 8e 01 00       	push   $0x18eb0
   10cb1:	68 ac 01 00 00       	push   $0x1ac
   10cb6:	68 54 8d 01 00       	push   $0x18d54
   10cbb:	e8 b0 7c 00 00       	call   18970 <panic>
   10cc0:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10cc3:	83 ec 0c             	sub    $0xc,%esp
   10cc6:	ff 75 f4             	pushl  -0xc(%ebp)
   10cc9:	e8 dd f6 ff ff       	call   103ab <pte_paddr>
   10cce:	83 c4 10             	add    $0x10,%esp
   10cd1:	83 ec 04             	sub    $0x4,%esp
   10cd4:	6a 01                	push   $0x1
   10cd6:	50                   	push   %eax
   10cd7:	68 00 e0 01 00       	push   $0x1e000
   10cdc:	e8 e3 f7 ff ff       	call   104c4 <addr_free_page>
   10ce1:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10ce4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ce7:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ced:	90                   	nop
   10cee:	c9                   	leave  
   10cef:	c3                   	ret    

00010cf0 <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm)
{
   10cf0:	55                   	push   %ebp
   10cf1:	89 e5                	mov    %esp,%ebp
   10cf3:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10cf6:	e8 a5 08 00 00       	call   115a0 <task_current>
   10cfb:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   10d01:	ff 75 10             	pushl  0x10(%ebp)
   10d04:	ff 75 0c             	pushl  0xc(%ebp)
   10d07:	ff 75 08             	pushl  0x8(%ebp)
   10d0a:	50                   	push   %eax
   10d0b:	e8 61 fe ff ff       	call   10b71 <memory_alloc_for_page_dir>
   10d10:	83 c4 10             	add    $0x10,%esp
}
   10d13:	c9                   	leave  
   10d14:	c3                   	ret    

00010d15 <memory_init>:
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init(boot_info_t *boot_info)
{
   10d15:	55                   	push   %ebp
   10d16:	89 e5                	mov    %esp,%ebp
   10d18:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    log_printf("mem init");
   10d1b:	83 ec 0c             	sub    $0xc,%esp
   10d1e:	68 04 8e 01 00       	push   $0x18e04
   10d23:	e8 18 7f 00 00       	call   18c40 <log_printf>
   10d28:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d2b:	83 ec 0c             	sub    $0xc,%esp
   10d2e:	ff 75 08             	pushl  0x8(%ebp)
   10d31:	e8 f0 f7 ff ff       	call   10526 <show_mem_info>
   10d36:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10d39:	c7 45 f4 64 a4 07 00 	movl   $0x7a464,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d40:	83 ec 0c             	sub    $0xc,%esp
   10d43:	ff 75 08             	pushl  0x8(%ebp)
   10d46:	e8 41 f8 ff ff       	call   1058c <total_mem_size>
   10d4b:	83 c4 10             	add    $0x10,%esp
   10d4e:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d53:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10d56:	83 ec 08             	sub    $0x8,%esp
   10d59:	68 00 10 00 00       	push   $0x1000
   10d5e:	ff 75 f0             	pushl  -0x10(%ebp)
   10d61:	e8 e1 f5 ff ff       	call   10347 <down2>
   10d66:	83 c4 10             	add    $0x10,%esp
   10d69:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x, size:0x%x", MEM_EXT_START, mem_up1MB_free);
   10d6c:	83 ec 04             	sub    $0x4,%esp
   10d6f:	ff 75 f0             	pushl  -0x10(%ebp)
   10d72:	68 00 00 10 00       	push   $0x100000
   10d77:	68 0d 8e 01 00       	push   $0x18e0d
   10d7c:	e8 bf 7e 00 00       	call   18c40 <log_printf>
   10d81:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d84:	83 ec 0c             	sub    $0xc,%esp
   10d87:	68 00 10 00 00       	push   $0x1000
   10d8c:	ff 75 f0             	pushl  -0x10(%ebp)
   10d8f:	68 00 00 10 00       	push   $0x100000
   10d94:	ff 75 f4             	pushl  -0xc(%ebp)
   10d97:	68 00 e0 01 00       	push   $0x1e000
   10d9c:	e8 64 f6 ff ff       	call   10405 <addr_alloc_init>
   10da1:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE); // mem_free 跳过bit的地址
   10da4:	a1 24 e0 01 00       	mov    0x1e024,%eax
   10da9:	c1 e8 0c             	shr    $0xc,%eax
   10dac:	83 ec 0c             	sub    $0xc,%esp
   10daf:	50                   	push   %eax
   10db0:	e8 66 74 00 00       	call   1821b <bitmap_byte_count>
   10db5:	83 c4 10             	add    $0x10,%esp
   10db8:	01 45 f4             	add    %eax,-0xc(%ebp)
    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10dbb:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10dc2:	76 1c                	jbe    10de0 <memory_init+0xcb>
   10dc4:	68 2c 8e 01 00       	push   $0x18e2c
   10dc9:	68 c4 8e 01 00       	push   $0x18ec4
   10dce:	68 d6 01 00 00       	push   $0x1d6
   10dd3:	68 54 8d 01 00       	push   $0x18d54
   10dd8:	e8 93 7b 00 00       	call   18970 <panic>
   10ddd:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10de0:	e8 1f f9 ff ff       	call   10704 <create_kernel_table>
    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10de5:	b8 00 f0 01 00       	mov    $0x1f000,%eax
   10dea:	83 ec 0c             	sub    $0xc,%esp
   10ded:	50                   	push   %eax
   10dee:	e8 ee f5 ff ff       	call   103e1 <mmu_set_page_dir>
   10df3:	83 c4 10             	add    $0x10,%esp
    // {
    //     addr_free_page(&addr_alloc, addr, 2);
    //     addr += 4096 * 2;
    //     log_printf("alloc addr: 0x%x", addr);
    // }
}
   10df6:	90                   	nop
   10df7:	c9                   	leave  
   10df8:	c3                   	ret    

00010df9 <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char *sys_sbrk(int incr)
{
   10df9:	55                   	push   %ebp
   10dfa:	89 e5                	mov    %esp,%ebp
   10dfc:	83 ec 38             	sub    $0x38,%esp
    task_t *task = task_current();
   10dff:	e8 9c 07 00 00       	call   115a0 <task_current>
   10e04:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char *pre_heap_end = (char *)task->heap_end;
   10e07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e0a:	8b 40 30             	mov    0x30(%eax),%eax
   10e0d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10e10:	8b 45 08             	mov    0x8(%ebp),%eax
   10e13:	89 45 e8             	mov    %eax,-0x18(%ebp)
    ASSERT(incr >= 0);
   10e16:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e1a:	79 1c                	jns    10e38 <sys_sbrk+0x3f>
   10e1c:	68 51 8e 01 00       	push   $0x18e51
   10e21:	68 d0 8e 01 00       	push   $0x18ed0
   10e26:	68 f7 01 00 00       	push   $0x1f7
   10e2b:	68 54 8d 01 00       	push   $0x18d54
   10e30:	e8 3b 7b 00 00       	call   18970 <panic>
   10e35:	83 c4 10             	add    $0x10,%esp
    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0)
   10e38:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e3c:	75 1b                	jne    10e59 <sys_sbrk+0x60>
    {
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e3e:	83 ec 08             	sub    $0x8,%esp
   10e41:	ff 75 ec             	pushl  -0x14(%ebp)
   10e44:	68 5b 8e 01 00       	push   $0x18e5b
   10e49:	e8 f2 7d 00 00       	call   18c40 <log_printf>
   10e4e:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e51:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e54:	e9 aa 00 00 00       	jmp    10f03 <sys_sbrk+0x10a>
    }
    uint32_t start = task->heap_end;
   10e59:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e5c:	8b 40 30             	mov    0x30(%eax),%eax
   10e5f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e62:	8b 55 08             	mov    0x8(%ebp),%edx
   10e65:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e68:	01 d0                	add    %edx,%eax
   10e6a:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e6d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e70:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e75:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset)
   10e78:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e7c:	74 37                	je     10eb5 <sys_sbrk+0xbc>
    {
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE)
   10e7e:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e81:	8b 45 08             	mov    0x8(%ebp),%eax
   10e84:	01 d0                	add    %edx,%eax
   10e86:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e8b:	7f 0e                	jg     10e9b <sys_sbrk+0xa2>
        {
            task->heap_end = end;
   10e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e90:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10e93:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10e96:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e99:	eb 68                	jmp    10f03 <sys_sbrk+0x10a>
        }
        else
        {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10e9b:	b8 00 10 00 00       	mov    $0x1000,%eax
   10ea0:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10ea3:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10ea6:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10ea9:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10eac:	8b 45 08             	mov    0x8(%ebp),%eax
   10eaf:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10eb2:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }
    // 处理其余的，起始对齐的页边界的
    if (incr)
   10eb5:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10eb9:	74 3c                	je     10ef7 <sys_sbrk+0xfe>
    {
        uint32_t curr_size = end - start;
   10ebb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ebe:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ec1:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ec4:	83 ec 04             	sub    $0x4,%esp
   10ec7:	6a 07                	push   $0x7
   10ec9:	ff 75 d8             	pushl  -0x28(%ebp)
   10ecc:	ff 75 f4             	pushl  -0xc(%ebp)
   10ecf:	e8 1c fe ff ff       	call   10cf0 <memory_alloc_page_for>
   10ed4:	83 c4 10             	add    $0x10,%esp
   10ed7:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0)
   10eda:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10ede:	79 17                	jns    10ef7 <sys_sbrk+0xfe>
        {
            log_printf("sbrk: alloc mem failed.");
   10ee0:	83 ec 0c             	sub    $0xc,%esp
   10ee3:	68 6f 8e 01 00       	push   $0x18e6f
   10ee8:	e8 53 7d 00 00       	call   18c40 <log_printf>
   10eed:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10ef0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ef5:	eb 0c                	jmp    10f03 <sys_sbrk+0x10a>
        }
    }

    // log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10ef7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10efa:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10efd:	89 50 30             	mov    %edx,0x30(%eax)
    return (char *)pre_heap_end;
   10f00:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10f03:	c9                   	leave  
   10f04:	c3                   	ret    

00010f05 <sys_print_msg>:

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

void sys_print_msg(char *fmt, int arg)
{
   10f05:	55                   	push   %ebp
   10f06:	89 e5                	mov    %esp,%ebp
   10f08:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10f0b:	83 ec 08             	sub    $0x8,%esp
   10f0e:	ff 75 0c             	pushl  0xc(%ebp)
   10f11:	ff 75 08             	pushl  0x8(%ebp)
   10f14:	e8 27 7d 00 00       	call   18c40 <log_printf>
   10f19:	83 c4 10             	add    $0x10,%esp
}
   10f1c:	90                   	nop
   10f1d:	c9                   	leave  
   10f1e:	c3                   	ret    

00010f1f <do_handler_syscall>:

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall(syscall_frame_t *frame)
{
   10f1f:	55                   	push   %ebp
   10f20:	89 e5                	mov    %esp,%ebp
   10f22:	53                   	push   %ebx
   10f23:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0]))
   10f26:	8b 45 08             	mov    0x8(%ebp),%eax
   10f29:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f2c:	83 f8 64             	cmp    $0x64,%eax
   10f2f:	77 4e                	ja     10f7f <do_handler_syscall+0x60>
    {
        // 查表取得处理函数，然后调用处理
        syscall_handler_t handler = sys_table[frame->func_id];
   10f31:	8b 45 08             	mov    0x8(%ebp),%eax
   10f34:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f37:	8b 04 85 e0 8e 01 00 	mov    0x18ee0(,%eax,4),%eax
   10f3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler)
   10f41:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f45:	74 38                	je     10f7f <do_handler_syscall+0x60>
        {
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f47:	8b 45 08             	mov    0x8(%ebp),%eax
   10f4a:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f4d:	89 c3                	mov    %eax,%ebx
   10f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f52:	8b 40 48             	mov    0x48(%eax),%eax
   10f55:	89 c1                	mov    %eax,%ecx
   10f57:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5a:	8b 40 44             	mov    0x44(%eax),%eax
   10f5d:	89 c2                	mov    %eax,%edx
   10f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f62:	8b 40 40             	mov    0x40(%eax),%eax
   10f65:	53                   	push   %ebx
   10f66:	51                   	push   %ecx
   10f67:	52                   	push   %edx
   10f68:	50                   	push   %eax
   10f69:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f6c:	ff d0                	call   *%eax
   10f6e:	83 c4 10             	add    $0x10,%esp
   10f71:	89 45 f0             	mov    %eax,-0x10(%ebp)
            frame->eax = ret; // 设置系统调用的返回值，由eax传递
   10f74:	8b 45 08             	mov    0x8(%ebp),%eax
   10f77:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f7a:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f7d:	eb 30                	jmp    10faf <do_handler_syscall+0x90>
        }
    }
    // 不支持的系统调用，打印出错信息
    task_t *task = task_current();
   10f7f:	e8 1c 06 00 00       	call   115a0 <task_current>
   10f84:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10f87:	8b 45 08             	mov    0x8(%ebp),%eax
   10f8a:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f8d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f90:	83 c2 04             	add    $0x4,%edx
   10f93:	83 ec 04             	sub    $0x4,%esp
   10f96:	50                   	push   %eax
   10f97:	52                   	push   %edx
   10f98:	68 74 90 01 00       	push   $0x19074
   10f9d:	e8 9e 7c 00 00       	call   18c40 <log_printf>
   10fa2:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1; // 设置系统调用的返回值，由eax传递
   10fa5:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa8:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10faf:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fb2:	c9                   	leave  
   10fb3:	c3                   	ret    

00010fb4 <list_node_init>:
/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node)
{
   10fb4:	55                   	push   %ebp
   10fb5:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10fb7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fba:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fc1:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc4:	8b 50 04             	mov    0x4(%eax),%edx
   10fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fca:	89 10                	mov    %edx,(%eax)
}
   10fcc:	90                   	nop
   10fcd:	5d                   	pop    %ebp
   10fce:	c3                   	ret    

00010fcf <list_node_next>:
 * 获取结点的后一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t *list_node_next(list_node_t *node)
{
   10fcf:	55                   	push   %ebp
   10fd0:	89 e5                	mov    %esp,%ebp
    return node->next;
   10fd2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd5:	8b 40 04             	mov    0x4(%eax),%eax
}
   10fd8:	5d                   	pop    %ebp
   10fd9:	c3                   	ret    

00010fda <list_count>:
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list)
{
   10fda:	55                   	push   %ebp
   10fdb:	89 e5                	mov    %esp,%ebp
    return list->count;
   10fdd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe0:	8b 40 08             	mov    0x8(%eax),%eax
}
   10fe3:	5d                   	pop    %ebp
   10fe4:	c3                   	ret    

00010fe5 <list_first>:
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t *list_first(list_t *list)
{
   10fe5:	55                   	push   %ebp
   10fe6:	89 e5                	mov    %esp,%ebp
    return list->first;
   10fe8:	8b 45 08             	mov    0x8(%ebp),%eax
   10feb:	8b 00                	mov    (%eax),%eax
}
   10fed:	5d                   	pop    %ebp
   10fee:	c3                   	ret    

00010fef <write_cr3>:
{
   10fef:	55                   	push   %ebp
   10ff0:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10ff2:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff5:	0f 22 d8             	mov    %eax,%cr3
}
   10ff8:	90                   	nop
   10ff9:	5d                   	pop    %ebp
   10ffa:	c3                   	ret    

00010ffb <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   10ffb:	55                   	push   %ebp
   10ffc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10ffe:	f4                   	hlt    
}
   10fff:	90                   	nop
   11000:	5d                   	pop    %ebp
   11001:	c3                   	ret    

00011002 <write_tr>:

// 写tss register 当前运行那个进程
static inline void write_tr(uint32_t tss_selector)
{
   11002:	55                   	push   %ebp
   11003:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   11005:	8b 45 08             	mov    0x8(%ebp),%eax
   11008:	0f 00 d8             	ltr    %ax
}
   1100b:	90                   	nop
   1100c:	5d                   	pop    %ebp
   1100d:	c3                   	ret    

0001100e <mmu_set_page_dir>:
{
   1100e:	55                   	push   %ebp
   1100f:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   11011:	ff 75 08             	pushl  0x8(%ebp)
   11014:	e8 d6 ff ff ff       	call   10fef <write_cr3>
   11019:	83 c4 04             	add    $0x4,%esp
}
   1101c:	90                   	nop
   1101d:	c9                   	leave  
   1101e:	c3                   	ret    

0001101f <tss_init>:
static task_manager_t task_manager; // 任务管理器
static task_t task_table[TASK_NR];
static mutex_t task_table_mutex;

static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   1101f:	55                   	push   %ebp
   11020:	89 e5                	mov    %esp,%ebp
   11022:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = get_alloc_desc();
   11025:	e8 f5 15 00 00       	call   1261f <get_alloc_desc>
   1102a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   1102d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11031:	79 1a                	jns    1104d <tss_init+0x2e>
    {
        log_printf("alloc tss failed.\n");
   11033:	83 ec 0c             	sub    $0xc,%esp
   11036:	68 94 90 01 00       	push   $0x19094
   1103b:	e8 00 7c 00 00       	call   18c40 <log_printf>
   11040:	83 c4 10             	add    $0x10,%esp
        return -1;
   11043:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11048:	e9 7b 01 00 00       	jmp    111c8 <tss_init+0x1a9>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS); // 设置GDT表项内容
   1104d:	8b 45 08             	mov    0x8(%ebp),%eax
   11050:	05 5c 02 00 00       	add    $0x25c,%eax
   11055:	68 89 00 00 00       	push   $0x89
   1105a:	6a 68                	push   $0x68
   1105c:	50                   	push   %eax
   1105d:	ff 75 ec             	pushl  -0x14(%ebp)
   11060:	e8 02 15 00 00       	call   12567 <segment_desc_set>
   11065:	83 c4 10             	add    $0x10,%esp

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11068:	8b 45 08             	mov    0x8(%ebp),%eax
   1106b:	05 5c 02 00 00       	add    $0x25c,%eax
   11070:	83 ec 04             	sub    $0x4,%esp
   11073:	6a 68                	push   $0x68
   11075:	6a 00                	push   $0x0
   11077:	50                   	push   %eax
   11078:	e8 a9 75 00 00       	call   18626 <kernel_memset>
   1107d:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   11080:	e8 b8 fb ff ff       	call   10c3d <memory_alloc_page>
   11085:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0)
   11088:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1108c:	0f 84 0b 01 00 00    	je     1119d <tss_init+0x17e>

    int code_sel, data_sel;
    // code_sel = task_manager.app_code_sel | SEG_CPL3;
    // data_sel = task_manager.app_data_sel | SEG_CPL3;
    // 根据不同的权限选择不同的访问选择子
    if (flag & TASK_FLAG_SYSTEM)
   11092:	8b 45 0c             	mov    0xc(%ebp),%eax
   11095:	83 e0 01             	and    $0x1,%eax
   11098:	85 c0                	test   %eax,%eax
   1109a:	74 10                	je     110ac <tss_init+0x8d>
    {
        code_sel = KERNEL_SELECTOR_CS;
   1109c:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   110a3:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   110aa:	eb 16                	jmp    110c2 <tss_init+0xa3>
    }
    else
    {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_CPL3;
   110ac:	a1 b8 15 02 00       	mov    0x215b8,%eax
   110b1:	83 c8 03             	or     $0x3,%eax
   110b4:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3;
   110b7:	a1 bc 15 02 00       	mov    0x215bc,%eax
   110bc:	83 c8 03             	or     $0x3,%eax
   110bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   110c2:	8b 45 08             	mov    0x8(%ebp),%eax
   110c5:	8b 55 10             	mov    0x10(%ebp),%edx
   110c8:	89 90 7c 02 00 00    	mov    %edx,0x27c(%eax)
    // task->tss.esp = task->tss.esp0 = esp;
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; // 未指定栈则用内核栈，即运行在特权级0的进程
   110ce:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110d2:	75 0a                	jne    110de <tss_init+0xbf>
   110d4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110d7:	05 00 10 00 00       	add    $0x1000,%eax
   110dc:	eb 03                	jmp    110e1 <tss_init+0xc2>
   110de:	8b 45 14             	mov    0x14(%ebp),%eax
   110e1:	8b 55 08             	mov    0x8(%ebp),%edx
   110e4:	89 82 94 02 00 00    	mov    %eax,0x294(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110ea:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110ed:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   110f3:	8b 45 08             	mov    0x8(%ebp),%eax
   110f6:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    task->tss.ss = data_sel;            // 特权3
   110fc:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11102:	89 90 ac 02 00 00    	mov    %edx,0x2ac(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; // 特权0
   11108:	8b 45 08             	mov    0x8(%ebp),%eax
   1110b:	c7 80 64 02 00 00 10 	movl   $0x10,0x264(%eax)
   11112:	00 00 00 
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   11115:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11118:	8b 45 08             	mov    0x8(%ebp),%eax
   1111b:	89 90 b8 02 00 00    	mov    %edx,0x2b8(%eax)
   11121:	8b 45 08             	mov    0x8(%ebp),%eax
   11124:	8b 90 b8 02 00 00    	mov    0x2b8(%eax),%edx
   1112a:	8b 45 08             	mov    0x8(%ebp),%eax
   1112d:	89 90 b4 02 00 00    	mov    %edx,0x2b4(%eax)
   11133:	8b 45 08             	mov    0x8(%ebp),%eax
   11136:	8b 90 b4 02 00 00    	mov    0x2b4(%eax),%edx
   1113c:	8b 45 08             	mov    0x8(%ebp),%eax
   1113f:	89 90 b0 02 00 00    	mov    %edx,0x2b0(%eax)
   11145:	8b 45 08             	mov    0x8(%ebp),%eax
   11148:	8b 90 b0 02 00 00    	mov    0x2b0(%eax),%edx
   1114e:	8b 45 08             	mov    0x8(%ebp),%eax
   11151:	89 90 a4 02 00 00    	mov    %edx,0x2a4(%eax)
    task->tss.cs = code_sel;
   11157:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1115a:	8b 45 08             	mov    0x8(%ebp),%eax
   1115d:	89 90 a8 02 00 00    	mov    %edx,0x2a8(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   11163:	8b 45 08             	mov    0x8(%ebp),%eax
   11166:	c7 80 80 02 00 00 02 	movl   $0x202,0x280(%eax)
   1116d:	02 00 00 

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   11170:	e8 4a f6 ff ff       	call   107bf <memory_create_uvm>
   11175:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0)
   11178:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1117c:	74 22                	je     111a0 <tss_init+0x181>
    {
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   1117e:	8b 45 08             	mov    0x8(%ebp),%eax
   11181:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   11184:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
    task->tss_sel = tss_sel;
   1118a:	8b 45 08             	mov    0x8(%ebp),%eax
   1118d:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11190:	89 90 c4 02 00 00    	mov    %edx,0x2c4(%eax)
    return 0;
   11196:	b8 00 00 00 00       	mov    $0x0,%eax
   1119b:	eb 2b                	jmp    111c8 <tss_init+0x1a9>
        goto tss_init_failed;
   1119d:	90                   	nop
   1119e:	eb 01                	jmp    111a1 <tss_init+0x182>
        goto tss_init_failed;
   111a0:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   111a1:	83 ec 0c             	sub    $0xc,%esp
   111a4:	ff 75 ec             	pushl  -0x14(%ebp)
   111a7:	e8 3a 14 00 00       	call   125e6 <gdt_free_sel>
   111ac:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack)
   111af:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111b3:	74 0e                	je     111c3 <tss_init+0x1a4>
    {
        memory_free_page(kernel_stack);
   111b5:	83 ec 0c             	sub    $0xc,%esp
   111b8:	ff 75 e8             	pushl  -0x18(%ebp)
   111bb:	e8 97 fa ff ff       	call   10c57 <memory_free_page>
   111c0:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111c8:	c9                   	leave  
   111c9:	c3                   	ret    

000111ca <task_init>:

int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   111ca:	55                   	push   %ebp
   111cb:	89 e5                	mov    %esp,%ebp
   111cd:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   111d0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   111d4:	75 19                	jne    111ef <task_init+0x25>
   111d6:	68 a7 90 01 00       	push   $0x190a7
   111db:	68 2c 92 01 00       	push   $0x1922c
   111e0:	6a 57                	push   $0x57
   111e2:	68 bc 90 01 00       	push   $0x190bc
   111e7:	e8 84 77 00 00       	call   18970 <panic>
   111ec:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   111ef:	ff 75 18             	pushl  0x18(%ebp)
   111f2:	ff 75 14             	pushl  0x14(%ebp)
   111f5:	ff 75 10             	pushl  0x10(%ebp)
   111f8:	ff 75 08             	pushl  0x8(%ebp)
   111fb:	e8 1f fe ff ff       	call   1101f <tss_init>
   11200:	83 c4 10             	add    $0x10,%esp
   11203:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   11206:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1120a:	79 18                	jns    11224 <task_init+0x5a>
    {
        log_printf("init task failed.\n");
   1120c:	83 ec 0c             	sub    $0xc,%esp
   1120f:	68 f6 90 01 00       	push   $0x190f6
   11214:	e8 27 7a 00 00       	call   18c40 <log_printf>
   11219:	83 c4 10             	add    $0x10,%esp
        return err;
   1121c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1121f:	e9 e8 00 00 00       	jmp    1130c <task_init+0x142>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11224:	8b 45 08             	mov    0x8(%ebp),%eax
   11227:	83 c0 04             	add    $0x4,%eax
   1122a:	83 ec 04             	sub    $0x4,%esp
   1122d:	6a 20                	push   $0x20
   1122f:	ff 75 0c             	pushl  0xc(%ebp)
   11232:	50                   	push   %eax
   11233:	e8 76 72 00 00       	call   184ae <kernel_strncpy>
   11238:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1123b:	8b 45 08             	mov    0x8(%ebp),%eax
   1123e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   11244:	8b 45 08             	mov    0x8(%ebp),%eax
   11247:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    task->parent = (task_t *)0;
   1124e:	8b 45 08             	mov    0x8(%ebp),%eax
   11251:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   11258:	8b 45 08             	mov    0x8(%ebp),%eax
   1125b:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   11262:	8b 45 08             	mov    0x8(%ebp),%eax
   11265:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   1126c:	8b 45 08             	mov    0x8(%ebp),%eax
   1126f:	c7 40 38 0a 00 00 00 	movl   $0xa,0x38(%eax)
    task->slice_ticks = task->time_ticks;
   11276:	8b 45 08             	mov    0x8(%ebp),%eax
   11279:	8b 50 38             	mov    0x38(%eax),%edx
   1127c:	8b 45 08             	mov    0x8(%ebp),%eax
   1127f:	89 50 3c             	mov    %edx,0x3c(%eax)
    list_node_init(&task->all_node);
   11282:	8b 45 08             	mov    0x8(%ebp),%eax
   11285:	83 c0 54             	add    $0x54,%eax
   11288:	83 ec 0c             	sub    $0xc,%esp
   1128b:	50                   	push   %eax
   1128c:	e8 23 fd ff ff       	call   10fb4 <list_node_init>
   11291:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   11294:	8b 45 08             	mov    0x8(%ebp),%eax
   11297:	83 c0 44             	add    $0x44,%eax
   1129a:	83 ec 0c             	sub    $0xc,%esp
   1129d:	50                   	push   %eax
   1129e:	e8 11 fd ff ff       	call   10fb4 <list_node_init>
   112a3:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   112a6:	8b 45 08             	mov    0x8(%ebp),%eax
   112a9:	83 c0 4c             	add    $0x4c,%eax
   112ac:	83 ec 0c             	sub    $0xc,%esp
   112af:	50                   	push   %eax
   112b0:	e8 ff fc ff ff       	call   10fb4 <list_node_init>
   112b5:	83 c4 10             	add    $0x10,%esp

    // 文件相关
    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   112b8:	8b 45 08             	mov    0x8(%ebp),%eax
   112bb:	83 c0 5c             	add    $0x5c,%eax
   112be:	83 ec 04             	sub    $0x4,%esp
   112c1:	68 00 02 00 00       	push   $0x200
   112c6:	6a 00                	push   $0x0
   112c8:	50                   	push   %eax
   112c9:	e8 58 73 00 00       	call   18626 <kernel_memset>
   112ce:	83 c4 10             	add    $0x10,%esp

    // 插入就绪队列中和所有的任务队列中
    irq_state_t state = irq_enter_protection();
   112d1:	e8 6b 1e 00 00       	call   13141 <irq_enter_protection>
   112d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task; // 使用地址，能唯一
   112d9:	8b 55 08             	mov    0x8(%ebp),%edx
   112dc:	8b 45 08             	mov    0x8(%ebp),%eax
   112df:	89 50 24             	mov    %edx,0x24(%eax)
    // task_set_ready(task);
    list_insert_last(&task_manager.task_list, &task->all_node); // 插入所有task进队尾
   112e2:	8b 45 08             	mov    0x8(%ebp),%eax
   112e5:	83 c0 54             	add    $0x54,%eax
   112e8:	83 ec 08             	sub    $0x8,%esp
   112eb:	50                   	push   %eax
   112ec:	68 10 10 02 00       	push   $0x21010
   112f1:	e8 ba 77 00 00       	call   18ab0 <list_insert_last>
   112f6:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   112f9:	83 ec 0c             	sub    $0xc,%esp
   112fc:	ff 75 f0             	pushl  -0x10(%ebp)
   112ff:	e8 55 1e 00 00       	call   13159 <irq_leave_protection>
   11304:	83 c4 10             	add    $0x10,%esp
    return 0;
   11307:	b8 00 00 00 00       	mov    $0x0,%eax
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    // }
}
   1130c:	c9                   	leave  
   1130d:	c3                   	ret    

0001130e <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   1130e:	55                   	push   %ebp
   1130f:	89 e5                	mov    %esp,%ebp
   11311:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   11314:	8b 45 0c             	mov    0xc(%ebp),%eax
   11317:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
   1131d:	83 ec 0c             	sub    $0xc,%esp
   11320:	50                   	push   %eax
   11321:	e8 5e 14 00 00       	call   12784 <switch_to_tss>
   11326:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   11329:	90                   	nop
   1132a:	c9                   	leave  
   1132b:	c3                   	ret    

0001132c <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t *task)
{
   1132c:	55                   	push   %ebp
   1132d:	89 e5                	mov    %esp,%ebp
   1132f:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11332:	e8 0a 1e 00 00       	call   13141 <irq_enter_protection>
   11337:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   1133a:	83 ec 0c             	sub    $0xc,%esp
   1133d:	ff 75 08             	pushl  0x8(%ebp)
   11340:	e8 fc 01 00 00       	call   11541 <task_set_ready>
   11345:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11348:	83 ec 0c             	sub    $0xc,%esp
   1134b:	ff 75 f4             	pushl  -0xc(%ebp)
   1134e:	e8 06 1e 00 00       	call   13159 <irq_leave_protection>
   11353:	83 c4 10             	add    $0x10,%esp
}
   11356:	90                   	nop
   11357:	c9                   	leave  
   11358:	c3                   	ret    

00011359 <task_first_init>:
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init(void)
{
   11359:	55                   	push   %ebp
   1135a:	89 e5                	mov    %esp,%ebp
   1135c:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    // 以下获得的是bin文件在内存中的物理地址，起始和结束
    extern uint8_t s_first_task[], e_first_task[];
    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1135f:	ba 64 a4 07 00       	mov    $0x7a464,%edx
   11364:	b8 dc a0 07 00       	mov    $0x7a0dc,%eax
   11369:	29 c2                	sub    %eax,%edx
   1136b:	89 d0                	mov    %edx,%eax
   1136d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   11370:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11377:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1137a:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1137d:	72 1c                	jb     1139b <task_first_init+0x42>
   1137f:	68 09 91 01 00       	push   $0x19109
   11384:	68 38 92 01 00       	push   $0x19238
   11389:	68 a3 00 00 00       	push   $0xa3
   1138e:	68 bc 90 01 00       	push   $0x190bc
   11393:	e8 d8 75 00 00       	call   18970 <panic>
   11398:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1139b:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   113a2:	8b 55 ec             	mov    -0x14(%ebp),%edx
   113a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   113a8:	01 d0                	add    %edx,%eax
   113aa:	83 ec 0c             	sub    $0xc,%esp
   113ad:	50                   	push   %eax
   113ae:	ff 75 ec             	pushl  -0x14(%ebp)
   113b1:	6a 00                	push   $0x0
   113b3:	68 20 91 01 00       	push   $0x19120
   113b8:	68 28 10 02 00       	push   $0x21028
   113bd:	e8 08 fe ff ff       	call   111ca <task_init>
   113c2:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task; // 这里不对
   113c5:	b8 64 a4 07 00       	mov    $0x7a464,%eax
   113ca:	a3 54 10 02 00       	mov    %eax,0x21054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   113cf:	a1 54 10 02 00       	mov    0x21054,%eax
   113d4:	a3 58 10 02 00       	mov    %eax,0x21058

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   113d9:	a1 ec 12 02 00       	mov    0x212ec,%eax
   113de:	83 ec 0c             	sub    $0xc,%esp
   113e1:	50                   	push   %eax
   113e2:	e8 1b fc ff ff       	call   11002 <write_tr>
   113e7:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   113ea:	c7 05 00 10 02 00 28 	movl   $0x21028,0x21000
   113f1:	10 02 00 

    // 切换页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   113f4:	a1 a0 12 02 00       	mov    0x212a0,%eax
   113f9:	83 ec 0c             	sub    $0xc,%esp
   113fc:	50                   	push   %eax
   113fd:	e8 0c fc ff ff       	call   1100e <mmu_set_page_dir>
   11402:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   11405:	83 ec 04             	sub    $0x4,%esp
   11408:	6a 07                	push   $0x7
   1140a:	ff 75 f0             	pushl  -0x10(%ebp)
   1140d:	ff 75 ec             	pushl  -0x14(%ebp)
   11410:	e8 db f8 ff ff       	call   10cf0 <memory_alloc_page_for>
   11415:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   11418:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1141b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1141e:	83 ec 04             	sub    $0x4,%esp
   11421:	52                   	push   %edx
   11422:	68 dc a0 07 00       	push   $0x7a0dc
   11427:	50                   	push   %eax
   11428:	e8 aa 71 00 00       	call   185d7 <kernel_memcpy>
   1142d:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   11430:	83 ec 0c             	sub    $0xc,%esp
   11433:	68 28 10 02 00       	push   $0x21028
   11438:	e8 ef fe ff ff       	call   1132c <task_start>
   1143d:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    // write_tr(task_manager.first_task.tss_sel);
}
   11440:	90                   	nop
   11441:	c9                   	leave  
   11442:	c3                   	ret    

00011443 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t *task_first_task(void)
{
   11443:	55                   	push   %ebp
   11444:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11446:	b8 28 10 02 00       	mov    $0x21028,%eax
}
   1144b:	5d                   	pop    %ebp
   1144c:	c3                   	ret    

0001144d <idle_task_entry>:

static void idle_task_entry(void)
{
   1144d:	55                   	push   %ebp
   1144e:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        hlt();
   11450:	e8 a6 fb ff ff       	call   10ffb <hlt>
   11455:	eb f9                	jmp    11450 <idle_task_entry+0x3>

00011457 <task_manager_init>:
    }
}

void task_manager_init(void)
{
   11457:	55                   	push   %ebp
   11458:	89 e5                	mov    %esp,%ebp
   1145a:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1145d:	83 ec 04             	sub    $0x4,%esp
   11460:	68 00 64 01 00       	push   $0x16400
   11465:	6a 00                	push   $0x0
   11467:	68 c0 15 02 00       	push   $0x215c0
   1146c:	e8 b5 71 00 00       	call   18626 <kernel_memset>
   11471:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11474:	83 ec 0c             	sub    $0xc,%esp
   11477:	68 c0 79 03 00       	push   $0x379c0
   1147c:	e8 d7 6a 00 00       	call   17f58 <mutex_init>
   11481:	83 c4 10             	add    $0x10,%esp

    int sel = get_alloc_desc();
   11484:	e8 96 11 00 00       	call   1261f <get_alloc_desc>
   11489:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1148c:	68 f2 40 00 00       	push   $0x40f2
   11491:	6a ff                	push   $0xffffffff
   11493:	6a 00                	push   $0x0
   11495:	ff 75 f4             	pushl  -0xc(%ebp)
   11498:	e8 ca 10 00 00       	call   12567 <segment_desc_set>
   1149d:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   114a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114a3:	a3 bc 15 02 00       	mov    %eax,0x215bc

    sel = get_alloc_desc();
   114a8:	e8 72 11 00 00       	call   1261f <get_alloc_desc>
   114ad:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   114b0:	68 fa 40 00 00       	push   $0x40fa
   114b5:	6a ff                	push   $0xffffffff
   114b7:	6a 00                	push   $0x0
   114b9:	ff 75 f4             	pushl  -0xc(%ebp)
   114bc:	e8 a6 10 00 00       	call   12567 <segment_desc_set>
   114c1:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   114c4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   114c7:	a3 b8 15 02 00       	mov    %eax,0x215b8

    // 各队列初始化
    list_init(&task_manager.ready_list);
   114cc:	83 ec 0c             	sub    $0xc,%esp
   114cf:	68 04 10 02 00       	push   $0x21004
   114d4:	e8 53 75 00 00       	call   18a2c <list_init>
   114d9:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   114dc:	83 ec 0c             	sub    $0xc,%esp
   114df:	68 10 10 02 00       	push   $0x21010
   114e4:	e8 43 75 00 00       	call   18a2c <list_init>
   114e9:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   114ec:	83 ec 0c             	sub    $0xc,%esp
   114ef:	68 1c 10 02 00       	push   $0x2101c
   114f4:	e8 33 75 00 00       	call   18a2c <list_init>
   114f9:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   114fc:	c7 05 00 10 02 00 00 	movl   $0x0,0x21000
   11503:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", TASK_FLAG_SYSTEM, (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + 1024);
   11506:	b8 00 00 02 00       	mov    $0x20000,%eax
   1150b:	05 00 04 00 00       	add    $0x400,%eax
   11510:	ba 4d 14 01 00       	mov    $0x1144d,%edx
   11515:	83 ec 0c             	sub    $0xc,%esp
   11518:	50                   	push   %eax
   11519:	52                   	push   %edx
   1151a:	6a 01                	push   $0x1
   1151c:	68 2b 91 01 00       	push   $0x1912b
   11521:	68 f0 12 02 00       	push   $0x212f0
   11526:	e8 9f fc ff ff       	call   111ca <task_init>
   1152b:	83 c4 20             	add    $0x20,%esp
    task_start(&task_manager.idle_task);
   1152e:	83 ec 0c             	sub    $0xc,%esp
   11531:	68 f0 12 02 00       	push   $0x212f0
   11536:	e8 f1 fd ff ff       	call   1132c <task_start>
   1153b:	83 c4 10             	add    $0x10,%esp
}
   1153e:	90                   	nop
   1153f:	c9                   	leave  
   11540:	c3                   	ret    

00011541 <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task)
{
   11541:	55                   	push   %ebp
   11542:	89 e5                	mov    %esp,%ebp
   11544:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   11547:	81 7d 08 f0 12 02 00 	cmpl   $0x212f0,0x8(%ebp)
   1154e:	74 22                	je     11572 <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   11550:	8b 45 08             	mov    0x8(%ebp),%eax
   11553:	83 c0 44             	add    $0x44,%eax
   11556:	83 ec 08             	sub    $0x8,%esp
   11559:	50                   	push   %eax
   1155a:	68 04 10 02 00       	push   $0x21004
   1155f:	e8 4c 75 00 00       	call   18ab0 <list_insert_last>
   11564:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11567:	8b 45 08             	mov    0x8(%ebp),%eax
   1156a:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   11570:	eb 01                	jmp    11573 <task_set_ready+0x32>
        return;
   11572:	90                   	nop
}
   11573:	c9                   	leave  
   11574:	c3                   	ret    

00011575 <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block(task_t *task)
{
   11575:	55                   	push   %ebp
   11576:	89 e5                	mov    %esp,%ebp
   11578:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   1157b:	81 7d 08 f0 12 02 00 	cmpl   $0x212f0,0x8(%ebp)
   11582:	74 19                	je     1159d <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   11584:	8b 45 08             	mov    0x8(%ebp),%eax
   11587:	83 c0 44             	add    $0x44,%eax
   1158a:	83 ec 08             	sub    $0x8,%esp
   1158d:	50                   	push   %eax
   1158e:	68 04 10 02 00       	push   $0x21004
   11593:	e8 f4 75 00 00       	call   18b8c <list_remove>
   11598:	83 c4 10             	add    $0x10,%esp
   1159b:	eb 01                	jmp    1159e <task_set_block+0x29>
        return;
   1159d:	90                   	nop
}
   1159e:	c9                   	leave  
   1159f:	c3                   	ret    

000115a0 <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t *task_current(void)
{
   115a0:	55                   	push   %ebp
   115a1:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   115a3:	a1 00 10 02 00       	mov    0x21000,%eax
}
   115a8:	5d                   	pop    %ebp
   115a9:	c3                   	ret    

000115aa <sys_sched_yield>:

int sys_sched_yield(void)
{
   115aa:	55                   	push   %ebp
   115ab:	89 e5                	mov    %esp,%ebp
   115ad:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   115b0:	e8 8c 1b 00 00       	call   13141 <irq_enter_protection>
   115b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   115b8:	83 ec 0c             	sub    $0xc,%esp
   115bb:	68 04 10 02 00       	push   $0x21004
   115c0:	e8 15 fa ff ff       	call   10fda <list_count>
   115c5:	83 c4 10             	add    $0x10,%esp
   115c8:	83 f8 01             	cmp    $0x1,%eax
   115cb:	7e 29                	jle    115f6 <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current();
   115cd:	e8 ce ff ff ff       	call   115a0 <task_current>
   115d2:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   115d5:	83 ec 0c             	sub    $0xc,%esp
   115d8:	ff 75 f0             	pushl  -0x10(%ebp)
   115db:	e8 95 ff ff ff       	call   11575 <task_set_block>
   115e0:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   115e3:	83 ec 0c             	sub    $0xc,%esp
   115e6:	ff 75 f0             	pushl  -0x10(%ebp)
   115e9:	e8 53 ff ff ff       	call   11541 <task_set_ready>
   115ee:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   115f1:	e8 58 00 00 00       	call   1164e <task_dispatch>
    }
    irq_leave_protection(state);
   115f6:	83 ec 0c             	sub    $0xc,%esp
   115f9:	ff 75 f4             	pushl  -0xc(%ebp)
   115fc:	e8 58 1b 00 00       	call   13159 <irq_leave_protection>
   11601:	83 c4 10             	add    $0x10,%esp
    return 0;
   11604:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11609:	c9                   	leave  
   1160a:	c3                   	ret    

0001160b <task_next_run>:

/**
 * @brief 获取下一将要运行的任务
 */
static task_t *task_next_run(void)
{
   1160b:	55                   	push   %ebp
   1160c:	89 e5                	mov    %esp,%ebp
   1160e:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   11611:	68 04 10 02 00       	push   $0x21004
   11616:	e8 bf f9 ff ff       	call   10fda <list_count>
   1161b:	83 c4 04             	add    $0x4,%esp
   1161e:	85 c0                	test   %eax,%eax
   11620:	75 07                	jne    11629 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   11622:	b8 f0 12 02 00       	mov    $0x212f0,%eax
   11627:	eb 23                	jmp    1164c <task_next_run+0x41>
    }

    // 普通任务
    list_node_t *task_node = list_first(&task_manager.ready_list);
   11629:	68 04 10 02 00       	push   $0x21004
   1162e:	e8 b2 f9 ff ff       	call   10fe5 <list_first>
   11633:	83 c4 04             	add    $0x4,%esp
   11636:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11639:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   1163d:	74 08                	je     11647 <task_next_run+0x3c>
   1163f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11642:	83 e8 44             	sub    $0x44,%eax
   11645:	eb 05                	jmp    1164c <task_next_run+0x41>
   11647:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1164c:	c9                   	leave  
   1164d:	c3                   	ret    

0001164e <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch(void)
{
   1164e:	55                   	push   %ebp
   1164f:	89 e5                	mov    %esp,%ebp
   11651:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11654:	e8 e8 1a 00 00       	call   13141 <irq_enter_protection>
   11659:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   1165c:	e8 aa ff ff ff       	call   1160b <task_next_run>
   11661:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task)
   11664:	a1 00 10 02 00       	mov    0x21000,%eax
   11669:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1166c:	74 2a                	je     11698 <task_dispatch+0x4a>
    {
        task_t *from = task_manager.curr_task;
   1166e:	a1 00 10 02 00       	mov    0x21000,%eax
   11673:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;
   11676:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11679:	a3 00 10 02 00       	mov    %eax,0x21000
        to->state = TASK_RUNNING;
   1167e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11681:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   11687:	83 ec 08             	sub    $0x8,%esp
   1168a:	ff 75 f0             	pushl  -0x10(%ebp)
   1168d:	ff 75 ec             	pushl  -0x14(%ebp)
   11690:	e8 79 fc ff ff       	call   1130e <task_switch_from_to>
   11695:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   11698:	83 ec 0c             	sub    $0xc,%esp
   1169b:	ff 75 f4             	pushl  -0xc(%ebp)
   1169e:	e8 b6 1a 00 00       	call   13159 <irq_leave_protection>
   116a3:	83 c4 10             	add    $0x10,%esp
}
   116a6:	90                   	nop
   116a7:	c9                   	leave  
   116a8:	c3                   	ret    

000116a9 <task_time_tick>:
/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick(void)
{
   116a9:	55                   	push   %ebp
   116aa:	89 e5                	mov    %esp,%ebp
   116ac:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   116af:	e8 ec fe ff ff       	call   115a0 <task_current>
   116b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_state_t state = irq_enter_protection();
   116b7:	e8 85 1a 00 00       	call   13141 <irq_enter_protection>
   116bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0)
   116bf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116c2:	8b 40 3c             	mov    0x3c(%eax),%eax
   116c5:	8d 50 ff             	lea    -0x1(%eax),%edx
   116c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116cb:	89 50 3c             	mov    %edx,0x3c(%eax)
   116ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116d1:	8b 40 3c             	mov    0x3c(%eax),%eax
   116d4:	85 c0                	test   %eax,%eax
   116d6:	75 28                	jne    11700 <task_time_tick+0x57>
    {
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_ticks;
   116d8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116db:	8b 50 38             	mov    0x38(%eax),%edx
   116de:	8b 45 f0             	mov    -0x10(%ebp),%eax
   116e1:	89 50 3c             	mov    %edx,0x3c(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   116e4:	83 ec 0c             	sub    $0xc,%esp
   116e7:	ff 75 f0             	pushl  -0x10(%ebp)
   116ea:	e8 86 fe ff ff       	call   11575 <task_set_block>
   116ef:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   116f2:	83 ec 0c             	sub    $0xc,%esp
   116f5:	ff 75 f0             	pushl  -0x10(%ebp)
   116f8:	e8 44 fe ff ff       	call   11541 <task_set_ready>
   116fd:	83 c4 10             	add    $0x10,%esp
    }

    // 睡眠处理
    list_node_t *curr = list_first(&task_manager.sleep_list);
   11700:	83 ec 0c             	sub    $0xc,%esp
   11703:	68 1c 10 02 00       	push   $0x2101c
   11708:	e8 d8 f8 ff ff       	call   10fe5 <list_first>
   1170d:	83 c4 10             	add    $0x10,%esp
   11710:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11713:	eb 62                	jmp    11777 <task_time_tick+0xce>
    {
        list_node_t *next = list_node_next(curr);
   11715:	83 ec 0c             	sub    $0xc,%esp
   11718:	ff 75 f4             	pushl  -0xc(%ebp)
   1171b:	e8 af f8 ff ff       	call   10fcf <list_node_next>
   11720:	83 c4 10             	add    $0x10,%esp
   11723:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t *task = list_node_parent(curr, task_t, run_node);
   11726:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1172a:	74 08                	je     11734 <task_time_tick+0x8b>
   1172c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1172f:	83 e8 44             	sub    $0x44,%eax
   11732:	eb 05                	jmp    11739 <task_time_tick+0x90>
   11734:	b8 00 00 00 00       	mov    $0x0,%eax
   11739:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   1173c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1173f:	8b 40 34             	mov    0x34(%eax),%eax
   11742:	8d 50 ff             	lea    -0x1(%eax),%edx
   11745:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11748:	89 50 34             	mov    %edx,0x34(%eax)
   1174b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1174e:	8b 40 34             	mov    0x34(%eax),%eax
   11751:	85 c0                	test   %eax,%eax
   11753:	75 1c                	jne    11771 <task_time_tick+0xc8>
        {
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   11755:	83 ec 0c             	sub    $0xc,%esp
   11758:	ff 75 e4             	pushl  -0x1c(%ebp)
   1175b:	e8 6d 00 00 00       	call   117cd <task_set_wakeup>
   11760:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11763:	83 ec 0c             	sub    $0xc,%esp
   11766:	ff 75 e4             	pushl  -0x1c(%ebp)
   11769:	e8 d3 fd ff ff       	call   11541 <task_set_ready>
   1176e:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11771:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11774:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11777:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1177b:	75 98                	jne    11715 <task_time_tick+0x6c>
    }
    task_dispatch();
   1177d:	e8 cc fe ff ff       	call   1164e <task_dispatch>
    irq_leave_protection(state);
   11782:	83 ec 0c             	sub    $0xc,%esp
   11785:	ff 75 ec             	pushl  -0x14(%ebp)
   11788:	e8 cc 19 00 00       	call   13159 <irq_leave_protection>
   1178d:	83 c4 10             	add    $0x10,%esp
}
   11790:	90                   	nop
   11791:	c9                   	leave  
   11792:	c3                   	ret    

00011793 <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   11793:	55                   	push   %ebp
   11794:	89 e5                	mov    %esp,%ebp
   11796:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   11799:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1179d:	74 2b                	je     117ca <task_set_sleep+0x37>
    {
        return;
    }

    task->sleep_ticks = ticks;
   1179f:	8b 55 0c             	mov    0xc(%ebp),%edx
   117a2:	8b 45 08             	mov    0x8(%ebp),%eax
   117a5:	89 50 34             	mov    %edx,0x34(%eax)
    task->state = TASK_SLEEP;
   117a8:	8b 45 08             	mov    0x8(%ebp),%eax
   117ab:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   117b1:	8b 45 08             	mov    0x8(%ebp),%eax
   117b4:	83 c0 44             	add    $0x44,%eax
   117b7:	83 ec 08             	sub    $0x8,%esp
   117ba:	50                   	push   %eax
   117bb:	68 1c 10 02 00       	push   $0x2101c
   117c0:	e8 eb 72 00 00       	call   18ab0 <list_insert_last>
   117c5:	83 c4 10             	add    $0x10,%esp
   117c8:	eb 01                	jmp    117cb <task_set_sleep+0x38>
        return;
   117ca:	90                   	nop
}
   117cb:	c9                   	leave  
   117cc:	c3                   	ret    

000117cd <task_set_wakeup>:
 * @brief 将任务从延时队列移除
 *
 * @param task
 */
void task_set_wakeup(task_t *task)
{
   117cd:	55                   	push   %ebp
   117ce:	89 e5                	mov    %esp,%ebp
   117d0:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   117d3:	8b 45 08             	mov    0x8(%ebp),%eax
   117d6:	83 c0 44             	add    $0x44,%eax
   117d9:	83 ec 08             	sub    $0x8,%esp
   117dc:	50                   	push   %eax
   117dd:	68 1c 10 02 00       	push   $0x2101c
   117e2:	e8 a5 73 00 00       	call   18b8c <list_remove>
   117e7:	83 c4 10             	add    $0x10,%esp
}
   117ea:	90                   	nop
   117eb:	c9                   	leave  
   117ec:	c3                   	ret    

000117ed <sys_msleep>:
 * @brief 任务进入睡眠状态
 *
 * @param ms
 */
void sys_msleep(uint32_t ms)
{
   117ed:	55                   	push   %ebp
   117ee:	89 e5                	mov    %esp,%ebp
   117f0:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   117f3:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   117f7:	77 07                	ja     11800 <sys_msleep+0x13>
    {
        ms = OS_TICK_MS;
   117f9:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   11800:	e8 3c 19 00 00       	call   13141 <irq_enter_protection>
   11805:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   11808:	a1 00 10 02 00       	mov    0x21000,%eax
   1180d:	83 ec 0c             	sub    $0xc,%esp
   11810:	50                   	push   %eax
   11811:	e8 5f fd ff ff       	call   11575 <task_set_block>
   11816:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   11819:	8b 45 08             	mov    0x8(%ebp),%eax
   1181c:	83 c0 09             	add    $0x9,%eax
   1181f:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11824:	f7 e2                	mul    %edx
   11826:	c1 ea 03             	shr    $0x3,%edx
   11829:	a1 00 10 02 00       	mov    0x21000,%eax
   1182e:	83 ec 08             	sub    $0x8,%esp
   11831:	52                   	push   %edx
   11832:	50                   	push   %eax
   11833:	e8 5b ff ff ff       	call   11793 <task_set_sleep>
   11838:	83 c4 10             	add    $0x10,%esp

    // 进行一次调度
    task_dispatch();
   1183b:	e8 0e fe ff ff       	call   1164e <task_dispatch>

    irq_leave_protection(state);
   11840:	83 ec 0c             	sub    $0xc,%esp
   11843:	ff 75 f4             	pushl  -0xc(%ebp)
   11846:	e8 0e 19 00 00       	call   13159 <irq_leave_protection>
   1184b:	83 c4 10             	add    $0x10,%esp
}
   1184e:	90                   	nop
   1184f:	c9                   	leave  
   11850:	c3                   	ret    

00011851 <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t *alloc_task(void)
{
   11851:	55                   	push   %ebp
   11852:	89 e5                	mov    %esp,%ebp
   11854:	83 ec 18             	sub    $0x18,%esp
    task_t *task = (task_t *)0;
   11857:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   1185e:	83 ec 0c             	sub    $0xc,%esp
   11861:	68 c0 79 03 00       	push   $0x379c0
   11866:	e8 1b 67 00 00       	call   17f86 <mutex_lock>
   1186b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++)
   1186e:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11875:	eb 28                	jmp    1189f <alloc_task+0x4e>
    {
        task_t *curr = task_table + i;
   11877:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1187a:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11880:	05 c0 15 02 00       	add    $0x215c0,%eax
   11885:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == '\0')
   11888:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1188b:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1188f:	84 c0                	test   %al,%al
   11891:	75 08                	jne    1189b <alloc_task+0x4a>
        {
            task = curr;
   11893:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11896:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11899:	eb 0a                	jmp    118a5 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++)
   1189b:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1189f:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   118a3:	7e d2                	jle    11877 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   118a5:	83 ec 0c             	sub    $0xc,%esp
   118a8:	68 c0 79 03 00       	push   $0x379c0
   118ad:	e8 68 67 00 00       	call   1801a <mutex_unlock>
   118b2:	83 c4 10             	add    $0x10,%esp

    return task;
   118b5:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   118b8:	c9                   	leave  
   118b9:	c3                   	ret    

000118ba <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task(task_t *task)
{
   118ba:	55                   	push   %ebp
   118bb:	89 e5                	mov    %esp,%ebp
   118bd:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   118c0:	83 ec 0c             	sub    $0xc,%esp
   118c3:	68 c0 79 03 00       	push   $0x379c0
   118c8:	e8 b9 66 00 00       	call   17f86 <mutex_lock>
   118cd:	83 c4 10             	add    $0x10,%esp
    task->name[0] = '\0';
   118d0:	8b 45 08             	mov    0x8(%ebp),%eax
   118d3:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   118d7:	83 ec 0c             	sub    $0xc,%esp
   118da:	68 c0 79 03 00       	push   $0x379c0
   118df:	e8 36 67 00 00       	call   1801a <mutex_unlock>
   118e4:	83 c4 10             	add    $0x10,%esp
}
   118e7:	90                   	nop
   118e8:	c9                   	leave  
   118e9:	c3                   	ret    

000118ea <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid(void)
{
   118ea:	55                   	push   %ebp
   118eb:	89 e5                	mov    %esp,%ebp
   118ed:	83 ec 10             	sub    $0x10,%esp
    task_t *curr_task = task_current();
   118f0:	e8 ab fc ff ff       	call   115a0 <task_current>
   118f5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   118f8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118fb:	8b 40 24             	mov    0x24(%eax),%eax
}
   118fe:	c9                   	leave  
   118ff:	c3                   	ret    

00011900 <task_uninit>:

/**
 * @brief 任务初始时分配的各项资源
 */
void task_uninit(task_t *task)
{
   11900:	55                   	push   %ebp
   11901:	89 e5                	mov    %esp,%ebp
   11903:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel)
   11906:	8b 45 08             	mov    0x8(%ebp),%eax
   11909:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
   1190f:	85 c0                	test   %eax,%eax
   11911:	74 15                	je     11928 <task_uninit+0x28>
    {
        gdt_free_sel(task->tss_sel);
   11913:	8b 45 08             	mov    0x8(%ebp),%eax
   11916:	8b 80 c4 02 00 00    	mov    0x2c4(%eax),%eax
   1191c:	83 ec 0c             	sub    $0xc,%esp
   1191f:	50                   	push   %eax
   11920:	e8 c1 0c 00 00       	call   125e6 <gdt_free_sel>
   11925:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0)
   11928:	8b 45 08             	mov    0x8(%ebp),%eax
   1192b:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11931:	85 c0                	test   %eax,%eax
   11933:	74 1a                	je     1194f <task_uninit+0x4f>
    {
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   11935:	8b 45 08             	mov    0x8(%ebp),%eax
   11938:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   1193e:	2d 00 10 00 00       	sub    $0x1000,%eax
   11943:	83 ec 0c             	sub    $0xc,%esp
   11946:	50                   	push   %eax
   11947:	e8 0b f3 ff ff       	call   10c57 <memory_free_page>
   1194c:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3)
   1194f:	8b 45 08             	mov    0x8(%ebp),%eax
   11952:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   11958:	85 c0                	test   %eax,%eax
   1195a:	74 15                	je     11971 <task_uninit+0x71>
    {
        memory_destroy_uvm(task->tss.cr3);
   1195c:	8b 45 08             	mov    0x8(%ebp),%eax
   1195f:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   11965:	83 ec 0c             	sub    $0xc,%esp
   11968:	50                   	push   %eax
   11969:	e8 d6 ee ff ff       	call   10844 <memory_destroy_uvm>
   1196e:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   11971:	83 ec 04             	sub    $0x4,%esp
   11974:	68 c8 02 00 00       	push   $0x2c8
   11979:	6a 00                	push   $0x0
   1197b:	ff 75 08             	pushl  0x8(%ebp)
   1197e:	e8 a3 6c 00 00       	call   18626 <kernel_memset>
   11983:	83 c4 10             	add    $0x10,%esp
}
   11986:	90                   	nop
   11987:	c9                   	leave  
   11988:	c3                   	ret    

00011989 <copy_opened_files>:

/**
 * @brief 从当前进程中拷贝已经打开的文件列表
 */
static void copy_opened_files(task_t *child_task)
{
   11989:	55                   	push   %ebp
   1198a:	89 e5                	mov    %esp,%ebp
   1198c:	83 ec 18             	sub    $0x18,%esp
    task_t *parent = task_current();
   1198f:	e8 0c fc ff ff       	call   115a0 <task_current>
   11994:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++)
   11997:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1199e:	eb 42                	jmp    119e2 <copy_opened_files+0x59>
    {
        file_t *file = parent->file_table[i];
   119a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119a3:	8b 55 f4             	mov    -0xc(%ebp),%edx
   119a6:	83 c2 14             	add    $0x14,%edx
   119a9:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
   119ad:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (file)
   119b0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   119b4:	74 28                	je     119de <copy_opened_files+0x55>
        {
            file_inc_ref(file);
   119b6:	83 ec 0c             	sub    $0xc,%esp
   119b9:	ff 75 ec             	pushl  -0x14(%ebp)
   119bc:	e8 32 56 00 00       	call   16ff3 <file_inc_ref>
   119c1:	83 c4 10             	add    $0x10,%esp
            child_task->file_table[i] = parent->file_table[i];
   119c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   119c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   119ca:	83 c2 14             	add    $0x14,%edx
   119cd:	8b 54 90 0c          	mov    0xc(%eax,%edx,4),%edx
   119d1:	8b 45 08             	mov    0x8(%ebp),%eax
   119d4:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   119d7:	83 c1 14             	add    $0x14,%ecx
   119da:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
    for (int i = 0; i < TASK_OFILE_NR; i++)
   119de:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   119e2:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   119e6:	7e b8                	jle    119a0 <copy_opened_files+0x17>
        }
    }
}
   119e8:	90                   	nop
   119e9:	c9                   	leave  
   119ea:	c3                   	ret    

000119eb <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork(void)
{
   119eb:	55                   	push   %ebp
   119ec:	89 e5                	mov    %esp,%ebp
   119ee:	83 ec 28             	sub    $0x28,%esp
    task_t *parent_task = task_current();
   119f1:	e8 aa fb ff ff       	call   115a0 <task_current>
   119f6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *child_task = alloc_task();
   119f9:	e8 53 fe ff ff       	call   11851 <alloc_task>
   119fe:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0)
   11a01:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a05:	0f 84 4f 01 00 00    	je     11b5a <sys_fork+0x16f>
    {
        goto fork_failed;
    }
    syscall_frame_t *frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t)); // 拿到父进程的寄存器
   11a0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a0e:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11a14:	83 e8 58             	sub    $0x58,%eax
   11a17:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT);
   11a1a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a1d:	8b 40 50             	mov    0x50(%eax),%eax
   11a20:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
   11a23:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a26:	8b 40 34             	mov    0x34(%eax),%eax
   11a29:	89 c1                	mov    %eax,%ecx
   11a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a2e:	83 c0 04             	add    $0x4,%eax
   11a31:	83 ec 0c             	sub    $0xc,%esp
   11a34:	52                   	push   %edx
   11a35:	51                   	push   %ecx
   11a36:	6a 00                	push   $0x0
   11a38:	50                   	push   %eax
   11a39:	ff 75 f0             	pushl  -0x10(%ebp)
   11a3c:	e8 89 f7 ff ff       	call   111ca <task_init>
   11a41:	83 c4 20             	add    $0x20,%esp
   11a44:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11a47:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11a4b:	0f 88 0c 01 00 00    	js     11b5d <sys_fork+0x172>
    {
        goto fork_failed;
    }

    // 拷贝打开的文件
    copy_opened_files(child_task);
   11a51:	83 ec 0c             	sub    $0xc,%esp
   11a54:	ff 75 f0             	pushl  -0x10(%ebp)
   11a57:	e8 2d ff ff ff       	call   11989 <copy_opened_files>
   11a5c:	83 c4 10             	add    $0x10,%esp

    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t *tss = &child_task->tss;
   11a5f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a62:	05 5c 02 00 00       	add    $0x25c,%eax
   11a67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0; // 子进程返回0
   11a6a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a6d:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11a74:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a77:	8b 40 24             	mov    0x24(%eax),%eax
   11a7a:	89 c2                	mov    %eax,%edx
   11a7c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a7f:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11a82:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a85:	8b 40 2c             	mov    0x2c(%eax),%eax
   11a88:	89 c2                	mov    %eax,%edx
   11a8a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a8d:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11a90:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a93:	8b 40 28             	mov    0x28(%eax),%eax
   11a96:	89 c2                	mov    %eax,%edx
   11a98:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a9b:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11a9e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aa1:	8b 40 18             	mov    0x18(%eax),%eax
   11aa4:	89 c2                	mov    %eax,%edx
   11aa6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aa9:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11aac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11aaf:	8b 40 14             	mov    0x14(%eax),%eax
   11ab2:	89 c2                	mov    %eax,%edx
   11ab4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ab7:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11aba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11abd:	8b 40 1c             	mov    0x1c(%eax),%eax
   11ac0:	89 c2                	mov    %eax,%edx
   11ac2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ac5:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11ac8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11acb:	8b 40 38             	mov    0x38(%eax),%eax
   11ace:	89 c2                	mov    %eax,%edx
   11ad0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ad3:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11ad6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ad9:	8b 40 10             	mov    0x10(%eax),%eax
   11adc:	89 c2                	mov    %eax,%edx
   11ade:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ae1:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11ae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ae7:	8b 40 0c             	mov    0xc(%eax),%eax
   11aea:	89 c2                	mov    %eax,%edx
   11aec:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11aef:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11af2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11af5:	8b 40 08             	mov    0x8(%eax),%eax
   11af8:	89 c2                	mov    %eax,%edx
   11afa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11afd:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11b00:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b03:	8b 40 04             	mov    0x4(%eax),%eax
   11b06:	89 c2                	mov    %eax,%edx
   11b08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b0b:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11b0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b11:	8b 00                	mov    (%eax),%eax
   11b13:	89 c2                	mov    %eax,%edx
   11b15:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b18:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b1e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11b21:	89 50 28             	mov    %edx,0x28(%eax)
    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0)
   11b24:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11b27:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   11b2d:	83 ec 0c             	sub    $0xc,%esp
   11b30:	50                   	push   %eax
   11b31:	e8 1d ee ff ff       	call   10953 <memory_copy_uvm>
   11b36:	83 c4 10             	add    $0x10,%esp
   11b39:	89 c2                	mov    %eax,%edx
   11b3b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b3e:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
    {
        goto fork_failed;
    }
    // 创建成功，返回子进程的pid
    task_start(child_task);
   11b44:	83 ec 0c             	sub    $0xc,%esp
   11b47:	ff 75 f0             	pushl  -0x10(%ebp)
   11b4a:	e8 dd f7 ff ff       	call   1132c <task_start>
   11b4f:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11b52:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b55:	8b 40 24             	mov    0x24(%eax),%eax
   11b58:	eb 2b                	jmp    11b85 <sys_fork+0x19a>
        goto fork_failed;
   11b5a:	90                   	nop
   11b5b:	eb 01                	jmp    11b5e <sys_fork+0x173>
        goto fork_failed;
   11b5d:	90                   	nop
fork_failed:
    if (child_task)
   11b5e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11b62:	74 1c                	je     11b80 <sys_fork+0x195>
    {
        task_uninit(child_task);
   11b64:	83 ec 0c             	sub    $0xc,%esp
   11b67:	ff 75 f0             	pushl  -0x10(%ebp)
   11b6a:	e8 91 fd ff ff       	call   11900 <task_uninit>
   11b6f:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11b72:	83 ec 0c             	sub    $0xc,%esp
   11b75:	ff 75 f0             	pushl  -0x10(%ebp)
   11b78:	e8 3d fd ff ff       	call   118ba <free_task>
   11b7d:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11b80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11b85:	c9                   	leave  
   11b86:	c3                   	ret    

00011b87 <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr *phdr, uint32_t page_dir)
{
   11b87:	55                   	push   %ebp
   11b88:	89 e5                	mov    %esp,%ebp
   11b8a:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11b8d:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b90:	8b 40 08             	mov    0x8(%eax),%eax
   11b93:	25 ff 0f 00 00       	and    $0xfff,%eax
   11b98:	85 c0                	test   %eax,%eax
   11b9a:	74 1c                	je     11bb8 <load_phdr+0x31>
   11b9c:	68 38 91 01 00       	push   $0x19138
   11ba1:	68 48 92 01 00       	push   $0x19248
   11ba6:	68 28 02 00 00       	push   $0x228
   11bab:	68 bc 90 01 00       	push   $0x190bc
   11bb0:	e8 bb 6d 00 00       	call   18970 <panic>
   11bb5:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11bb8:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bbb:	8b 50 14             	mov    0x14(%eax),%edx
   11bbe:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bc1:	8b 40 08             	mov    0x8(%eax),%eax
   11bc4:	6a 07                	push   $0x7
   11bc6:	52                   	push   %edx
   11bc7:	50                   	push   %eax
   11bc8:	ff 75 10             	pushl  0x10(%ebp)
   11bcb:	e8 a1 ef ff ff       	call   10b71 <memory_alloc_for_page_dir>
   11bd0:	83 c4 10             	add    $0x10,%esp
   11bd3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   11bd6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11bda:	79 1a                	jns    11bf6 <load_phdr+0x6f>
    {
        log_printf("no memory");
   11bdc:	83 ec 0c             	sub    $0xc,%esp
   11bdf:	68 63 91 01 00       	push   $0x19163
   11be4:	e8 57 70 00 00       	call   18c40 <log_printf>
   11be9:	83 c4 10             	add    $0x10,%esp
        return -1;
   11bec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bf1:	e9 b8 00 00 00       	jmp    11cae <load_phdr+0x127>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0)
   11bf6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11bf9:	8b 40 04             	mov    0x4(%eax),%eax
   11bfc:	83 ec 04             	sub    $0x4,%esp
   11bff:	6a 00                	push   $0x0
   11c01:	50                   	push   %eax
   11c02:	ff 75 08             	pushl  0x8(%ebp)
   11c05:	e8 99 59 00 00       	call   175a3 <sys_lseek>
   11c0a:	83 c4 10             	add    $0x10,%esp
   11c0d:	85 c0                	test   %eax,%eax
   11c0f:	79 1a                	jns    11c2b <load_phdr+0xa4>
    {
        log_printf("read file failed");
   11c11:	83 ec 0c             	sub    $0xc,%esp
   11c14:	68 6d 91 01 00       	push   $0x1916d
   11c19:	e8 22 70 00 00       	call   18c40 <log_printf>
   11c1e:	83 c4 10             	add    $0x10,%esp
        return -1;
   11c21:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c26:	e9 83 00 00 00       	jmp    11cae <load_phdr+0x127>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr; // 内存中的起始地址
   11c2b:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c2e:	8b 40 08             	mov    0x8(%eax),%eax
   11c31:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz; // 文件需要拷贝的数据量
   11c34:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c37:	8b 40 10             	mov    0x10(%eax),%eax
   11c3a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0)
   11c3d:	eb 64                	jmp    11ca3 <load_phdr+0x11c>
    {
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size; // 至多copy一页的数据
   11c3f:	b8 00 10 00 00       	mov    $0x1000,%eax
   11c44:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11c4b:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11c4f:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr); // 拿到物理地址，因为该页还没启用，不能直接copy
   11c52:	83 ec 08             	sub    $0x8,%esp
   11c55:	ff 75 f4             	pushl  -0xc(%ebp)
   11c58:	ff 75 10             	pushl  0x10(%ebp)
   11c5b:	e8 48 ee ff ff       	call   10aa8 <memory_get_paddr>
   11c60:	83 c4 10             	add    $0x10,%esp
   11c63:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) < curr_size)
   11c66:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11c69:	83 ec 04             	sub    $0x4,%esp
   11c6c:	ff 75 e8             	pushl  -0x18(%ebp)
   11c6f:	50                   	push   %eax
   11c70:	ff 75 08             	pushl  0x8(%ebp)
   11c73:	e8 a2 57 00 00       	call   1741a <sys_read>
   11c78:	83 c4 10             	add    $0x10,%esp
   11c7b:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11c7e:	7e 17                	jle    11c97 <load_phdr+0x110>
        {
            log_printf("read file failed");
   11c80:	83 ec 0c             	sub    $0xc,%esp
   11c83:	68 6d 91 01 00       	push   $0x1916d
   11c88:	e8 b3 6f 00 00       	call   18c40 <log_printf>
   11c8d:	83 c4 10             	add    $0x10,%esp
            return -1;
   11c90:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11c95:	eb 17                	jmp    11cae <load_phdr+0x127>
        }

        size -= curr_size;
   11c97:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c9a:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11c9d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ca0:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0)
   11ca3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ca7:	75 96                	jne    11c3f <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11ca9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11cae:	c9                   	leave  
   11caf:	c3                   	ret    

00011cb0 <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file(task_t *task, const char *name, uint32_t page_dir)
{
   11cb0:	55                   	push   %ebp
   11cb1:	89 e5                	mov    %esp,%ebp
   11cb3:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    int file = sys_open(name, 0);
   11cb6:	83 ec 08             	sub    $0x8,%esp
   11cb9:	6a 00                	push   $0x0
   11cbb:	ff 75 0c             	pushl  0xc(%ebp)
   11cbe:	e8 cb 55 00 00       	call   1728e <sys_open>
   11cc3:	83 c4 10             	add    $0x10,%esp
   11cc6:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0)
   11cc9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11ccd:	79 18                	jns    11ce7 <load_elf_file+0x37>
    {
        log_printf("open failed. %s", name);
   11ccf:	83 ec 08             	sub    $0x8,%esp
   11cd2:	ff 75 0c             	pushl  0xc(%ebp)
   11cd5:	68 7e 91 01 00       	push   $0x1917e
   11cda:	e8 61 6f 00 00       	call   18c40 <log_printf>
   11cdf:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11ce2:	e9 c1 01 00 00       	jmp    11ea8 <load_elf_file+0x1f8>
    }
    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11ce7:	83 ec 04             	sub    $0x4,%esp
   11cea:	6a 34                	push   $0x34
   11cec:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11cef:	50                   	push   %eax
   11cf0:	ff 75 ec             	pushl  -0x14(%ebp)
   11cf3:	e8 22 57 00 00       	call   1741a <sys_read>
   11cf8:	83 c4 10             	add    $0x10,%esp
   11cfb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr))
   11cfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d01:	83 f8 33             	cmp    $0x33,%eax
   11d04:	77 18                	ja     11d1e <load_elf_file+0x6e>
    {
        log_printf("elf hdr too small. size=%d", cnt);
   11d06:	83 ec 08             	sub    $0x8,%esp
   11d09:	ff 75 e8             	pushl  -0x18(%ebp)
   11d0c:	68 8e 91 01 00       	push   $0x1918e
   11d11:	e8 2a 6f 00 00       	call   18c40 <log_printf>
   11d16:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d19:	e9 8a 01 00 00       	jmp    11ea8 <load_elf_file+0x1f8>
    }
    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E') || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F'))
   11d1e:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11d22:	3c 7f                	cmp    $0x7f,%al
   11d24:	75 18                	jne    11d3e <load_elf_file+0x8e>
   11d26:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11d2a:	3c 45                	cmp    $0x45,%al
   11d2c:	75 10                	jne    11d3e <load_elf_file+0x8e>
   11d2e:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11d32:	3c 4c                	cmp    $0x4c,%al
   11d34:	75 08                	jne    11d3e <load_elf_file+0x8e>
   11d36:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11d3a:	3c 46                	cmp    $0x46,%al
   11d3c:	74 15                	je     11d53 <load_elf_file+0xa3>
    {
        log_printf("check elf indent failed.");
   11d3e:	83 ec 0c             	sub    $0xc,%esp
   11d41:	68 a9 91 01 00       	push   $0x191a9
   11d46:	e8 f5 6e 00 00       	call   18c40 <log_printf>
   11d4b:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d4e:	e9 55 01 00 00       	jmp    11ea8 <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0))
   11d53:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11d57:	66 83 f8 02          	cmp    $0x2,%ax
   11d5b:	75 11                	jne    11d6e <load_elf_file+0xbe>
   11d5d:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11d61:	66 83 f8 03          	cmp    $0x3,%ax
   11d65:	75 07                	jne    11d6e <load_elf_file+0xbe>
   11d67:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11d6a:	85 c0                	test   %eax,%eax
   11d6c:	75 15                	jne    11d83 <load_elf_file+0xd3>
    {
        log_printf("check elf type or entry failed.");
   11d6e:	83 ec 0c             	sub    $0xc,%esp
   11d71:	68 c4 91 01 00       	push   $0x191c4
   11d76:	e8 c5 6e 00 00       	call   18c40 <log_printf>
   11d7b:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d7e:	e9 25 01 00 00       	jmp    11ea8 <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0))
   11d83:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11d87:	66 85 c0             	test   %ax,%ax
   11d8a:	74 07                	je     11d93 <load_elf_file+0xe3>
   11d8c:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11d8f:	85 c0                	test   %eax,%eax
   11d91:	75 15                	jne    11da8 <load_elf_file+0xf8>
    {
        log_printf("none programe header");
   11d93:	83 ec 0c             	sub    $0xc,%esp
   11d96:	68 e4 91 01 00       	push   $0x191e4
   11d9b:	e8 a0 6e 00 00       	call   18c40 <log_printf>
   11da0:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11da3:	e9 00 01 00 00       	jmp    11ea8 <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11da8:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11dab:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11dae:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11db5:	e9 cb 00 00 00       	jmp    11e85 <load_elf_file+0x1d5>
    {
        if (sys_lseek(file, e_phoff, 0) < 0)
   11dba:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11dbd:	83 ec 04             	sub    $0x4,%esp
   11dc0:	6a 00                	push   $0x0
   11dc2:	50                   	push   %eax
   11dc3:	ff 75 ec             	pushl  -0x14(%ebp)
   11dc6:	e8 d8 57 00 00       	call   175a3 <sys_lseek>
   11dcb:	83 c4 10             	add    $0x10,%esp
   11dce:	85 c0                	test   %eax,%eax
   11dd0:	79 15                	jns    11de7 <load_elf_file+0x137>
        {
            log_printf("read file failed");
   11dd2:	83 ec 0c             	sub    $0xc,%esp
   11dd5:	68 6d 91 01 00       	push   $0x1916d
   11dda:	e8 61 6e 00 00       	call   18c40 <log_printf>
   11ddf:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11de2:	e9 c1 00 00 00       	jmp    11ea8 <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11de7:	83 ec 04             	sub    $0x4,%esp
   11dea:	6a 20                	push   $0x20
   11dec:	8d 45 90             	lea    -0x70(%ebp),%eax
   11def:	50                   	push   %eax
   11df0:	ff 75 ec             	pushl  -0x14(%ebp)
   11df3:	e8 22 56 00 00       	call   1741a <sys_read>
   11df8:	83 c4 10             	add    $0x10,%esp
   11dfb:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr))
   11dfe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11e01:	83 f8 1f             	cmp    $0x1f,%eax
   11e04:	77 15                	ja     11e1b <load_elf_file+0x16b>
        {
            log_printf("read file failed");
   11e06:	83 ec 0c             	sub    $0xc,%esp
   11e09:	68 6d 91 01 00       	push   $0x1916d
   11e0e:	e8 2d 6e 00 00       	call   18c40 <log_printf>
   11e13:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e16:	e9 8d 00 00 00       	jmp    11ea8 <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE))
   11e1b:	8b 45 90             	mov    -0x70(%ebp),%eax
   11e1e:	83 f8 01             	cmp    $0x1,%eax
   11e21:	75 53                	jne    11e76 <load_elf_file+0x1c6>
   11e23:	8b 45 98             	mov    -0x68(%ebp),%eax
   11e26:	85 c0                	test   %eax,%eax
   11e28:	79 4c                	jns    11e76 <load_elf_file+0x1c6>
        {
            continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11e2a:	83 ec 04             	sub    $0x4,%esp
   11e2d:	ff 75 10             	pushl  0x10(%ebp)
   11e30:	8d 45 90             	lea    -0x70(%ebp),%eax
   11e33:	50                   	push   %eax
   11e34:	ff 75 ec             	pushl  -0x14(%ebp)
   11e37:	e8 4b fd ff ff       	call   11b87 <load_phdr>
   11e3c:	83 c4 10             	add    $0x10,%esp
   11e3f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   11e42:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11e46:	79 12                	jns    11e5a <load_elf_file+0x1aa>
        {
            log_printf("load program hdr failed");
   11e48:	83 ec 0c             	sub    $0xc,%esp
   11e4b:	68 f9 91 01 00       	push   $0x191f9
   11e50:	e8 eb 6d 00 00       	call   18c40 <log_printf>
   11e55:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e58:	eb 4e                	jmp    11ea8 <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        // 最后地址是最后一个elf段加载的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11e5a:	8b 55 98             	mov    -0x68(%ebp),%edx
   11e5d:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11e60:	01 c2                	add    %eax,%edx
   11e62:	8b 45 08             	mov    0x8(%ebp),%eax
   11e65:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11e68:	8b 45 08             	mov    0x8(%ebp),%eax
   11e6b:	8b 50 2c             	mov    0x2c(%eax),%edx
   11e6e:	8b 45 08             	mov    0x8(%ebp),%eax
   11e71:	89 50 30             	mov    %edx,0x30(%eax)
   11e74:	eb 01                	jmp    11e77 <load_elf_file+0x1c7>
            continue;
   11e76:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11e77:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11e7b:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e7f:	0f b7 c0             	movzwl %ax,%eax
   11e82:	01 45 f4             	add    %eax,-0xc(%ebp)
   11e85:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11e89:	0f b7 c0             	movzwl %ax,%eax
   11e8c:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11e8f:	0f 8c 25 ff ff ff    	jl     11dba <load_elf_file+0x10a>
    }
    sys_close(file);
   11e95:	83 ec 0c             	sub    $0xc,%esp
   11e98:	ff 75 ec             	pushl  -0x14(%ebp)
   11e9b:	e8 98 57 00 00       	call   17638 <sys_close>
   11ea0:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11ea3:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11ea6:	eb 19                	jmp    11ec1 <load_elf_file+0x211>
load_failed:
    // 文件已经打开
    if (file >= 0)
   11ea8:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11eac:	78 0e                	js     11ebc <load_elf_file+0x20c>
    {
        sys_close(file);
   11eae:	83 ec 0c             	sub    $0xc,%esp
   11eb1:	ff 75 ec             	pushl  -0x14(%ebp)
   11eb4:	e8 7f 57 00 00       	call   17638 <sys_close>
   11eb9:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   11ebc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11ec1:	c9                   	leave  
   11ec2:	c3                   	ret    

00011ec3 <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args(char *to, uint32_t page_dir, int argc, char **argv)
{
   11ec3:	55                   	push   %ebp
   11ec4:	89 e5                	mov    %esp,%ebp
   11ec6:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11ec9:	8b 45 10             	mov    0x10(%ebp),%eax
   11ecc:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11ecf:	8b 45 08             	mov    0x8(%ebp),%eax
   11ed2:	83 c0 0c             	add    $0xc,%eax
   11ed5:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char *dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1); // 留出结束符，argv必须已0结尾，因此多一项
   11ed8:	8b 45 10             	mov    0x10(%ebp),%eax
   11edb:	83 c0 04             	add    $0x4,%eax
   11ede:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ee5:	8b 45 08             	mov    0x8(%ebp),%eax
   11ee8:	01 d0                	add    %edx,%eax
   11eea:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // argv表
    char **dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11eed:	8b 45 08             	mov    0x8(%ebp),%eax
   11ef0:	83 c0 0c             	add    $0xc,%eax
   11ef3:	83 ec 08             	sub    $0x8,%esp
   11ef6:	50                   	push   %eax
   11ef7:	ff 75 0c             	pushl  0xc(%ebp)
   11efa:	e8 a9 eb ff ff       	call   10aa8 <memory_get_paddr>
   11eff:	83 c4 10             	add    $0x10,%esp
   11f02:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11f05:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f09:	75 1c                	jne    11f27 <copy_args+0x64>
   11f0b:	68 11 92 01 00       	push   $0x19211
   11f10:	68 54 92 01 00       	push   $0x19254
   11f15:	68 c2 02 00 00       	push   $0x2c2
   11f1a:	68 bc 90 01 00       	push   $0x190bc
   11f1f:	e8 4c 6a 00 00       	call   18970 <panic>
   11f24:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++)
   11f27:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11f2e:	e9 82 00 00 00       	jmp    11fb5 <copy_args+0xf2>
    {
        char *from = argv[i];
   11f33:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f36:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11f3d:	8b 45 14             	mov    0x14(%ebp),%eax
   11f40:	01 d0                	add    %edx,%eax
   11f42:	8b 00                	mov    (%eax),%eax
   11f44:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1; // 包含结束符
   11f47:	83 ec 0c             	sub    $0xc,%esp
   11f4a:	ff 75 e8             	pushl  -0x18(%ebp)
   11f4d:	e8 4a 66 00 00       	call   1859c <kernel_strlen>
   11f52:	83 c4 10             	add    $0x10,%esp
   11f55:	83 c0 01             	add    $0x1,%eax
   11f58:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   11f5b:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11f5e:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11f61:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f64:	51                   	push   %ecx
   11f65:	52                   	push   %edx
   11f66:	ff 75 0c             	pushl  0xc(%ebp)
   11f69:	50                   	push   %eax
   11f6a:	e8 7f eb ff ff       	call   10aee <memory_copy_uvm_data>
   11f6f:	83 c4 10             	add    $0x10,%esp
   11f72:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11f75:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11f79:	79 1c                	jns    11f97 <copy_args+0xd4>
   11f7b:	68 23 92 01 00       	push   $0x19223
   11f80:	68 54 92 01 00       	push   $0x19254
   11f85:	68 cb 02 00 00       	push   $0x2cb
   11f8a:	68 bc 90 01 00       	push   $0x190bc
   11f8f:	e8 dc 69 00 00       	call   18970 <panic>
   11f94:	83 c4 10             	add    $0x10,%esp

        // 关联arg
        dest_argv_tb[i] = dest_arg;
   11f97:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11f9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fa1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fa4:	01 c2                	add    %eax,%edx
   11fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11fa9:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   11fab:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11fae:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++)
   11fb1:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11fb5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11fb8:	3b 45 10             	cmp    0x10(%ebp),%eax
   11fbb:	0f 8c 72 ff ff ff    	jl     11f33 <copy_args+0x70>
    }
    // 可能存在无参的情况，此时不需要写入
    if (argc)
   11fc1:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11fc5:	74 15                	je     11fdc <copy_args+0x119>
    {
        dest_argv_tb[argc] = '\0';
   11fc7:	8b 45 10             	mov    0x10(%ebp),%eax
   11fca:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fd1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11fd4:	01 d0                	add    %edx,%eax
   11fd6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   11fdc:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   11fdf:	8b 45 08             	mov    0x8(%ebp),%eax
   11fe2:	6a 0c                	push   $0xc
   11fe4:	52                   	push   %edx
   11fe5:	ff 75 0c             	pushl  0xc(%ebp)
   11fe8:	50                   	push   %eax
   11fe9:	e8 00 eb ff ff       	call   10aee <memory_copy_uvm_data>
   11fee:	83 c4 10             	add    $0x10,%esp
}
   11ff1:	c9                   	leave  
   11ff2:	c3                   	ret    

00011ff3 <sys_execve>:
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env)
{
   11ff3:	55                   	push   %ebp
   11ff4:	89 e5                	mov    %esp,%ebp
   11ff6:	83 ec 28             	sub    $0x28,%esp
    task_t *task = task_current();
   11ff9:	e8 a2 f5 ff ff       	call   115a0 <task_current>
   11ffe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   12001:	83 ec 0c             	sub    $0xc,%esp
   12004:	ff 75 08             	pushl  0x8(%ebp)
   12007:	e8 9a 69 00 00       	call   189a6 <get_file_name>
   1200c:	83 c4 10             	add    $0x10,%esp
   1200f:	89 c2                	mov    %eax,%edx
   12011:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12014:	83 c0 04             	add    $0x4,%eax
   12017:	83 ec 04             	sub    $0x4,%esp
   1201a:	6a 20                	push   $0x20
   1201c:	52                   	push   %edx
   1201d:	50                   	push   %eax
   1201e:	e8 8b 64 00 00       	call   184ae <kernel_strncpy>
   12023:	83 c4 10             	add    $0x10,%esp
    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   12026:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12029:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   1202f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   12032:	e8 88 e7 ff ff       	call   107bf <memory_create_uvm>
   12037:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir)
   1203a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1203e:	0f 84 2d 01 00 00    	je     12171 <sys_execve+0x17e>
    {
        goto exec_failed;
    }
    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir); // 暂时置用task->name表示
   12044:	83 ec 04             	sub    $0x4,%esp
   12047:	ff 75 ec             	pushl  -0x14(%ebp)
   1204a:	ff 75 08             	pushl  0x8(%ebp)
   1204d:	ff 75 f4             	pushl  -0xc(%ebp)
   12050:	e8 5b fc ff ff       	call   11cb0 <load_elf_file>
   12055:	83 c4 10             	add    $0x10,%esp
   12058:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0)
   1205b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1205f:	0f 84 0f 01 00 00    	je     12174 <sys_execve+0x181>
    {
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE; // 预留一部分参数空间
   12065:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   1206c:	6a 07                	push   $0x7
   1206e:	68 00 40 1f 00       	push   $0x1f4000
   12073:	68 00 c0 e0 df       	push   $0xdfe0c000
   12078:	ff 75 ec             	pushl  -0x14(%ebp)
   1207b:	e8 f1 ea ff ff       	call   10b71 <memory_alloc_for_page_dir>
   12080:	83 c4 10             	add    $0x10,%esp
   12083:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                        MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                                        MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0)
   12086:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1208a:	0f 88 e7 00 00 00    	js     12177 <sys_execve+0x184>
    {
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   12090:	83 ec 0c             	sub    $0xc,%esp
   12093:	ff 75 0c             	pushl  0xc(%ebp)
   12096:	e8 51 69 00 00       	call   189ec <strings_count>
   1209b:	83 c4 10             	add    $0x10,%esp
   1209e:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   120a1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   120a4:	ff 75 0c             	pushl  0xc(%ebp)
   120a7:	ff 75 dc             	pushl  -0x24(%ebp)
   120aa:	ff 75 ec             	pushl  -0x14(%ebp)
   120ad:	50                   	push   %eax
   120ae:	e8 10 fe ff ff       	call   11ec3 <copy_args>
   120b3:	83 c4 10             	add    $0x10,%esp
   120b6:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   120b9:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   120bd:	0f 88 b7 00 00 00    	js     1217a <sys_execve+0x187>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t *frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   120c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120c6:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   120cc:	83 e8 58             	sub    $0x58,%eax
   120cf:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   120d2:	8b 55 e8             	mov    -0x18(%ebp),%edx
   120d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120d8:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   120db:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120de:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   120e5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120e8:	8b 50 28             	mov    0x28(%eax),%edx
   120eb:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120ee:	89 50 2c             	mov    %edx,0x2c(%eax)
   120f1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120f4:	8b 50 2c             	mov    0x2c(%eax),%edx
   120f7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   120fa:	89 50 24             	mov    %edx,0x24(%eax)
   120fd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12100:	8b 50 24             	mov    0x24(%eax),%edx
   12103:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12106:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   12109:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1210c:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   12113:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12116:	8b 50 1c             	mov    0x1c(%eax),%edx
   12119:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1211c:	89 50 14             	mov    %edx,0x14(%eax)
   1211f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12122:	8b 50 14             	mov    0x14(%eax),%edx
   12125:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12128:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT | EFLAGS_IF; // 段寄存器无需修改
   1212b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1212e:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间
    frame->esp = stack_top - sizeof(uint32_t) * SYSCALL_PARAM_COUNT;
   12134:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12137:	83 e8 14             	sub    $0x14,%eax
   1213a:	89 c2                	mov    %eax,%edx
   1213c:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1213f:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   12142:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12145:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12148:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
    mmu_set_page_dir(new_page_dir); // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   1214e:	83 ec 0c             	sub    $0xc,%esp
   12151:	ff 75 ec             	pushl  -0x14(%ebp)
   12154:	e8 b5 ee ff ff       	call   1100e <mmu_set_page_dir>
   12159:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir); // 再释放掉了原进程的内容空间
   1215c:	83 ec 0c             	sub    $0xc,%esp
   1215f:	ff 75 f0             	pushl  -0x10(%ebp)
   12162:	e8 dd e6 ff ff       	call   10844 <memory_destroy_uvm>
   12167:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return 0;
   1216a:	b8 00 00 00 00       	mov    $0x0,%eax
   1216f:	eb 3d                	jmp    121ae <sys_execve+0x1bb>
        goto exec_failed;
   12171:	90                   	nop
   12172:	eb 07                	jmp    1217b <sys_execve+0x188>
        goto exec_failed;
   12174:	90                   	nop
   12175:	eb 04                	jmp    1217b <sys_execve+0x188>
        goto exec_failed;
   12177:	90                   	nop
   12178:	eb 01                	jmp    1217b <sys_execve+0x188>
        goto exec_failed;
   1217a:	90                   	nop

exec_failed: // 必要的资源释放
    if (new_page_dir)
   1217b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1217f:	74 28                	je     121a9 <sys_execve+0x1b6>
    {
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   12181:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12184:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12187:	89 90 78 02 00 00    	mov    %edx,0x278(%eax)
        mmu_set_page_dir(old_page_dir);
   1218d:	83 ec 0c             	sub    $0xc,%esp
   12190:	ff 75 f0             	pushl  -0x10(%ebp)
   12193:	e8 76 ee ff ff       	call   1100e <mmu_set_page_dir>
   12198:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   1219b:	83 ec 0c             	sub    $0xc,%esp
   1219e:	ff 75 ec             	pushl  -0x14(%ebp)
   121a1:	e8 9e e6 ff ff       	call   10844 <memory_destroy_uvm>
   121a6:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   121a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   121ae:	c9                   	leave  
   121af:	c3                   	ret    

000121b0 <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield(void)
{
   121b0:	55                   	push   %ebp
   121b1:	89 e5                	mov    %esp,%ebp
   121b3:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   121b6:	e8 86 0f 00 00       	call   13141 <irq_enter_protection>
   121bb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1)
   121be:	83 ec 0c             	sub    $0xc,%esp
   121c1:	68 04 10 02 00       	push   $0x21004
   121c6:	e8 0f ee ff ff       	call   10fda <list_count>
   121cb:	83 c4 10             	add    $0x10,%esp
   121ce:	83 f8 01             	cmp    $0x1,%eax
   121d1:	7e 29                	jle    121fc <sys_yield+0x4c>
    {
        task_t *curr_task = task_current();
   121d3:	e8 c8 f3 ff ff       	call   115a0 <task_current>
   121d8:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   121db:	83 ec 0c             	sub    $0xc,%esp
   121de:	ff 75 f0             	pushl  -0x10(%ebp)
   121e1:	e8 8f f3 ff ff       	call   11575 <task_set_block>
   121e6:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   121e9:	83 ec 0c             	sub    $0xc,%esp
   121ec:	ff 75 f0             	pushl  -0x10(%ebp)
   121ef:	e8 4d f3 ff ff       	call   11541 <task_set_ready>
   121f4:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   121f7:	e8 52 f4 ff ff       	call   1164e <task_dispatch>
    }
    irq_leave_protection(state);
   121fc:	83 ec 0c             	sub    $0xc,%esp
   121ff:	ff 75 f4             	pushl  -0xc(%ebp)
   12202:	e8 52 0f 00 00       	call   13159 <irq_leave_protection>
   12207:	83 c4 10             	add    $0x10,%esp

    return 0;
   1220a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1220f:	c9                   	leave  
   12210:	c3                   	ret    

00012211 <task_file>:

/**
 * @brief 获取当前进程指定的文件描述符
 */
file_t *task_file(int fd)
{
   12211:	55                   	push   %ebp
   12212:	89 e5                	mov    %esp,%ebp
   12214:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   12217:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1221b:	78 1f                	js     1223c <task_file+0x2b>
   1221d:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12221:	7f 19                	jg     1223c <task_file+0x2b>
    {
        file_t *file = task_current()->file_table[fd];
   12223:	e8 78 f3 ff ff       	call   115a0 <task_current>
   12228:	89 c2                	mov    %eax,%edx
   1222a:	8b 45 08             	mov    0x8(%ebp),%eax
   1222d:	83 c0 14             	add    $0x14,%eax
   12230:	8b 44 82 0c          	mov    0xc(%edx,%eax,4),%eax
   12234:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   12237:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1223a:	eb 05                	jmp    12241 <task_file+0x30>
    }

    return (file_t *)0;
   1223c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12241:	c9                   	leave  
   12242:	c3                   	ret    

00012243 <task_alloc_fd>:

/**
 * @brief 为指定的file分配一个新的文件id
 */
int task_alloc_fd(file_t *file)
{
   12243:	55                   	push   %ebp
   12244:	89 e5                	mov    %esp,%ebp
   12246:	83 ec 10             	sub    $0x10,%esp
    task_t *task = task_current();
   12249:	e8 52 f3 ff ff       	call   115a0 <task_current>
   1224e:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++)
   12251:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   12258:	eb 2f                	jmp    12289 <task_alloc_fd+0x46>
    {
        file_t *p = task->file_table[i];
   1225a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1225d:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12260:	83 c2 14             	add    $0x14,%edx
   12263:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
   12267:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0)
   1226a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1226e:	75 15                	jne    12285 <task_alloc_fd+0x42>
        {
            task->file_table[i] = file;
   12270:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12273:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12276:	8d 4a 14             	lea    0x14(%edx),%ecx
   12279:	8b 55 08             	mov    0x8(%ebp),%edx
   1227c:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)
            return i;
   12280:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12283:	eb 0f                	jmp    12294 <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++)
   12285:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   12289:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   1228d:	7e cb                	jle    1225a <task_alloc_fd+0x17>
        }
    }

    return -1;
   1228f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12294:	c9                   	leave  
   12295:	c3                   	ret    

00012296 <task_remove_fd>:

/**
 * @brief 移除任务中打开的文件fd
 */
void task_remove_fd(int fd)
{
   12296:	55                   	push   %ebp
   12297:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR))
   12299:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1229d:	78 1b                	js     122ba <task_remove_fd+0x24>
   1229f:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   122a3:	7f 15                	jg     122ba <task_remove_fd+0x24>
    {
        task_current()->file_table[fd] = (file_t *)0;
   122a5:	e8 f6 f2 ff ff       	call   115a0 <task_current>
   122aa:	89 c2                	mov    %eax,%edx
   122ac:	8b 45 08             	mov    0x8(%ebp),%eax
   122af:	83 c0 14             	add    $0x14,%eax
   122b2:	c7 44 82 0c 00 00 00 	movl   $0x0,0xc(%edx,%eax,4)
   122b9:	00 
    }
}
   122ba:	90                   	nop
   122bb:	5d                   	pop    %ebp
   122bc:	c3                   	ret    

000122bd <sys_wait>:

/**
 * @brief 等待子进程退出
 */
int sys_wait(int *status)
{
   122bd:	55                   	push   %ebp
   122be:	89 e5                	mov    %esp,%ebp
   122c0:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   122c3:	e8 d8 f2 ff ff       	call   115a0 <task_current>
   122c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (;;)
    {
        // 遍历，找僵尸状态的进程，然后回收。如果收不到，则进入睡眠态
        mutex_lock(&task_table_mutex);
   122cb:	83 ec 0c             	sub    $0xc,%esp
   122ce:	68 c0 79 03 00       	push   $0x379c0
   122d3:	e8 ae 5c 00 00       	call   17f86 <mutex_lock>
   122d8:	83 c4 10             	add    $0x10,%esp
        for (int i = 0; i < TASK_NR; i++)
   122db:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122e2:	e9 98 00 00 00       	jmp    1237f <sys_wait+0xc2>
        {
            task_t *task = task_table + i;
   122e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122ea:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   122f0:	05 c0 15 02 00       	add    $0x215c0,%eax
   122f5:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (task->parent != curr_task)
   122f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122fb:	8b 40 28             	mov    0x28(%eax),%eax
   122fe:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   12301:	75 77                	jne    1237a <sys_wait+0xbd>
            {
                continue;
            }
            if (task->state == TASK_ZOMBIE)
   12303:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12306:	8b 00                	mov    (%eax),%eax
   12308:	83 f8 05             	cmp    $0x5,%eax
   1230b:	75 6e                	jne    1237b <sys_wait+0xbe>
            {
                int pid = task->pid;
   1230d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12310:	8b 40 24             	mov    0x24(%eax),%eax
   12313:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                *status = task->status;
   12316:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12319:	8b 50 40             	mov    0x40(%eax),%edx
   1231c:	8b 45 08             	mov    0x8(%ebp),%eax
   1231f:	89 10                	mov    %edx,(%eax)

                memory_destroy_uvm(task->tss.cr3);
   12321:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12324:	8b 80 78 02 00 00    	mov    0x278(%eax),%eax
   1232a:	83 ec 0c             	sub    $0xc,%esp
   1232d:	50                   	push   %eax
   1232e:	e8 11 e5 ff ff       	call   10844 <memory_destroy_uvm>
   12333:	83 c4 10             	add    $0x10,%esp
                memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   12336:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12339:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   1233f:	2d 00 10 00 00       	sub    $0x1000,%eax
   12344:	83 ec 0c             	sub    $0xc,%esp
   12347:	50                   	push   %eax
   12348:	e8 0a e9 ff ff       	call   10c57 <memory_free_page>
   1234d:	83 c4 10             	add    $0x10,%esp
                kernel_memset(task, 0, sizeof(task_t));
   12350:	83 ec 04             	sub    $0x4,%esp
   12353:	68 c8 02 00 00       	push   $0x2c8
   12358:	6a 00                	push   $0x0
   1235a:	ff 75 e8             	pushl  -0x18(%ebp)
   1235d:	e8 c4 62 00 00       	call   18626 <kernel_memset>
   12362:	83 c4 10             	add    $0x10,%esp

                mutex_unlock(&task_table_mutex);
   12365:	83 ec 0c             	sub    $0xc,%esp
   12368:	68 c0 79 03 00       	push   $0x379c0
   1236d:	e8 a8 5c 00 00       	call   1801a <mutex_unlock>
   12372:	83 c4 10             	add    $0x10,%esp
                return pid;
   12375:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12378:	eb 56                	jmp    123d0 <sys_wait+0x113>
                continue;
   1237a:	90                   	nop
        for (int i = 0; i < TASK_NR; i++)
   1237b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1237f:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12383:	0f 8e 5e ff ff ff    	jle    122e7 <sys_wait+0x2a>
            }
        }
        mutex_unlock(&task_table_mutex);
   12389:	83 ec 0c             	sub    $0xc,%esp
   1238c:	68 c0 79 03 00       	push   $0x379c0
   12391:	e8 84 5c 00 00       	call   1801a <mutex_unlock>
   12396:	83 c4 10             	add    $0x10,%esp

        // 找不到，则等待
        irq_state_t state = irq_enter_protection();
   12399:	e8 a3 0d 00 00       	call   13141 <irq_enter_protection>
   1239e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr_task);
   123a1:	83 ec 0c             	sub    $0xc,%esp
   123a4:	ff 75 f0             	pushl  -0x10(%ebp)
   123a7:	e8 c9 f1 ff ff       	call   11575 <task_set_block>
   123ac:	83 c4 10             	add    $0x10,%esp
        curr_task->state = TASK_WAITING;
   123af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   123b2:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
        task_dispatch();
   123b8:	e8 91 f2 ff ff       	call   1164e <task_dispatch>
        irq_leave_protection(state);
   123bd:	83 ec 0c             	sub    $0xc,%esp
   123c0:	ff 75 ec             	pushl  -0x14(%ebp)
   123c3:	e8 91 0d 00 00       	call   13159 <irq_leave_protection>
   123c8:	83 c4 10             	add    $0x10,%esp
    {
   123cb:	e9 fb fe ff ff       	jmp    122cb <sys_wait+0xe>
    }

    return 0;
}
   123d0:	c9                   	leave  
   123d1:	c3                   	ret    

000123d2 <sys_exit>:

/**
 * @brief 退出进程
 */
void sys_exit(int status)
{
   123d2:	55                   	push   %ebp
   123d3:	89 e5                	mov    %esp,%ebp
   123d5:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   123d8:	e8 c3 f1 ff ff       	call   115a0 <task_current>
   123dd:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 关闭所有已经打开的文件, 标准输入输出库会由newlib自行关闭，但这里仍然再处理下
    for (int fd = 0; fd < TASK_OFILE_NR; fd++)
   123e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123e7:	eb 39                	jmp    12422 <sys_exit+0x50>
    {
        file_t *file = curr_task->file_table[fd];
   123e9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123ec:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123ef:	83 c2 14             	add    $0x14,%edx
   123f2:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax
   123f6:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (file)
   123f9:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   123fd:	74 1f                	je     1241e <sys_exit+0x4c>
        {
            sys_close(fd);
   123ff:	83 ec 0c             	sub    $0xc,%esp
   12402:	ff 75 f4             	pushl  -0xc(%ebp)
   12405:	e8 2e 52 00 00       	call   17638 <sys_close>
   1240a:	83 c4 10             	add    $0x10,%esp
            curr_task->file_table[fd] = (file_t *)0;
   1240d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12410:	8b 55 f4             	mov    -0xc(%ebp),%edx
   12413:	83 c2 14             	add    $0x14,%edx
   12416:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)
   1241d:	00 
    for (int fd = 0; fd < TASK_OFILE_NR; fd++)
   1241e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12422:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12426:	7e c1                	jle    123e9 <sys_exit+0x17>
        }
    }

    int move_child = 0;
   12428:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    // 找所有的子进程，将其转交给init进程
    mutex_lock(&task_table_mutex);
   1242f:	83 ec 0c             	sub    $0xc,%esp
   12432:	68 c0 79 03 00       	push   $0x379c0
   12437:	e8 4a 5b 00 00       	call   17f86 <mutex_lock>
   1243c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_OFILE_NR; i++)
   1243f:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   12446:	eb 3b                	jmp    12483 <sys_exit+0xb1>
    {
        task_t *task = task_table + i;
   12448:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1244b:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12451:	05 c0 15 02 00       	add    $0x215c0,%eax
   12456:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (task->parent == curr_task)
   12459:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1245c:	8b 40 28             	mov    0x28(%eax),%eax
   1245f:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   12462:	75 1b                	jne    1247f <sys_exit+0xad>
        {
            // 有子进程，则转给init_task
            task->parent = &task_manager.first_task;
   12464:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12467:	c7 40 28 28 10 02 00 	movl   $0x21028,0x28(%eax)

            // 如果子进程中有僵尸进程，唤醒回收资源
            // 并不由自己回收，因为自己将要退出
            if (task->state == TASK_ZOMBIE)
   1246e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12471:	8b 00                	mov    (%eax),%eax
   12473:	83 f8 05             	cmp    $0x5,%eax
   12476:	75 07                	jne    1247f <sys_exit+0xad>
            {
                move_child = 1;
   12478:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_NR; i++)
   1247f:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12483:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   12487:	7e bf                	jle    12448 <sys_exit+0x76>
            }
        }
    }
    mutex_unlock(&task_table_mutex);
   12489:	83 ec 0c             	sub    $0xc,%esp
   1248c:	68 c0 79 03 00       	push   $0x379c0
   12491:	e8 84 5b 00 00       	call   1801a <mutex_unlock>
   12496:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   12499:	e8 a3 0c 00 00       	call   13141 <irq_enter_protection>
   1249e:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 如果有移动子进程，则唤醒init进程
    task_t *parent = curr_task->parent;
   124a1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124a4:	8b 40 28             	mov    0x28(%eax),%eax
   124a7:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (move_child && (parent != &task_manager.first_task))
   124aa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   124ae:	74 23                	je     124d3 <sys_exit+0x101>
   124b0:	81 7d e0 28 10 02 00 	cmpl   $0x21028,-0x20(%ebp)
   124b7:	74 1a                	je     124d3 <sys_exit+0x101>
    { // 如果父进程为init进程，在下方唤醒
        if (task_manager.first_task.state == TASK_WAITING)
   124b9:	a1 28 10 02 00       	mov    0x21028,%eax
   124be:	83 f8 04             	cmp    $0x4,%eax
   124c1:	75 10                	jne    124d3 <sys_exit+0x101>
        {
            task_set_ready(&task_manager.first_task);
   124c3:	83 ec 0c             	sub    $0xc,%esp
   124c6:	68 28 10 02 00       	push   $0x21028
   124cb:	e8 71 f0 ff ff       	call   11541 <task_set_ready>
   124d0:	83 c4 10             	add    $0x10,%esp
        }
    }

    // 如果有父任务在wait，则唤醒父任务进行回收
    // 如果父进程没有等待，则一直处理僵死状态？
    if (parent->state == TASK_WAITING)
   124d3:	8b 45 e0             	mov    -0x20(%ebp),%eax
   124d6:	8b 00                	mov    (%eax),%eax
   124d8:	83 f8 04             	cmp    $0x4,%eax
   124db:	75 12                	jne    124ef <sys_exit+0x11d>
    {
        task_set_ready(curr_task->parent);
   124dd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124e0:	8b 40 28             	mov    0x28(%eax),%eax
   124e3:	83 ec 0c             	sub    $0xc,%esp
   124e6:	50                   	push   %eax
   124e7:	e8 55 f0 ff ff       	call   11541 <task_set_ready>
   124ec:	83 c4 10             	add    $0x10,%esp
    }

    // 保存返回值，进入僵尸状态
    curr_task->status = status;
   124ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124f2:	8b 55 08             	mov    0x8(%ebp),%edx
   124f5:	89 50 40             	mov    %edx,0x40(%eax)
    curr_task->state = TASK_ZOMBIE;
   124f8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124fb:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    task_set_block(curr_task);
   12501:	83 ec 0c             	sub    $0xc,%esp
   12504:	ff 75 e8             	pushl  -0x18(%ebp)
   12507:	e8 69 f0 ff ff       	call   11575 <task_set_block>
   1250c:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   1250f:	e8 3a f1 ff ff       	call   1164e <task_dispatch>
    irq_leave_protection(state);
   12514:	83 ec 0c             	sub    $0xc,%esp
   12517:	ff 75 e4             	pushl  -0x1c(%ebp)
   1251a:	e8 3a 0c 00 00       	call   13159 <irq_leave_protection>
   1251f:	83 c4 10             	add    $0x10,%esp
}
   12522:	90                   	nop
   12523:	c9                   	leave  
   12524:	c3                   	ret    

00012525 <lgdt>:
{
   12525:	55                   	push   %ebp
   12526:	89 e5                	mov    %esp,%ebp
   12528:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   1252b:	8b 45 08             	mov    0x8(%ebp),%eax
   1252e:	c1 e8 10             	shr    $0x10,%eax
   12531:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   12535:	8b 45 08             	mov    0x8(%ebp),%eax
   12538:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   1253c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1253f:	83 e8 01             	sub    $0x1,%eax
   12542:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   12546:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1254a:	90                   	nop
   1254b:	c9                   	leave  
   1254c:	c3                   	ret    

0001254d <far_jump>:
{
   1254d:	55                   	push   %ebp
   1254e:	89 e5                	mov    %esp,%ebp
   12550:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   12553:	8b 45 0c             	mov    0xc(%ebp),%eax
   12556:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12559:	8b 45 08             	mov    0x8(%ebp),%eax
   1255c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   1255f:	8d 45 f8             	lea    -0x8(%ebp),%eax
   12562:	ff 28                	ljmp   *(%eax)
}
   12564:	90                   	nop
   12565:	c9                   	leave  
   12566:	c3                   	ret    

00012567 <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   12567:	55                   	push   %ebp
   12568:	89 e5                	mov    %esp,%ebp
   1256a:	83 ec 14             	sub    $0x14,%esp
   1256d:	8b 45 14             	mov    0x14(%ebp),%eax
   12570:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector / sizeof(segment_desc_t)); //
   12574:	8b 45 08             	mov    0x8(%ebp),%eax
   12577:	83 e0 f8             	and    $0xfffffff8,%eax
   1257a:	05 e0 79 03 00       	add    $0x379e0,%eax
   1257f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 设置limit单位为4kB
    if (limit > 0xFFFF)
   12582:	81 7d 10 ff ff 00 00 	cmpl   $0xffff,0x10(%ebp)
   12589:	76 0f                	jbe    1259a <segment_desc_set+0x33>
    {
        attr |= SEG_G; // G 标志位
   1258b:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   12591:	8b 45 10             	mov    0x10(%ebp),%eax
   12594:	c1 e8 0c             	shr    $0xc,%eax
   12597:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   1259a:	8b 45 10             	mov    0x10(%ebp),%eax
   1259d:	89 c2                	mov    %eax,%edx
   1259f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125a2:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   125a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a8:	89 c2                	mov    %eax,%edx
   125aa:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125ad:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   125b1:	8b 45 0c             	mov    0xc(%ebp),%eax
   125b4:	c1 e8 10             	shr    $0x10,%eax
   125b7:	89 c2                	mov    %eax,%edx
   125b9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125bc:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   125bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   125c2:	c1 e8 18             	shr    $0x18,%eax
   125c5:	89 c2                	mov    %eax,%edx
   125c7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125ca:	88 50 07             	mov    %dl,0x7(%eax)
    desc->attr = attr | (((limit >> 16) & 0xFF) << 8);
   125cd:	8b 45 10             	mov    0x10(%ebp),%eax
   125d0:	c1 e8 10             	shr    $0x10,%eax
   125d3:	c1 e0 08             	shl    $0x8,%eax
   125d6:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   125da:	89 c2                	mov    %eax,%edx
   125dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125df:	66 89 50 05          	mov    %dx,0x5(%eax)
}
   125e3:	90                   	nop
   125e4:	c9                   	leave  
   125e5:	c3                   	ret    

000125e6 <gdt_free_sel>:

void gdt_free_sel(int sel)
{
   125e6:	55                   	push   %ebp
   125e7:	89 e5                	mov    %esp,%ebp
   125e9:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   125ec:	83 ec 0c             	sub    $0xc,%esp
   125ef:	68 e0 81 03 00       	push   $0x381e0
   125f4:	e8 8d 59 00 00       	call   17f86 <mutex_lock>
   125f9:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   125fc:	8b 45 08             	mov    0x8(%ebp),%eax
   125ff:	c1 e8 03             	shr    $0x3,%eax
   12602:	66 c7 04 c5 e5 79 03 	movw   $0x0,0x379e5(,%eax,8)
   12609:	00 00 00 
    mutex_unlock(&mutex);
   1260c:	83 ec 0c             	sub    $0xc,%esp
   1260f:	68 e0 81 03 00       	push   $0x381e0
   12614:	e8 01 5a 00 00       	call   1801a <mutex_unlock>
   12619:	83 c4 10             	add    $0x10,%esp
}
   1261c:	90                   	nop
   1261d:	c9                   	leave  
   1261e:	c3                   	ret    

0001261f <get_alloc_desc>:

int get_alloc_desc()
{
   1261f:	55                   	push   %ebp
   12620:	89 e5                	mov    %esp,%ebp
   12622:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   12625:	83 ec 0c             	sub    $0xc,%esp
   12628:	68 e0 81 03 00       	push   $0x381e0
   1262d:	e8 54 59 00 00       	call   17f86 <mutex_lock>
   12632:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   12635:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1263c:	eb 36                	jmp    12674 <get_alloc_desc+0x55>
    {
        segment_desc_t *desc = gdt_table + i;
   1263e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12641:	c1 e0 03             	shl    $0x3,%eax
   12644:	05 e0 79 03 00       	add    $0x379e0,%eax
   12649:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) // 根据属性是否为0判断
   1264c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1264f:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12653:	66 85 c0             	test   %ax,%ax
   12656:	75 18                	jne    12670 <get_alloc_desc+0x51>
        {
            // irq_leave_protection(state);
            mutex_unlock(&mutex);
   12658:	83 ec 0c             	sub    $0xc,%esp
   1265b:	68 e0 81 03 00       	push   $0x381e0
   12660:	e8 b5 59 00 00       	call   1801a <mutex_unlock>
   12665:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   12668:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1266b:	c1 e0 03             	shl    $0x3,%eax
   1266e:	eb 22                	jmp    12692 <get_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   12670:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12674:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1267b:	7e c1                	jle    1263e <get_alloc_desc+0x1f>
        }
    }
    // irq_leave_protection(state);
    mutex_unlock(&mutex);
   1267d:	83 ec 0c             	sub    $0xc,%esp
   12680:	68 e0 81 03 00       	push   $0x381e0
   12685:	e8 90 59 00 00       	call   1801a <mutex_unlock>
   1268a:	83 c4 10             	add    $0x10,%esp
    return -1;
   1268d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   12692:	c9                   	leave  
   12693:	c3                   	ret    

00012694 <init_gdt>:

void init_gdt(void)
{
   12694:	55                   	push   %ebp
   12695:	89 e5                	mov    %esp,%ebp
   12697:	83 ec 18             	sub    $0x18,%esp
    // 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   1269a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   126a1:	eb 19                	jmp    126bc <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0); // 找到第几个GDT表项
   126a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   126a6:	c1 e0 03             	shl    $0x3,%eax
   126a9:	6a 00                	push   $0x0
   126ab:	6a 00                	push   $0x0
   126ad:	6a 00                	push   $0x0
   126af:	50                   	push   %eax
   126b0:	e8 b2 fe ff ff       	call   12567 <segment_desc_set>
   126b5:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   126b8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   126bc:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   126c3:	7e de                	jle    126a3 <init_gdt+0xf>
    }
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF,
   126c5:	68 92 40 00 00       	push   $0x4092
   126ca:	6a ff                	push   $0xffffffff
   126cc:	6a 00                	push   $0x0
   126ce:	6a 10                	push   $0x10
   126d0:	e8 92 fe ff ff       	call   12567 <segment_desc_set>
   126d5:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF,
   126d8:	68 9a 40 00 00       	push   $0x409a
   126dd:	6a ff                	push   $0xffffffff
   126df:	6a 00                	push   $0x0
   126e1:	6a 08                	push   $0x8
   126e3:	e8 7f fe ff ff       	call   12567 <segment_desc_set>
   126e8:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   126eb:	ba 05 03 01 00       	mov    $0x10305,%edx
   126f0:	b8 f8 79 03 00       	mov    $0x379f8,%eax
   126f5:	68 05 ec 00 00       	push   $0xec05
   126fa:	52                   	push   %edx
   126fb:	6a 08                	push   $0x8
   126fd:	50                   	push   %eax
   126fe:	e8 1c 00 00 00       	call   1271f <gate_desc_set>
   12703:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS,
                  (uint32_t)exception_handler_syscall,
                  GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    // 重新加载GDT
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   12706:	b8 e0 79 03 00       	mov    $0x379e0,%eax
   1270b:	83 ec 08             	sub    $0x8,%esp
   1270e:	68 00 08 00 00       	push   $0x800
   12713:	50                   	push   %eax
   12714:	e8 0c fe ff ff       	call   12525 <lgdt>
   12719:	83 c4 10             	add    $0x10,%esp
}
   1271c:	90                   	nop
   1271d:	c9                   	leave  
   1271e:	c3                   	ret    

0001271f <gate_desc_set>:

void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   1271f:	55                   	push   %ebp
   12720:	89 e5                	mov    %esp,%ebp
   12722:	83 ec 08             	sub    $0x8,%esp
   12725:	8b 55 0c             	mov    0xc(%ebp),%edx
   12728:	8b 45 14             	mov    0x14(%ebp),%eax
   1272b:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   1272f:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   12733:	8b 45 10             	mov    0x10(%ebp),%eax
   12736:	89 c2                	mov    %eax,%edx
   12738:	8b 45 08             	mov    0x8(%ebp),%eax
   1273b:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   1273e:	8b 45 08             	mov    0x8(%ebp),%eax
   12741:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12745:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   12749:	8b 45 08             	mov    0x8(%ebp),%eax
   1274c:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12750:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFFF;
   12754:	8b 45 10             	mov    0x10(%ebp),%eax
   12757:	c1 e8 10             	shr    $0x10,%eax
   1275a:	89 c2                	mov    %eax,%edx
   1275c:	8b 45 08             	mov    0x8(%ebp),%eax
   1275f:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   12763:	90                   	nop
   12764:	c9                   	leave  
   12765:	c3                   	ret    

00012766 <cpu_init>:

void cpu_init(void)
{
   12766:	55                   	push   %ebp
   12767:	89 e5                	mov    %esp,%ebp
   12769:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1276c:	83 ec 0c             	sub    $0xc,%esp
   1276f:	68 e0 81 03 00       	push   $0x381e0
   12774:	e8 df 57 00 00       	call   17f58 <mutex_init>
   12779:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   1277c:	e8 13 ff ff ff       	call   12694 <init_gdt>
}
   12781:	90                   	nop
   12782:	c9                   	leave  
   12783:	c3                   	ret    

00012784 <switch_to_tss>:

void switch_to_tss(uint32_t tss_selector)
{
   12784:	55                   	push   %ebp
   12785:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   12787:	6a 00                	push   $0x0
   12789:	ff 75 08             	pushl  0x8(%ebp)
   1278c:	e8 bc fd ff ff       	call   1254d <far_jump>
   12791:	83 c4 08             	add    $0x8,%esp
   12794:	90                   	nop
   12795:	c9                   	leave  
   12796:	c3                   	ret    

00012797 <inb>:
{
   12797:	55                   	push   %ebp
   12798:	89 e5                	mov    %esp,%ebp
   1279a:	83 ec 14             	sub    $0x14,%esp
   1279d:	8b 45 08             	mov    0x8(%ebp),%eax
   127a0:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   127a4:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   127a8:	89 c2                	mov    %eax,%edx
   127aa:	ec                   	in     (%dx),%al
   127ab:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   127ae:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   127b2:	c9                   	leave  
   127b3:	c3                   	ret    

000127b4 <outb>:
{
   127b4:	55                   	push   %ebp
   127b5:	89 e5                	mov    %esp,%ebp
   127b7:	83 ec 08             	sub    $0x8,%esp
   127ba:	8b 55 08             	mov    0x8(%ebp),%edx
   127bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   127c0:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   127c4:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   127c7:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   127cb:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   127cf:	ee                   	out    %al,(%dx)
}
   127d0:	90                   	nop
   127d1:	c9                   	leave  
   127d2:	c3                   	ret    

000127d3 <cli>:
{
   127d3:	55                   	push   %ebp
   127d4:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   127d6:	fa                   	cli    
}
   127d7:	90                   	nop
   127d8:	5d                   	pop    %ebp
   127d9:	c3                   	ret    

000127da <sti>:
{
   127da:	55                   	push   %ebp
   127db:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   127dd:	fb                   	sti    
}
   127de:	90                   	nop
   127df:	5d                   	pop    %ebp
   127e0:	c3                   	ret    

000127e1 <lidt>:
{
   127e1:	55                   	push   %ebp
   127e2:	89 e5                	mov    %esp,%ebp
   127e4:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   127e7:	8b 45 08             	mov    0x8(%ebp),%eax
   127ea:	c1 e8 10             	shr    $0x10,%eax
   127ed:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   127f1:	8b 45 08             	mov    0x8(%ebp),%eax
   127f4:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   127f8:	8b 45 0c             	mov    0xc(%ebp),%eax
   127fb:	83 e8 01             	sub    $0x1,%eax
   127fe:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   12802:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   12806:	90                   	nop
   12807:	c9                   	leave  
   12808:	c3                   	ret    

00012809 <read_cr2>:
{
   12809:	55                   	push   %ebp
   1280a:	89 e5                	mov    %esp,%ebp
   1280c:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   1280f:	0f 20 d0             	mov    %cr2,%eax
   12812:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   12815:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12818:	c9                   	leave  
   12819:	c3                   	ret    

0001281a <hlt>:
{
   1281a:	55                   	push   %ebp
   1281b:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1281d:	f4                   	hlt    
}
   1281e:	90                   	nop
   1281f:	5d                   	pop    %ebp
   12820:	c3                   	ret    

00012821 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   12821:	55                   	push   %ebp
   12822:	89 e5                	mov    %esp,%ebp
   12824:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax" : "=a"(eflags));
   12827:	9c                   	pushf  
   12828:	58                   	pop    %eax
   12829:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   1282c:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   1282f:	c9                   	leave  
   12830:	c3                   	ret    

00012831 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   12831:	55                   	push   %ebp
   12832:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl" ::"a"(eflags));
   12834:	8b 45 08             	mov    0x8(%ebp),%eax
   12837:	50                   	push   %eax
   12838:	9d                   	popf   
}
   12839:	90                   	nop
   1283a:	5d                   	pop    %ebp
   1283b:	c3                   	ret    

0001283c <dump_core_regs>:
#define IDT_TABLE_NR 128

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs(exception_frame_t *frame)
{
   1283c:	55                   	push   %ebp
   1283d:	89 e5                	mov    %esp,%ebp
   1283f:	57                   	push   %edi
   12840:	56                   	push   %esi
   12841:	53                   	push   %ebx
   12842:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t esp, ss;
    if (frame->cs & 0x7)
   12845:	8b 45 08             	mov    0x8(%ebp),%eax
   12848:	8b 40 3c             	mov    0x3c(%eax),%eax
   1284b:	83 e0 07             	and    $0x7,%eax
   1284e:	85 c0                	test   %eax,%eax
   12850:	74 14                	je     12866 <dump_core_regs+0x2a>
    {
        ss = frame->ds;
   12852:	8b 45 08             	mov    0x8(%ebp),%eax
   12855:	8b 40 0c             	mov    0xc(%eax),%eax
   12858:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   1285b:	8b 45 08             	mov    0x8(%ebp),%eax
   1285e:	8b 40 1c             	mov    0x1c(%eax),%eax
   12861:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12864:	eb 12                	jmp    12878 <dump_core_regs+0x3c>
    }
    else
    {
        ss = frame->ss3;
   12866:	8b 45 08             	mov    0x8(%ebp),%eax
   12869:	8b 40 48             	mov    0x48(%eax),%eax
   1286c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   1286f:	8b 45 08             	mov    0x8(%ebp),%eax
   12872:	8b 40 44             	mov    0x44(%eax),%eax
   12875:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->err_code);
   12878:	8b 45 08             	mov    0x8(%ebp),%eax
   1287b:	8b 50 34             	mov    0x34(%eax),%edx
   1287e:	8b 45 08             	mov    0x8(%ebp),%eax
   12881:	8b 40 30             	mov    0x30(%eax),%eax
   12884:	83 ec 04             	sub    $0x4,%esp
   12887:	52                   	push   %edx
   12888:	50                   	push   %eax
   12889:	68 60 92 01 00       	push   $0x19260
   1288e:	e8 ad 63 00 00       	call   18c40 <log_printf>
   12893:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   12896:	8b 45 08             	mov    0x8(%ebp),%eax
   12899:	8b 30                	mov    (%eax),%esi
   1289b:	8b 45 08             	mov    0x8(%ebp),%eax
   1289e:	8b 58 04             	mov    0x4(%eax),%ebx
   128a1:	8b 45 08             	mov    0x8(%ebp),%eax
   128a4:	8b 48 08             	mov    0x8(%eax),%ecx
   128a7:	8b 45 08             	mov    0x8(%ebp),%eax
   128aa:	8b 50 0c             	mov    0xc(%eax),%edx
   128ad:	8b 45 08             	mov    0x8(%ebp),%eax
   128b0:	8b 40 3c             	mov    0x3c(%eax),%eax
   128b3:	83 ec 04             	sub    $0x4,%esp
   128b6:	56                   	push   %esi
   128b7:	53                   	push   %ebx
   128b8:	ff 75 e0             	pushl  -0x20(%ebp)
   128bb:	51                   	push   %ecx
   128bc:	52                   	push   %edx
   128bd:	50                   	push   %eax
   128be:	68 7c 92 01 00       	push   $0x1927c
   128c3:	e8 78 63 00 00       	call   18c40 <log_printf>
   128c8:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   128cb:	8b 45 08             	mov    0x8(%ebp),%eax
   128ce:	8b 40 18             	mov    0x18(%eax),%eax
   128d1:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   128d4:	8b 45 08             	mov    0x8(%ebp),%eax
   128d7:	8b 78 14             	mov    0x14(%eax),%edi
   128da:	8b 45 08             	mov    0x8(%ebp),%eax
   128dd:	8b 70 10             	mov    0x10(%eax),%esi
   128e0:	8b 45 08             	mov    0x8(%ebp),%eax
   128e3:	8b 58 24             	mov    0x24(%eax),%ebx
   128e6:	8b 45 08             	mov    0x8(%ebp),%eax
   128e9:	8b 48 28             	mov    0x28(%eax),%ecx
   128ec:	8b 45 08             	mov    0x8(%ebp),%eax
   128ef:	8b 50 20             	mov    0x20(%eax),%edx
   128f2:	8b 45 08             	mov    0x8(%ebp),%eax
   128f5:	8b 40 2c             	mov    0x2c(%eax),%eax
   128f8:	83 ec 0c             	sub    $0xc,%esp
   128fb:	ff 75 e4             	pushl  -0x1c(%ebp)
   128fe:	ff 75 d4             	pushl  -0x2c(%ebp)
   12901:	57                   	push   %edi
   12902:	56                   	push   %esi
   12903:	53                   	push   %ebx
   12904:	51                   	push   %ecx
   12905:	52                   	push   %edx
   12906:	50                   	push   %eax
   12907:	68 a4 92 01 00       	push   $0x192a4
   1290c:	e8 2f 63 00 00       	call   18c40 <log_printf>
   12911:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   12914:	8b 45 08             	mov    0x8(%ebp),%eax
   12917:	8b 50 40             	mov    0x40(%eax),%edx
   1291a:	8b 45 08             	mov    0x8(%ebp),%eax
   1291d:	8b 40 38             	mov    0x38(%eax),%eax
   12920:	83 ec 04             	sub    $0x4,%esp
   12923:	52                   	push   %edx
   12924:	50                   	push   %eax
   12925:	68 ed 92 01 00       	push   $0x192ed
   1292a:	e8 11 63 00 00       	call   18c40 <log_printf>
   1292f:	83 c4 10             	add    $0x10,%esp
}
   12932:	90                   	nop
   12933:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12936:	5b                   	pop    %ebx
   12937:	5e                   	pop    %esi
   12938:	5f                   	pop    %edi
   12939:	5d                   	pop    %ebp
   1293a:	c3                   	ret    

0001293b <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   1293b:	55                   	push   %ebp
   1293c:	89 e5                	mov    %esp,%ebp
   1293e:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12941:	83 ec 0c             	sub    $0xc,%esp
   12944:	68 04 93 01 00       	push   $0x19304
   12949:	e8 f2 62 00 00       	call   18c40 <log_printf>
   1294e:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", msg);
   12951:	83 ec 08             	sub    $0x8,%esp
   12954:	ff 75 0c             	pushl  0xc(%ebp)
   12957:	68 25 93 01 00       	push   $0x19325
   1295c:	e8 df 62 00 00       	call   18c40 <log_printf>
   12961:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame); // 打印寄存器
   12964:	83 ec 0c             	sub    $0xc,%esp
   12967:	ff 75 08             	pushl  0x8(%ebp)
   1296a:	e8 cd fe ff ff       	call   1283c <dump_core_regs>
   1296f:	83 c4 10             	add    $0x10,%esp
    log_printf("--------------------------------");
   12972:	83 ec 0c             	sub    $0xc,%esp
   12975:	68 04 93 01 00       	push   $0x19304
   1297a:	e8 c1 62 00 00       	call   18c40 <log_printf>
   1297f:	83 c4 10             	add    $0x10,%esp

    // 用户特权下，直接退出
    if (frame->cs & 0x3)
   12982:	8b 45 08             	mov    0x8(%ebp),%eax
   12985:	8b 40 3c             	mov    0x3c(%eax),%eax
   12988:	83 e0 03             	and    $0x3,%eax
   1298b:	85 c0                	test   %eax,%eax
   1298d:	74 14                	je     129a3 <do_default_handler+0x68>
    {
        sys_exit(frame->err_code);
   1298f:	8b 45 08             	mov    0x8(%ebp),%eax
   12992:	8b 40 34             	mov    0x34(%eax),%eax
   12995:	83 ec 0c             	sub    $0xc,%esp
   12998:	50                   	push   %eax
   12999:	e8 34 fa ff ff       	call   123d2 <sys_exit>
   1299e:	83 c4 10             	add    $0x10,%esp
        while (1)
        {
            hlt();
        }
    }
}
   129a1:	eb 07                	jmp    129aa <do_default_handler+0x6f>
            hlt();
   129a3:	e8 72 fe ff ff       	call   1281a <hlt>
   129a8:	eb f9                	jmp    129a3 <do_default_handler+0x68>
}
   129aa:	c9                   	leave  
   129ab:	c3                   	ret    

000129ac <do_handler_unknown>:

void do_handler_unknown(exception_frame_t *frame)
{
   129ac:	55                   	push   %ebp
   129ad:	89 e5                	mov    %esp,%ebp
   129af:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   129b2:	83 ec 08             	sub    $0x8,%esp
   129b5:	68 40 93 01 00       	push   $0x19340
   129ba:	ff 75 08             	pushl  0x8(%ebp)
   129bd:	e8 79 ff ff ff       	call   1293b <do_default_handler>
   129c2:	83 c4 10             	add    $0x10,%esp
}
   129c5:	90                   	nop
   129c6:	c9                   	leave  
   129c7:	c3                   	ret    

000129c8 <do_handler_divider>:

void do_handler_divider(exception_frame_t *frame)
{
   129c8:	55                   	push   %ebp
   129c9:	89 e5                	mov    %esp,%ebp
   129cb:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception");
   129ce:	83 ec 08             	sub    $0x8,%esp
   129d1:	68 52 93 01 00       	push   $0x19352
   129d6:	ff 75 08             	pushl  0x8(%ebp)
   129d9:	e8 5d ff ff ff       	call   1293b <do_default_handler>
   129de:	83 c4 10             	add    $0x10,%esp
}
   129e1:	90                   	nop
   129e2:	c9                   	leave  
   129e3:	c3                   	ret    

000129e4 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t *frame)
{
   129e4:	55                   	push   %ebp
   129e5:	89 e5                	mov    %esp,%ebp
   129e7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   129ea:	83 ec 08             	sub    $0x8,%esp
   129ed:	68 64 93 01 00       	push   $0x19364
   129f2:	ff 75 08             	pushl  0x8(%ebp)
   129f5:	e8 41 ff ff ff       	call   1293b <do_default_handler>
   129fa:	83 c4 10             	add    $0x10,%esp
}
   129fd:	90                   	nop
   129fe:	c9                   	leave  
   129ff:	c3                   	ret    

00012a00 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t *frame)
{
   12a00:	55                   	push   %ebp
   12a01:	89 e5                	mov    %esp,%ebp
   12a03:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   12a06:	83 ec 08             	sub    $0x8,%esp
   12a09:	68 74 93 01 00       	push   $0x19374
   12a0e:	ff 75 08             	pushl  0x8(%ebp)
   12a11:	e8 25 ff ff ff       	call   1293b <do_default_handler>
   12a16:	83 c4 10             	add    $0x10,%esp
}
   12a19:	90                   	nop
   12a1a:	c9                   	leave  
   12a1b:	c3                   	ret    

00012a1c <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t *frame)
{
   12a1c:	55                   	push   %ebp
   12a1d:	89 e5                	mov    %esp,%ebp
   12a1f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   12a22:	83 ec 08             	sub    $0x8,%esp
   12a25:	68 83 93 01 00       	push   $0x19383
   12a2a:	ff 75 08             	pushl  0x8(%ebp)
   12a2d:	e8 09 ff ff ff       	call   1293b <do_default_handler>
   12a32:	83 c4 10             	add    $0x10,%esp
}
   12a35:	90                   	nop
   12a36:	c9                   	leave  
   12a37:	c3                   	ret    

00012a38 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t *frame)
{
   12a38:	55                   	push   %ebp
   12a39:	89 e5                	mov    %esp,%ebp
   12a3b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   12a3e:	83 ec 08             	sub    $0x8,%esp
   12a41:	68 8f 93 01 00       	push   $0x1938f
   12a46:	ff 75 08             	pushl  0x8(%ebp)
   12a49:	e8 ed fe ff ff       	call   1293b <do_default_handler>
   12a4e:	83 c4 10             	add    $0x10,%esp
}
   12a51:	90                   	nop
   12a52:	c9                   	leave  
   12a53:	c3                   	ret    

00012a54 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t *frame)
{
   12a54:	55                   	push   %ebp
   12a55:	89 e5                	mov    %esp,%ebp
   12a57:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   12a5a:	83 ec 08             	sub    $0x8,%esp
   12a5d:	68 99 93 01 00       	push   $0x19399
   12a62:	ff 75 08             	pushl  0x8(%ebp)
   12a65:	e8 d1 fe ff ff       	call   1293b <do_default_handler>
   12a6a:	83 c4 10             	add    $0x10,%esp
}
   12a6d:	90                   	nop
   12a6e:	c9                   	leave  
   12a6f:	c3                   	ret    

00012a70 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t *frame)
{
   12a70:	55                   	push   %ebp
   12a71:	89 e5                	mov    %esp,%ebp
   12a73:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   12a76:	83 ec 08             	sub    $0x8,%esp
   12a79:	68 af 93 01 00       	push   $0x193af
   12a7e:	ff 75 08             	pushl  0x8(%ebp)
   12a81:	e8 b5 fe ff ff       	call   1293b <do_default_handler>
   12a86:	83 c4 10             	add    $0x10,%esp
}
   12a89:	90                   	nop
   12a8a:	c9                   	leave  
   12a8b:	c3                   	ret    

00012a8c <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t *frame)
{
   12a8c:	55                   	push   %ebp
   12a8d:	89 e5                	mov    %esp,%ebp
   12a8f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   12a92:	83 ec 08             	sub    $0x8,%esp
   12a95:	68 bf 93 01 00       	push   $0x193bf
   12a9a:	ff 75 08             	pushl  0x8(%ebp)
   12a9d:	e8 99 fe ff ff       	call   1293b <do_default_handler>
   12aa2:	83 c4 10             	add    $0x10,%esp
}
   12aa5:	90                   	nop
   12aa6:	c9                   	leave  
   12aa7:	c3                   	ret    

00012aa8 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t *frame)
{
   12aa8:	55                   	push   %ebp
   12aa9:	89 e5                	mov    %esp,%ebp
   12aab:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   12aae:	83 ec 08             	sub    $0x8,%esp
   12ab1:	68 d5 93 01 00       	push   $0x193d5
   12ab6:	ff 75 08             	pushl  0x8(%ebp)
   12ab9:	e8 7d fe ff ff       	call   1293b <do_default_handler>
   12abe:	83 c4 10             	add    $0x10,%esp
}
   12ac1:	90                   	nop
   12ac2:	c9                   	leave  
   12ac3:	c3                   	ret    

00012ac4 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t *frame)
{
   12ac4:	55                   	push   %ebp
   12ac5:	89 e5                	mov    %esp,%ebp
   12ac7:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   12aca:	83 ec 08             	sub    $0x8,%esp
   12acd:	68 e3 93 01 00       	push   $0x193e3
   12ad2:	ff 75 08             	pushl  0x8(%ebp)
   12ad5:	e8 61 fe ff ff       	call   1293b <do_default_handler>
   12ada:	83 c4 10             	add    $0x10,%esp
}
   12add:	90                   	nop
   12ade:	c9                   	leave  
   12adf:	c3                   	ret    

00012ae0 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t *frame)
{
   12ae0:	55                   	push   %ebp
   12ae1:	89 e5                	mov    %esp,%ebp
   12ae3:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   12ae6:	83 ec 08             	sub    $0x8,%esp
   12ae9:	68 ef 93 01 00       	push   $0x193ef
   12aee:	ff 75 08             	pushl  0x8(%ebp)
   12af1:	e8 45 fe ff ff       	call   1293b <do_default_handler>
   12af6:	83 c4 10             	add    $0x10,%esp
}
   12af9:	90                   	nop
   12afa:	c9                   	leave  
   12afb:	c3                   	ret    

00012afc <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   12afc:	55                   	push   %ebp
   12afd:	89 e5                	mov    %esp,%ebp
   12aff:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   12b02:	83 ec 08             	sub    $0x8,%esp
   12b05:	68 04 94 01 00       	push   $0x19404
   12b0a:	ff 75 08             	pushl  0x8(%ebp)
   12b0d:	e8 29 fe ff ff       	call   1293b <do_default_handler>
   12b12:	83 c4 10             	add    $0x10,%esp
}
   12b15:	90                   	nop
   12b16:	c9                   	leave  
   12b17:	c3                   	ret    

00012b18 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   12b18:	55                   	push   %ebp
   12b19:	89 e5                	mov    %esp,%ebp
   12b1b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   12b1e:	83 ec 08             	sub    $0x8,%esp
   12b21:	68 19 94 01 00       	push   $0x19419
   12b26:	ff 75 08             	pushl  0x8(%ebp)
   12b29:	e8 0d fe ff ff       	call   1293b <do_default_handler>
   12b2e:	83 c4 10             	add    $0x10,%esp
}
   12b31:	90                   	nop
   12b32:	c9                   	leave  
   12b33:	c3                   	ret    

00012b34 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   12b34:	55                   	push   %ebp
   12b35:	89 e5                	mov    %esp,%ebp
   12b37:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   12b3a:	83 ec 08             	sub    $0x8,%esp
   12b3d:	68 37 94 01 00       	push   $0x19437
   12b42:	ff 75 08             	pushl  0x8(%ebp)
   12b45:	e8 f1 fd ff ff       	call   1293b <do_default_handler>
   12b4a:	83 c4 10             	add    $0x10,%esp
}
   12b4d:	90                   	nop
   12b4e:	c9                   	leave  
   12b4f:	c3                   	ret    

00012b50 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   12b50:	55                   	push   %ebp
   12b51:	89 e5                	mov    %esp,%ebp
   12b53:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   12b56:	83 ec 08             	sub    $0x8,%esp
   12b59:	68 48 94 01 00       	push   $0x19448
   12b5e:	ff 75 08             	pushl  0x8(%ebp)
   12b61:	e8 d5 fd ff ff       	call   1293b <do_default_handler>
   12b66:	83 c4 10             	add    $0x10,%esp
}
   12b69:	90                   	nop
   12b6a:	c9                   	leave  
   12b6b:	c3                   	ret    

00012b6c <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   12b6c:	55                   	push   %ebp
   12b6d:	89 e5                	mov    %esp,%ebp
   12b6f:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   12b72:	83 ec 08             	sub    $0x8,%esp
   12b75:	68 58 94 01 00       	push   $0x19458
   12b7a:	ff 75 08             	pushl  0x8(%ebp)
   12b7d:	e8 b9 fd ff ff       	call   1293b <do_default_handler>
   12b82:	83 c4 10             	add    $0x10,%esp
}
   12b85:	90                   	nop
   12b86:	c9                   	leave  
   12b87:	c3                   	ret    

00012b88 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   12b88:	55                   	push   %ebp
   12b89:	89 e5                	mov    %esp,%ebp
   12b8b:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   12b8e:	83 ec 08             	sub    $0x8,%esp
   12b91:	68 77 94 01 00       	push   $0x19477
   12b96:	ff 75 08             	pushl  0x8(%ebp)
   12b99:	e8 9d fd ff ff       	call   1293b <do_default_handler>
   12b9e:	83 c4 10             	add    $0x10,%esp
}
   12ba1:	90                   	nop
   12ba2:	c9                   	leave  
   12ba3:	c3                   	ret    

00012ba4 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   12ba4:	55                   	push   %ebp
   12ba5:	89 e5                	mov    %esp,%ebp
   12ba7:	83 ec 08             	sub    $0x8,%esp
    // do_default_handler(frame, "General_protection Exception.");
    log_printf("--------------------------------");
   12baa:	83 ec 0c             	sub    $0xc,%esp
   12bad:	68 04 93 01 00       	push   $0x19304
   12bb2:	e8 89 60 00 00       	call   18c40 <log_printf>
   12bb7:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12bba:	83 ec 0c             	sub    $0xc,%esp
   12bbd:	68 94 94 01 00       	push   $0x19494
   12bc2:	e8 79 60 00 00       	call   18c40 <log_printf>
   12bc7:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_EXT)
   12bca:	8b 45 08             	mov    0x8(%ebp),%eax
   12bcd:	8b 40 34             	mov    0x34(%eax),%eax
   12bd0:	83 e0 01             	and    $0x1,%eax
   12bd3:	85 c0                	test   %eax,%eax
   12bd5:	74 12                	je     12be9 <do_handler_general_protection+0x45>
    {
        log_printf("the exception occurred during delivery of an "
   12bd7:	83 ec 0c             	sub    $0xc,%esp
   12bda:	68 c0 94 01 00       	push   $0x194c0
   12bdf:	e8 5c 60 00 00       	call   18c40 <log_printf>
   12be4:	83 c4 10             	add    $0x10,%esp
   12be7:	eb 10                	jmp    12bf9 <do_handler_general_protection+0x55>
                   "event external to the program, such as an interrupt"
                   "or an earlier exception.");
    }
    else
    {
        log_printf("the exception occurred during delivery of a"
   12be9:	83 ec 0c             	sub    $0xc,%esp
   12bec:	68 3c 95 01 00       	push   $0x1953c
   12bf1:	e8 4a 60 00 00       	call   18c40 <log_printf>
   12bf6:	83 c4 10             	add    $0x10,%esp
                   "software interrupt (INT n, INT3, or INTO).");
    }

    if (frame->err_code & ERR_IDT)
   12bf9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bfc:	8b 40 34             	mov    0x34(%eax),%eax
   12bff:	83 e0 02             	and    $0x2,%eax
   12c02:	85 c0                	test   %eax,%eax
   12c04:	74 12                	je     12c18 <do_handler_general_protection+0x74>
    {
        log_printf("the index portion of the error code refers "
   12c06:	83 ec 0c             	sub    $0xc,%esp
   12c09:	68 94 95 01 00       	push   $0x19594
   12c0e:	e8 2d 60 00 00       	call   18c40 <log_printf>
   12c13:	83 c4 10             	add    $0x10,%esp
   12c16:	eb 10                	jmp    12c28 <do_handler_general_protection+0x84>
                   "to a gate descriptor in the IDT");
    }
    else
    {
        log_printf("the index refers to a descriptor in the GDT");
   12c18:	83 ec 0c             	sub    $0xc,%esp
   12c1b:	68 e0 95 01 00       	push   $0x195e0
   12c20:	e8 1b 60 00 00       	call   18c40 <log_printf>
   12c25:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("segment index: %d", frame->err_code & 0xFFF8);
   12c28:	8b 45 08             	mov    0x8(%ebp),%eax
   12c2b:	8b 40 34             	mov    0x34(%eax),%eax
   12c2e:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12c33:	83 ec 08             	sub    $0x8,%esp
   12c36:	50                   	push   %eax
   12c37:	68 0c 96 01 00       	push   $0x1960c
   12c3c:	e8 ff 5f 00 00       	call   18c40 <log_printf>
   12c41:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12c44:	83 ec 0c             	sub    $0xc,%esp
   12c47:	ff 75 08             	pushl  0x8(%ebp)
   12c4a:	e8 ed fb ff ff       	call   1283c <dump_core_regs>
   12c4f:	83 c4 10             	add    $0x10,%esp

    // 用户特权下，直接退出
    if (frame->cs & 0x3)
   12c52:	8b 45 08             	mov    0x8(%ebp),%eax
   12c55:	8b 40 3c             	mov    0x3c(%eax),%eax
   12c58:	83 e0 03             	and    $0x3,%eax
   12c5b:	85 c0                	test   %eax,%eax
   12c5d:	74 14                	je     12c73 <do_handler_general_protection+0xcf>
    {
        sys_exit(frame->err_code);
   12c5f:	8b 45 08             	mov    0x8(%ebp),%eax
   12c62:	8b 40 34             	mov    0x34(%eax),%eax
   12c65:	83 ec 0c             	sub    $0xc,%esp
   12c68:	50                   	push   %eax
   12c69:	e8 64 f7 ff ff       	call   123d2 <sys_exit>
   12c6e:	83 c4 10             	add    $0x10,%esp
        while (1)
        {
            hlt();
        }
    }
}
   12c71:	eb 07                	jmp    12c7a <do_handler_general_protection+0xd6>
            hlt();
   12c73:	e8 a2 fb ff ff       	call   1281a <hlt>
   12c78:	eb f9                	jmp    12c73 <do_handler_general_protection+0xcf>
}
   12c7a:	c9                   	leave  
   12c7b:	c3                   	ret    

00012c7c <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t *frame)
{
   12c7c:	55                   	push   %ebp
   12c7d:	89 e5                	mov    %esp,%ebp
   12c7f:	83 ec 08             	sub    $0x8,%esp

    log_printf("--------------------------------");
   12c82:	83 ec 0c             	sub    $0xc,%esp
   12c85:	68 04 93 01 00       	push   $0x19304
   12c8a:	e8 b1 5f 00 00       	call   18c40 <log_printf>
   12c8f:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12c92:	83 ec 0c             	sub    $0xc,%esp
   12c95:	68 20 96 01 00       	push   $0x19620
   12c9a:	e8 a1 5f 00 00       	call   18c40 <log_printf>
   12c9f:	83 c4 10             	add    $0x10,%esp
    // do_default_handler(frame, "Page_fault Exception.");
    if (frame->err_code & ERR_PAGE_P)
   12ca2:	8b 45 08             	mov    0x8(%ebp),%eax
   12ca5:	8b 40 34             	mov    0x34(%eax),%eax
   12ca8:	83 e0 01             	and    $0x1,%eax
   12cab:	85 c0                	test   %eax,%eax
   12cad:	74 18                	je     12cc7 <do_handler_page_fault+0x4b>
    {
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12caf:	e8 55 fb ff ff       	call   12809 <read_cr2>
   12cb4:	83 ec 08             	sub    $0x8,%esp
   12cb7:	50                   	push   %eax
   12cb8:	68 44 96 01 00       	push   $0x19644
   12cbd:	e8 7e 5f 00 00       	call   18c40 <log_printf>
   12cc2:	83 c4 10             	add    $0x10,%esp
   12cc5:	eb 16                	jmp    12cdd <do_handler_page_fault+0x61>
    }
    else
    {
        log_printf("\tPage doesn't present 0x%x", read_cr2());
   12cc7:	e8 3d fb ff ff       	call   12809 <read_cr2>
   12ccc:	83 ec 08             	sub    $0x8,%esp
   12ccf:	50                   	push   %eax
   12cd0:	68 6c 96 01 00       	push   $0x1966c
   12cd5:	e8 66 5f 00 00       	call   18c40 <log_printf>
   12cda:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_WR)
   12cdd:	8b 45 08             	mov    0x8(%ebp),%eax
   12ce0:	8b 40 34             	mov    0x34(%eax),%eax
   12ce3:	83 e0 02             	and    $0x2,%eax
   12ce6:	85 c0                	test   %eax,%eax
   12ce8:	74 12                	je     12cfc <do_handler_page_fault+0x80>
    {
        log_printf("\tThe access causing the fault was a read.");
   12cea:	83 ec 0c             	sub    $0xc,%esp
   12ced:	68 88 96 01 00       	push   $0x19688
   12cf2:	e8 49 5f 00 00       	call   18c40 <log_printf>
   12cf7:	83 c4 10             	add    $0x10,%esp
   12cfa:	eb 10                	jmp    12d0c <do_handler_page_fault+0x90>
    }
    else
    {
        log_printf("\tThe access causing the fault was a write.");
   12cfc:	83 ec 0c             	sub    $0xc,%esp
   12cff:	68 b4 96 01 00       	push   $0x196b4
   12d04:	e8 37 5f 00 00       	call   18c40 <log_printf>
   12d09:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_US)
   12d0c:	8b 45 08             	mov    0x8(%ebp),%eax
   12d0f:	8b 40 34             	mov    0x34(%eax),%eax
   12d12:	83 e0 02             	and    $0x2,%eax
   12d15:	85 c0                	test   %eax,%eax
   12d17:	74 12                	je     12d2b <do_handler_page_fault+0xaf>
    {
        log_printf("\tA supervisor-mode access caused the fault.");
   12d19:	83 ec 0c             	sub    $0xc,%esp
   12d1c:	68 e0 96 01 00       	push   $0x196e0
   12d21:	e8 1a 5f 00 00       	call   18c40 <log_printf>
   12d26:	83 c4 10             	add    $0x10,%esp
   12d29:	eb 10                	jmp    12d3b <do_handler_page_fault+0xbf>
    }
    else
    {
        log_printf("\tA user-mode access caused the fault.");
   12d2b:	83 ec 0c             	sub    $0xc,%esp
   12d2e:	68 0c 97 01 00       	push   $0x1970c
   12d33:	e8 08 5f 00 00       	call   18c40 <log_printf>
   12d38:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12d3b:	83 ec 0c             	sub    $0xc,%esp
   12d3e:	ff 75 08             	pushl  0x8(%ebp)
   12d41:	e8 f6 fa ff ff       	call   1283c <dump_core_regs>
   12d46:	83 c4 10             	add    $0x10,%esp

    // 用户特权下，直接退出
    if (frame->cs & 0x3)
   12d49:	8b 45 08             	mov    0x8(%ebp),%eax
   12d4c:	8b 40 3c             	mov    0x3c(%eax),%eax
   12d4f:	83 e0 03             	and    $0x3,%eax
   12d52:	85 c0                	test   %eax,%eax
   12d54:	74 14                	je     12d6a <do_handler_page_fault+0xee>
    {
        sys_exit(frame->err_code);
   12d56:	8b 45 08             	mov    0x8(%ebp),%eax
   12d59:	8b 40 34             	mov    0x34(%eax),%eax
   12d5c:	83 ec 0c             	sub    $0xc,%esp
   12d5f:	50                   	push   %eax
   12d60:	e8 6d f6 ff ff       	call   123d2 <sys_exit>
   12d65:	83 c4 10             	add    $0x10,%esp
        while (1)
        {
            hlt();
        }
    }
}
   12d68:	eb 07                	jmp    12d71 <do_handler_page_fault+0xf5>
            hlt();
   12d6a:	e8 ab fa ff ff       	call   1281a <hlt>
   12d6f:	eb f9                	jmp    12d6a <do_handler_page_fault+0xee>
}
   12d71:	c9                   	leave  
   12d72:	c3                   	ret    

00012d73 <init_pic>:

static void init_pic(void)
{
   12d73:	55                   	push   %ebp
   12d74:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12d76:	6a 11                	push   $0x11
   12d78:	6a 20                	push   $0x20
   12d7a:	e8 35 fa ff ff       	call   127b4 <outb>
   12d7f:	83 c4 08             	add    $0x8,%esp
    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12d82:	6a 20                	push   $0x20
   12d84:	6a 21                	push   $0x21
   12d86:	e8 29 fa ff ff       	call   127b4 <outb>
   12d8b:	83 c4 08             	add    $0x8,%esp
    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   12d8e:	6a 04                	push   $0x4
   12d90:	6a 21                	push   $0x21
   12d92:	e8 1d fa ff ff       	call   127b4 <outb>
   12d97:	83 c4 08             	add    $0x8,%esp
    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12d9a:	6a 01                	push   $0x1
   12d9c:	6a 21                	push   $0x21
   12d9e:	e8 11 fa ff ff       	call   127b4 <outb>
   12da3:	83 c4 08             	add    $0x8,%esp

    // 第二块芯片
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12da6:	6a 11                	push   $0x11
   12da8:	68 a0 00 00 00       	push   $0xa0
   12dad:	e8 02 fa ff ff       	call   127b4 <outb>
   12db2:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12db5:	6a 28                	push   $0x28
   12db7:	68 a1 00 00 00       	push   $0xa1
   12dbc:	e8 f3 f9 ff ff       	call   127b4 <outb>
   12dc1:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12dc4:	6a 02                	push   $0x2
   12dc6:	68 a1 00 00 00       	push   $0xa1
   12dcb:	e8 e4 f9 ff ff       	call   127b4 <outb>
   12dd0:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12dd3:	6a 01                	push   $0x1
   12dd5:	68 a1 00 00 00       	push   $0xa1
   12dda:	e8 d5 f9 ff ff       	call   127b4 <outb>
   12ddf:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12de2:	68 fb 00 00 00       	push   $0xfb
   12de7:	6a 21                	push   $0x21
   12de9:	e8 c6 f9 ff ff       	call   127b4 <outb>
   12dee:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12df1:	68 ff 00 00 00       	push   $0xff
   12df6:	68 a1 00 00 00       	push   $0xa1
   12dfb:	e8 b4 f9 ff ff       	call   127b4 <outb>
   12e00:	83 c4 08             	add    $0x8,%esp
}
   12e03:	90                   	nop
   12e04:	c9                   	leave  
   12e05:	c3                   	ret    

00012e06 <irq_init>:

void irq_init(void)
{
   12e06:	55                   	push   %ebp
   12e07:	89 e5                	mov    %esp,%ebp
   12e09:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   12e0c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12e13:	eb 25                	jmp    12e3a <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   12e15:	ba 35 00 01 00       	mov    $0x10035,%edx
   12e1a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e1d:	c1 e0 03             	shl    $0x3,%eax
   12e20:	05 00 82 03 00       	add    $0x38200,%eax
   12e25:	68 00 8e 00 00       	push   $0x8e00
   12e2a:	52                   	push   %edx
   12e2b:	6a 08                	push   $0x8
   12e2d:	50                   	push   %eax
   12e2e:	e8 ec f8 ff ff       	call   1271f <gate_desc_set>
   12e33:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   12e36:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12e3a:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12e3e:	7e d5                	jle    12e15 <irq_init+0xf>
    }
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   12e40:	83 ec 08             	sub    $0x8,%esp
   12e43:	68 54 00 01 00       	push   $0x10054
   12e48:	6a 00                	push   $0x0
   12e4a:	e8 65 01 00 00       	call   12fb4 <irq_install>
   12e4f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   12e52:	83 ec 08             	sub    $0x8,%esp
   12e55:	68 73 00 01 00       	push   $0x10073
   12e5a:	6a 01                	push   $0x1
   12e5c:	e8 53 01 00 00       	call   12fb4 <irq_install>
   12e61:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   12e64:	83 ec 08             	sub    $0x8,%esp
   12e67:	68 92 00 01 00       	push   $0x10092
   12e6c:	6a 02                	push   $0x2
   12e6e:	e8 41 01 00 00       	call   12fb4 <irq_install>
   12e73:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   12e76:	83 ec 08             	sub    $0x8,%esp
   12e79:	68 b1 00 01 00       	push   $0x100b1
   12e7e:	6a 03                	push   $0x3
   12e80:	e8 2f 01 00 00       	call   12fb4 <irq_install>
   12e85:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   12e88:	83 ec 08             	sub    $0x8,%esp
   12e8b:	68 d0 00 01 00       	push   $0x100d0
   12e90:	6a 04                	push   $0x4
   12e92:	e8 1d 01 00 00       	call   12fb4 <irq_install>
   12e97:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   12e9a:	83 ec 08             	sub    $0x8,%esp
   12e9d:	68 ef 00 01 00       	push   $0x100ef
   12ea2:	6a 05                	push   $0x5
   12ea4:	e8 0b 01 00 00       	call   12fb4 <irq_install>
   12ea9:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   12eac:	83 ec 08             	sub    $0x8,%esp
   12eaf:	68 0e 01 01 00       	push   $0x1010e
   12eb4:	6a 06                	push   $0x6
   12eb6:	e8 f9 00 00 00       	call   12fb4 <irq_install>
   12ebb:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   12ebe:	83 ec 08             	sub    $0x8,%esp
   12ec1:	68 2d 01 01 00       	push   $0x1012d
   12ec6:	6a 07                	push   $0x7
   12ec8:	e8 e7 00 00 00       	call   12fb4 <irq_install>
   12ecd:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   12ed0:	83 ec 08             	sub    $0x8,%esp
   12ed3:	68 4c 01 01 00       	push   $0x1014c
   12ed8:	6a 08                	push   $0x8
   12eda:	e8 d5 00 00 00       	call   12fb4 <irq_install>
   12edf:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   12ee2:	83 ec 08             	sub    $0x8,%esp
   12ee5:	68 69 01 01 00       	push   $0x10169
   12eea:	6a 0a                	push   $0xa
   12eec:	e8 c3 00 00 00       	call   12fb4 <irq_install>
   12ef1:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   12ef4:	83 ec 08             	sub    $0x8,%esp
   12ef7:	68 86 01 01 00       	push   $0x10186
   12efc:	6a 0b                	push   $0xb
   12efe:	e8 b1 00 00 00       	call   12fb4 <irq_install>
   12f03:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   12f06:	83 ec 08             	sub    $0x8,%esp
   12f09:	68 a3 01 01 00       	push   $0x101a3
   12f0e:	6a 0c                	push   $0xc
   12f10:	e8 9f 00 00 00       	call   12fb4 <irq_install>
   12f15:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   12f18:	83 ec 08             	sub    $0x8,%esp
   12f1b:	68 c0 01 01 00       	push   $0x101c0
   12f20:	6a 0d                	push   $0xd
   12f22:	e8 8d 00 00 00       	call   12fb4 <irq_install>
   12f27:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   12f2a:	83 ec 08             	sub    $0x8,%esp
   12f2d:	68 dd 01 01 00       	push   $0x101dd
   12f32:	6a 0e                	push   $0xe
   12f34:	e8 7b 00 00 00       	call   12fb4 <irq_install>
   12f39:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   12f3c:	83 ec 08             	sub    $0x8,%esp
   12f3f:	68 fa 01 01 00       	push   $0x101fa
   12f44:	6a 10                	push   $0x10
   12f46:	e8 69 00 00 00       	call   12fb4 <irq_install>
   12f4b:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   12f4e:	83 ec 08             	sub    $0x8,%esp
   12f51:	68 19 02 01 00       	push   $0x10219
   12f56:	6a 11                	push   $0x11
   12f58:	e8 57 00 00 00       	call   12fb4 <irq_install>
   12f5d:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   12f60:	83 ec 08             	sub    $0x8,%esp
   12f63:	68 36 02 01 00       	push   $0x10236
   12f68:	6a 12                	push   $0x12
   12f6a:	e8 45 00 00 00       	call   12fb4 <irq_install>
   12f6f:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   12f72:	83 ec 08             	sub    $0x8,%esp
   12f75:	68 55 02 01 00       	push   $0x10255
   12f7a:	6a 13                	push   $0x13
   12f7c:	e8 33 00 00 00       	call   12fb4 <irq_install>
   12f81:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   12f84:	83 ec 08             	sub    $0x8,%esp
   12f87:	68 74 02 01 00       	push   $0x10274
   12f8c:	6a 14                	push   $0x14
   12f8e:	e8 21 00 00 00       	call   12fb4 <irq_install>
   12f93:	83 c4 10             	add    $0x10,%esp
    lidt((uint32_t)idt_table, sizeof(idt_table));
   12f96:	b8 00 82 03 00       	mov    $0x38200,%eax
   12f9b:	83 ec 08             	sub    $0x8,%esp
   12f9e:	68 00 04 00 00       	push   $0x400
   12fa3:	50                   	push   %eax
   12fa4:	e8 38 f8 ff ff       	call   127e1 <lidt>
   12fa9:	83 c4 10             	add    $0x10,%esp

    init_pic();
   12fac:	e8 c2 fd ff ff       	call   12d73 <init_pic>
}
   12fb1:	90                   	nop
   12fb2:	c9                   	leave  
   12fb3:	c3                   	ret    

00012fb4 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   12fb4:	55                   	push   %ebp
   12fb5:	89 e5                	mov    %esp,%ebp
   12fb7:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   12fba:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12fbe:	7e 07                	jle    12fc7 <irq_install+0x13>
    {
        return -1;
   12fc0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fc5:	eb 25                	jmp    12fec <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   12fc7:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fca:	8b 55 08             	mov    0x8(%ebp),%edx
   12fcd:	c1 e2 03             	shl    $0x3,%edx
   12fd0:	81 c2 00 82 03 00    	add    $0x38200,%edx
   12fd6:	68 00 8e 00 00       	push   $0x8e00
   12fdb:	50                   	push   %eax
   12fdc:	6a 08                	push   $0x8
   12fde:	52                   	push   %edx
   12fdf:	e8 3b f7 ff ff       	call   1271f <gate_desc_set>
   12fe4:	83 c4 10             	add    $0x10,%esp
    return 0;
   12fe7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12fec:	c9                   	leave  
   12fed:	c3                   	ret    

00012fee <irq_enable>:

void irq_enable(int irq_num)
{
   12fee:	55                   	push   %ebp
   12fef:	89 e5                	mov    %esp,%ebp
   12ff1:	53                   	push   %ebx
   12ff2:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12ff5:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12ff9:	7e 78                	jle    13073 <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12ffb:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12fff:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   13003:	7f 32                	jg     13037 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   13005:	6a 21                	push   $0x21
   13007:	e8 8b f7 ff ff       	call   12797 <inb>
   1300c:	83 c4 04             	add    $0x4,%esp
   1300f:	89 c2                	mov    %eax,%edx
   13011:	8b 45 08             	mov    0x8(%ebp),%eax
   13014:	bb 01 00 00 00       	mov    $0x1,%ebx
   13019:	89 c1                	mov    %eax,%ecx
   1301b:	d3 e3                	shl    %cl,%ebx
   1301d:	89 d8                	mov    %ebx,%eax
   1301f:	f7 d0                	not    %eax
   13021:	21 d0                	and    %edx,%eax
   13023:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   13026:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   1302a:	50                   	push   %eax
   1302b:	6a 21                	push   $0x21
   1302d:	e8 82 f7 ff ff       	call   127b4 <outb>
   13032:	83 c4 08             	add    $0x8,%esp
   13035:	eb 3d                	jmp    13074 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   13037:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   1303b:	68 a1 00 00 00       	push   $0xa1
   13040:	e8 52 f7 ff ff       	call   12797 <inb>
   13045:	83 c4 04             	add    $0x4,%esp
   13048:	89 c2                	mov    %eax,%edx
   1304a:	8b 45 08             	mov    0x8(%ebp),%eax
   1304d:	bb 01 00 00 00       	mov    $0x1,%ebx
   13052:	89 c1                	mov    %eax,%ecx
   13054:	d3 e3                	shl    %cl,%ebx
   13056:	89 d8                	mov    %ebx,%eax
   13058:	f7 d0                	not    %eax
   1305a:	21 d0                	and    %edx,%eax
   1305c:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   1305f:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   13063:	50                   	push   %eax
   13064:	68 a1 00 00 00       	push   $0xa1
   13069:	e8 46 f7 ff ff       	call   127b4 <outb>
   1306e:	83 c4 08             	add    $0x8,%esp
   13071:	eb 01                	jmp    13074 <irq_enable+0x86>
        return;
   13073:	90                   	nop
    }
}
   13074:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13077:	c9                   	leave  
   13078:	c3                   	ret    

00013079 <irq_disable>:

void irq_disable(int irq_num)
{
   13079:	55                   	push   %ebp
   1307a:	89 e5                	mov    %esp,%ebp
   1307c:	53                   	push   %ebx
   1307d:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   13080:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   13084:	7e 74                	jle    130fa <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   13086:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   1308a:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   1308e:	7f 30                	jg     130c0 <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   13090:	6a 21                	push   $0x21
   13092:	e8 00 f7 ff ff       	call   12797 <inb>
   13097:	83 c4 04             	add    $0x4,%esp
   1309a:	89 c3                	mov    %eax,%ebx
   1309c:	8b 45 08             	mov    0x8(%ebp),%eax
   1309f:	ba 01 00 00 00       	mov    $0x1,%edx
   130a4:	89 c1                	mov    %eax,%ecx
   130a6:	d3 e2                	shl    %cl,%edx
   130a8:	89 d0                	mov    %edx,%eax
   130aa:	09 d8                	or     %ebx,%eax
   130ac:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   130af:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   130b3:	50                   	push   %eax
   130b4:	6a 21                	push   $0x21
   130b6:	e8 f9 f6 ff ff       	call   127b4 <outb>
   130bb:	83 c4 08             	add    $0x8,%esp
   130be:	eb 3b                	jmp    130fb <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   130c0:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   130c4:	68 a1 00 00 00       	push   $0xa1
   130c9:	e8 c9 f6 ff ff       	call   12797 <inb>
   130ce:	83 c4 04             	add    $0x4,%esp
   130d1:	89 c3                	mov    %eax,%ebx
   130d3:	8b 45 08             	mov    0x8(%ebp),%eax
   130d6:	ba 01 00 00 00       	mov    $0x1,%edx
   130db:	89 c1                	mov    %eax,%ecx
   130dd:	d3 e2                	shl    %cl,%edx
   130df:	89 d0                	mov    %edx,%eax
   130e1:	09 d8                	or     %ebx,%eax
   130e3:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   130e6:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   130ea:	50                   	push   %eax
   130eb:	68 a1 00 00 00       	push   $0xa1
   130f0:	e8 bf f6 ff ff       	call   127b4 <outb>
   130f5:	83 c4 08             	add    $0x8,%esp
   130f8:	eb 01                	jmp    130fb <irq_disable+0x82>
        return;
   130fa:	90                   	nop
    }
}
   130fb:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   130fe:	c9                   	leave  
   130ff:	c3                   	ret    

00013100 <irq_disable_global>:

void irq_disable_global(void)
{
   13100:	55                   	push   %ebp
   13101:	89 e5                	mov    %esp,%ebp
    cli();
   13103:	e8 cb f6 ff ff       	call   127d3 <cli>
}
   13108:	90                   	nop
   13109:	5d                   	pop    %ebp
   1310a:	c3                   	ret    

0001310b <irq_enable_global>:

void irq_enable_global(void)
{
   1310b:	55                   	push   %ebp
   1310c:	89 e5                	mov    %esp,%ebp
    sti();
   1310e:	e8 c7 f6 ff ff       	call   127da <sti>
}
   13113:	90                   	nop
   13114:	5d                   	pop    %ebp
   13115:	c3                   	ret    

00013116 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   13116:	55                   	push   %ebp
   13117:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   13119:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    // 从片也可能需要发送EOI
    if (irq_num >= 8)
   1311d:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   13121:	7e 0f                	jle    13132 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   13123:	6a 20                	push   $0x20
   13125:	68 a0 00 00 00       	push   $0xa0
   1312a:	e8 85 f6 ff ff       	call   127b4 <outb>
   1312f:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   13132:	6a 20                	push   $0x20
   13134:	6a 20                	push   $0x20
   13136:	e8 79 f6 ff ff       	call   127b4 <outb>
   1313b:	83 c4 08             	add    $0x8,%esp
}
   1313e:	90                   	nop
   1313f:	c9                   	leave  
   13140:	c3                   	ret    

00013141 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection(void)
{
   13141:	55                   	push   %ebp
   13142:	89 e5                	mov    %esp,%ebp
   13144:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags(); // 保存之前的中断状态
   13147:	e8 d5 f6 ff ff       	call   12821 <read_eflags>
   1314c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1314f:	e8 ac ff ff ff       	call   13100 <irq_disable_global>
    return state;
   13154:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13157:	c9                   	leave  
   13158:	c3                   	ret    

00013159 <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection(irq_state_t state)
{
   13159:	55                   	push   %ebp
   1315a:	89 e5                	mov    %esp,%ebp
    write_eflags(state); // 恢复之前的中断状态
   1315c:	ff 75 08             	pushl  0x8(%ebp)
   1315f:	e8 cd f6 ff ff       	call   12831 <write_eflags>
   13164:	83 c4 04             	add    $0x4,%esp
   13167:	90                   	nop
   13168:	c9                   	leave  
   13169:	c3                   	ret    

0001316a <inb>:
{
   1316a:	55                   	push   %ebp
   1316b:	89 e5                	mov    %esp,%ebp
   1316d:	83 ec 14             	sub    $0x14,%esp
   13170:	8b 45 08             	mov    0x8(%ebp),%eax
   13173:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   13177:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1317b:	89 c2                	mov    %eax,%edx
   1317d:	ec                   	in     (%dx),%al
   1317e:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   13181:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13185:	c9                   	leave  
   13186:	c3                   	ret    

00013187 <outb>:
{
   13187:	55                   	push   %ebp
   13188:	89 e5                	mov    %esp,%ebp
   1318a:	83 ec 08             	sub    $0x8,%esp
   1318d:	8b 55 08             	mov    0x8(%ebp),%edx
   13190:	8b 45 0c             	mov    0xc(%ebp),%eax
   13193:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13197:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   1319a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1319e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   131a2:	ee                   	out    %al,(%dx)
}
   131a3:	90                   	nop
   131a4:	c9                   	leave  
   131a5:	c3                   	ret    

000131a6 <read_cursor_pos>:
/**
 * @brief 读取当前光标的位置
 */
static int
read_cursor_pos(void)
{
   131a6:	55                   	push   %ebp
   131a7:	89 e5                	mov    %esp,%ebp
   131a9:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   131ac:	e8 90 ff ff ff       	call   13141 <irq_enter_protection>
   131b1:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   131b4:	83 ec 08             	sub    $0x8,%esp
   131b7:	6a 0f                	push   $0xf
   131b9:	68 d4 03 00 00       	push   $0x3d4
   131be:	e8 c4 ff ff ff       	call   13187 <outb>
   131c3:	83 c4 10             	add    $0x10,%esp
    pos = inb(0x3D5);
   131c6:	83 ec 0c             	sub    $0xc,%esp
   131c9:	68 d5 03 00 00       	push   $0x3d5
   131ce:	e8 97 ff ff ff       	call   1316a <inb>
   131d3:	83 c4 10             	add    $0x10,%esp
   131d6:	0f b6 c0             	movzbl %al,%eax
   131d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0E); // 写高地址
   131dc:	83 ec 08             	sub    $0x8,%esp
   131df:	6a 0e                	push   $0xe
   131e1:	68 d4 03 00 00       	push   $0x3d4
   131e6:	e8 9c ff ff ff       	call   13187 <outb>
   131eb:	83 c4 10             	add    $0x10,%esp
    pos |= inb(0x3D5) << 8;
   131ee:	83 ec 0c             	sub    $0xc,%esp
   131f1:	68 d5 03 00 00       	push   $0x3d5
   131f6:	e8 6f ff ff ff       	call   1316a <inb>
   131fb:	83 c4 10             	add    $0x10,%esp
   131fe:	0f b6 c0             	movzbl %al,%eax
   13201:	c1 e0 08             	shl    $0x8,%eax
   13204:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   13207:	83 ec 0c             	sub    $0xc,%esp
   1320a:	ff 75 f4             	pushl  -0xc(%ebp)
   1320d:	e8 47 ff ff ff       	call   13159 <irq_leave_protection>
   13212:	83 c4 10             	add    $0x10,%esp
    return pos;
   13215:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   13218:	c9                   	leave  
   13219:	c3                   	ret    

0001321a <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos(console_t *console)
{
   1321a:	55                   	push   %ebp
   1321b:	89 e5                	mov    %esp,%ebp
   1321d:	83 ec 18             	sub    $0x18,%esp
    uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   13220:	8b 45 08             	mov    0x8(%ebp),%eax
   13223:	ba 00 86 03 00       	mov    $0x38600,%edx
   13228:	29 d0                	sub    %edx,%eax
   1322a:	c1 f8 03             	sar    $0x3,%eax
   1322d:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   13233:	89 c2                	mov    %eax,%edx
   13235:	8b 45 08             	mov    0x8(%ebp),%eax
   13238:	8b 40 14             	mov    0x14(%eax),%eax
   1323b:	89 c1                	mov    %eax,%ecx
   1323d:	8b 45 08             	mov    0x8(%ebp),%eax
   13240:	8b 40 10             	mov    0x10(%eax),%eax
   13243:	0f af c1             	imul   %ecx,%eax
   13246:	0f af c2             	imul   %edx,%eax
   13249:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row * console->display_cols + console->cursor_col;
   1324d:	8b 45 08             	mov    0x8(%ebp),%eax
   13250:	8b 40 08             	mov    0x8(%eax),%eax
   13253:	89 c2                	mov    %eax,%edx
   13255:	8b 45 08             	mov    0x8(%ebp),%eax
   13258:	8b 40 14             	mov    0x14(%eax),%eax
   1325b:	0f af d0             	imul   %eax,%edx
   1325e:	8b 45 08             	mov    0x8(%ebp),%eax
   13261:	8b 40 0c             	mov    0xc(%eax),%eax
   13264:	01 d0                	add    %edx,%eax
   13266:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   1326a:	e8 d2 fe ff ff       	call   13141 <irq_enter_protection>
   1326f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   13272:	83 ec 08             	sub    $0x8,%esp
   13275:	6a 0f                	push   $0xf
   13277:	68 d4 03 00 00       	push   $0x3d4
   1327c:	e8 06 ff ff ff       	call   13187 <outb>
   13281:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)(pos & 0xFF));
   13284:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13288:	0f b6 c0             	movzbl %al,%eax
   1328b:	83 ec 08             	sub    $0x8,%esp
   1328e:	50                   	push   %eax
   1328f:	68 d5 03 00 00       	push   $0x3d5
   13294:	e8 ee fe ff ff       	call   13187 <outb>
   13299:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 0x0E); // 写高地址
   1329c:	83 ec 08             	sub    $0x8,%esp
   1329f:	6a 0e                	push   $0xe
   132a1:	68 d4 03 00 00       	push   $0x3d4
   132a6:	e8 dc fe ff ff       	call   13187 <outb>
   132ab:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
   132ae:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   132b2:	66 c1 e8 08          	shr    $0x8,%ax
   132b6:	0f b6 c0             	movzbl %al,%eax
   132b9:	83 ec 08             	sub    $0x8,%esp
   132bc:	50                   	push   %eax
   132bd:	68 d5 03 00 00       	push   $0x3d5
   132c2:	e8 c0 fe ff ff       	call   13187 <outb>
   132c7:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   132ca:	83 ec 0c             	sub    $0xc,%esp
   132cd:	ff 75 f0             	pushl  -0x10(%ebp)
   132d0:	e8 84 fe ff ff       	call   13159 <irq_leave_protection>
   132d5:	83 c4 10             	add    $0x10,%esp
}
   132d8:	90                   	nop
   132d9:	c9                   	leave  
   132da:	c3                   	ret    

000132db <clear_display>:

static void clear_display(console_t *console)
{
   132db:	55                   	push   %ebp
   132dc:	89 e5                	mov    %esp,%ebp
   132de:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   132e1:	8b 45 08             	mov    0x8(%ebp),%eax
   132e4:	8b 50 14             	mov    0x14(%eax),%edx
   132e7:	8b 45 08             	mov    0x8(%ebp),%eax
   132ea:	8b 40 10             	mov    0x10(%eax),%eax
   132ed:	0f af c2             	imul   %edx,%eax
   132f0:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t *start = console->disp_base;
   132f3:	8b 45 08             	mov    0x8(%ebp),%eax
   132f6:	8b 00                	mov    (%eax),%eax
   132f8:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++)
   132fb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13302:	eb 51                	jmp    13355 <clear_display+0x7a>
    {
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   13304:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13307:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   1330a:	8b 45 08             	mov    0x8(%ebp),%eax
   1330d:	8b 40 24             	mov    0x24(%eax),%eax
   13310:	c1 e0 05             	shl    $0x5,%eax
   13313:	c0 f8 05             	sar    $0x5,%al
   13316:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13319:	83 e0 07             	and    $0x7,%eax
   1331c:	c1 e0 04             	shl    $0x4,%eax
   1331f:	89 c1                	mov    %eax,%ecx
   13321:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13325:	83 e0 8f             	and    $0xffffff8f,%eax
   13328:	09 c8                	or     %ecx,%eax
   1332a:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   1332d:	8b 45 08             	mov    0x8(%ebp),%eax
   13330:	8b 40 20             	mov    0x20(%eax),%eax
   13333:	c1 e0 04             	shl    $0x4,%eax
   13336:	c0 f8 04             	sar    $0x4,%al
   13339:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1333c:	83 e0 0f             	and    $0xf,%eax
   1333f:	89 c1                	mov    %eax,%ecx
   13341:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13345:	83 e0 f0             	and    $0xfffffff0,%eax
   13348:	09 c8                	or     %ecx,%eax
   1334a:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++)
   1334d:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13351:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   13355:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13358:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   1335b:	7c a7                	jl     13304 <clear_display+0x29>
    }
}
   1335d:	90                   	nop
   1335e:	c9                   	leave  
   1335f:	c3                   	ret    

00013360 <erase_rows>:

/**
 * @brief 擦除从start到end的行
 */
static void erase_rows(console_t *console, int start, int end)
{
   13360:	55                   	push   %ebp
   13361:	89 e5                	mov    %esp,%ebp
   13363:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   13366:	8b 45 08             	mov    0x8(%ebp),%eax
   13369:	8b 10                	mov    (%eax),%edx
   1336b:	8b 45 08             	mov    0x8(%ebp),%eax
   1336e:	8b 40 14             	mov    0x14(%eax),%eax
   13371:	0f af 45 0c          	imul   0xc(%ebp),%eax
   13375:	01 c0                	add    %eax,%eax
   13377:	01 d0                	add    %edx,%eax
   13379:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t *disp_end = console->disp_base + console->display_cols * (end + 1);
   1337c:	8b 45 08             	mov    0x8(%ebp),%eax
   1337f:	8b 10                	mov    (%eax),%edx
   13381:	8b 45 08             	mov    0x8(%ebp),%eax
   13384:	8b 40 14             	mov    0x14(%eax),%eax
   13387:	8b 4d 10             	mov    0x10(%ebp),%ecx
   1338a:	83 c1 01             	add    $0x1,%ecx
   1338d:	0f af c1             	imul   %ecx,%eax
   13390:	01 c0                	add    %eax,%eax
   13392:	01 d0                	add    %edx,%eax
   13394:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end)
   13397:	eb 4d                	jmp    133e6 <erase_rows+0x86>
    {
        disp_start->c = ' ';
   13399:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1339c:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   1339f:	8b 45 08             	mov    0x8(%ebp),%eax
   133a2:	8b 40 20             	mov    0x20(%eax),%eax
   133a5:	c1 e0 04             	shl    $0x4,%eax
   133a8:	c0 f8 04             	sar    $0x4,%al
   133ab:	8b 55 fc             	mov    -0x4(%ebp),%edx
   133ae:	83 e0 0f             	and    $0xf,%eax
   133b1:	89 c1                	mov    %eax,%ecx
   133b3:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   133b7:	83 e0 f0             	and    $0xfffffff0,%eax
   133ba:	09 c8                	or     %ecx,%eax
   133bc:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   133bf:	8b 45 08             	mov    0x8(%ebp),%eax
   133c2:	8b 40 24             	mov    0x24(%eax),%eax
   133c5:	c1 e0 05             	shl    $0x5,%eax
   133c8:	c0 f8 05             	sar    $0x5,%al
   133cb:	8b 55 fc             	mov    -0x4(%ebp),%edx
   133ce:	83 e0 07             	and    $0x7,%eax
   133d1:	c1 e0 04             	shl    $0x4,%eax
   133d4:	89 c1                	mov    %eax,%ecx
   133d6:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   133da:	83 e0 8f             	and    $0xffffff8f,%eax
   133dd:	09 c8                	or     %ecx,%eax
   133df:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   133e2:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end)
   133e6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   133e9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   133ec:	72 ab                	jb     13399 <erase_rows+0x39>
    }
}
   133ee:	90                   	nop
   133ef:	c9                   	leave  
   133f0:	c3                   	ret    

000133f1 <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t *console, int lines)
{
   133f1:	55                   	push   %ebp
   133f2:	89 e5                	mov    %esp,%ebp
   133f4:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t *dest = console->disp_base;
   133f7:	8b 45 08             	mov    0x8(%ebp),%eax
   133fa:	8b 00                	mov    (%eax),%eax
   133fc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *src = console->disp_base + console->display_cols * lines;
   133ff:	8b 45 08             	mov    0x8(%ebp),%eax
   13402:	8b 10                	mov    (%eax),%edx
   13404:	8b 45 08             	mov    0x8(%ebp),%eax
   13407:	8b 40 14             	mov    0x14(%eax),%eax
   1340a:	0f af 45 0c          	imul   0xc(%ebp),%eax
   1340e:	01 c0                	add    %eax,%eax
   13410:	01 d0                	add    %edx,%eax
   13412:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   13415:	8b 45 08             	mov    0x8(%ebp),%eax
   13418:	8b 40 10             	mov    0x10(%eax),%eax
   1341b:	2b 45 0c             	sub    0xc(%ebp),%eax
   1341e:	89 c2                	mov    %eax,%edx
   13420:	8b 45 08             	mov    0x8(%ebp),%eax
   13423:	8b 40 14             	mov    0x14(%eax),%eax
   13426:	0f af c2             	imul   %edx,%eax
   13429:	01 c0                	add    %eax,%eax
   1342b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   1342e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13431:	83 ec 04             	sub    $0x4,%esp
   13434:	50                   	push   %eax
   13435:	ff 75 f0             	pushl  -0x10(%ebp)
   13438:	ff 75 f4             	pushl  -0xc(%ebp)
   1343b:	e8 97 51 00 00       	call   185d7 <kernel_memcpy>
   13440:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   13443:	8b 45 08             	mov    0x8(%ebp),%eax
   13446:	8b 40 10             	mov    0x10(%eax),%eax
   13449:	8d 50 ff             	lea    -0x1(%eax),%edx
   1344c:	8b 45 08             	mov    0x8(%ebp),%eax
   1344f:	8b 40 10             	mov    0x10(%eax),%eax
   13452:	2b 45 0c             	sub    0xc(%ebp),%eax
   13455:	83 ec 04             	sub    $0x4,%esp
   13458:	52                   	push   %edx
   13459:	50                   	push   %eax
   1345a:	ff 75 08             	pushl  0x8(%ebp)
   1345d:	e8 fe fe ff ff       	call   13360 <erase_rows>
   13462:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   13465:	8b 45 08             	mov    0x8(%ebp),%eax
   13468:	8b 40 08             	mov    0x8(%eax),%eax
   1346b:	2b 45 0c             	sub    0xc(%ebp),%eax
   1346e:	89 c2                	mov    %eax,%edx
   13470:	8b 45 08             	mov    0x8(%ebp),%eax
   13473:	89 50 08             	mov    %edx,0x8(%eax)
}
   13476:	90                   	nop
   13477:	c9                   	leave  
   13478:	c3                   	ret    

00013479 <move_to_col0>:

static void move_to_col0(console_t *console)
{
   13479:	55                   	push   %ebp
   1347a:	89 e5                	mov    %esp,%ebp
    console->cursor_col = 0;
   1347c:	8b 45 08             	mov    0x8(%ebp),%eax
   1347f:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   13486:	90                   	nop
   13487:	5d                   	pop    %ebp
   13488:	c3                   	ret    

00013489 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line(console_t *console)
{
   13489:	55                   	push   %ebp
   1348a:	89 e5                	mov    %esp,%ebp
   1348c:	83 ec 08             	sub    $0x8,%esp
    console->cursor_row++;
   1348f:	8b 45 08             	mov    0x8(%ebp),%eax
   13492:	8b 40 08             	mov    0x8(%eax),%eax
   13495:	8d 50 01             	lea    0x1(%eax),%edx
   13498:	8b 45 08             	mov    0x8(%ebp),%eax
   1349b:	89 50 08             	mov    %edx,0x8(%eax)

    // 超出当前屏幕显示的所有行，上移一行
    if (console->cursor_row >= console->display_rows)
   1349e:	8b 45 08             	mov    0x8(%ebp),%eax
   134a1:	8b 50 08             	mov    0x8(%eax),%edx
   134a4:	8b 45 08             	mov    0x8(%ebp),%eax
   134a7:	8b 40 10             	mov    0x10(%eax),%eax
   134aa:	39 c2                	cmp    %eax,%edx
   134ac:	7c 10                	jl     134be <move_next_line+0x35>
    {
        scroll_up(console, 1);
   134ae:	83 ec 08             	sub    $0x8,%esp
   134b1:	6a 01                	push   $0x1
   134b3:	ff 75 08             	pushl  0x8(%ebp)
   134b6:	e8 36 ff ff ff       	call   133f1 <scroll_up>
   134bb:	83 c4 10             	add    $0x10,%esp
    }
}
   134be:	90                   	nop
   134bf:	c9                   	leave  
   134c0:	c3                   	ret    

000134c1 <move_forward>:

/**
 * 将光标往前移n个字符
 */
static void move_forward(console_t *console, int n)
{
   134c1:	55                   	push   %ebp
   134c2:	89 e5                	mov    %esp,%ebp
   134c4:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < n; i++)
   134c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   134ce:	eb 5c                	jmp    1352c <move_forward+0x6b>
    {
        // 超过最后一列需要换行
        if (++console->cursor_col >= console->display_cols)
   134d0:	8b 45 08             	mov    0x8(%ebp),%eax
   134d3:	8b 40 0c             	mov    0xc(%eax),%eax
   134d6:	8d 50 01             	lea    0x1(%eax),%edx
   134d9:	8b 45 08             	mov    0x8(%ebp),%eax
   134dc:	89 50 0c             	mov    %edx,0xc(%eax)
   134df:	8b 45 08             	mov    0x8(%ebp),%eax
   134e2:	8b 50 0c             	mov    0xc(%eax),%edx
   134e5:	8b 45 08             	mov    0x8(%ebp),%eax
   134e8:	8b 40 14             	mov    0x14(%eax),%eax
   134eb:	39 c2                	cmp    %eax,%edx
   134ed:	7c 39                	jl     13528 <move_forward+0x67>
        {
            console->cursor_col = 0;
   134ef:	8b 45 08             	mov    0x8(%ebp),%eax
   134f2:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   134f9:	8b 45 08             	mov    0x8(%ebp),%eax
   134fc:	8b 40 08             	mov    0x8(%eax),%eax
   134ff:	8d 50 01             	lea    0x1(%eax),%edx
   13502:	8b 45 08             	mov    0x8(%ebp),%eax
   13505:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows)
   13508:	8b 45 08             	mov    0x8(%ebp),%eax
   1350b:	8b 50 08             	mov    0x8(%eax),%edx
   1350e:	8b 45 08             	mov    0x8(%ebp),%eax
   13511:	8b 40 10             	mov    0x10(%eax),%eax
   13514:	39 c2                	cmp    %eax,%edx
   13516:	7c 10                	jl     13528 <move_forward+0x67>
            {
                // 超出末端，上移
                scroll_up(console, 1);
   13518:	83 ec 08             	sub    $0x8,%esp
   1351b:	6a 01                	push   $0x1
   1351d:	ff 75 08             	pushl  0x8(%ebp)
   13520:	e8 cc fe ff ff       	call   133f1 <scroll_up>
   13525:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < n; i++)
   13528:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1352c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1352f:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13532:	7c 9c                	jl     134d0 <move_forward+0xf>
            }
        }
    }
}
   13534:	90                   	nop
   13535:	c9                   	leave  
   13536:	c3                   	ret    

00013537 <show_char>:

static void show_char(console_t *console, char c)
{
   13537:	55                   	push   %ebp
   13538:	89 e5                	mov    %esp,%ebp
   1353a:	83 ec 28             	sub    $0x28,%esp
   1353d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13540:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   13543:	8b 45 08             	mov    0x8(%ebp),%eax
   13546:	8b 50 0c             	mov    0xc(%eax),%edx
   13549:	8b 45 08             	mov    0x8(%ebp),%eax
   1354c:	8b 48 08             	mov    0x8(%eax),%ecx
   1354f:	8b 45 08             	mov    0x8(%ebp),%eax
   13552:	8b 40 14             	mov    0x14(%eax),%eax
   13555:	0f af c1             	imul   %ecx,%eax
   13558:	01 d0                	add    %edx,%eax
   1355a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *p = console->disp_base + offset;
   1355d:	8b 45 08             	mov    0x8(%ebp),%eax
   13560:	8b 00                	mov    (%eax),%eax
   13562:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13565:	01 d2                	add    %edx,%edx
   13567:	01 d0                	add    %edx,%eax
   13569:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   1356c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1356f:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   13573:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   13575:	8b 45 08             	mov    0x8(%ebp),%eax
   13578:	8b 40 20             	mov    0x20(%eax),%eax
   1357b:	c1 e0 04             	shl    $0x4,%eax
   1357e:	c0 f8 04             	sar    $0x4,%al
   13581:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13584:	83 e0 0f             	and    $0xf,%eax
   13587:	89 c1                	mov    %eax,%ecx
   13589:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1358d:	83 e0 f0             	and    $0xfffffff0,%eax
   13590:	09 c8                	or     %ecx,%eax
   13592:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   13595:	8b 45 08             	mov    0x8(%ebp),%eax
   13598:	8b 40 24             	mov    0x24(%eax),%eax
   1359b:	c1 e0 05             	shl    $0x5,%eax
   1359e:	c0 f8 05             	sar    $0x5,%al
   135a1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   135a4:	83 e0 07             	and    $0x7,%eax
   135a7:	c1 e0 04             	shl    $0x4,%eax
   135aa:	89 c1                	mov    %eax,%ecx
   135ac:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   135b0:	83 e0 8f             	and    $0xffffff8f,%eax
   135b3:	09 c8                	or     %ecx,%eax
   135b5:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   135b8:	83 ec 08             	sub    $0x8,%esp
   135bb:	6a 01                	push   $0x1
   135bd:	ff 75 08             	pushl  0x8(%ebp)
   135c0:	e8 fc fe ff ff       	call   134c1 <move_forward>
   135c5:	83 c4 10             	add    $0x10,%esp
}
   135c8:	90                   	nop
   135c9:	c9                   	leave  
   135ca:	c3                   	ret    

000135cb <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t *console)
{
   135cb:	55                   	push   %ebp
   135cc:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   135ce:	8b 45 08             	mov    0x8(%ebp),%eax
   135d1:	8b 50 0c             	mov    0xc(%eax),%edx
   135d4:	8b 45 08             	mov    0x8(%ebp),%eax
   135d7:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   135da:	8b 45 08             	mov    0x8(%ebp),%eax
   135dd:	8b 50 08             	mov    0x8(%eax),%edx
   135e0:	8b 45 08             	mov    0x8(%ebp),%eax
   135e3:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   135e6:	90                   	nop
   135e7:	5d                   	pop    %ebp
   135e8:	c3                   	ret    

000135e9 <restore_cursor>:

void restore_cursor(console_t *console)
{
   135e9:	55                   	push   %ebp
   135ea:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   135ec:	8b 45 08             	mov    0x8(%ebp),%eax
   135ef:	8b 50 18             	mov    0x18(%eax),%edx
   135f2:	8b 45 08             	mov    0x8(%ebp),%eax
   135f5:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   135f8:	8b 45 08             	mov    0x8(%ebp),%eax
   135fb:	8b 50 1c             	mov    0x1c(%eax),%edx
   135fe:	8b 45 08             	mov    0x8(%ebp),%eax
   13601:	89 50 08             	mov    %edx,0x8(%eax)
}
   13604:	90                   	nop
   13605:	5d                   	pop    %ebp
   13606:	c3                   	ret    

00013607 <console_init>:

/**
 * 初始化控制台及键盘
 */
int console_init(int idx)
{
   13607:	55                   	push   %ebp
   13608:	89 e5                	mov    %esp,%ebp
   1360a:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   1360d:	8b 45 08             	mov    0x8(%ebp),%eax
   13610:	6b c0 68             	imul   $0x68,%eax,%eax
   13613:	05 00 86 03 00       	add    $0x38600,%eax
   13618:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   1361b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1361e:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   13625:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13628:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *)CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   1362f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13632:	8b 40 14             	mov    0x14(%eax),%eax
   13635:	0f af 45 08          	imul   0x8(%ebp),%eax
   13639:	89 c2                	mov    %eax,%edx
   1363b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1363e:	8b 40 10             	mov    0x10(%eax),%eax
   13641:	0f af c2             	imul   %edx,%eax
   13644:	01 c0                	add    %eax,%eax
   13646:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   1364c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1364f:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   13651:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13654:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   1365b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1365e:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0)
   13665:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13669:	75 30                	jne    1369b <console_init+0x94>
    {
        int cursor_pos = read_cursor_pos();
   1366b:	e8 36 fb ff ff       	call   131a6 <read_cursor_pos>
   13670:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   13673:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13676:	8b 48 14             	mov    0x14(%eax),%ecx
   13679:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1367c:	99                   	cltd   
   1367d:	f7 f9                	idiv   %ecx
   1367f:	89 c2                	mov    %eax,%edx
   13681:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13684:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   13687:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1368a:	8b 48 14             	mov    0x14(%eax),%ecx
   1368d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13690:	99                   	cltd   
   13691:	f7 f9                	idiv   %ecx
   13693:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13696:	89 50 0c             	mov    %edx,0xc(%eax)
   13699:	eb 22                	jmp    136bd <console_init+0xb6>
    }
    else
    {
        console->cursor_row = 0;
   1369b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1369e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   136a5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136a8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   136af:	83 ec 0c             	sub    $0xc,%esp
   136b2:	ff 75 f4             	pushl  -0xc(%ebp)
   136b5:	e8 21 fc ff ff       	call   132db <clear_display>
   136ba:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   136bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136c0:	8b 50 08             	mov    0x8(%eax),%edx
   136c3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136c6:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   136c9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136cc:	8b 50 0c             	mov    0xc(%eax),%edx
   136cf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136d2:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   136d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   136d8:	83 c0 54             	add    $0x54,%eax
   136db:	83 ec 0c             	sub    $0xc,%esp
   136de:	50                   	push   %eax
   136df:	e8 74 48 00 00       	call   17f58 <mutex_init>
   136e4:	83 c4 10             	add    $0x10,%esp
    return 0;
   136e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   136ec:	c9                   	leave  
   136ed:	c3                   	ret    

000136ee <move_backword>:
/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword(console_t *console, int n)
{
   136ee:	55                   	push   %ebp
   136ef:	89 e5                	mov    %esp,%ebp
   136f1:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   136f4:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++)
   136fb:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13702:	eb 55                	jmp    13759 <move_backword+0x6b>
    {
        if (console->cursor_col > 0)
   13704:	8b 45 08             	mov    0x8(%ebp),%eax
   13707:	8b 40 0c             	mov    0xc(%eax),%eax
   1370a:	85 c0                	test   %eax,%eax
   1370c:	7e 18                	jle    13726 <move_backword+0x38>
        {
            // 非列超始处,可回退
            console->cursor_col--;
   1370e:	8b 45 08             	mov    0x8(%ebp),%eax
   13711:	8b 40 0c             	mov    0xc(%eax),%eax
   13714:	8d 50 ff             	lea    -0x1(%eax),%edx
   13717:	8b 45 08             	mov    0x8(%ebp),%eax
   1371a:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   1371d:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13724:	eb 2f                	jmp    13755 <move_backword+0x67>
        }
        else if (console->cursor_row > 0)
   13726:	8b 45 08             	mov    0x8(%ebp),%eax
   13729:	8b 40 08             	mov    0x8(%eax),%eax
   1372c:	85 c0                	test   %eax,%eax
   1372e:	7e 25                	jle    13755 <move_backword+0x67>
        {
            // 列起始处，但非首行，可回退
            console->cursor_row--;
   13730:	8b 45 08             	mov    0x8(%ebp),%eax
   13733:	8b 40 08             	mov    0x8(%eax),%eax
   13736:	8d 50 ff             	lea    -0x1(%eax),%edx
   13739:	8b 45 08             	mov    0x8(%ebp),%eax
   1373c:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   1373f:	8b 45 08             	mov    0x8(%ebp),%eax
   13742:	8b 40 14             	mov    0x14(%eax),%eax
   13745:	8d 50 ff             	lea    -0x1(%eax),%edx
   13748:	8b 45 08             	mov    0x8(%ebp),%eax
   1374b:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   1374e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++)
   13755:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13759:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1375c:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1375f:	7c a3                	jl     13704 <move_backword+0x16>
        }
    }

    return status;
   13761:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13764:	c9                   	leave  
   13765:	c3                   	ret    

00013766 <erase_backword>:
/**
 * 擦除左边一个字符 光标左移一个，输出空格，再左移一个
 * @param console
 */
static void erase_backword(console_t *console)
{
   13766:	55                   	push   %ebp
   13767:	89 e5                	mov    %esp,%ebp
   13769:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0)
   1376c:	6a 01                	push   $0x1
   1376e:	ff 75 08             	pushl  0x8(%ebp)
   13771:	e8 78 ff ff ff       	call   136ee <move_backword>
   13776:	83 c4 08             	add    $0x8,%esp
   13779:	85 c0                	test   %eax,%eax
   1377b:	75 20                	jne    1379d <erase_backword+0x37>
    {
        show_char(console, ' ');
   1377d:	83 ec 08             	sub    $0x8,%esp
   13780:	6a 20                	push   $0x20
   13782:	ff 75 08             	pushl  0x8(%ebp)
   13785:	e8 ad fd ff ff       	call   13537 <show_char>
   1378a:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   1378d:	83 ec 08             	sub    $0x8,%esp
   13790:	6a 01                	push   $0x1
   13792:	ff 75 08             	pushl  0x8(%ebp)
   13795:	e8 54 ff ff ff       	call   136ee <move_backword>
   1379a:	83 c4 10             	add    $0x10,%esp
    }
}
   1379d:	90                   	nop
   1379e:	c9                   	leave  
   1379f:	c3                   	ret    

000137a0 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t *console)
{
   137a0:	55                   	push   %ebp
   137a1:	89 e5                	mov    %esp,%ebp
   137a3:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   137a6:	8b 45 08             	mov    0x8(%ebp),%eax
   137a9:	8b 40 0c             	mov    0xc(%eax),%eax
   137ac:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8; // 下一显示位置
   137af:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137b2:	83 c0 07             	add    $0x7,%eax
   137b5:	8d 50 07             	lea    0x7(%eax),%edx
   137b8:	85 c0                	test   %eax,%eax
   137ba:	0f 48 c2             	cmovs  %edx,%eax
   137bd:	c1 f8 03             	sar    $0x3,%eax
   137c0:	c1 e0 03             	shl    $0x3,%eax
   137c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols)
   137c6:	8b 45 08             	mov    0x8(%ebp),%eax
   137c9:	8b 40 14             	mov    0x14(%eax),%eax
   137cc:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   137cf:	7c 36                	jl     13807 <move_next_tab+0x67>
    {
        col = 0;
   137d1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   137d8:	8b 45 08             	mov    0x8(%ebp),%eax
   137db:	8b 40 08             	mov    0x8(%eax),%eax
   137de:	8d 50 01             	lea    0x1(%eax),%edx
   137e1:	8b 45 08             	mov    0x8(%ebp),%eax
   137e4:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows)
   137e7:	8b 45 08             	mov    0x8(%ebp),%eax
   137ea:	8b 50 08             	mov    0x8(%eax),%edx
   137ed:	8b 45 08             	mov    0x8(%ebp),%eax
   137f0:	8b 40 10             	mov    0x10(%eax),%eax
   137f3:	39 c2                	cmp    %eax,%edx
   137f5:	7c 10                	jl     13807 <move_next_tab+0x67>
        {
            // 超出末端，上移
            scroll_up(console, 1);
   137f7:	83 ec 08             	sub    $0x8,%esp
   137fa:	6a 01                	push   $0x1
   137fc:	ff 75 08             	pushl  0x8(%ebp)
   137ff:	e8 ed fb ff ff       	call   133f1 <scroll_up>
   13804:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   13807:	8b 45 08             	mov    0x8(%ebp),%eax
   1380a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1380d:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13810:	90                   	nop
   13811:	c9                   	leave  
   13812:	c3                   	ret    

00013813 <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal(console_t *console, char c)
{
   13813:	55                   	push   %ebp
   13814:	89 e5                	mov    %esp,%ebp
   13816:	83 ec 18             	sub    $0x18,%esp
   13819:	8b 45 0c             	mov    0xc(%ebp),%eax
   1381c:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c)
   1381f:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13823:	83 f8 0a             	cmp    $0xa,%eax
   13826:	74 70                	je     13898 <write_normal+0x85>
   13828:	83 f8 0a             	cmp    $0xa,%eax
   1382b:	7f 0c                	jg     13839 <write_normal+0x26>
   1382d:	83 f8 08             	cmp    $0x8,%eax
   13830:	74 34                	je     13866 <write_normal+0x53>
   13832:	83 f8 09             	cmp    $0x9,%eax
   13835:	74 41                	je     13878 <write_normal+0x65>
   13837:	eb 6f                	jmp    138a8 <write_normal+0x95>
   13839:	83 f8 1b             	cmp    $0x1b,%eax
   1383c:	74 0c                	je     1384a <write_normal+0x37>
   1383e:	83 f8 7f             	cmp    $0x7f,%eax
   13841:	74 13                	je     13856 <write_normal+0x43>
   13843:	83 f8 0d             	cmp    $0xd,%eax
   13846:	74 40                	je     13888 <write_normal+0x75>
   13848:	eb 5e                	jmp    138a8 <write_normal+0x95>
    {
    case ASCII_ESC:
        console->write_state = CONSOLE_WRITE_ESC;
   1384a:	8b 45 08             	mov    0x8(%ebp),%eax
   1384d:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        break;
   13854:	eb 72                	jmp    138c8 <write_normal+0xb5>
    case 0x7F:
        erase_backword(console);
   13856:	83 ec 0c             	sub    $0xc,%esp
   13859:	ff 75 08             	pushl  0x8(%ebp)
   1385c:	e8 05 ff ff ff       	call   13766 <erase_backword>
   13861:	83 c4 10             	add    $0x10,%esp
        break;
   13864:	eb 62                	jmp    138c8 <write_normal+0xb5>
    case '\b': // 左移一个字符
        move_backword(console, 1);
   13866:	83 ec 08             	sub    $0x8,%esp
   13869:	6a 01                	push   $0x1
   1386b:	ff 75 08             	pushl  0x8(%ebp)
   1386e:	e8 7b fe ff ff       	call   136ee <move_backword>
   13873:	83 c4 10             	add    $0x10,%esp
        break;
   13876:	eb 50                	jmp    138c8 <write_normal+0xb5>
        // 换行处理
    case '\t': // 对齐的下一制表符
        move_next_tab(console);
   13878:	83 ec 0c             	sub    $0xc,%esp
   1387b:	ff 75 08             	pushl  0x8(%ebp)
   1387e:	e8 1d ff ff ff       	call   137a0 <move_next_tab>
   13883:	83 c4 10             	add    $0x10,%esp
        break;
   13886:	eb 40                	jmp    138c8 <write_normal+0xb5>
    case '\r':
        move_to_col0(console);
   13888:	83 ec 0c             	sub    $0xc,%esp
   1388b:	ff 75 08             	pushl  0x8(%ebp)
   1388e:	e8 e6 fb ff ff       	call   13479 <move_to_col0>
   13893:	83 c4 10             	add    $0x10,%esp
        break;
   13896:	eb 30                	jmp    138c8 <write_normal+0xb5>
    case '\n': // 暂时这样处理
        // move_to_col0(console);
        move_next_line(console);
   13898:	83 ec 0c             	sub    $0xc,%esp
   1389b:	ff 75 08             	pushl  0x8(%ebp)
   1389e:	e8 e6 fb ff ff       	call   13489 <move_next_line>
   138a3:	83 c4 10             	add    $0x10,%esp
        break;
   138a6:	eb 20                	jmp    138c8 <write_normal+0xb5>
        // 普通字符显示
    default:
    {
        if ((c >= ' ') && (c <= '~'))
   138a8:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   138ac:	7e 19                	jle    138c7 <write_normal+0xb4>
   138ae:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   138b2:	74 13                	je     138c7 <write_normal+0xb4>
        {
            show_char(console, c);
   138b4:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   138b8:	83 ec 08             	sub    $0x8,%esp
   138bb:	50                   	push   %eax
   138bc:	ff 75 08             	pushl  0x8(%ebp)
   138bf:	e8 73 fc ff ff       	call   13537 <show_char>
   138c4:	83 c4 10             	add    $0x10,%esp
        }
        break;
   138c7:	90                   	nop
    }
    }
}
   138c8:	90                   	nop
   138c9:	c9                   	leave  
   138ca:	c3                   	ret    

000138cb <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left(console_t *console, int n)
{
   138cb:	55                   	push   %ebp
   138cc:	89 e5                	mov    %esp,%ebp
   138ce:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   138d1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   138d5:	75 07                	jne    138de <move_left+0x13>
    {
        n = 1;
   138d7:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   138de:	8b 45 08             	mov    0x8(%ebp),%eax
   138e1:	8b 40 0c             	mov    0xc(%eax),%eax
   138e4:	2b 45 0c             	sub    0xc(%ebp),%eax
   138e7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   138ea:	b8 00 00 00 00       	mov    $0x0,%eax
   138ef:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   138f3:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   138f7:	89 c2                	mov    %eax,%edx
   138f9:	8b 45 08             	mov    0x8(%ebp),%eax
   138fc:	89 50 0c             	mov    %edx,0xc(%eax)
}
   138ff:	90                   	nop
   13900:	c9                   	leave  
   13901:	c3                   	ret    

00013902 <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right(console_t *console, int n)
{
   13902:	55                   	push   %ebp
   13903:	89 e5                	mov    %esp,%ebp
   13905:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   13908:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1390c:	75 07                	jne    13915 <move_right+0x13>
    {
        n = 1;
   1390e:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   13915:	8b 45 08             	mov    0x8(%ebp),%eax
   13918:	8b 50 0c             	mov    0xc(%eax),%edx
   1391b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1391e:	01 d0                	add    %edx,%eax
   13920:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols)
   13923:	8b 45 08             	mov    0x8(%ebp),%eax
   13926:	8b 40 14             	mov    0x14(%eax),%eax
   13929:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1392c:	7c 11                	jl     1393f <move_right+0x3d>
    {
        console->cursor_col = console->display_cols - 1;
   1392e:	8b 45 08             	mov    0x8(%ebp),%eax
   13931:	8b 40 14             	mov    0x14(%eax),%eax
   13934:	8d 50 ff             	lea    -0x1(%eax),%edx
   13937:	8b 45 08             	mov    0x8(%ebp),%eax
   1393a:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    else
    {
        console->cursor_col = col;
    }
}
   1393d:	eb 09                	jmp    13948 <move_right+0x46>
        console->cursor_col = col;
   1393f:	8b 45 08             	mov    0x8(%ebp),%eax
   13942:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13945:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13948:	90                   	nop
   13949:	c9                   	leave  
   1394a:	c3                   	ret    

0001394b <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t *console)
{
   1394b:	55                   	push   %ebp
   1394c:	89 e5                	mov    %esp,%ebp
    if (console->curr_param_index >= 1)
   1394e:	8b 45 08             	mov    0x8(%ebp),%eax
   13951:	8b 40 50             	mov    0x50(%eax),%eax
   13954:	85 c0                	test   %eax,%eax
   13956:	7e 0c                	jle    13964 <move_cursor+0x19>
    {
        console->cursor_row = console->esc_param[0];
   13958:	8b 45 08             	mov    0x8(%ebp),%eax
   1395b:	8b 50 28             	mov    0x28(%eax),%edx
   1395e:	8b 45 08             	mov    0x8(%ebp),%eax
   13961:	89 50 08             	mov    %edx,0x8(%eax)
    }

    if (console->curr_param_index >= 2)
   13964:	8b 45 08             	mov    0x8(%ebp),%eax
   13967:	8b 40 50             	mov    0x50(%eax),%eax
   1396a:	83 f8 01             	cmp    $0x1,%eax
   1396d:	7e 0c                	jle    1397b <move_cursor+0x30>
    {
        console->cursor_col = console->esc_param[1];
   1396f:	8b 45 08             	mov    0x8(%ebp),%eax
   13972:	8b 50 2c             	mov    0x2c(%eax),%edx
   13975:	8b 45 08             	mov    0x8(%ebp),%eax
   13978:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
   1397b:	90                   	nop
   1397c:	5d                   	pop    %ebp
   1397d:	c3                   	ret    

0001397e <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param(console_t *console)
{
   1397e:	55                   	push   %ebp
   1397f:	89 e5                	mov    %esp,%ebp
   13981:	83 ec 08             	sub    $0x8,%esp
    kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13984:	8b 45 08             	mov    0x8(%ebp),%eax
   13987:	83 c0 28             	add    $0x28,%eax
   1398a:	83 ec 04             	sub    $0x4,%esp
   1398d:	6a 28                	push   $0x28
   1398f:	6a 00                	push   $0x0
   13991:	50                   	push   %eax
   13992:	e8 8f 4c 00 00       	call   18626 <kernel_memset>
   13997:	83 c4 10             	add    $0x10,%esp
    console->curr_param_index = 0;
   1399a:	8b 45 08             	mov    0x8(%ebp),%eax
   1399d:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   139a4:	90                   	nop
   139a5:	c9                   	leave  
   139a6:	c3                   	ret    

000139a7 <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc(console_t *console, char c)
{
   139a7:	55                   	push   %ebp
   139a8:	89 e5                	mov    %esp,%ebp
   139aa:	83 ec 18             	sub    $0x18,%esp
   139ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   139b0:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c)
   139b3:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   139b7:	83 f8 38             	cmp    $0x38,%eax
   139ba:	74 21                	je     139dd <write_esc+0x36>
   139bc:	83 f8 5b             	cmp    $0x5b,%eax
   139bf:	74 33                	je     139f4 <write_esc+0x4d>
   139c1:	83 f8 37             	cmp    $0x37,%eax
   139c4:	75 48                	jne    13a0e <write_esc+0x67>
    {
    case '7': // ESC 7 保存光标
        save_cursor(console);
   139c6:	ff 75 08             	pushl  0x8(%ebp)
   139c9:	e8 fd fb ff ff       	call   135cb <save_cursor>
   139ce:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   139d1:	8b 45 08             	mov    0x8(%ebp),%eax
   139d4:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   139db:	eb 3c                	jmp    13a19 <write_esc+0x72>
    case '8': // ESC 8 恢复光标
        restore_cursor(console);
   139dd:	ff 75 08             	pushl  0x8(%ebp)
   139e0:	e8 04 fc ff ff       	call   135e9 <restore_cursor>
   139e5:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   139e8:	8b 45 08             	mov    0x8(%ebp),%eax
   139eb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   139f2:	eb 25                	jmp    13a19 <write_esc+0x72>
    case '[':
        clear_esc_param(console);
   139f4:	83 ec 0c             	sub    $0xc,%esp
   139f7:	ff 75 08             	pushl  0x8(%ebp)
   139fa:	e8 7f ff ff ff       	call   1397e <clear_esc_param>
   139ff:	83 c4 10             	add    $0x10,%esp
        console->write_state = CONSOLE_WRITE_SQUARE;
   13a02:	8b 45 08             	mov    0x8(%ebp),%eax
   13a05:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
        break;
   13a0c:	eb 0b                	jmp    13a19 <write_esc+0x72>
    default:
        console->write_state = CONSOLE_WRITE_NORMAL;
   13a0e:	8b 45 08             	mov    0x8(%ebp),%eax
   13a11:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   13a18:	90                   	nop
    }
}
   13a19:	90                   	nop
   13a1a:	c9                   	leave  
   13a1b:	c3                   	ret    

00013a1c <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t *console)
{
   13a1c:	55                   	push   %ebp
   13a1d:	89 e5                	mov    %esp,%ebp
   13a1f:	83 ec 10             	sub    $0x10,%esp
    if (console->curr_param_index <= 0)
   13a22:	8b 45 08             	mov    0x8(%ebp),%eax
   13a25:	8b 40 50             	mov    0x50(%eax),%eax
   13a28:	85 c0                	test   %eax,%eax
   13a2a:	7e 3e                	jle    13a6a <erase_in_display+0x4e>
    {
        return;
    }

    int param = console->esc_param[0];
   13a2c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a2f:	8b 40 28             	mov    0x28(%eax),%eax
   13a32:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (param == 2)
   13a35:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13a39:	75 30                	jne    13a6b <erase_in_display+0x4f>
    {
        // 擦除整个屏幕
        erase_rows(console, 0, console->display_rows - 1);
   13a3b:	8b 45 08             	mov    0x8(%ebp),%eax
   13a3e:	8b 40 10             	mov    0x10(%eax),%eax
   13a41:	83 e8 01             	sub    $0x1,%eax
   13a44:	50                   	push   %eax
   13a45:	6a 00                	push   $0x0
   13a47:	ff 75 08             	pushl  0x8(%ebp)
   13a4a:	e8 11 f9 ff ff       	call   13360 <erase_rows>
   13a4f:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   13a52:	8b 45 08             	mov    0x8(%ebp),%eax
   13a55:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   13a5c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a5f:	8b 50 08             	mov    0x8(%eax),%edx
   13a62:	8b 45 08             	mov    0x8(%ebp),%eax
   13a65:	89 50 0c             	mov    %edx,0xc(%eax)
   13a68:	eb 01                	jmp    13a6b <erase_in_display+0x4f>
        return;
   13a6a:	90                   	nop
    }
}
   13a6b:	c9                   	leave  
   13a6c:	c3                   	ret    

00013a6d <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style(console_t *console)
{
   13a6d:	55                   	push   %ebp
   13a6e:	89 e5                	mov    %esp,%ebp
   13a70:	83 ec 10             	sub    $0x10,%esp
    static const cclor_t color_table[] = {
        COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow,  // 0-3
        COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
    };

    for (int i = 0; i < console->curr_param_index; i++)
   13a73:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13a7a:	eb 78                	jmp    13af4 <set_font_style+0x87>
    {
        int param = console->esc_param[i];
   13a7c:	8b 45 08             	mov    0x8(%ebp),%eax
   13a7f:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13a82:	83 c2 08             	add    $0x8,%edx
   13a85:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13a89:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if ((param >= 30) && (param <= 37))
   13a8c:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13a90:	7e 1b                	jle    13aad <set_font_style+0x40>
   13a92:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13a96:	7f 15                	jg     13aad <set_font_style+0x40>
        { // 前景色：30-37
            console->foreground = color_table[param - 30];
   13a98:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13a9b:	83 e8 1e             	sub    $0x1e,%eax
   13a9e:	8b 14 85 00 98 01 00 	mov    0x19800(,%eax,4),%edx
   13aa5:	8b 45 08             	mov    0x8(%ebp),%eax
   13aa8:	89 50 20             	mov    %edx,0x20(%eax)
   13aab:	eb 43                	jmp    13af0 <set_font_style+0x83>
        }
        else if ((param >= 40) && (param <= 47))
   13aad:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13ab1:	7e 1b                	jle    13ace <set_font_style+0x61>
   13ab3:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13ab7:	7f 15                	jg     13ace <set_font_style+0x61>
        {
            console->background = color_table[param - 40];
   13ab9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13abc:	83 e8 28             	sub    $0x28,%eax
   13abf:	8b 14 85 00 98 01 00 	mov    0x19800(,%eax,4),%edx
   13ac6:	8b 45 08             	mov    0x8(%ebp),%eax
   13ac9:	89 50 24             	mov    %edx,0x24(%eax)
   13acc:	eb 22                	jmp    13af0 <set_font_style+0x83>
        }
        else if (param == 39)
   13ace:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13ad2:	75 0c                	jne    13ae0 <set_font_style+0x73>
        { // 39=默认前景色
            console->foreground = COLOR_White;
   13ad4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ad7:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13ade:	eb 10                	jmp    13af0 <set_font_style+0x83>
        }
        else if (param == 49)
   13ae0:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13ae4:	75 0a                	jne    13af0 <set_font_style+0x83>
        { // 49=默认背景色
            console->background = COLOR_Black;
   13ae6:	8b 45 08             	mov    0x8(%ebp),%eax
   13ae9:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    for (int i = 0; i < console->curr_param_index; i++)
   13af0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13af4:	8b 45 08             	mov    0x8(%ebp),%eax
   13af7:	8b 40 50             	mov    0x50(%eax),%eax
   13afa:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13afd:	0f 8c 79 ff ff ff    	jl     13a7c <set_font_style+0xf>
        }
    }
}
   13b03:	90                   	nop
   13b04:	c9                   	leave  
   13b05:	c3                   	ret    

00013b06 <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square(console_t *console, char c)
{
   13b06:	55                   	push   %ebp
   13b07:	89 e5                	mov    %esp,%ebp
   13b09:	83 ec 14             	sub    $0x14,%esp
   13b0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   13b0f:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9'))
   13b12:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13b16:	7e 44                	jle    13b5c <write_esc_square+0x56>
   13b18:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13b1c:	7f 3e                	jg     13b5c <write_esc_square+0x56>
    {
        // 解析当前参数
        int *param = &console->esc_param[console->curr_param_index];
   13b1e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b21:	8b 40 50             	mov    0x50(%eax),%eax
   13b24:	83 c0 08             	add    $0x8,%eax
   13b27:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b31:	01 d0                	add    %edx,%eax
   13b33:	83 c0 08             	add    $0x8,%eax
   13b36:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   13b39:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13b3c:	8b 10                	mov    (%eax),%edx
   13b3e:	89 d0                	mov    %edx,%eax
   13b40:	c1 e0 02             	shl    $0x2,%eax
   13b43:	01 d0                	add    %edx,%eax
   13b45:	01 c0                	add    %eax,%eax
   13b47:	89 c2                	mov    %eax,%edx
   13b49:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13b4d:	01 d0                	add    %edx,%eax
   13b4f:	8d 50 d0             	lea    -0x30(%eax),%edx
   13b52:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13b55:	89 10                	mov    %edx,(%eax)
    {
   13b57:	e9 ae 00 00 00       	jmp    13c0a <write_esc_square+0x104>
    }
    else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX)
   13b5c:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13b60:	75 1f                	jne    13b81 <write_esc_square+0x7b>
   13b62:	8b 45 08             	mov    0x8(%ebp),%eax
   13b65:	8b 40 50             	mov    0x50(%eax),%eax
   13b68:	83 f8 09             	cmp    $0x9,%eax
   13b6b:	7f 14                	jg     13b81 <write_esc_square+0x7b>
    {
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   13b6d:	8b 45 08             	mov    0x8(%ebp),%eax
   13b70:	8b 40 50             	mov    0x50(%eax),%eax
   13b73:	8d 50 01             	lea    0x1(%eax),%edx
   13b76:	8b 45 08             	mov    0x8(%ebp),%eax
   13b79:	89 50 50             	mov    %edx,0x50(%eax)
   13b7c:	e9 89 00 00 00       	jmp    13c0a <write_esc_square+0x104>
    }
    else
    {
        // 结束上一字符的处理
        console->curr_param_index++;
   13b81:	8b 45 08             	mov    0x8(%ebp),%eax
   13b84:	8b 40 50             	mov    0x50(%eax),%eax
   13b87:	8d 50 01             	lea    0x1(%eax),%edx
   13b8a:	8b 45 08             	mov    0x8(%ebp),%eax
   13b8d:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c)
   13b90:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13b94:	83 e8 43             	sub    $0x43,%eax
   13b97:	83 f8 2a             	cmp    $0x2a,%eax
   13b9a:	77 64                	ja     13c00 <write_esc_square+0xfa>
   13b9c:	8b 04 85 40 97 01 00 	mov    0x19740(,%eax,4),%eax
   13ba3:	ff e0                	jmp    *%eax
        {
        case 'm': // 设置字符属性
            set_font_style(console);
   13ba5:	ff 75 08             	pushl  0x8(%ebp)
   13ba8:	e8 c0 fe ff ff       	call   13a6d <set_font_style>
   13bad:	83 c4 04             	add    $0x4,%esp
            break;
   13bb0:	eb 4e                	jmp    13c00 <write_esc_square+0xfa>
        case 'D': // 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13bb2:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb5:	8b 40 28             	mov    0x28(%eax),%eax
   13bb8:	50                   	push   %eax
   13bb9:	ff 75 08             	pushl  0x8(%ebp)
   13bbc:	e8 0a fd ff ff       	call   138cb <move_left>
   13bc1:	83 c4 08             	add    $0x8,%esp
            break;
   13bc4:	eb 3a                	jmp    13c00 <write_esc_square+0xfa>
        case 'C':
            move_right(console, console->esc_param[0]);
   13bc6:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc9:	8b 40 28             	mov    0x28(%eax),%eax
   13bcc:	50                   	push   %eax
   13bcd:	ff 75 08             	pushl  0x8(%ebp)
   13bd0:	e8 2d fd ff ff       	call   13902 <move_right>
   13bd5:	83 c4 08             	add    $0x8,%esp
            break;
   13bd8:	eb 26                	jmp    13c00 <write_esc_square+0xfa>
        case 'H':
            move_cursor(console);
   13bda:	ff 75 08             	pushl  0x8(%ebp)
   13bdd:	e8 69 fd ff ff       	call   1394b <move_cursor>
   13be2:	83 c4 04             	add    $0x4,%esp
            break;
   13be5:	eb 19                	jmp    13c00 <write_esc_square+0xfa>
        case 'f':
            move_cursor(console);
   13be7:	ff 75 08             	pushl  0x8(%ebp)
   13bea:	e8 5c fd ff ff       	call   1394b <move_cursor>
   13bef:	83 c4 04             	add    $0x4,%esp
            break;
   13bf2:	eb 0c                	jmp    13c00 <write_esc_square+0xfa>
        case 'J':
            erase_in_display(console);
   13bf4:	ff 75 08             	pushl  0x8(%ebp)
   13bf7:	e8 20 fe ff ff       	call   13a1c <erase_in_display>
   13bfc:	83 c4 04             	add    $0x4,%esp
            break;
   13bff:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13c00:	8b 45 08             	mov    0x8(%ebp),%eax
   13c03:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   13c0a:	90                   	nop
   13c0b:	c9                   	leave  
   13c0c:	c3                   	ret    

00013c0d <console_select>:

void console_select(int idx)
{
   13c0d:	55                   	push   %ebp
   13c0e:	89 e5                	mov    %esp,%ebp
   13c10:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13c13:	8b 45 08             	mov    0x8(%ebp),%eax
   13c16:	6b c0 68             	imul   $0x68,%eax,%eax
   13c19:	05 00 86 03 00       	add    $0x38600,%eax
   13c1e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0)
   13c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c24:	8b 00                	mov    (%eax),%eax
   13c26:	85 c0                	test   %eax,%eax
   13c28:	75 0e                	jne    13c38 <console_select+0x2b>
    {
        // 可能没有初始化，先初始化一下
        console_init(idx);
   13c2a:	83 ec 0c             	sub    $0xc,%esp
   13c2d:	ff 75 08             	pushl  0x8(%ebp)
   13c30:	e8 d2 f9 ff ff       	call   13607 <console_init>
   13c35:	83 c4 10             	add    $0x10,%esp
    }

    uint16_t pos = idx * console->display_cols * console->display_rows;
   13c38:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c3b:	8b 40 14             	mov    0x14(%eax),%eax
   13c3e:	89 c2                	mov    %eax,%edx
   13c40:	8b 45 08             	mov    0x8(%ebp),%eax
   13c43:	0f af d0             	imul   %eax,%edx
   13c46:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13c49:	8b 40 10             	mov    0x10(%eax),%eax
   13c4c:	0f af c2             	imul   %edx,%eax
   13c4f:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

    outb(0x3D4, 0xC); // 写高地址
   13c53:	83 ec 08             	sub    $0x8,%esp
   13c56:	6a 0c                	push   $0xc
   13c58:	68 d4 03 00 00       	push   $0x3d4
   13c5d:	e8 25 f5 ff ff       	call   13187 <outb>
   13c62:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
   13c65:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13c69:	66 c1 e8 08          	shr    $0x8,%ax
   13c6d:	0f b6 c0             	movzbl %al,%eax
   13c70:	83 ec 08             	sub    $0x8,%esp
   13c73:	50                   	push   %eax
   13c74:	68 d5 03 00 00       	push   $0x3d5
   13c79:	e8 09 f5 ff ff       	call   13187 <outb>
   13c7e:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 0xD); // 写低地址
   13c81:	83 ec 08             	sub    $0x8,%esp
   13c84:	6a 0d                	push   $0xd
   13c86:	68 d4 03 00 00       	push   $0x3d4
   13c8b:	e8 f7 f4 ff ff       	call   13187 <outb>
   13c90:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)(pos & 0xFF));
   13c93:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13c97:	0f b6 c0             	movzbl %al,%eax
   13c9a:	83 ec 08             	sub    $0x8,%esp
   13c9d:	50                   	push   %eax
   13c9e:	68 d5 03 00 00       	push   $0x3d5
   13ca3:	e8 df f4 ff ff       	call   13187 <outb>
   13ca8:	83 c4 10             	add    $0x10,%esp

    // 更新光标到当前屏幕
    curr_console_idx = idx;
   13cab:	8b 45 08             	mov    0x8(%ebp),%eax
   13cae:	a3 40 89 03 00       	mov    %eax,0x38940
    update_cursor_pos(console);
   13cb3:	83 ec 0c             	sub    $0xc,%esp
   13cb6:	ff 75 f4             	pushl  -0xc(%ebp)
   13cb9:	e8 5c f5 ff ff       	call   1321a <update_cursor_pos>
   13cbe:	83 c4 10             	add    $0x10,%esp
}
   13cc1:	90                   	nop
   13cc2:	c9                   	leave  
   13cc3:	c3                   	ret    

00013cc4 <console_set_cursor>:

void console_set_cursor(int idx, int visiable)
{
   13cc4:	55                   	push   %ebp
   13cc5:	89 e5                	mov    %esp,%ebp
   13cc7:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13cca:	8b 45 08             	mov    0x8(%ebp),%eax
   13ccd:	6b c0 68             	imul   $0x68,%eax,%eax
   13cd0:	05 00 86 03 00       	add    $0x38600,%eax
   13cd5:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   13cd8:	e8 64 f4 ff ff       	call   13141 <irq_enter_protection>
   13cdd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (visiable)
   13ce0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13ce4:	74 79                	je     13d5f <console_set_cursor+0x9b>
    {
        outb(0x3D4, 0x0A);
   13ce6:	83 ec 08             	sub    $0x8,%esp
   13ce9:	6a 0a                	push   $0xa
   13ceb:	68 d4 03 00 00       	push   $0x3d4
   13cf0:	e8 92 f4 ff ff       	call   13187 <outb>
   13cf5:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xC0) | 0);
   13cf8:	83 ec 0c             	sub    $0xc,%esp
   13cfb:	68 d5 03 00 00       	push   $0x3d5
   13d00:	e8 65 f4 ff ff       	call   1316a <inb>
   13d05:	83 c4 10             	add    $0x10,%esp
   13d08:	0f b6 c0             	movzbl %al,%eax
   13d0b:	25 c0 00 00 00       	and    $0xc0,%eax
   13d10:	83 ec 08             	sub    $0x8,%esp
   13d13:	50                   	push   %eax
   13d14:	68 d5 03 00 00       	push   $0x3d5
   13d19:	e8 69 f4 ff ff       	call   13187 <outb>
   13d1e:	83 c4 10             	add    $0x10,%esp
        outb(0x3D4, 0x0B);
   13d21:	83 ec 08             	sub    $0x8,%esp
   13d24:	6a 0b                	push   $0xb
   13d26:	68 d4 03 00 00       	push   $0x3d4
   13d2b:	e8 57 f4 ff ff       	call   13187 <outb>
   13d30:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xE0) | 15);
   13d33:	83 ec 0c             	sub    $0xc,%esp
   13d36:	68 d5 03 00 00       	push   $0x3d5
   13d3b:	e8 2a f4 ff ff       	call   1316a <inb>
   13d40:	83 c4 10             	add    $0x10,%esp
   13d43:	83 e0 e0             	and    $0xffffffe0,%eax
   13d46:	83 c8 0f             	or     $0xf,%eax
   13d49:	0f b6 c0             	movzbl %al,%eax
   13d4c:	83 ec 08             	sub    $0x8,%esp
   13d4f:	50                   	push   %eax
   13d50:	68 d5 03 00 00       	push   $0x3d5
   13d55:	e8 2d f4 ff ff       	call   13187 <outb>
   13d5a:	83 c4 10             	add    $0x10,%esp
   13d5d:	eb 24                	jmp    13d83 <console_set_cursor+0xbf>
    }
    else
    {
        outb(0x3D4, 0x0A);
   13d5f:	83 ec 08             	sub    $0x8,%esp
   13d62:	6a 0a                	push   $0xa
   13d64:	68 d4 03 00 00       	push   $0x3d4
   13d69:	e8 19 f4 ff ff       	call   13187 <outb>
   13d6e:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, 0x20);
   13d71:	83 ec 08             	sub    $0x8,%esp
   13d74:	6a 20                	push   $0x20
   13d76:	68 d5 03 00 00       	push   $0x3d5
   13d7b:	e8 07 f4 ff ff       	call   13187 <outb>
   13d80:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   13d83:	83 ec 0c             	sub    $0xc,%esp
   13d86:	ff 75 f0             	pushl  -0x10(%ebp)
   13d89:	e8 cb f3 ff ff       	call   13159 <irq_leave_protection>
   13d8e:	83 c4 10             	add    $0x10,%esp
}
   13d91:	90                   	nop
   13d92:	c9                   	leave  
   13d93:	c3                   	ret    

00013d94 <console_write>:
/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write(tty_t *tty)
{
   13d94:	55                   	push   %ebp
   13d95:	89 e5                	mov    %esp,%ebp
   13d97:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + tty->console_idx;
   13d9a:	8b 45 08             	mov    0x8(%ebp),%eax
   13d9d:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13da3:	6b c0 68             	imul   $0x68,%eax,%eax
   13da6:	05 00 86 03 00       	add    $0x38600,%eax
   13dab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    // 下面的写序列涉及到状态机，还有多进程同时写，因此加上锁
    mutex_lock(&console->mutex);
   13dae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13db1:	83 c0 54             	add    $0x54,%eax
   13db4:	83 ec 0c             	sub    $0xc,%esp
   13db7:	50                   	push   %eax
   13db8:	e8 c9 41 00 00       	call   17f86 <mutex_lock>
   13dbd:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13dc0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do
    {
        char c;

        // 取字节数据
        int err = tty_fifo_get(&tty->ofifo, &c);
   13dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   13dca:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13dd0:	83 ec 08             	sub    $0x8,%esp
   13dd3:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13dd6:	50                   	push   %eax
   13dd7:	52                   	push   %edx
   13dd8:	e8 30 14 00 00       	call   1520d <tty_fifo_get>
   13ddd:	83 c4 10             	add    $0x10,%esp
   13de0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0)
   13de3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13de7:	79 2d                	jns    13e16 <console_write+0x82>
            break;
        }
        len++;
    } while (1);

    mutex_unlock(&console->mutex);
   13de9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13dec:	83 c0 54             	add    $0x54,%eax
   13def:	83 ec 0c             	sub    $0xc,%esp
   13df2:	50                   	push   %eax
   13df3:	e8 22 42 00 00       	call   1801a <mutex_unlock>
   13df8:	83 c4 10             	add    $0x10,%esp
    if (tty->console_idx == curr_console_idx)
   13dfb:	8b 45 08             	mov    0x8(%ebp),%eax
   13dfe:	8b 90 50 04 00 00    	mov    0x450(%eax),%edx
   13e04:	a1 40 89 03 00       	mov    0x38940,%eax
   13e09:	39 c2                	cmp    %eax,%edx
   13e0b:	0f 84 80 00 00 00    	je     13e91 <console_write+0xfd>
   13e11:	e9 89 00 00 00       	jmp    13e9f <console_write+0x10b>
        sem_notify(&tty->osem);
   13e16:	8b 45 08             	mov    0x8(%ebp),%eax
   13e19:	05 14 02 00 00       	add    $0x214,%eax
   13e1e:	83 ec 0c             	sub    $0xc,%esp
   13e21:	50                   	push   %eax
   13e22:	e8 49 43 00 00       	call   18170 <sem_notify>
   13e27:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state)
   13e2a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13e2d:	8b 40 04             	mov    0x4(%eax),%eax
   13e30:	83 f8 01             	cmp    $0x1,%eax
   13e33:	74 24                	je     13e59 <console_write+0xc5>
   13e35:	83 f8 01             	cmp    $0x1,%eax
   13e38:	72 07                	jb     13e41 <console_write+0xad>
   13e3a:	83 f8 02             	cmp    $0x2,%eax
   13e3d:	74 32                	je     13e71 <console_write+0xdd>
   13e3f:	eb 47                	jmp    13e88 <console_write+0xf4>
            write_normal(console, c);
   13e41:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e45:	0f be c0             	movsbl %al,%eax
   13e48:	83 ec 08             	sub    $0x8,%esp
   13e4b:	50                   	push   %eax
   13e4c:	ff 75 f0             	pushl  -0x10(%ebp)
   13e4f:	e8 bf f9 ff ff       	call   13813 <write_normal>
   13e54:	83 c4 10             	add    $0x10,%esp
            break;
   13e57:	eb 2f                	jmp    13e88 <console_write+0xf4>
            write_esc(console, c);
   13e59:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e5d:	0f be c0             	movsbl %al,%eax
   13e60:	83 ec 08             	sub    $0x8,%esp
   13e63:	50                   	push   %eax
   13e64:	ff 75 f0             	pushl  -0x10(%ebp)
   13e67:	e8 3b fb ff ff       	call   139a7 <write_esc>
   13e6c:	83 c4 10             	add    $0x10,%esp
            break;
   13e6f:	eb 17                	jmp    13e88 <console_write+0xf4>
            write_esc_square(console, c);
   13e71:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e75:	0f be c0             	movsbl %al,%eax
   13e78:	83 ec 08             	sub    $0x8,%esp
   13e7b:	50                   	push   %eax
   13e7c:	ff 75 f0             	pushl  -0x10(%ebp)
   13e7f:	e8 82 fc ff ff       	call   13b06 <write_esc_square>
   13e84:	83 c4 10             	add    $0x10,%esp
            break;
   13e87:	90                   	nop
        len++;
   13e88:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    {
   13e8c:	e9 36 ff ff ff       	jmp    13dc7 <console_write+0x33>
    {
        update_cursor_pos(console);
   13e91:	83 ec 0c             	sub    $0xc,%esp
   13e94:	ff 75 f0             	pushl  -0x10(%ebp)
   13e97:	e8 7e f3 ff ff       	call   1321a <update_cursor_pos>
   13e9c:	83 c4 10             	add    $0x10,%esp
    }

    return len;
   13e9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13ea2:	c9                   	leave  
   13ea3:	c3                   	ret    

00013ea4 <console_close>:

/**
 * @brief 关闭控制台及键盘
 */
void console_close(int dev)
{
   13ea4:	55                   	push   %ebp
   13ea5:	89 e5                	mov    %esp,%ebp
    // 似乎不太需要做点什么
   13ea7:	90                   	nop
   13ea8:	5d                   	pop    %ebp
   13ea9:	c3                   	ret    

00013eaa <is_devid_bad>:

// 特定设备表
static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad(int dev_id)
{
   13eaa:	55                   	push   %ebp
   13eab:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >= sizeof(dev_tbl) / sizeof(dev_tbl[0])))
   13ead:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13eb1:	78 08                	js     13ebb <is_devid_bad+0x11>
   13eb3:	8b 45 08             	mov    0x8(%ebp),%eax
   13eb6:	83 f8 7f             	cmp    $0x7f,%eax
   13eb9:	76 07                	jbe    13ec2 <is_devid_bad+0x18>
    {
        return 1;
   13ebb:	b8 01 00 00 00       	mov    $0x1,%eax
   13ec0:	eb 24                	jmp    13ee6 <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0)
   13ec2:	8b 55 08             	mov    0x8(%ebp),%edx
   13ec5:	89 d0                	mov    %edx,%eax
   13ec7:	c1 e0 02             	shl    $0x2,%eax
   13eca:	01 d0                	add    %edx,%eax
   13ecc:	c1 e0 02             	shl    $0x2,%eax
   13ecf:	05 60 89 03 00       	add    $0x38960,%eax
   13ed4:	8b 00                	mov    (%eax),%eax
   13ed6:	85 c0                	test   %eax,%eax
   13ed8:	75 07                	jne    13ee1 <is_devid_bad+0x37>
    {
        return 1;
   13eda:	b8 01 00 00 00       	mov    $0x1,%eax
   13edf:	eb 05                	jmp    13ee6 <is_devid_bad+0x3c>
    }

    return 0;
   13ee1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13ee6:	5d                   	pop    %ebp
   13ee7:	c3                   	ret    

00013ee8 <dev_open>:

/**
 * @brief 打开指定的设备
 */
int dev_open(int major, int minor, void *data)
{
   13ee8:	55                   	push   %ebp
   13ee9:	89 e5                	mov    %esp,%ebp
   13eeb:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13eee:	e8 4e f2 ff ff       	call   13141 <irq_enter_protection>
   13ef3:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 遍历：遇到已经打开的直接返回；否则找一个空闲项
    device_t *free_dev = (device_t *)0;
   13ef6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++)
   13efd:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13f04:	eb 68                	jmp    13f6e <dev_open+0x86>
    {
        device_t *dev = dev_tbl + i;
   13f06:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13f09:	89 d0                	mov    %edx,%eax
   13f0b:	c1 e0 02             	shl    $0x2,%eax
   13f0e:	01 d0                	add    %edx,%eax
   13f10:	c1 e0 02             	shl    $0x2,%eax
   13f13:	05 60 89 03 00       	add    $0x38960,%eax
   13f18:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0)
   13f1b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13f1e:	8b 40 10             	mov    0x10(%eax),%eax
   13f21:	85 c0                	test   %eax,%eax
   13f23:	75 08                	jne    13f2d <dev_open+0x45>
        {
            // 纪录空闲值
            free_dev = dev;
   13f25:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13f28:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13f2b:	eb 3d                	jmp    13f6a <dev_open+0x82>
        }
        else if ((dev->desc->major == major) && (dev->minor == minor))
   13f2d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13f30:	8b 00                	mov    (%eax),%eax
   13f32:	8b 40 20             	mov    0x20(%eax),%eax
   13f35:	39 45 08             	cmp    %eax,0x8(%ebp)
   13f38:	75 30                	jne    13f6a <dev_open+0x82>
   13f3a:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13f3d:	8b 40 08             	mov    0x8(%eax),%eax
   13f40:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13f43:	75 25                	jne    13f6a <dev_open+0x82>
        {
            // 找到了已经打开的？直接返回就好
            dev->open_count++;
   13f45:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13f48:	8b 40 10             	mov    0x10(%eax),%eax
   13f4b:	8d 50 01             	lea    0x1(%eax),%edx
   13f4e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13f51:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13f54:	83 ec 0c             	sub    $0xc,%esp
   13f57:	ff 75 e4             	pushl  -0x1c(%ebp)
   13f5a:	e8 fa f1 ff ff       	call   13159 <irq_leave_protection>
   13f5f:	83 c4 10             	add    $0x10,%esp
            return i;
   13f62:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f65:	e9 c8 00 00 00       	jmp    14032 <dev_open+0x14a>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++)
   13f6a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13f6e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f71:	83 f8 7f             	cmp    $0x7f,%eax
   13f74:	76 90                	jbe    13f06 <dev_open+0x1e>
        }
    }

    // 新打开设备？查找设备类型描述符, 看看是不是支持的类型
    dev_desc_t *desc = (dev_desc_t *)0;
   13f76:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++)
   13f7d:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13f84:	eb 24                	jmp    13faa <dev_open+0xc2>
    {
        dev_desc_t *d = dev_desc_tbl[i];
   13f86:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f89:	8b 04 85 50 b0 01 00 	mov    0x1b050(,%eax,4),%eax
   13f90:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major)
   13f93:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f96:	8b 40 20             	mov    0x20(%eax),%eax
   13f99:	39 45 08             	cmp    %eax,0x8(%ebp)
   13f9c:	75 08                	jne    13fa6 <dev_open+0xbe>
        {
            desc = d;
   13f9e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13fa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13fa4:	eb 0c                	jmp    13fb2 <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++)
   13fa6:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13faa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13fad:	83 f8 01             	cmp    $0x1,%eax
   13fb0:	76 d4                	jbe    13f86 <dev_open+0x9e>
        }
    }

    // 有空闲且有对应的描述项
    if (desc && free_dev)
   13fb2:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13fb6:	74 67                	je     1401f <dev_open+0x137>
   13fb8:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13fbc:	74 61                	je     1401f <dev_open+0x137>
    {
        free_dev->minor = minor;
   13fbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fc1:	8b 55 0c             	mov    0xc(%ebp),%edx
   13fc4:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13fc7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fca:	8b 55 10             	mov    0x10(%ebp),%edx
   13fcd:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13fd0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fd3:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13fd6:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13fd8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13fdb:	8b 40 24             	mov    0x24(%eax),%eax
   13fde:	83 ec 0c             	sub    $0xc,%esp
   13fe1:	ff 75 f4             	pushl  -0xc(%ebp)
   13fe4:	ff d0                	call   *%eax
   13fe6:	83 c4 10             	add    $0x10,%esp
   13fe9:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0)
   13fec:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13ff0:	75 2d                	jne    1401f <dev_open+0x137>
        {
            free_dev->open_count = 1;
   13ff2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13ff5:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13ffc:	83 ec 0c             	sub    $0xc,%esp
   13fff:	ff 75 e4             	pushl  -0x1c(%ebp)
   14002:	e8 52 f1 ff ff       	call   13159 <irq_leave_protection>
   14007:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   1400a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1400d:	ba 60 89 03 00       	mov    $0x38960,%edx
   14012:	29 d0                	sub    %edx,%eax
   14014:	c1 f8 02             	sar    $0x2,%eax
   14017:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   1401d:	eb 13                	jmp    14032 <dev_open+0x14a>
        }
    }

    irq_leave_protection(state);
   1401f:	83 ec 0c             	sub    $0xc,%esp
   14022:	ff 75 e4             	pushl  -0x1c(%ebp)
   14025:	e8 2f f1 ff ff       	call   13159 <irq_leave_protection>
   1402a:	83 c4 10             	add    $0x10,%esp
    return -1;
   1402d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14032:	c9                   	leave  
   14033:	c3                   	ret    

00014034 <dev_read>:

/**
 * @brief 读取指定字节的数据
 */
int dev_read(int dev_id, int addr, char *buf, int size)
{
   14034:	55                   	push   %ebp
   14035:	89 e5                	mov    %esp,%ebp
   14037:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   1403a:	ff 75 08             	pushl  0x8(%ebp)
   1403d:	e8 68 fe ff ff       	call   13eaa <is_devid_bad>
   14042:	83 c4 04             	add    $0x4,%esp
   14045:	85 c0                	test   %eax,%eax
   14047:	74 07                	je     14050 <dev_read+0x1c>
    {
        return -1;
   14049:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1404e:	eb 2e                	jmp    1407e <dev_read+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   14050:	8b 55 08             	mov    0x8(%ebp),%edx
   14053:	89 d0                	mov    %edx,%eax
   14055:	c1 e0 02             	shl    $0x2,%eax
   14058:	01 d0                	add    %edx,%eax
   1405a:	c1 e0 02             	shl    $0x2,%eax
   1405d:	05 60 89 03 00       	add    $0x38960,%eax
   14062:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   14065:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14068:	8b 00                	mov    (%eax),%eax
   1406a:	8b 40 28             	mov    0x28(%eax),%eax
   1406d:	ff 75 14             	pushl  0x14(%ebp)
   14070:	ff 75 10             	pushl  0x10(%ebp)
   14073:	ff 75 0c             	pushl  0xc(%ebp)
   14076:	ff 75 f4             	pushl  -0xc(%ebp)
   14079:	ff d0                	call   *%eax
   1407b:	83 c4 10             	add    $0x10,%esp
}
   1407e:	c9                   	leave  
   1407f:	c3                   	ret    

00014080 <dev_write>:

/**
 * @brief 写指定字节的数据
 */
int dev_write(int dev_id, int addr, char *buf, int size)
{
   14080:	55                   	push   %ebp
   14081:	89 e5                	mov    %esp,%ebp
   14083:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   14086:	ff 75 08             	pushl  0x8(%ebp)
   14089:	e8 1c fe ff ff       	call   13eaa <is_devid_bad>
   1408e:	83 c4 04             	add    $0x4,%esp
   14091:	85 c0                	test   %eax,%eax
   14093:	74 07                	je     1409c <dev_write+0x1c>
    {
        return -1;
   14095:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1409a:	eb 2e                	jmp    140ca <dev_write+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   1409c:	8b 55 08             	mov    0x8(%ebp),%edx
   1409f:	89 d0                	mov    %edx,%eax
   140a1:	c1 e0 02             	shl    $0x2,%eax
   140a4:	01 d0                	add    %edx,%eax
   140a6:	c1 e0 02             	shl    $0x2,%eax
   140a9:	05 60 89 03 00       	add    $0x38960,%eax
   140ae:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   140b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140b4:	8b 00                	mov    (%eax),%eax
   140b6:	8b 40 2c             	mov    0x2c(%eax),%eax
   140b9:	ff 75 14             	pushl  0x14(%ebp)
   140bc:	ff 75 10             	pushl  0x10(%ebp)
   140bf:	ff 75 0c             	pushl  0xc(%ebp)
   140c2:	ff 75 f4             	pushl  -0xc(%ebp)
   140c5:	ff d0                	call   *%eax
   140c7:	83 c4 10             	add    $0x10,%esp
}
   140ca:	c9                   	leave  
   140cb:	c3                   	ret    

000140cc <dev_control>:
/**
 * @brief 发送控制命令
 */

int dev_control(int dev_id, int cmd, int arg0, int arg1)
{
   140cc:	55                   	push   %ebp
   140cd:	89 e5                	mov    %esp,%ebp
   140cf:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   140d2:	ff 75 08             	pushl  0x8(%ebp)
   140d5:	e8 d0 fd ff ff       	call   13eaa <is_devid_bad>
   140da:	83 c4 04             	add    $0x4,%esp
   140dd:	85 c0                	test   %eax,%eax
   140df:	74 07                	je     140e8 <dev_control+0x1c>
    {
        return -1;
   140e1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   140e6:	eb 2e                	jmp    14116 <dev_control+0x4a>
    }

    device_t *dev = dev_tbl + dev_id;
   140e8:	8b 55 08             	mov    0x8(%ebp),%edx
   140eb:	89 d0                	mov    %edx,%eax
   140ed:	c1 e0 02             	shl    $0x2,%eax
   140f0:	01 d0                	add    %edx,%eax
   140f2:	c1 e0 02             	shl    $0x2,%eax
   140f5:	05 60 89 03 00       	add    $0x38960,%eax
   140fa:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   140fd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14100:	8b 00                	mov    (%eax),%eax
   14102:	8b 40 30             	mov    0x30(%eax),%eax
   14105:	ff 75 14             	pushl  0x14(%ebp)
   14108:	ff 75 10             	pushl  0x10(%ebp)
   1410b:	ff 75 0c             	pushl  0xc(%ebp)
   1410e:	ff 75 f4             	pushl  -0xc(%ebp)
   14111:	ff d0                	call   *%eax
   14113:	83 c4 10             	add    $0x10,%esp
}
   14116:	c9                   	leave  
   14117:	c3                   	ret    

00014118 <dev_close>:

/**
 * @brief 关闭设备
 */
void dev_close(int dev_id)
{
   14118:	55                   	push   %ebp
   14119:	89 e5                	mov    %esp,%ebp
   1411b:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id))
   1411e:	ff 75 08             	pushl  0x8(%ebp)
   14121:	e8 84 fd ff ff       	call   13eaa <is_devid_bad>
   14126:	83 c4 04             	add    $0x4,%esp
   14129:	85 c0                	test   %eax,%eax
   1412b:	75 6b                	jne    14198 <dev_close+0x80>
    {
        return;
    }

    device_t *dev = dev_tbl + dev_id;
   1412d:	8b 55 08             	mov    0x8(%ebp),%edx
   14130:	89 d0                	mov    %edx,%eax
   14132:	c1 e0 02             	shl    $0x2,%eax
   14135:	01 d0                	add    %edx,%eax
   14137:	c1 e0 02             	shl    $0x2,%eax
   1413a:	05 60 89 03 00       	add    $0x38960,%eax
   1413f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   14142:	e8 fa ef ff ff       	call   13141 <irq_enter_protection>
   14147:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0)
   1414a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1414d:	8b 40 10             	mov    0x10(%eax),%eax
   14150:	8d 50 ff             	lea    -0x1(%eax),%edx
   14153:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14156:	89 50 10             	mov    %edx,0x10(%eax)
   14159:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1415c:	8b 40 10             	mov    0x10(%eax),%eax
   1415f:	85 c0                	test   %eax,%eax
   14161:	75 25                	jne    14188 <dev_close+0x70>
    {
        dev->desc->close(dev);
   14163:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14166:	8b 00                	mov    (%eax),%eax
   14168:	8b 40 34             	mov    0x34(%eax),%eax
   1416b:	83 ec 0c             	sub    $0xc,%esp
   1416e:	ff 75 f4             	pushl  -0xc(%ebp)
   14171:	ff d0                	call   *%eax
   14173:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   14176:	83 ec 04             	sub    $0x4,%esp
   14179:	6a 14                	push   $0x14
   1417b:	6a 00                	push   $0x0
   1417d:	ff 75 f4             	pushl  -0xc(%ebp)
   14180:	e8 a1 44 00 00       	call   18626 <kernel_memset>
   14185:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   14188:	83 ec 0c             	sub    $0xc,%esp
   1418b:	ff 75 f0             	pushl  -0x10(%ebp)
   1418e:	e8 c6 ef ff ff       	call   13159 <irq_leave_protection>
   14193:	83 c4 10             	add    $0x10,%esp
   14196:	eb 01                	jmp    14199 <dev_close+0x81>
        return;
   14198:	90                   	nop
   14199:	c9                   	leave  
   1419a:	c3                   	ret    

0001419b <inb>:
{
   1419b:	55                   	push   %ebp
   1419c:	89 e5                	mov    %esp,%ebp
   1419e:	83 ec 14             	sub    $0x14,%esp
   141a1:	8b 45 08             	mov    0x8(%ebp),%eax
   141a4:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   141a8:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   141ac:	89 c2                	mov    %eax,%edx
   141ae:	ec                   	in     (%dx),%al
   141af:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   141b2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   141b6:	c9                   	leave  
   141b7:	c3                   	ret    

000141b8 <inw>:
{
   141b8:	55                   	push   %ebp
   141b9:	89 e5                	mov    %esp,%ebp
   141bb:	83 ec 14             	sub    $0x14,%esp
   141be:	8b 45 08             	mov    0x8(%ebp),%eax
   141c1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("in %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   141c5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   141c9:	89 c2                	mov    %eax,%edx
   141cb:	66 ed                	in     (%dx),%ax
   141cd:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    return rv;
   141d1:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   141d5:	c9                   	leave  
   141d6:	c3                   	ret    

000141d7 <outb>:
{
   141d7:	55                   	push   %ebp
   141d8:	89 e5                	mov    %esp,%ebp
   141da:	83 ec 08             	sub    $0x8,%esp
   141dd:	8b 55 08             	mov    0x8(%ebp),%edx
   141e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   141e3:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   141e7:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   141ea:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   141ee:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   141f2:	ee                   	out    %al,(%dx)
}
   141f3:	90                   	nop
   141f4:	c9                   	leave  
   141f5:	c3                   	ret    

000141f6 <outw>:
{
   141f6:	55                   	push   %ebp
   141f7:	89 e5                	mov    %esp,%ebp
   141f9:	83 ec 08             	sub    $0x8,%esp
   141fc:	8b 55 08             	mov    0x8(%ebp),%edx
   141ff:	8b 45 0c             	mov    0xc(%ebp),%eax
   14202:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14206:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    __asm__ __volatile__("out %[v], %[p]" : : [p] "d"(port), [v] "a"(data));
   1420a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1420e:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   14212:	66 ef                	out    %ax,(%dx)
}
   14214:	90                   	nop
   14215:	c9                   	leave  
   14216:	c3                   	ret    

00014217 <ata_send_cmd>:

/**
 * 发送ata命令，支持多达16位的扇区，对我们目前的程序来书够用了。
 */
static void ata_send_cmd(disk_t *disk, uint32_t start_sector, uint32_t sector_count, int cmd)
{
   14217:	55                   	push   %ebp
   14218:	89 e5                	mov    %esp,%ebp
    outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive); // 使用LBA寻址，并设置驱动器
   1421a:	8b 45 08             	mov    0x8(%ebp),%eax
   1421d:	8b 40 20             	mov    0x20(%eax),%eax
   14220:	83 c8 e0             	or     $0xffffffe0,%eax
   14223:	0f b6 d0             	movzbl %al,%edx
   14226:	8b 45 08             	mov    0x8(%ebp),%eax
   14229:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1422d:	83 c0 06             	add    $0x6,%eax
   14230:	0f b7 c0             	movzwl %ax,%eax
   14233:	52                   	push   %edx
   14234:	50                   	push   %eax
   14235:	e8 9d ff ff ff       	call   141d7 <outb>
   1423a:	83 c4 08             	add    $0x8,%esp

    // 必须先写高字节
    outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count >> 8)); // 扇区数高8位
   1423d:	8b 45 10             	mov    0x10(%ebp),%eax
   14240:	c1 e8 08             	shr    $0x8,%eax
   14243:	0f b6 d0             	movzbl %al,%edx
   14246:	8b 45 08             	mov    0x8(%ebp),%eax
   14249:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1424d:	83 c0 02             	add    $0x2,%eax
   14250:	0f b7 c0             	movzwl %ax,%eax
   14253:	52                   	push   %edx
   14254:	50                   	push   %eax
   14255:	e8 7d ff ff ff       	call   141d7 <outb>
   1425a:	83 c4 08             	add    $0x8,%esp
    outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 24));      // LBA参数的24~31位
   1425d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14260:	c1 e8 18             	shr    $0x18,%eax
   14263:	0f b6 d0             	movzbl %al,%edx
   14266:	8b 45 08             	mov    0x8(%ebp),%eax
   14269:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1426d:	83 c0 03             	add    $0x3,%eax
   14270:	0f b7 c0             	movzwl %ax,%eax
   14273:	52                   	push   %edx
   14274:	50                   	push   %eax
   14275:	e8 5d ff ff ff       	call   141d7 <outb>
   1427a:	83 c4 08             	add    $0x8,%esp
    outb(DISK_LBA_MID(disk), 0);                                 // 高于32位不支持
   1427d:	8b 45 08             	mov    0x8(%ebp),%eax
   14280:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14284:	83 c0 04             	add    $0x4,%eax
   14287:	0f b7 c0             	movzwl %ax,%eax
   1428a:	6a 00                	push   $0x0
   1428c:	50                   	push   %eax
   1428d:	e8 45 ff ff ff       	call   141d7 <outb>
   14292:	83 c4 08             	add    $0x8,%esp
    outb(DISK_LBA_HI(disk), 0);                                  // 高于32位不支持
   14295:	8b 45 08             	mov    0x8(%ebp),%eax
   14298:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1429c:	83 c0 05             	add    $0x5,%eax
   1429f:	0f b7 c0             	movzwl %ax,%eax
   142a2:	6a 00                	push   $0x0
   142a4:	50                   	push   %eax
   142a5:	e8 2d ff ff ff       	call   141d7 <outb>
   142aa:	83 c4 08             	add    $0x8,%esp
    outb(DISK_SECTOR_COUNT(disk), (uint8_t)(sector_count));      // 扇区数量低8位
   142ad:	8b 45 10             	mov    0x10(%ebp),%eax
   142b0:	0f b6 d0             	movzbl %al,%edx
   142b3:	8b 45 08             	mov    0x8(%ebp),%eax
   142b6:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142ba:	83 c0 02             	add    $0x2,%eax
   142bd:	0f b7 c0             	movzwl %ax,%eax
   142c0:	52                   	push   %edx
   142c1:	50                   	push   %eax
   142c2:	e8 10 ff ff ff       	call   141d7 <outb>
   142c7:	83 c4 08             	add    $0x8,%esp
    outb(DISK_LBA_LO(disk), (uint8_t)(start_sector >> 0));       // LBA参数的0-7
   142ca:	8b 45 0c             	mov    0xc(%ebp),%eax
   142cd:	0f b6 d0             	movzbl %al,%edx
   142d0:	8b 45 08             	mov    0x8(%ebp),%eax
   142d3:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142d7:	83 c0 03             	add    $0x3,%eax
   142da:	0f b7 c0             	movzwl %ax,%eax
   142dd:	52                   	push   %edx
   142de:	50                   	push   %eax
   142df:	e8 f3 fe ff ff       	call   141d7 <outb>
   142e4:	83 c4 08             	add    $0x8,%esp
    outb(DISK_LBA_MID(disk), (uint8_t)(start_sector >> 8));      // LBA参数的8-15位
   142e7:	8b 45 0c             	mov    0xc(%ebp),%eax
   142ea:	c1 e8 08             	shr    $0x8,%eax
   142ed:	0f b6 d0             	movzbl %al,%edx
   142f0:	8b 45 08             	mov    0x8(%ebp),%eax
   142f3:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142f7:	83 c0 04             	add    $0x4,%eax
   142fa:	0f b7 c0             	movzwl %ax,%eax
   142fd:	52                   	push   %edx
   142fe:	50                   	push   %eax
   142ff:	e8 d3 fe ff ff       	call   141d7 <outb>
   14304:	83 c4 08             	add    $0x8,%esp
    outb(DISK_LBA_HI(disk), (uint8_t)(start_sector >> 16));      // LBA参数的16-23位
   14307:	8b 45 0c             	mov    0xc(%ebp),%eax
   1430a:	c1 e8 10             	shr    $0x10,%eax
   1430d:	0f b6 d0             	movzbl %al,%edx
   14310:	8b 45 08             	mov    0x8(%ebp),%eax
   14313:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14317:	83 c0 05             	add    $0x5,%eax
   1431a:	0f b7 c0             	movzwl %ax,%eax
   1431d:	52                   	push   %edx
   1431e:	50                   	push   %eax
   1431f:	e8 b3 fe ff ff       	call   141d7 <outb>
   14324:	83 c4 08             	add    $0x8,%esp

    // 选择对应的主-从磁盘
    outb(DISK_CMD(disk), (uint8_t)cmd);
   14327:	8b 45 14             	mov    0x14(%ebp),%eax
   1432a:	0f b6 d0             	movzbl %al,%edx
   1432d:	8b 45 08             	mov    0x8(%ebp),%eax
   14330:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14334:	83 c0 07             	add    $0x7,%eax
   14337:	0f b7 c0             	movzwl %ax,%eax
   1433a:	52                   	push   %edx
   1433b:	50                   	push   %eax
   1433c:	e8 96 fe ff ff       	call   141d7 <outb>
   14341:	83 c4 08             	add    $0x8,%esp
}
   14344:	90                   	nop
   14345:	c9                   	leave  
   14346:	c3                   	ret    

00014347 <ata_read_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_read_data(disk_t *disk, void *buf, int size)
{
   14347:	55                   	push   %ebp
   14348:	89 e5                	mov    %esp,%ebp
   1434a:	53                   	push   %ebx
   1434b:	83 ec 10             	sub    $0x10,%esp
    uint16_t *c = (uint16_t *)buf;
   1434e:	8b 45 0c             	mov    0xc(%ebp),%eax
   14351:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (int i = 0; i < size / 2; i++)
   14354:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1435b:	eb 23                	jmp    14380 <ata_read_data+0x39>
    {
        *c++ = inw(DISK_DATA(disk));
   1435d:	8b 45 08             	mov    0x8(%ebp),%eax
   14360:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14364:	0f b7 c0             	movzwl %ax,%eax
   14367:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   1436a:	8d 53 02             	lea    0x2(%ebx),%edx
   1436d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14370:	50                   	push   %eax
   14371:	e8 42 fe ff ff       	call   141b8 <inw>
   14376:	83 c4 04             	add    $0x4,%esp
   14379:	66 89 03             	mov    %ax,(%ebx)
    for (int i = 0; i < size / 2; i++)
   1437c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14380:	8b 45 10             	mov    0x10(%ebp),%eax
   14383:	89 c2                	mov    %eax,%edx
   14385:	c1 ea 1f             	shr    $0x1f,%edx
   14388:	01 d0                	add    %edx,%eax
   1438a:	d1 f8                	sar    %eax
   1438c:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1438f:	7c cc                	jl     1435d <ata_read_data+0x16>
    }
}
   14391:	90                   	nop
   14392:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14395:	c9                   	leave  
   14396:	c3                   	ret    

00014397 <ata_write_data>:

/**
 * 读取ATA数据端口
 */
static inline void ata_write_data(disk_t *disk, void *buf, int size)
{
   14397:	55                   	push   %ebp
   14398:	89 e5                	mov    %esp,%ebp
   1439a:	83 ec 10             	sub    $0x10,%esp
    uint16_t *c = (uint16_t *)buf;
   1439d:	8b 45 0c             	mov    0xc(%ebp),%eax
   143a0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size / 2; i++)
   143a3:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   143aa:	eb 27                	jmp    143d3 <ata_write_data+0x3c>
    {
        outw(DISK_DATA(disk), *c++);
   143ac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   143af:	8d 50 02             	lea    0x2(%eax),%edx
   143b2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   143b5:	0f b7 00             	movzwl (%eax),%eax
   143b8:	0f b7 d0             	movzwl %ax,%edx
   143bb:	8b 45 08             	mov    0x8(%ebp),%eax
   143be:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   143c2:	0f b7 c0             	movzwl %ax,%eax
   143c5:	52                   	push   %edx
   143c6:	50                   	push   %eax
   143c7:	e8 2a fe ff ff       	call   141f6 <outw>
   143cc:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < size / 2; i++)
   143cf:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   143d3:	8b 45 10             	mov    0x10(%ebp),%eax
   143d6:	89 c2                	mov    %eax,%edx
   143d8:	c1 ea 1f             	shr    $0x1f,%edx
   143db:	01 d0                	add    %edx,%eax
   143dd:	d1 f8                	sar    %eax
   143df:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   143e2:	7c c8                	jl     143ac <ata_write_data+0x15>
    }
}
   143e4:	90                   	nop
   143e5:	c9                   	leave  
   143e6:	c3                   	ret    

000143e7 <ata_wait_data>:

/**
 * @brief 等待磁盘有数据到达
 */
static inline int ata_wait_data(disk_t *disk)
{
   143e7:	55                   	push   %ebp
   143e8:	89 e5                	mov    %esp,%ebp
   143ea:	83 ec 10             	sub    $0x10,%esp
    uint8_t status;
    do
    {
        // 等待数据或者有错误
        status = inb(DISK_STATUS(disk));
   143ed:	8b 45 08             	mov    0x8(%ebp),%eax
   143f0:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   143f4:	83 c0 07             	add    $0x7,%eax
   143f7:	0f b7 c0             	movzwl %ax,%eax
   143fa:	50                   	push   %eax
   143fb:	e8 9b fd ff ff       	call   1419b <inb>
   14400:	83 c4 04             	add    $0x4,%esp
   14403:	88 45 ff             	mov    %al,-0x1(%ebp)
        if ((status & (DISK_STATUS_BUSY | DISK_STATUS_DRQ | DISK_STATUS_ERR)) != DISK_STATUS_BUSY)
   14406:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   1440a:	25 89 00 00 00       	and    $0x89,%eax
   1440f:	3d 80 00 00 00       	cmp    $0x80,%eax
   14414:	75 02                	jne    14418 <ata_wait_data+0x31>
        status = inb(DISK_STATUS(disk));
   14416:	eb d5                	jmp    143ed <ata_wait_data+0x6>
        {
            break;
   14418:	90                   	nop
        }
    } while (1);

    // 检查是否有错误
    return (status & DISK_STATUS_ERR) ? -1 : 0;
   14419:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   1441d:	83 e0 01             	and    $0x1,%eax
   14420:	85 c0                	test   %eax,%eax
   14422:	74 07                	je     1442b <ata_wait_data+0x44>
   14424:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14429:	eb 05                	jmp    14430 <ata_wait_data+0x49>
   1442b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14430:	c9                   	leave  
   14431:	c3                   	ret    

00014432 <detect_part_info>:
/**
 * 获取指定序号的分区信息
 * 注意，该操作依赖物理分区分配，如果设备的分区结构有变化，则序号也会改变，得到的结果不同
 */
static int detect_part_info(disk_t *disk)
{
   14432:	55                   	push   %ebp
   14433:	89 e5                	mov    %esp,%ebp
   14435:	81 ec 18 02 00 00    	sub    $0x218,%esp
    mbr_t mbr;

    // 读取mbr区
    ata_send_cmd(disk, 0, 1, DISK_CMD_READ);
   1443b:	6a 24                	push   $0x24
   1443d:	6a 01                	push   $0x1
   1443f:	6a 00                	push   $0x0
   14441:	ff 75 08             	pushl  0x8(%ebp)
   14444:	e8 ce fd ff ff       	call   14217 <ata_send_cmd>
   14449:	83 c4 10             	add    $0x10,%esp
    int err = ata_wait_data(disk);
   1444c:	ff 75 08             	pushl  0x8(%ebp)
   1444f:	e8 93 ff ff ff       	call   143e7 <ata_wait_data>
   14454:	83 c4 04             	add    $0x4,%esp
   14457:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   1445a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1445e:	79 18                	jns    14478 <detect_part_info+0x46>
    {
        log_printf("read mbr failed");
   14460:	83 ec 0c             	sub    $0xc,%esp
   14463:	68 20 98 01 00       	push   $0x19820
   14468:	e8 d3 47 00 00       	call   18c40 <log_printf>
   1446d:	83 c4 10             	add    $0x10,%esp
        return err;
   14470:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14473:	e9 d1 00 00 00       	jmp    14549 <detect_part_info+0x117>
    }
    ata_read_data(disk, &mbr, sizeof(mbr));
   14478:	83 ec 04             	sub    $0x4,%esp
   1447b:	68 00 02 00 00       	push   $0x200
   14480:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14486:	50                   	push   %eax
   14487:	ff 75 08             	pushl  0x8(%ebp)
   1448a:	e8 b8 fe ff ff       	call   14347 <ata_read_data>
   1448f:	83 c4 10             	add    $0x10,%esp

    // 遍历4个主分区描述，不考虑支持扩展分区
    part_item_t *item = mbr.part_item;
   14492:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14498:	05 be 01 00 00       	add    $0x1be,%eax
   1449d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    partinfo_t *part_info = disk->partinfo + 1; // 第0个表项已经使用
   144a0:	8b 45 08             	mov    0x8(%ebp),%eax
   144a3:	83 c0 30             	add    $0x30,%eax
   144a6:	83 c0 30             	add    $0x30,%eax
   144a9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++)
   144ac:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   144b3:	e9 87 00 00 00       	jmp    1453f <detect_part_info+0x10d>
    {
        part_info->type = item->system_id;
   144b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   144bb:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   144bf:	0f b6 d0             	movzbl %al,%edx
   144c2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144c5:	89 50 24             	mov    %edx,0x24(%eax)

        // 没有分区，清空part_info
        if (part_info->type == FS_INVALID)
   144c8:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144cb:	8b 40 24             	mov    0x24(%eax),%eax
   144ce:	85 c0                	test   %eax,%eax
   144d0:	75 20                	jne    144f2 <detect_part_info+0xc0>
        {
            part_info->total_sector = 0;
   144d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144d5:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
            part_info->start_sector = 0;
   144dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144df:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            part_info->disk = (disk_t *)0;
   144e6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144e9:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   144f0:	eb 41                	jmp    14533 <detect_part_info+0x101>
        }
        else
        {
            // 在主分区中找到，复制信息
            kernel_sprintf(part_info->name, "%s%d", disk->name, i + 1);
   144f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   144f5:	8d 48 01             	lea    0x1(%eax),%ecx
   144f8:	8b 55 08             	mov    0x8(%ebp),%edx
   144fb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144fe:	51                   	push   %ecx
   144ff:	52                   	push   %edx
   14500:	68 30 98 01 00       	push   $0x19830
   14505:	50                   	push   %eax
   14506:	e8 44 44 00 00       	call   1894f <kernel_sprintf>
   1450b:	83 c4 10             	add    $0x10,%esp
            part_info->start_sector = item->relative_sectors;
   1450e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14511:	8b 40 08             	mov    0x8(%eax),%eax
   14514:	89 c2                	mov    %eax,%edx
   14516:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14519:	89 50 28             	mov    %edx,0x28(%eax)
            part_info->total_sector = item->total_sectors;
   1451c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1451f:	8b 40 0c             	mov    0xc(%eax),%eax
   14522:	89 c2                	mov    %eax,%edx
   14524:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14527:	89 50 2c             	mov    %edx,0x2c(%eax)
            part_info->disk = disk;
   1452a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1452d:	8b 55 08             	mov    0x8(%ebp),%edx
   14530:	89 50 20             	mov    %edx,0x20(%eax)
    for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++)
   14533:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   14537:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   1453b:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   1453f:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   14543:	0f 8e 6f ff ff ff    	jle    144b8 <detect_part_info+0x86>
        }
    }
}
   14549:	c9                   	leave  
   1454a:	c3                   	ret    

0001454b <identify_disk>:

/**
 * @brief 检测磁盘相关的信息
 */
static int identify_disk(disk_t *disk)
{
   1454b:	55                   	push   %ebp
   1454c:	89 e5                	mov    %esp,%ebp
   1454e:	81 ec 18 02 00 00    	sub    $0x218,%esp
    ata_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   14554:	68 ec 00 00 00       	push   $0xec
   14559:	6a 00                	push   $0x0
   1455b:	6a 00                	push   $0x0
   1455d:	ff 75 08             	pushl  0x8(%ebp)
   14560:	e8 b2 fc ff ff       	call   14217 <ata_send_cmd>
   14565:	83 c4 10             	add    $0x10,%esp

    // 检测状态，如果为0，则控制器不存在
    int err = inb(DISK_STATUS(disk));
   14568:	8b 45 08             	mov    0x8(%ebp),%eax
   1456b:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1456f:	83 c0 07             	add    $0x7,%eax
   14572:	0f b7 c0             	movzwl %ax,%eax
   14575:	50                   	push   %eax
   14576:	e8 20 fc ff ff       	call   1419b <inb>
   1457b:	83 c4 04             	add    $0x4,%esp
   1457e:	0f b6 c0             	movzbl %al,%eax
   14581:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0)
   14584:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14588:	75 1e                	jne    145a8 <identify_disk+0x5d>
    {
        log_printf("%s doesn't exist\n", disk->name);
   1458a:	8b 45 08             	mov    0x8(%ebp),%eax
   1458d:	83 ec 08             	sub    $0x8,%esp
   14590:	50                   	push   %eax
   14591:	68 35 98 01 00       	push   $0x19835
   14596:	e8 a5 46 00 00       	call   18c40 <log_printf>
   1459b:	83 c4 10             	add    $0x10,%esp
        return -1;
   1459e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   145a3:	e9 c8 00 00 00       	jmp    14670 <identify_disk+0x125>
    }

    // 等待数据就绪, 此时中断还未开启，因此暂时可以使用查询模式
    err = ata_wait_data(disk);
   145a8:	83 ec 0c             	sub    $0xc,%esp
   145ab:	ff 75 08             	pushl  0x8(%ebp)
   145ae:	e8 34 fe ff ff       	call   143e7 <ata_wait_data>
   145b3:	83 c4 10             	add    $0x10,%esp
   145b6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   145b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   145bd:	79 1c                	jns    145db <identify_disk+0x90>
    {
        log_printf("disk[%s]: read failed!\n", disk->name);
   145bf:	8b 45 08             	mov    0x8(%ebp),%eax
   145c2:	83 ec 08             	sub    $0x8,%esp
   145c5:	50                   	push   %eax
   145c6:	68 47 98 01 00       	push   $0x19847
   145cb:	e8 70 46 00 00       	call   18c40 <log_printf>
   145d0:	83 c4 10             	add    $0x10,%esp
        return err;
   145d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145d6:	e9 95 00 00 00       	jmp    14670 <identify_disk+0x125>

    // 读取返回的数据，特别是uint16_t 100 through 103
    // 测试用的盘： 总共102400 = 0x19000， 实测会多一个扇区，为vhd磁盘格式增加的一个扇区
    // https://wiki.osdev.org/ATA_PIO_Mode
    uint16_t buf[256];
    ata_read_data(disk, buf, sizeof(buf));
   145db:	83 ec 04             	sub    $0x4,%esp
   145de:	68 00 02 00 00       	push   $0x200
   145e3:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   145e9:	50                   	push   %eax
   145ea:	ff 75 08             	pushl  0x8(%ebp)
   145ed:	e8 55 fd ff ff       	call   14347 <ata_read_data>
   145f2:	83 c4 10             	add    $0x10,%esp
    disk->sector_count = *(uint32_t *)(buf + 100);
   145f5:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   145fb:	05 c8 00 00 00       	add    $0xc8,%eax
   14600:	8b 00                	mov    (%eax),%eax
   14602:	89 c2                	mov    %eax,%edx
   14604:	8b 45 08             	mov    0x8(%ebp),%eax
   14607:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE; // 固定为512字节大小
   1460a:	8b 45 08             	mov    0x8(%ebp),%eax
   1460d:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    // 分区0保存了整个磁盘的信息
    partinfo_t *part = disk->partinfo + 0;
   14614:	8b 45 08             	mov    0x8(%ebp),%eax
   14617:	83 c0 30             	add    $0x30,%eax
   1461a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part->disk = disk;
   1461d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14620:	8b 55 08             	mov    0x8(%ebp),%edx
   14623:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part->name, "%s%d", disk->name, 0);
   14626:	8b 55 08             	mov    0x8(%ebp),%edx
   14629:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1462c:	6a 00                	push   $0x0
   1462e:	52                   	push   %edx
   1462f:	68 30 98 01 00       	push   $0x19830
   14634:	50                   	push   %eax
   14635:	e8 15 43 00 00       	call   1894f <kernel_sprintf>
   1463a:	83 c4 10             	add    $0x10,%esp
    part->start_sector = 0;
   1463d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14640:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part->total_sector = disk->sector_count;
   14647:	8b 45 08             	mov    0x8(%ebp),%eax
   1464a:	8b 50 2c             	mov    0x2c(%eax),%edx
   1464d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14650:	89 50 2c             	mov    %edx,0x2c(%eax)
    part->type = FS_INVALID;
   14653:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14656:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    // 接下来识别硬盘上的分区信息
    detect_part_info(disk);
   1465d:	83 ec 0c             	sub    $0xc,%esp
   14660:	ff 75 08             	pushl  0x8(%ebp)
   14663:	e8 ca fd ff ff       	call   14432 <detect_part_info>
   14668:	83 c4 10             	add    $0x10,%esp

    return 0;
   1466b:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14670:	c9                   	leave  
   14671:	c3                   	ret    

00014672 <print_disk_info>:

/**
 * @brief 打印磁盘信息
 */
static void print_disk_info(disk_t *disk)
{
   14672:	55                   	push   %ebp
   14673:	89 e5                	mov    %esp,%ebp
   14675:	53                   	push   %ebx
   14676:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s:", disk->name);
   14679:	8b 45 08             	mov    0x8(%ebp),%eax
   1467c:	83 ec 08             	sub    $0x8,%esp
   1467f:	50                   	push   %eax
   14680:	68 5f 98 01 00       	push   $0x1985f
   14685:	e8 b6 45 00 00       	call   18c40 <log_printf>
   1468a:	83 c4 10             	add    $0x10,%esp
    log_printf("  port_base: %x", disk->port_base);
   1468d:	8b 45 08             	mov    0x8(%ebp),%eax
   14690:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14694:	0f b7 c0             	movzwl %ax,%eax
   14697:	83 ec 08             	sub    $0x8,%esp
   1469a:	50                   	push   %eax
   1469b:	68 63 98 01 00       	push   $0x19863
   146a0:	e8 9b 45 00 00       	call   18c40 <log_printf>
   146a5:	83 c4 10             	add    $0x10,%esp
    log_printf("  total_size: %d m", disk->sector_count * disk->sector_size / 1024 / 1024);
   146a8:	8b 45 08             	mov    0x8(%ebp),%eax
   146ab:	8b 50 2c             	mov    0x2c(%eax),%edx
   146ae:	8b 45 08             	mov    0x8(%ebp),%eax
   146b1:	8b 40 28             	mov    0x28(%eax),%eax
   146b4:	0f af c2             	imul   %edx,%eax
   146b7:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   146bd:	85 c0                	test   %eax,%eax
   146bf:	0f 48 c2             	cmovs  %edx,%eax
   146c2:	c1 f8 14             	sar    $0x14,%eax
   146c5:	83 ec 08             	sub    $0x8,%esp
   146c8:	50                   	push   %eax
   146c9:	68 73 98 01 00       	push   $0x19873
   146ce:	e8 6d 45 00 00       	call   18c40 <log_printf>
   146d3:	83 c4 10             	add    $0x10,%esp
    log_printf("  drive: %s", disk->drive == DISK_DISK_MASTER ? "Master" : "Slave");
   146d6:	8b 45 08             	mov    0x8(%ebp),%eax
   146d9:	8b 40 20             	mov    0x20(%eax),%eax
   146dc:	85 c0                	test   %eax,%eax
   146de:	75 07                	jne    146e7 <print_disk_info+0x75>
   146e0:	b8 86 98 01 00       	mov    $0x19886,%eax
   146e5:	eb 05                	jmp    146ec <print_disk_info+0x7a>
   146e7:	b8 8d 98 01 00       	mov    $0x1988d,%eax
   146ec:	83 ec 08             	sub    $0x8,%esp
   146ef:	50                   	push   %eax
   146f0:	68 93 98 01 00       	push   $0x19893
   146f5:	e8 46 45 00 00       	call   18c40 <log_printf>
   146fa:	83 c4 10             	add    $0x10,%esp

    // 显示分区信息
    log_printf("  Part info:");
   146fd:	83 ec 0c             	sub    $0xc,%esp
   14700:	68 9f 98 01 00       	push   $0x1989f
   14705:	e8 36 45 00 00       	call   18c40 <log_printf>
   1470a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++)
   1470d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14714:	eb 4e                	jmp    14764 <print_disk_info+0xf2>
    {
        partinfo_t *part_info = disk->partinfo + i;
   14716:	8b 45 08             	mov    0x8(%ebp),%eax
   14719:	8d 48 30             	lea    0x30(%eax),%ecx
   1471c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1471f:	89 d0                	mov    %edx,%eax
   14721:	01 c0                	add    %eax,%eax
   14723:	01 d0                	add    %edx,%eax
   14725:	c1 e0 04             	shl    $0x4,%eax
   14728:	01 c8                	add    %ecx,%eax
   1472a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (part_info->type != FS_INVALID)
   1472d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14730:	8b 40 24             	mov    0x24(%eax),%eax
   14733:	85 c0                	test   %eax,%eax
   14735:	74 29                	je     14760 <print_disk_info+0xee>
        {
            log_printf("    %s: type: %x, start sector: %d, count %d",
   14737:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1473a:	8b 58 2c             	mov    0x2c(%eax),%ebx
   1473d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14740:	8b 48 28             	mov    0x28(%eax),%ecx
                       part_info->name, part_info->type,
   14743:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14746:	8b 50 24             	mov    0x24(%eax),%edx
   14749:	8b 45 f0             	mov    -0x10(%ebp),%eax
            log_printf("    %s: type: %x, start sector: %d, count %d",
   1474c:	83 ec 0c             	sub    $0xc,%esp
   1474f:	53                   	push   %ebx
   14750:	51                   	push   %ecx
   14751:	52                   	push   %edx
   14752:	50                   	push   %eax
   14753:	68 ac 98 01 00       	push   $0x198ac
   14758:	e8 e3 44 00 00       	call   18c40 <log_printf>
   1475d:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++)
   14760:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14764:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   14768:	7e ac                	jle    14716 <print_disk_info+0xa4>
                       part_info->start_sector, part_info->total_sector);
        }
    }
}
   1476a:	90                   	nop
   1476b:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1476e:	c9                   	leave  
   1476f:	c3                   	ret    

00014770 <disk_open>:

/**
 * @brief 打开磁盘设备
 */
int disk_open(device_t *dev)
{
   14770:	55                   	push   %ebp
   14771:	89 e5                	mov    %esp,%ebp
   14773:	83 ec 18             	sub    $0x18,%esp
    // 0xa0 -- a 磁盘编号a，b，c，d - 分区号 0，1，2
    int disk_idx = (dev->minor >> 4) - 0xa;
   14776:	8b 45 08             	mov    0x8(%ebp),%eax
   14779:	8b 40 08             	mov    0x8(%eax),%eax
   1477c:	c1 f8 04             	sar    $0x4,%eax
   1477f:	83 e8 0a             	sub    $0xa,%eax
   14782:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int part_idx = dev->minor & 0xF;
   14785:	8b 45 08             	mov    0x8(%ebp),%eax
   14788:	8b 40 08             	mov    0x8(%eax),%eax
   1478b:	83 e0 0f             	and    $0xf,%eax
   1478e:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if ((disk_idx >= DISK_CNT) || (part_idx >= DISK_PRIMARY_PART_CNT))
   14791:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14795:	7f 06                	jg     1479d <disk_open+0x2d>
   14797:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1479b:	7e 21                	jle    147be <disk_open+0x4e>
    {
        log_printf("device minor error: %d", dev->minor);
   1479d:	8b 45 08             	mov    0x8(%ebp),%eax
   147a0:	8b 40 08             	mov    0x8(%eax),%eax
   147a3:	83 ec 08             	sub    $0x8,%esp
   147a6:	50                   	push   %eax
   147a7:	68 d9 98 01 00       	push   $0x198d9
   147ac:	e8 8f 44 00 00       	call   18c40 <log_printf>
   147b1:	83 c4 10             	add    $0x10,%esp
        return -1;
   147b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147b9:	e9 a5 00 00 00       	jmp    14863 <disk_open+0xf3>
    }

    // 磁盘检查
    disk_t *disk = disk_buf + disk_idx;
   147be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   147c1:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   147c7:	05 60 93 03 00       	add    $0x39360,%eax
   147cc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk->sector_size == 0)
   147cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   147d2:	8b 40 28             	mov    0x28(%eax),%eax
   147d5:	85 c0                	test   %eax,%eax
   147d7:	75 1e                	jne    147f7 <disk_open+0x87>
    {
        log_printf("disk not exist. device:sd%x", dev->minor);
   147d9:	8b 45 08             	mov    0x8(%ebp),%eax
   147dc:	8b 40 08             	mov    0x8(%eax),%eax
   147df:	83 ec 08             	sub    $0x8,%esp
   147e2:	50                   	push   %eax
   147e3:	68 f0 98 01 00       	push   $0x198f0
   147e8:	e8 53 44 00 00       	call   18c40 <log_printf>
   147ed:	83 c4 10             	add    $0x10,%esp
        return -1;
   147f0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   147f5:	eb 6c                	jmp    14863 <disk_open+0xf3>
    }

    // 分区检查
    partinfo_t *part_info = disk->partinfo + part_idx;
   147f7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   147fa:	8d 48 30             	lea    0x30(%eax),%ecx
   147fd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14800:	89 d0                	mov    %edx,%eax
   14802:	01 c0                	add    %eax,%eax
   14804:	01 d0                	add    %edx,%eax
   14806:	c1 e0 04             	shl    $0x4,%eax
   14809:	01 c8                	add    %ecx,%eax
   1480b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (part_info->total_sector == 0)
   1480e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   14811:	8b 40 2c             	mov    0x2c(%eax),%eax
   14814:	85 c0                	test   %eax,%eax
   14816:	75 1e                	jne    14836 <disk_open+0xc6>
    {
        log_printf("part not exist. device:sd%x", dev->minor);
   14818:	8b 45 08             	mov    0x8(%ebp),%eax
   1481b:	8b 40 08             	mov    0x8(%eax),%eax
   1481e:	83 ec 08             	sub    $0x8,%esp
   14821:	50                   	push   %eax
   14822:	68 0c 99 01 00       	push   $0x1990c
   14827:	e8 14 44 00 00       	call   18c40 <log_printf>
   1482c:	83 c4 10             	add    $0x10,%esp
        return -1;
   1482f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14834:	eb 2d                	jmp    14863 <disk_open+0xf3>
    }

    // 磁盘存在，建立关联
    dev->data = part_info;
   14836:	8b 45 08             	mov    0x8(%ebp),%eax
   14839:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1483c:	89 50 0c             	mov    %edx,0xc(%eax)
    irq_install(IRQ14_HARDDISK_PRIMARY, exception_handler_ide_primary);
   1483f:	83 ec 08             	sub    $0x8,%esp
   14842:	68 d1 02 01 00       	push   $0x102d1
   14847:	6a 2e                	push   $0x2e
   14849:	e8 66 e7 ff ff       	call   12fb4 <irq_install>
   1484e:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ14_HARDDISK_PRIMARY);
   14851:	83 ec 0c             	sub    $0xc,%esp
   14854:	6a 2e                	push   $0x2e
   14856:	e8 93 e7 ff ff       	call   12fee <irq_enable>
   1485b:	83 c4 10             	add    $0x10,%esp
    return 0;
   1485e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14863:	c9                   	leave  
   14864:	c3                   	ret    

00014865 <disk_read>:

/**
 * @brief 读磁盘
 */
int disk_read(device_t *dev, int start_sector, char *buf, int count)
{
   14865:	55                   	push   %ebp
   14866:	89 e5                	mov    %esp,%ebp
   14868:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t *part_info = (partinfo_t *)dev->data;
   1486b:	8b 45 08             	mov    0x8(%ebp),%eax
   1486e:	8b 40 0c             	mov    0xc(%eax),%eax
   14871:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info)
   14874:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14878:	75 21                	jne    1489b <disk_read+0x36>
    {
        log_printf("Get part info failed! device = %d", dev->minor);
   1487a:	8b 45 08             	mov    0x8(%ebp),%eax
   1487d:	8b 40 08             	mov    0x8(%eax),%eax
   14880:	83 ec 08             	sub    $0x8,%esp
   14883:	50                   	push   %eax
   14884:	68 28 99 01 00       	push   $0x19928
   14889:	e8 b2 43 00 00       	call   18c40 <log_printf>
   1488e:	83 c4 10             	add    $0x10,%esp
        return -1;
   14891:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14896:	e9 08 01 00 00       	jmp    149a3 <disk_read+0x13e>
    }

    disk_t *disk = part_info->disk;
   1489b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1489e:	8b 40 20             	mov    0x20(%eax),%eax
   148a1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0)
   148a4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   148a8:	75 21                	jne    148cb <disk_read+0x66>
    {
        log_printf("No disk for device %d", dev->minor);
   148aa:	8b 45 08             	mov    0x8(%ebp),%eax
   148ad:	8b 40 08             	mov    0x8(%eax),%eax
   148b0:	83 ec 08             	sub    $0x8,%esp
   148b3:	50                   	push   %eax
   148b4:	68 4a 99 01 00       	push   $0x1994a
   148b9:	e8 82 43 00 00       	call   18c40 <log_printf>
   148be:	83 c4 10             	add    $0x10,%esp
        return -1;
   148c1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   148c6:	e9 d8 00 00 00       	jmp    149a3 <disk_read+0x13e>
    }

    mutex_lock(disk->mutex);
   148cb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   148ce:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   148d4:	83 ec 0c             	sub    $0xc,%esp
   148d7:	50                   	push   %eax
   148d8:	e8 a9 36 00 00       	call   17f86 <mutex_lock>
   148dd:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   148e0:	c7 05 d4 95 03 00 01 	movl   $0x1,0x395d4
   148e7:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_READ);
   148ea:	8b 45 14             	mov    0x14(%ebp),%eax
   148ed:	8b 55 f0             	mov    -0x10(%ebp),%edx
   148f0:	8b 4a 28             	mov    0x28(%edx),%ecx
   148f3:	8b 55 0c             	mov    0xc(%ebp),%edx
   148f6:	01 ca                	add    %ecx,%edx
   148f8:	6a 24                	push   $0x24
   148fa:	50                   	push   %eax
   148fb:	52                   	push   %edx
   148fc:	ff 75 ec             	pushl  -0x14(%ebp)
   148ff:	e8 13 f9 ff ff       	call   14217 <ata_send_cmd>
   14904:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size)
   14907:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1490e:	eb 73                	jmp    14983 <disk_read+0x11e>
    {
        // 利用信号量等待中断通知，然后再读取数据
        // 防止系统初始化忙等
        if (task_current())
   14910:	e8 8b cc ff ff       	call   115a0 <task_current>
   14915:	85 c0                	test   %eax,%eax
   14917:	74 15                	je     1492e <disk_read+0xc9>
        {
            sem_wait(disk->op_sem);
   14919:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1491c:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14922:	83 ec 0c             	sub    $0xc,%esp
   14925:	50                   	push   %eax
   14926:	e8 da 37 00 00       	call   18105 <sem_wait>
   1492b:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   1492e:	83 ec 0c             	sub    $0xc,%esp
   14931:	ff 75 ec             	pushl  -0x14(%ebp)
   14934:	e8 ae fa ff ff       	call   143e7 <ata_wait_data>
   14939:	83 c4 10             	add    $0x10,%esp
   1493c:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0)
   1493f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14943:	79 19                	jns    1495e <disk_read+0xf9>
        {
            log_printf("disk(%s) read error: start sect %d, count %d", disk->name, start_sector, count);
   14945:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14948:	ff 75 14             	pushl  0x14(%ebp)
   1494b:	ff 75 0c             	pushl  0xc(%ebp)
   1494e:	50                   	push   %eax
   1494f:	68 60 99 01 00       	push   $0x19960
   14954:	e8 e7 42 00 00       	call   18c40 <log_printf>
   14959:	83 c4 10             	add    $0x10,%esp
            break;
   1495c:	eb 2d                	jmp    1498b <disk_read+0x126>
        }

        // 此处再读取数据
        ata_read_data(disk, buf, disk->sector_size);
   1495e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14961:	8b 40 28             	mov    0x28(%eax),%eax
   14964:	83 ec 04             	sub    $0x4,%esp
   14967:	50                   	push   %eax
   14968:	ff 75 10             	pushl  0x10(%ebp)
   1496b:	ff 75 ec             	pushl  -0x14(%ebp)
   1496e:	e8 d4 f9 ff ff       	call   14347 <ata_read_data>
   14973:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size)
   14976:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1497a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1497d:	8b 40 28             	mov    0x28(%eax),%eax
   14980:	01 45 10             	add    %eax,0x10(%ebp)
   14983:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14986:	3b 45 14             	cmp    0x14(%ebp),%eax
   14989:	7c 85                	jl     14910 <disk_read+0xab>
    }

    mutex_unlock(disk->mutex);
   1498b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1498e:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14994:	83 ec 0c             	sub    $0xc,%esp
   14997:	50                   	push   %eax
   14998:	e8 7d 36 00 00       	call   1801a <mutex_unlock>
   1499d:	83 c4 10             	add    $0x10,%esp
    return cnt;
   149a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   149a3:	c9                   	leave  
   149a4:	c3                   	ret    

000149a5 <disk_write>:

/**
 * @brief 写扇区
 */
int disk_write(device_t *dev, int start_sector, char *buf, int count)
{
   149a5:	55                   	push   %ebp
   149a6:	89 e5                	mov    %esp,%ebp
   149a8:	83 ec 18             	sub    $0x18,%esp
    // 取分区信息
    partinfo_t *part_info = (partinfo_t *)dev->data;
   149ab:	8b 45 08             	mov    0x8(%ebp),%eax
   149ae:	8b 40 0c             	mov    0xc(%eax),%eax
   149b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info)
   149b4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   149b8:	75 21                	jne    149db <disk_write+0x36>
    {
        log_printf("Get part info failed! device = %d", dev->minor);
   149ba:	8b 45 08             	mov    0x8(%ebp),%eax
   149bd:	8b 40 08             	mov    0x8(%eax),%eax
   149c0:	83 ec 08             	sub    $0x8,%esp
   149c3:	50                   	push   %eax
   149c4:	68 28 99 01 00       	push   $0x19928
   149c9:	e8 72 42 00 00       	call   18c40 <log_printf>
   149ce:	83 c4 10             	add    $0x10,%esp
        return -1;
   149d1:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   149d6:	e9 08 01 00 00       	jmp    14ae3 <disk_write+0x13e>
    }

    disk_t *disk = part_info->disk;
   149db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   149de:	8b 40 20             	mov    0x20(%eax),%eax
   149e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0)
   149e4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   149e8:	75 21                	jne    14a0b <disk_write+0x66>
    {
        log_printf("No disk for device %d", dev->minor);
   149ea:	8b 45 08             	mov    0x8(%ebp),%eax
   149ed:	8b 40 08             	mov    0x8(%eax),%eax
   149f0:	83 ec 08             	sub    $0x8,%esp
   149f3:	50                   	push   %eax
   149f4:	68 4a 99 01 00       	push   $0x1994a
   149f9:	e8 42 42 00 00       	call   18c40 <log_printf>
   149fe:	83 c4 10             	add    $0x10,%esp
        return -1;
   14a01:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a06:	e9 d8 00 00 00       	jmp    14ae3 <disk_write+0x13e>
    }

    mutex_lock(disk->mutex);
   14a0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a0e:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14a14:	83 ec 0c             	sub    $0xc,%esp
   14a17:	50                   	push   %eax
   14a18:	e8 69 35 00 00       	call   17f86 <mutex_lock>
   14a1d:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   14a20:	c7 05 d4 95 03 00 01 	movl   $0x1,0x395d4
   14a27:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_WRITE);
   14a2a:	8b 45 14             	mov    0x14(%ebp),%eax
   14a2d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14a30:	8b 4a 28             	mov    0x28(%edx),%ecx
   14a33:	8b 55 0c             	mov    0xc(%ebp),%edx
   14a36:	01 ca                	add    %ecx,%edx
   14a38:	6a 34                	push   $0x34
   14a3a:	50                   	push   %eax
   14a3b:	52                   	push   %edx
   14a3c:	ff 75 ec             	pushl  -0x14(%ebp)
   14a3f:	e8 d3 f7 ff ff       	call   14217 <ata_send_cmd>
   14a44:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size)
   14a47:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14a4e:	eb 73                	jmp    14ac3 <disk_write+0x11e>
    {
        // 先写数据
        ata_write_data(disk, buf, disk->sector_size);
   14a50:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a53:	8b 40 28             	mov    0x28(%eax),%eax
   14a56:	83 ec 04             	sub    $0x4,%esp
   14a59:	50                   	push   %eax
   14a5a:	ff 75 10             	pushl  0x10(%ebp)
   14a5d:	ff 75 ec             	pushl  -0x14(%ebp)
   14a60:	e8 32 f9 ff ff       	call   14397 <ata_write_data>
   14a65:	83 c4 10             	add    $0x10,%esp

        // 利用信号量等待中断通知，等待写完成
        if (task_current())
   14a68:	e8 33 cb ff ff       	call   115a0 <task_current>
   14a6d:	85 c0                	test   %eax,%eax
   14a6f:	74 15                	je     14a86 <disk_write+0xe1>
        {
            sem_wait(disk->op_sem);
   14a71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a74:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14a7a:	83 ec 0c             	sub    $0xc,%esp
   14a7d:	50                   	push   %eax
   14a7e:	e8 82 36 00 00       	call   18105 <sem_wait>
   14a83:	83 c4 10             	add    $0x10,%esp
        }

        // 这里虽然有调用等待，但是由于已经是操作完毕，所以并不会等
        int err = ata_wait_data(disk);
   14a86:	83 ec 0c             	sub    $0xc,%esp
   14a89:	ff 75 ec             	pushl  -0x14(%ebp)
   14a8c:	e8 56 f9 ff ff       	call   143e7 <ata_wait_data>
   14a91:	83 c4 10             	add    $0x10,%esp
   14a94:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0)
   14a97:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14a9b:	79 19                	jns    14ab6 <disk_write+0x111>
        {
            log_printf("disk(%s) write error: start sect %d, count %d", disk->name, start_sector, count);
   14a9d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aa0:	ff 75 14             	pushl  0x14(%ebp)
   14aa3:	ff 75 0c             	pushl  0xc(%ebp)
   14aa6:	50                   	push   %eax
   14aa7:	68 90 99 01 00       	push   $0x19990
   14aac:	e8 8f 41 00 00       	call   18c40 <log_printf>
   14ab1:	83 c4 10             	add    $0x10,%esp
            break;
   14ab4:	eb 15                	jmp    14acb <disk_write+0x126>
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size)
   14ab6:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14aba:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14abd:	8b 40 28             	mov    0x28(%eax),%eax
   14ac0:	01 45 10             	add    %eax,0x10(%ebp)
   14ac3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14ac6:	3b 45 14             	cmp    0x14(%ebp),%eax
   14ac9:	7c 85                	jl     14a50 <disk_write+0xab>
        }
    }

    mutex_unlock(disk->mutex);
   14acb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ace:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14ad4:	83 ec 0c             	sub    $0xc,%esp
   14ad7:	50                   	push   %eax
   14ad8:	e8 3d 35 00 00       	call   1801a <mutex_unlock>
   14add:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14ae0:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14ae3:	c9                   	leave  
   14ae4:	c3                   	ret    

00014ae5 <disk_control>:
/**
 * @brief 向磁盘发命令
 *
 */
int disk_control(device_t *dev, int cmd, int arg0, int arg1)
{
   14ae5:	55                   	push   %ebp
   14ae6:	89 e5                	mov    %esp,%ebp
    return 0;
   14ae8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14aed:	5d                   	pop    %ebp
   14aee:	c3                   	ret    

00014aef <disk_close>:
/**
 * @brief 关闭磁盘
 *
 */
void disk_close(device_t *dev)
{
   14aef:	55                   	push   %ebp
   14af0:	89 e5                	mov    %esp,%ebp
}
   14af2:	90                   	nop
   14af3:	5d                   	pop    %ebp
   14af4:	c3                   	ret    

00014af5 <do_handler_ide_primary>:

/**
 * @brief 磁盘主通道中断处理
 */
void do_handler_ide_primary(exception_frame_t *frame)
{
   14af5:	55                   	push   %ebp
   14af6:	89 e5                	mov    %esp,%ebp
   14af8:	83 ec 08             	sub    $0x8,%esp
    pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14afb:	83 ec 0c             	sub    $0xc,%esp
   14afe:	6a 2e                	push   $0x2e
   14b00:	e8 11 e6 ff ff       	call   13116 <pic_send_eoi>
   14b05:	83 c4 10             	add    $0x10,%esp
    if (task_on_op && task_current())
   14b08:	a1 d4 95 03 00       	mov    0x395d4,%eax
   14b0d:	85 c0                	test   %eax,%eax
   14b0f:	74 19                	je     14b2a <do_handler_ide_primary+0x35>
   14b11:	e8 8a ca ff ff       	call   115a0 <task_current>
   14b16:	85 c0                	test   %eax,%eax
   14b18:	74 10                	je     14b2a <do_handler_ide_primary+0x35>
    {
        sem_notify(&op_sem);
   14b1a:	83 ec 0c             	sub    $0xc,%esp
   14b1d:	68 c4 95 03 00       	push   $0x395c4
   14b22:	e8 49 36 00 00       	call   18170 <sem_notify>
   14b27:	83 c4 10             	add    $0x10,%esp
    }
}
   14b2a:	90                   	nop
   14b2b:	c9                   	leave  
   14b2c:	c3                   	ret    

00014b2d <disk_init>:
/**
 * @brief 磁盘初始化及检测
 * 以下只是将相关磁盘相关的信息给读取到内存中
 */
void disk_init(void)
{
   14b2d:	55                   	push   %ebp
   14b2e:	89 e5                	mov    %esp,%ebp
   14b30:	83 ec 18             	sub    $0x18,%esp
    log_printf("Checking disk...");
   14b33:	83 ec 0c             	sub    $0xc,%esp
   14b36:	68 be 99 01 00       	push   $0x199be
   14b3b:	e8 00 41 00 00       	call   18c40 <log_printf>
   14b40:	83 c4 10             	add    $0x10,%esp
    // 清空所有disk，以免数据错乱。不过引导程序应该有清0的，这里为安全再清一遍
    kernel_memset(disk_buf, 0, sizeof(disk_buf));
   14b43:	83 ec 04             	sub    $0x4,%esp
   14b46:	68 50 02 00 00       	push   $0x250
   14b4b:	6a 00                	push   $0x0
   14b4d:	68 60 93 03 00       	push   $0x39360
   14b52:	e8 cf 3a 00 00       	call   18626 <kernel_memset>
   14b57:	83 c4 10             	add    $0x10,%esp

    // 信号量和锁
    mutex_init(&mutex);
   14b5a:	83 ec 0c             	sub    $0xc,%esp
   14b5d:	68 b0 95 03 00       	push   $0x395b0
   14b62:	e8 f1 33 00 00       	call   17f58 <mutex_init>
   14b67:	83 c4 10             	add    $0x10,%esp
    sem_init(&op_sem, 0); // 没有操作完成
   14b6a:	83 ec 08             	sub    $0x8,%esp
   14b6d:	6a 00                	push   $0x0
   14b6f:	68 c4 95 03 00       	push   $0x395c4
   14b74:	e8 69 35 00 00       	call   180e2 <sem_init>
   14b79:	83 c4 10             	add    $0x10,%esp

    // 检测各个硬盘, 读取硬件是否存在，有其相关信息
    for (int i = 0; i < DISK_PER_CHANNEL; i++)
   14b7c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14b83:	e9 90 00 00 00       	jmp    14c18 <disk_init+0xeb>
    {
        disk_t *disk = disk_buf + i;
   14b88:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b8b:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14b91:	05 60 93 03 00       	add    $0x39360,%eax
   14b96:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 先初始化各字段
        kernel_sprintf(disk->name, "sd%c", i + 'a');
   14b99:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b9c:	8d 50 61             	lea    0x61(%eax),%edx
   14b9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14ba2:	83 ec 04             	sub    $0x4,%esp
   14ba5:	52                   	push   %edx
   14ba6:	68 cf 99 01 00       	push   $0x199cf
   14bab:	50                   	push   %eax
   14bac:	e8 9e 3d 00 00       	call   1894f <kernel_sprintf>
   14bb1:	83 c4 10             	add    $0x10,%esp
        disk->drive = (i == 0) ? DISK_DISK_MASTER : DISK_DISK_SLAVE;
   14bb4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14bb8:	75 07                	jne    14bc1 <disk_init+0x94>
   14bba:	ba 00 00 00 00       	mov    $0x0,%edx
   14bbf:	eb 05                	jmp    14bc6 <disk_init+0x99>
   14bc1:	ba 10 00 00 00       	mov    $0x10,%edx
   14bc6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14bc9:	89 50 20             	mov    %edx,0x20(%eax)
        disk->port_base = IOBASE_PRIMARY;
   14bcc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14bcf:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
        disk->mutex = &mutex;
   14bd5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14bd8:	c7 80 20 01 00 00 b0 	movl   $0x395b0,0x120(%eax)
   14bdf:	95 03 00 
        disk->op_sem = &op_sem;
   14be2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14be5:	c7 80 24 01 00 00 c4 	movl   $0x395c4,0x124(%eax)
   14bec:	95 03 00 

        // 识别磁盘，有错不处理，直接跳过
        int err = identify_disk(disk);
   14bef:	83 ec 0c             	sub    $0xc,%esp
   14bf2:	ff 75 f0             	pushl  -0x10(%ebp)
   14bf5:	e8 51 f9 ff ff       	call   1454b <identify_disk>
   14bfa:	83 c4 10             	add    $0x10,%esp
   14bfd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err == 0)
   14c00:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14c04:	75 0e                	jne    14c14 <disk_init+0xe7>
        {
            print_disk_info(disk);
   14c06:	83 ec 0c             	sub    $0xc,%esp
   14c09:	ff 75 f0             	pushl  -0x10(%ebp)
   14c0c:	e8 61 fa ff ff       	call   14672 <print_disk_info>
   14c11:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PER_CHANNEL; i++)
   14c14:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14c18:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14c1c:	0f 8e 66 ff ff ff    	jle    14b88 <disk_init+0x5b>
        }
    }
}
   14c22:	90                   	nop
   14c23:	c9                   	leave  
   14c24:	c3                   	ret    

00014c25 <inb>:
{
   14c25:	55                   	push   %ebp
   14c26:	89 e5                	mov    %esp,%ebp
   14c28:	83 ec 14             	sub    $0x14,%esp
   14c2b:	8b 45 08             	mov    0x8(%ebp),%eax
   14c2e:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   14c32:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14c36:	89 c2                	mov    %eax,%edx
   14c38:	ec                   	in     (%dx),%al
   14c39:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   14c3c:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14c40:	c9                   	leave  
   14c41:	c3                   	ret    

00014c42 <outb>:
{
   14c42:	55                   	push   %ebp
   14c43:	89 e5                	mov    %esp,%ebp
   14c45:	83 ec 08             	sub    $0x8,%esp
   14c48:	8b 55 08             	mov    0x8(%ebp),%edx
   14c4b:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c4e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14c52:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   14c55:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14c59:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14c5d:	ee                   	out    %al,(%dx)
}
   14c5e:	90                   	nop
   14c5f:	c9                   	leave  
   14c60:	c3                   	ret    

00014c61 <get_key>:
    [0x35] = {'/', '?'},
    [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code)
{
   14c61:	55                   	push   %ebp
   14c62:	89 e5                	mov    %esp,%ebp
   14c64:	83 ec 04             	sub    $0x4,%esp
   14c67:	8b 45 08             	mov    0x8(%ebp),%eax
   14c6a:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   14c6d:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c71:	83 e0 7f             	and    $0x7f,%eax
}
   14c74:	c9                   	leave  
   14c75:	c3                   	ret    

00014c76 <is_make_code>:

static inline int is_make_code(uint8_t key_code)
{
   14c76:	55                   	push   %ebp
   14c77:	89 e5                	mov    %esp,%ebp
   14c79:	83 ec 04             	sub    $0x4,%esp
   14c7c:	8b 45 08             	mov    0x8(%ebp),%eax
   14c7f:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   14c82:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c86:	f7 d0                	not    %eax
   14c88:	c0 e8 07             	shr    $0x7,%al
   14c8b:	0f b6 c0             	movzbl %al,%eax
}
   14c8e:	c9                   	leave  
   14c8f:	c3                   	ret    

00014c90 <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void)
{
   14c90:	55                   	push   %ebp
   14c91:	89 e5                	mov    %esp,%ebp
   14c93:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14c96:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   14c9d:	eb 14                	jmp    14cb3 <kbd_wait_send_ready+0x23>
    {
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0)
   14c9f:	6a 64                	push   $0x64
   14ca1:	e8 7f ff ff ff       	call   14c25 <inb>
   14ca6:	83 c4 04             	add    $0x4,%esp
   14ca9:	0f b6 c0             	movzbl %al,%eax
   14cac:	83 e0 02             	and    $0x2,%eax
   14caf:	85 c0                	test   %eax,%eax
   14cb1:	74 0f                	je     14cc2 <kbd_wait_send_ready+0x32>
    while (time_out--)
   14cb3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14cb6:	8d 50 ff             	lea    -0x1(%eax),%edx
   14cb9:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14cbc:	85 c0                	test   %eax,%eax
   14cbe:	75 df                	jne    14c9f <kbd_wait_send_ready+0xf>
   14cc0:	eb 01                	jmp    14cc3 <kbd_wait_send_ready+0x33>
        {
            return;
   14cc2:	90                   	nop
        }
    }
}
   14cc3:	c9                   	leave  
   14cc4:	c3                   	ret    

00014cc5 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data)
{
   14cc5:	55                   	push   %ebp
   14cc6:	89 e5                	mov    %esp,%ebp
   14cc8:	83 ec 08             	sub    $0x8,%esp
   14ccb:	8b 55 08             	mov    0x8(%ebp),%edx
   14cce:	8b 45 0c             	mov    0xc(%ebp),%eax
   14cd1:	88 55 fc             	mov    %dl,-0x4(%ebp)
   14cd4:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   14cd7:	e8 b4 ff ff ff       	call   14c90 <kbd_wait_send_ready>
    outb(port, data);
   14cdc:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   14ce0:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14ce4:	52                   	push   %edx
   14ce5:	50                   	push   %eax
   14ce6:	e8 57 ff ff ff       	call   14c42 <outb>
   14ceb:	83 c4 08             	add    $0x8,%esp
}
   14cee:	90                   	nop
   14cef:	c9                   	leave  
   14cf0:	c3                   	ret    

00014cf1 <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void)
{
   14cf1:	55                   	push   %ebp
   14cf2:	89 e5                	mov    %esp,%ebp
   14cf4:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14cf7:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   14cfe:	eb 14                	jmp    14d14 <kbd_wait_recv_ready+0x23>
    {
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY)
   14d00:	6a 64                	push   $0x64
   14d02:	e8 1e ff ff ff       	call   14c25 <inb>
   14d07:	83 c4 04             	add    $0x4,%esp
   14d0a:	0f b6 c0             	movzbl %al,%eax
   14d0d:	83 e0 01             	and    $0x1,%eax
   14d10:	85 c0                	test   %eax,%eax
   14d12:	75 0f                	jne    14d23 <kbd_wait_recv_ready+0x32>
    while (time_out--)
   14d14:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d17:	8d 50 ff             	lea    -0x1(%eax),%edx
   14d1a:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14d1d:	85 c0                	test   %eax,%eax
   14d1f:	75 df                	jne    14d00 <kbd_wait_recv_ready+0xf>
   14d21:	eb 01                	jmp    14d24 <kbd_wait_recv_ready+0x33>
        {
            return;
   14d23:	90                   	nop
        }
    }
}
   14d24:	c9                   	leave  
   14d25:	c3                   	ret    

00014d26 <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void)
{
   14d26:	55                   	push   %ebp
   14d27:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   14d29:	e8 c3 ff ff ff       	call   14cf1 <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   14d2e:	6a 60                	push   $0x60
   14d30:	e8 f0 fe ff ff       	call   14c25 <inb>
   14d35:	83 c4 04             	add    $0x4,%esp
}
   14d38:	c9                   	leave  
   14d39:	c3                   	ret    

00014d3a <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status(void)
{
   14d3a:	55                   	push   %ebp
   14d3b:	89 e5                	mov    %esp,%ebp
   14d3d:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   14d40:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   14d47:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14d4e:	0f b6 c0             	movzbl %al,%eax
   14d51:	83 e0 01             	and    $0x1,%eax
   14d54:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   14d57:	68 ed 00 00 00       	push   $0xed
   14d5c:	6a 60                	push   $0x60
   14d5e:	e8 62 ff ff ff       	call   14cc5 <kbd_write>
   14d63:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   14d66:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d69:	0f b6 c0             	movzbl %al,%eax
   14d6c:	50                   	push   %eax
   14d6d:	6a 60                	push   $0x60
   14d6f:	e8 51 ff ff ff       	call   14cc5 <kbd_write>
   14d74:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   14d77:	e8 aa ff ff ff       	call   14d26 <kbd_read>
}
   14d7c:	90                   	nop
   14d7d:	c9                   	leave  
   14d7e:	c3                   	ret    

00014d7f <do_fx_key>:

static void do_fx_key(int key)
{
   14d7f:	55                   	push   %ebp
   14d80:	89 e5                	mov    %esp,%ebp
   14d82:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   14d85:	8b 45 08             	mov    0x8(%ebp),%eax
   14d88:	83 e8 3b             	sub    $0x3b,%eax
   14d8b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press)
   14d8e:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14d95:	83 e0 20             	and    $0x20,%eax
   14d98:	84 c0                	test   %al,%al
   14d9a:	75 0e                	jne    14daa <do_fx_key+0x2b>
   14d9c:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14da3:	83 e0 40             	and    $0x40,%eax
   14da6:	84 c0                	test   %al,%al
   14da8:	74 0e                	je     14db8 <do_fx_key+0x39>
    {
        tty_select(index);
   14daa:	83 ec 0c             	sub    $0xc,%esp
   14dad:	ff 75 f4             	pushl  -0xc(%ebp)
   14db0:	e8 e4 09 00 00       	call   15799 <tty_select>
   14db5:	83 c4 10             	add    $0x10,%esp
    }
}
   14db8:	90                   	nop
   14db9:	c9                   	leave  
   14dba:	c3                   	ret    

00014dbb <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key(uint8_t raw_code)
{
   14dbb:	55                   	push   %ebp
   14dbc:	89 e5                	mov    %esp,%ebp
   14dbe:	83 ec 28             	sub    $0x28,%esp
   14dc1:	8b 45 08             	mov    0x8(%ebp),%eax
   14dc4:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);         // 去掉最高位
   14dc7:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14dcb:	50                   	push   %eax
   14dcc:	e8 90 fe ff ff       	call   14c61 <get_key>
   14dd1:	83 c4 04             	add    $0x4,%esp
   14dd4:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code); // 是否是按键按下的键值
   14dd7:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14ddb:	50                   	push   %eax
   14ddc:	e8 95 fe ff ff       	call   14c76 <is_make_code>
   14de1:	83 c4 04             	add    $0x4,%esp
   14de4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
    switch (key)
   14de7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14deb:	83 e8 1d             	sub    $0x1d,%eax
   14dee:	83 f8 25             	cmp    $0x25,%eax
   14df1:	0f 87 f9 00 00 00    	ja     14ef0 <do_normal_key+0x135>
   14df7:	8b 04 85 e0 9b 01 00 	mov    0x19be0(,%eax,4),%eax
   14dfe:	ff e0                	jmp    *%eax
    {
        // shift, alt, ctrl键，记录标志位
    case KEY_RSHIFT:
        kbd_state.rshift_press = is_make; // 仅设置标志位
   14e00:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e03:	c1 e0 07             	shl    $0x7,%eax
   14e06:	c0 f8 07             	sar    $0x7,%al
   14e09:	83 e0 01             	and    $0x1,%eax
   14e0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14e13:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14e1a:	83 e0 fb             	and    $0xfffffffb,%eax
   14e1d:	09 d0                	or     %edx,%eax
   14e1f:	a2 d8 95 03 00       	mov    %al,0x395d8
        break;
   14e24:	e9 5f 01 00 00       	jmp    14f88 <do_normal_key+0x1cd>
    case KEY_LSHIFT:
        kbd_state.lshift_press = is_make; // 仅设置标志位
   14e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e2c:	c1 e0 07             	shl    $0x7,%eax
   14e2f:	c0 f8 07             	sar    $0x7,%al
   14e32:	83 e0 01             	and    $0x1,%eax
   14e35:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14e38:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14e3f:	83 e0 fd             	and    $0xfffffffd,%eax
   14e42:	09 d0                	or     %edx,%eax
   14e44:	a2 d8 95 03 00       	mov    %al,0x395d8
        break;
   14e49:	e9 3a 01 00 00       	jmp    14f88 <do_normal_key+0x1cd>
    case KEY_CAPS: // 大小写键，设置大小写状态
        if (is_make)
   14e4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14e52:	0f 84 2c 01 00 00    	je     14f84 <do_normal_key+0x1c9>
        {
            kbd_state.caps_lock = ~kbd_state.caps_lock;
   14e58:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14e5f:	c1 e0 07             	shl    $0x7,%eax
   14e62:	c0 f8 07             	sar    $0x7,%al
   14e65:	f7 d0                	not    %eax
   14e67:	c1 e0 07             	shl    $0x7,%eax
   14e6a:	c0 f8 07             	sar    $0x7,%al
   14e6d:	83 e0 01             	and    $0x1,%eax
   14e70:	89 c2                	mov    %eax,%edx
   14e72:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14e79:	83 e0 fe             	and    $0xfffffffe,%eax
   14e7c:	09 d0                	or     %edx,%eax
   14e7e:	a2 d8 95 03 00       	mov    %al,0x395d8
            update_led_status();
   14e83:	e8 b2 fe ff ff       	call   14d3a <update_led_status>
        }
        break;
   14e88:	e9 f7 00 00 00       	jmp    14f84 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make; // 仅设置标志位
   14e8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e90:	c1 e0 07             	shl    $0x7,%eax
   14e93:	c0 f8 07             	sar    $0x7,%al
   14e96:	83 e0 01             	and    $0x1,%eax
   14e99:	c1 e0 04             	shl    $0x4,%eax
   14e9c:	89 c2                	mov    %eax,%edx
   14e9e:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14ea5:	83 e0 ef             	and    $0xffffffef,%eax
   14ea8:	09 d0                	or     %edx,%eax
   14eaa:	a2 d8 95 03 00       	mov    %al,0x395d8
        break;
   14eaf:	e9 d4 00 00 00       	jmp    14f88 <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make; // 仅设置标志位
   14eb4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14eb7:	c1 e0 07             	shl    $0x7,%eax
   14eba:	c0 f8 07             	sar    $0x7,%al
   14ebd:	83 e0 01             	and    $0x1,%eax
   14ec0:	c1 e0 05             	shl    $0x5,%eax
   14ec3:	89 c2                	mov    %eax,%edx
   14ec5:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14ecc:	83 e0 df             	and    $0xffffffdf,%eax
   14ecf:	09 d0                	or     %edx,%eax
   14ed1:	a2 d8 95 03 00       	mov    %al,0x395d8
        break;
   14ed6:	e9 ad 00 00 00       	jmp    14f88 <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
        do_fx_key(key);
   14edb:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14edf:	83 ec 0c             	sub    $0xc,%esp
   14ee2:	50                   	push   %eax
   14ee3:	e8 97 fe ff ff       	call   14d7f <do_fx_key>
   14ee8:	83 c4 10             	add    $0x10,%esp
        break;
   14eeb:	e9 98 00 00 00       	jmp    14f88 <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make)
   14ef0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14ef4:	0f 84 8d 00 00 00    	je     14f87 <do_normal_key+0x1cc>
        {
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press)
   14efa:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14f01:	83 e0 04             	and    $0x4,%eax
   14f04:	84 c0                	test   %al,%al
   14f06:	75 0e                	jne    14f16 <do_normal_key+0x15b>
   14f08:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14f0f:	83 e0 02             	and    $0x2,%eax
   14f12:	84 c0                	test   %al,%al
   14f14:	74 11                	je     14f27 <do_normal_key+0x16c>
            {
                key = map_table[key].func; // 第2功能
   14f16:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f1a:	0f b6 84 00 e1 99 01 	movzbl 0x199e1(%eax,%eax,1),%eax
   14f21:	00 
   14f22:	88 45 f7             	mov    %al,-0x9(%ebp)
   14f25:	eb 0f                	jmp    14f36 <do_normal_key+0x17b>
            }
            else
            {
                key = map_table[key].normal; // 第1功能
   14f27:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f2b:	0f b6 84 00 e0 99 01 	movzbl 0x199e0(%eax,%eax,1),%eax
   14f32:	00 
   14f33:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock)
   14f36:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14f3d:	83 e0 01             	and    $0x1,%eax
   14f40:	84 c0                	test   %al,%al
   14f42:	74 2e                	je     14f72 <do_normal_key+0x1b7>
            {
                if ((key >= 'A') && (key <= 'Z'))
   14f44:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14f48:	7e 12                	jle    14f5c <do_normal_key+0x1a1>
   14f4a:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14f4e:	7f 0c                	jg     14f5c <do_normal_key+0x1a1>
                {
                    // 大写转小写
                    key = key - 'A' + 'a';
   14f50:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14f54:	83 c0 20             	add    $0x20,%eax
   14f57:	88 45 f7             	mov    %al,-0x9(%ebp)
   14f5a:	eb 16                	jmp    14f72 <do_normal_key+0x1b7>
                }
                else if ((key >= 'a') && (key <= 'z'))
   14f5c:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14f60:	7e 10                	jle    14f72 <do_normal_key+0x1b7>
   14f62:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14f66:	7f 0a                	jg     14f72 <do_normal_key+0x1b7>
                {
                    // 小写转大小
                    key = key - 'a' + 'A';
   14f68:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14f6c:	83 e8 20             	sub    $0x20,%eax
   14f6f:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            // log_printf("key=%c", key);
            tty_in(key);
   14f72:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f76:	83 ec 0c             	sub    $0xc,%esp
   14f79:	50                   	push   %eax
   14f7a:	e8 ad 07 00 00       	call   1572c <tty_in>
   14f7f:	83 c4 10             	add    $0x10,%esp
        }
        break;
   14f82:	eb 03                	jmp    14f87 <do_normal_key+0x1cc>
        break;
   14f84:	90                   	nop
   14f85:	eb 01                	jmp    14f88 <do_normal_key+0x1cd>
        break;
   14f87:	90                   	nop
    }
}
   14f88:	90                   	nop
   14f89:	c9                   	leave  
   14f8a:	c3                   	ret    

00014f8b <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key(uint8_t raw_code)
{
   14f8b:	55                   	push   %ebp
   14f8c:	89 e5                	mov    %esp,%ebp
   14f8e:	83 ec 14             	sub    $0x14,%esp
   14f91:	8b 45 08             	mov    0x8(%ebp),%eax
   14f94:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);          // 去掉最高位
   14f97:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14f9b:	50                   	push   %eax
   14f9c:	e8 c0 fc ff ff       	call   14c61 <get_key>
   14fa1:	83 c4 04             	add    $0x4,%esp
   14fa4:	0f be c0             	movsbl %al,%eax
   14fa7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code); // 按下或释放
   14faa:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14fae:	50                   	push   %eax
   14faf:	e8 c2 fc ff ff       	call   14c76 <is_make_code>
   14fb4:	83 c4 04             	add    $0x4,%esp
   14fb7:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key)
   14fba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14fbd:	83 f8 1d             	cmp    $0x1d,%eax
   14fc0:	74 07                	je     14fc9 <do_e0_key+0x3e>
   14fc2:	83 f8 38             	cmp    $0x38,%eax
   14fc5:	74 26                	je     14fed <do_e0_key+0x62>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make; // 仅设置标志位
        break;
    }
}
   14fc7:	eb 49                	jmp    15012 <do_e0_key+0x87>
        kbd_state.rctrl_press = is_make; // 仅设置标志位
   14fc9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14fcc:	c1 e0 07             	shl    $0x7,%eax
   14fcf:	c0 f8 07             	sar    $0x7,%al
   14fd2:	83 e0 01             	and    $0x1,%eax
   14fd5:	c1 e0 06             	shl    $0x6,%eax
   14fd8:	89 c2                	mov    %eax,%edx
   14fda:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   14fe1:	83 e0 bf             	and    $0xffffffbf,%eax
   14fe4:	09 d0                	or     %edx,%eax
   14fe6:	a2 d8 95 03 00       	mov    %al,0x395d8
        break;
   14feb:	eb 25                	jmp    15012 <do_e0_key+0x87>
        kbd_state.ralt_press = is_make; // 仅设置标志位
   14fed:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14ff0:	c1 e0 07             	shl    $0x7,%eax
   14ff3:	c0 f8 07             	sar    $0x7,%al
   14ff6:	83 e0 01             	and    $0x1,%eax
   14ff9:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   15000:	0f b6 05 d8 95 03 00 	movzbl 0x395d8,%eax
   15007:	83 e0 f7             	and    $0xfffffff7,%eax
   1500a:	09 d0                	or     %edx,%eax
   1500c:	a2 d8 95 03 00       	mov    %al,0x395d8
        break;
   15011:	90                   	nop
}
   15012:	90                   	nop
   15013:	c9                   	leave  
   15014:	c3                   	ret    

00015015 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame)
{
   15015:	55                   	push   %ebp
   15016:	89 e5                	mov    %esp,%ebp
   15018:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, // 收到e0字符
        BEGIN_E1, // 收到e1字符
    } recv_state = NORMAL;

    // 检查是否有数据，无数据则退出
    uint8_t status = inb(KBD_PORT_STAT);
   1501b:	6a 64                	push   $0x64
   1501d:	e8 03 fc ff ff       	call   14c25 <inb>
   15022:	83 c4 04             	add    $0x4,%esp
   15025:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (!(status & KBD_STAT_RECV_READY))
   15028:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   1502c:	83 e0 01             	and    $0x1,%eax
   1502f:	85 c0                	test   %eax,%eax
   15031:	75 12                	jne    15045 <do_handler_kbd+0x30>
    {
        pic_send_eoi(IRQ1_KEYBOARD);
   15033:	83 ec 0c             	sub    $0xc,%esp
   15036:	6a 21                	push   $0x21
   15038:	e8 d9 e0 ff ff       	call   13116 <pic_send_eoi>
   1503d:	83 c4 10             	add    $0x10,%esp
        return;
   15040:	e9 90 00 00 00       	jmp    150d5 <do_handler_kbd+0xc0>
    }

    // 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   15045:	83 ec 0c             	sub    $0xc,%esp
   15048:	6a 60                	push   $0x60
   1504a:	e8 d6 fb ff ff       	call   14c25 <inb>
   1504f:	83 c4 10             	add    $0x10,%esp
   15052:	88 45 f6             	mov    %al,-0xa(%ebp)

    // 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
    // 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   15055:	83 ec 0c             	sub    $0xc,%esp
   15058:	6a 21                	push   $0x21
   1505a:	e8 b7 e0 ff ff       	call   13116 <pic_send_eoi>
   1505f:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
    if (raw_code == KEY_E0)
   15062:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   15066:	75 0c                	jne    15074 <do_handler_kbd+0x5f>
    {
        // E0字符
        recv_state = BEGIN_E0;
   15068:	c7 05 dc 95 03 00 01 	movl   $0x1,0x395dc
   1506f:	00 00 00 
   15072:	eb 61                	jmp    150d5 <do_handler_kbd+0xc0>
    }
    else if (raw_code == KEY_E1)
   15074:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   15078:	75 0c                	jne    15086 <do_handler_kbd+0x71>
    {
        // E1字符，不处理
        recv_state = BEGIN_E1;
   1507a:	c7 05 dc 95 03 00 02 	movl   $0x2,0x395dc
   15081:	00 00 00 
   15084:	eb 4f                	jmp    150d5 <do_handler_kbd+0xc0>
    }
    else
    {
        switch (recv_state)
   15086:	a1 dc 95 03 00       	mov    0x395dc,%eax
   1508b:	83 f8 01             	cmp    $0x1,%eax
   1508e:	74 1e                	je     150ae <do_handler_kbd+0x99>
   15090:	83 f8 01             	cmp    $0x1,%eax
   15093:	72 07                	jb     1509c <do_handler_kbd+0x87>
   15095:	83 f8 02             	cmp    $0x2,%eax
   15098:	74 30                	je     150ca <do_handler_kbd+0xb5>
   1509a:	eb 39                	jmp    150d5 <do_handler_kbd+0xc0>
        {
        case NORMAL:
            do_normal_key(raw_code);
   1509c:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   150a0:	83 ec 0c             	sub    $0xc,%esp
   150a3:	50                   	push   %eax
   150a4:	e8 12 fd ff ff       	call   14dbb <do_normal_key>
   150a9:	83 c4 10             	add    $0x10,%esp
            break;
   150ac:	eb 27                	jmp    150d5 <do_handler_kbd+0xc0>
        case BEGIN_E0: // 不处理print scr
            do_e0_key(raw_code);
   150ae:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   150b2:	83 ec 0c             	sub    $0xc,%esp
   150b5:	50                   	push   %eax
   150b6:	e8 d0 fe ff ff       	call   14f8b <do_e0_key>
   150bb:	83 c4 10             	add    $0x10,%esp
            recv_state = NORMAL;
   150be:	c7 05 dc 95 03 00 00 	movl   $0x0,0x395dc
   150c5:	00 00 00 
            break;
   150c8:	eb 0b                	jmp    150d5 <do_handler_kbd+0xc0>
        case BEGIN_E1: // 不处理pause
            recv_state = NORMAL;
   150ca:	c7 05 dc 95 03 00 00 	movl   $0x0,0x395dc
   150d1:	00 00 00 
            break;
   150d4:	90                   	nop
        }
    }
}
   150d5:	c9                   	leave  
   150d6:	c3                   	ret    

000150d7 <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void)
{
   150d7:	55                   	push   %ebp
   150d8:	89 e5                	mov    %esp,%ebp
   150da:	83 ec 08             	sub    $0x8,%esp
    // 限制只调用一次
    static int inited = 0;

    if (!inited)
   150dd:	a1 e0 95 03 00       	mov    0x395e0,%eax
   150e2:	85 c0                	test   %eax,%eax
   150e4:	75 2e                	jne    15114 <kbd_init+0x3d>
    {
        update_led_status();
   150e6:	e8 4f fc ff ff       	call   14d3a <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   150eb:	83 ec 08             	sub    $0x8,%esp
   150ee:	68 b2 02 01 00       	push   $0x102b2
   150f3:	6a 21                	push   $0x21
   150f5:	e8 ba de ff ff       	call   12fb4 <irq_install>
   150fa:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   150fd:	83 ec 0c             	sub    $0xc,%esp
   15100:	6a 21                	push   $0x21
   15102:	e8 e7 de ff ff       	call   12fee <irq_enable>
   15107:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   1510a:	c7 05 e0 95 03 00 01 	movl   $0x1,0x395e0
   15111:	00 00 00 
    }
   15114:	90                   	nop
   15115:	c9                   	leave  
   15116:	c3                   	ret    

00015117 <outb>:
{
   15117:	55                   	push   %ebp
   15118:	89 e5                	mov    %esp,%ebp
   1511a:	83 ec 08             	sub    $0x8,%esp
   1511d:	8b 55 08             	mov    0x8(%ebp),%edx
   15120:	8b 45 0c             	mov    0xc(%ebp),%eax
   15123:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   15127:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   1512a:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1512e:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   15132:	ee                   	out    %al,(%dx)
}
   15133:	90                   	nop
   15134:	c9                   	leave  
   15135:	c3                   	ret    

00015136 <init_pic>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
static void init_pic(void)
{
   15136:	55                   	push   %ebp
   15137:	89 e5                	mov    %esp,%ebp
   15139:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS); // 每隔10ms+1
   1513c:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   15143:	6a 36                	push   $0x36
   15145:	6a 43                	push   $0x43
   15147:	e8 cb ff ff ff       	call   15117 <outb>
   1514c:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);        // 加载低8位
   1514f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15152:	0f b6 c0             	movzbl %al,%eax
   15155:	50                   	push   %eax
   15156:	6a 40                	push   $0x40
   15158:	e8 ba ff ff ff       	call   15117 <outb>
   1515d:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   15160:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15163:	c1 e8 08             	shr    $0x8,%eax
   15166:	0f b6 c0             	movzbl %al,%eax
   15169:	50                   	push   %eax
   1516a:	6a 40                	push   $0x40
   1516c:	e8 a6 ff ff ff       	call   15117 <outb>
   15171:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   15174:	83 ec 08             	sub    $0x8,%esp
   15177:	68 93 02 01 00       	push   $0x10293
   1517c:	6a 20                	push   $0x20
   1517e:	e8 31 de ff ff       	call   12fb4 <irq_install>
   15183:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   15186:	83 ec 0c             	sub    $0xc,%esp
   15189:	6a 20                	push   $0x20
   1518b:	e8 5e de ff ff       	call   12fee <irq_enable>
   15190:	83 c4 10             	add    $0x10,%esp
}
   15193:	90                   	nop
   15194:	c9                   	leave  
   15195:	c3                   	ret    

00015196 <do_handler_timer>:
void do_handler_timer(exception_frame_t *frame)
{
   15196:	55                   	push   %ebp
   15197:	89 e5                	mov    %esp,%ebp
   15199:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   1519c:	a1 e4 95 03 00       	mov    0x395e4,%eax
   151a1:	83 c0 01             	add    $0x1,%eax
   151a4:	a3 e4 95 03 00       	mov    %eax,0x395e4
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   151a9:	83 ec 0c             	sub    $0xc,%esp
   151ac:	6a 20                	push   $0x20
   151ae:	e8 63 df ff ff       	call   13116 <pic_send_eoi>
   151b3:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   151b6:	e8 ee c4 ff ff       	call   116a9 <task_time_tick>
}
   151bb:	90                   	nop
   151bc:	c9                   	leave  
   151bd:	c3                   	ret    

000151be <time_init>:
void time_init(void)
{
   151be:	55                   	push   %ebp
   151bf:	89 e5                	mov    %esp,%ebp
   151c1:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   151c4:	c7 05 e4 95 03 00 00 	movl   $0x0,0x395e4
   151cb:	00 00 00 
    init_pic();
   151ce:	e8 63 ff ff ff       	call   15136 <init_pic>
   151d3:	90                   	nop
   151d4:	c9                   	leave  
   151d5:	c3                   	ret    

000151d6 <tty_fifo_init>:

/**
 * @brief FIFO初始化
 */
void tty_fifo_init(tty_fifo_t *fifo, char *buf, int size)
{
   151d6:	55                   	push   %ebp
   151d7:	89 e5                	mov    %esp,%ebp
    fifo->buf = buf;
   151d9:	8b 45 08             	mov    0x8(%ebp),%eax
   151dc:	8b 55 0c             	mov    0xc(%ebp),%edx
   151df:	89 10                	mov    %edx,(%eax)
    fifo->count = 0;
   151e1:	8b 45 08             	mov    0x8(%ebp),%eax
   151e4:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
    fifo->size = size;
   151eb:	8b 45 08             	mov    0x8(%ebp),%eax
   151ee:	8b 55 10             	mov    0x10(%ebp),%edx
   151f1:	89 50 04             	mov    %edx,0x4(%eax)
    fifo->read = fifo->write = 0;
   151f4:	8b 45 08             	mov    0x8(%ebp),%eax
   151f7:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   151fe:	8b 45 08             	mov    0x8(%ebp),%eax
   15201:	8b 50 0c             	mov    0xc(%eax),%edx
   15204:	8b 45 08             	mov    0x8(%ebp),%eax
   15207:	89 50 08             	mov    %edx,0x8(%eax)
}
   1520a:	90                   	nop
   1520b:	5d                   	pop    %ebp
   1520c:	c3                   	ret    

0001520d <tty_fifo_get>:

/**
 * @brief 取一字节数据
 */
int tty_fifo_get(tty_fifo_t *fifo, char *c)
{
   1520d:	55                   	push   %ebp
   1520e:	89 e5                	mov    %esp,%ebp
   15210:	53                   	push   %ebx
   15211:	83 ec 14             	sub    $0x14,%esp
    if (fifo->count <= 0)
   15214:	8b 45 08             	mov    0x8(%ebp),%eax
   15217:	8b 40 10             	mov    0x10(%eax),%eax
   1521a:	85 c0                	test   %eax,%eax
   1521c:	7f 07                	jg     15225 <tty_fifo_get+0x18>
    {
        return -1;
   1521e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15223:	eb 62                	jmp    15287 <tty_fifo_get+0x7a>
    }

    irq_state_t state = irq_enter_protection();
   15225:	e8 17 df ff ff       	call   13141 <irq_enter_protection>
   1522a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    *c = fifo->buf[fifo->read++];
   1522d:	8b 45 08             	mov    0x8(%ebp),%eax
   15230:	8b 18                	mov    (%eax),%ebx
   15232:	8b 45 08             	mov    0x8(%ebp),%eax
   15235:	8b 40 08             	mov    0x8(%eax),%eax
   15238:	8d 48 01             	lea    0x1(%eax),%ecx
   1523b:	8b 55 08             	mov    0x8(%ebp),%edx
   1523e:	89 4a 08             	mov    %ecx,0x8(%edx)
   15241:	01 d8                	add    %ebx,%eax
   15243:	0f b6 10             	movzbl (%eax),%edx
   15246:	8b 45 0c             	mov    0xc(%ebp),%eax
   15249:	88 10                	mov    %dl,(%eax)
    if (fifo->read >= fifo->size)
   1524b:	8b 45 08             	mov    0x8(%ebp),%eax
   1524e:	8b 50 08             	mov    0x8(%eax),%edx
   15251:	8b 45 08             	mov    0x8(%ebp),%eax
   15254:	8b 40 04             	mov    0x4(%eax),%eax
   15257:	39 c2                	cmp    %eax,%edx
   15259:	7c 0a                	jl     15265 <tty_fifo_get+0x58>
    {
        fifo->read = 0;
   1525b:	8b 45 08             	mov    0x8(%ebp),%eax
   1525e:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
    }
    fifo->count--;
   15265:	8b 45 08             	mov    0x8(%ebp),%eax
   15268:	8b 40 10             	mov    0x10(%eax),%eax
   1526b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1526e:	8b 45 08             	mov    0x8(%ebp),%eax
   15271:	89 50 10             	mov    %edx,0x10(%eax)
    irq_leave_protection(state);
   15274:	83 ec 0c             	sub    $0xc,%esp
   15277:	ff 75 f4             	pushl  -0xc(%ebp)
   1527a:	e8 da de ff ff       	call   13159 <irq_leave_protection>
   1527f:	83 c4 10             	add    $0x10,%esp
    return 0;
   15282:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15287:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1528a:	c9                   	leave  
   1528b:	c3                   	ret    

0001528c <tty_fifo_put>:

/**
 * @brief 写一字节数据
 */
int tty_fifo_put(tty_fifo_t *fifo, char c)
{
   1528c:	55                   	push   %ebp
   1528d:	89 e5                	mov    %esp,%ebp
   1528f:	53                   	push   %ebx
   15290:	83 ec 24             	sub    $0x24,%esp
   15293:	8b 45 0c             	mov    0xc(%ebp),%eax
   15296:	88 45 e4             	mov    %al,-0x1c(%ebp)
    if (fifo->count >= fifo->size)
   15299:	8b 45 08             	mov    0x8(%ebp),%eax
   1529c:	8b 50 10             	mov    0x10(%eax),%edx
   1529f:	8b 45 08             	mov    0x8(%ebp),%eax
   152a2:	8b 40 04             	mov    0x4(%eax),%eax
   152a5:	39 c2                	cmp    %eax,%edx
   152a7:	7c 07                	jl     152b0 <tty_fifo_put+0x24>
    {
        return -1;
   152a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   152ae:	eb 61                	jmp    15311 <tty_fifo_put+0x85>
    }

    irq_state_t state = irq_enter_protection();
   152b0:	e8 8c de ff ff       	call   13141 <irq_enter_protection>
   152b5:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fifo->buf[fifo->write++] = c;
   152b8:	8b 45 08             	mov    0x8(%ebp),%eax
   152bb:	8b 18                	mov    (%eax),%ebx
   152bd:	8b 45 08             	mov    0x8(%ebp),%eax
   152c0:	8b 40 0c             	mov    0xc(%eax),%eax
   152c3:	8d 48 01             	lea    0x1(%eax),%ecx
   152c6:	8b 55 08             	mov    0x8(%ebp),%edx
   152c9:	89 4a 0c             	mov    %ecx,0xc(%edx)
   152cc:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   152cf:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   152d3:	88 02                	mov    %al,(%edx)
    if (fifo->write >= fifo->size)
   152d5:	8b 45 08             	mov    0x8(%ebp),%eax
   152d8:	8b 50 0c             	mov    0xc(%eax),%edx
   152db:	8b 45 08             	mov    0x8(%ebp),%eax
   152de:	8b 40 04             	mov    0x4(%eax),%eax
   152e1:	39 c2                	cmp    %eax,%edx
   152e3:	7c 0a                	jl     152ef <tty_fifo_put+0x63>
    {
        fifo->write = 0;
   152e5:	8b 45 08             	mov    0x8(%ebp),%eax
   152e8:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
    }
    fifo->count++;
   152ef:	8b 45 08             	mov    0x8(%ebp),%eax
   152f2:	8b 40 10             	mov    0x10(%eax),%eax
   152f5:	8d 50 01             	lea    0x1(%eax),%edx
   152f8:	8b 45 08             	mov    0x8(%ebp),%eax
   152fb:	89 50 10             	mov    %edx,0x10(%eax)
    irq_leave_protection(state);
   152fe:	83 ec 0c             	sub    $0xc,%esp
   15301:	ff 75 f4             	pushl  -0xc(%ebp)
   15304:	e8 50 de ff ff       	call   13159 <irq_leave_protection>
   15309:	83 c4 10             	add    $0x10,%esp

    return 0;
   1530c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15311:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15314:	c9                   	leave  
   15315:	c3                   	ret    

00015316 <get_tty>:

/**
 * @brief 判断tty是否有效
 */
static inline tty_t *get_tty(device_t *dev)
{
   15316:	55                   	push   %ebp
   15317:	89 e5                	mov    %esp,%ebp
   15319:	83 ec 18             	sub    $0x18,%esp
    int tty = dev->minor;
   1531c:	8b 45 08             	mov    0x8(%ebp),%eax
   1531f:	8b 40 08             	mov    0x8(%eax),%eax
   15322:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count))
   15325:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15329:	78 10                	js     1533b <get_tty+0x25>
   1532b:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1532f:	7f 0a                	jg     1533b <get_tty+0x25>
   15331:	8b 45 08             	mov    0x8(%ebp),%eax
   15334:	8b 40 10             	mov    0x10(%eax),%eax
   15337:	85 c0                	test   %eax,%eax
   15339:	75 1a                	jne    15355 <get_tty+0x3f>
    {
        log_printf("tty is not opened. tty = %d", tty);
   1533b:	83 ec 08             	sub    $0x8,%esp
   1533e:	ff 75 f4             	pushl  -0xc(%ebp)
   15341:	68 78 9c 01 00       	push   $0x19c78
   15346:	e8 f5 38 00 00       	call   18c40 <log_printf>
   1534b:	83 c4 10             	add    $0x10,%esp
        return (tty_t *)0;
   1534e:	b8 00 00 00 00       	mov    $0x0,%eax
   15353:	eb 0e                	jmp    15363 <get_tty+0x4d>
    }

    return tty_devs + tty;
   15355:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15358:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   1535e:	05 00 96 03 00       	add    $0x39600,%eax
}
   15363:	c9                   	leave  
   15364:	c3                   	ret    

00015365 <tty_open>:

/**
 * @brief 打开tty设备
 */
int tty_open(device_t *dev)
{
   15365:	55                   	push   %ebp
   15366:	89 e5                	mov    %esp,%ebp
   15368:	83 ec 18             	sub    $0x18,%esp
    int idx = dev->minor;
   1536b:	8b 45 08             	mov    0x8(%ebp),%eax
   1536e:	8b 40 08             	mov    0x8(%eax),%eax
   15371:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if ((idx < 0) || (idx >= TTY_NR))
   15374:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15378:	78 06                	js     15380 <tty_open+0x1b>
   1537a:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1537e:	7e 1d                	jle    1539d <tty_open+0x38>
    {
        log_printf("open tty failed. incorrect tty num = %d", idx);
   15380:	83 ec 08             	sub    $0x8,%esp
   15383:	ff 75 f4             	pushl  -0xc(%ebp)
   15386:	68 94 9c 01 00       	push   $0x19c94
   1538b:	e8 b0 38 00 00       	call   18c40 <log_printf>
   15390:	83 c4 10             	add    $0x10,%esp
        return -1;
   15393:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15398:	e9 bf 00 00 00       	jmp    1545c <tty_open+0xf7>
    }

    tty_t *tty = tty_devs + idx;
   1539d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   153a0:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   153a6:	05 00 96 03 00       	add    $0x39600,%eax
   153ab:	89 45 f0             	mov    %eax,-0x10(%ebp)
    tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   153ae:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153b1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   153b4:	81 c2 00 02 00 00    	add    $0x200,%edx
   153ba:	83 ec 04             	sub    $0x4,%esp
   153bd:	68 00 02 00 00       	push   $0x200
   153c2:	50                   	push   %eax
   153c3:	52                   	push   %edx
   153c4:	e8 0d fe ff ff       	call   151d6 <tty_fifo_init>
   153c9:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->osem, TTY_OBUF_SIZE);
   153cc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153cf:	05 14 02 00 00       	add    $0x214,%eax
   153d4:	83 ec 08             	sub    $0x8,%esp
   153d7:	68 00 02 00 00       	push   $0x200
   153dc:	50                   	push   %eax
   153dd:	e8 00 2d 00 00       	call   180e2 <sem_init>
   153e2:	83 c4 10             	add    $0x10,%esp
    tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   153e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153e8:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   153ee:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153f1:	05 24 04 00 00       	add    $0x424,%eax
   153f6:	83 ec 04             	sub    $0x4,%esp
   153f9:	68 00 02 00 00       	push   $0x200
   153fe:	52                   	push   %edx
   153ff:	50                   	push   %eax
   15400:	e8 d1 fd ff ff       	call   151d6 <tty_fifo_init>
   15405:	83 c4 10             	add    $0x10,%esp
    sem_init(&tty->isem, 0);
   15408:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1540b:	05 38 04 00 00       	add    $0x438,%eax
   15410:	83 ec 08             	sub    $0x8,%esp
   15413:	6a 00                	push   $0x0
   15415:	50                   	push   %eax
   15416:	e8 c7 2c 00 00       	call   180e2 <sem_init>
   1541b:	83 c4 10             	add    $0x10,%esp

    tty->iflags = TTY_INLCR | TTY_IECHO;
   1541e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15421:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   15428:	00 00 00 
    tty->oflags = TTY_OCRLF;
   1542b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1542e:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   15435:	00 00 00 

    tty->console_idx = idx;
   15438:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1543b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1543e:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

    kbd_init();
   15444:	e8 8e fc ff ff       	call   150d7 <kbd_init>
    console_init(idx);
   15449:	83 ec 0c             	sub    $0xc,%esp
   1544c:	ff 75 f4             	pushl  -0xc(%ebp)
   1544f:	e8 b3 e1 ff ff       	call   13607 <console_init>
   15454:	83 c4 10             	add    $0x10,%esp
    return 0;
   15457:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1545c:	c9                   	leave  
   1545d:	c3                   	ret    

0001545e <tty_write>:

/**
 * @brief 向tty写入数据
 */
int tty_write(device_t *dev, int addr, char *buf, int size)
{
   1545e:	55                   	push   %ebp
   1545f:	89 e5                	mov    %esp,%ebp
   15461:	83 ec 28             	sub    $0x28,%esp
    if (size < 0)
   15464:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15468:	79 0a                	jns    15474 <tty_write+0x16>
    {
        return -1;
   1546a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1546f:	e9 d5 00 00 00       	jmp    15549 <tty_write+0xeb>
    }

    tty_t *tty = get_tty(dev);
   15474:	83 ec 0c             	sub    $0xc,%esp
   15477:	ff 75 08             	pushl  0x8(%ebp)
   1547a:	e8 97 fe ff ff       	call   15316 <get_tty>
   1547f:	83 c4 10             	add    $0x10,%esp
   15482:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int len = 0;
   15485:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    // 先将所有数据写入缓存中
    while (size)
   1548c:	e9 a5 00 00 00       	jmp    15536 <tty_write+0xd8>
    {
        char c = *buf++;
   15491:	8b 45 10             	mov    0x10(%ebp),%eax
   15494:	8d 50 01             	lea    0x1(%eax),%edx
   15497:	89 55 10             	mov    %edx,0x10(%ebp)
   1549a:	0f b6 00             	movzbl (%eax),%eax
   1549d:	88 45 ef             	mov    %al,-0x11(%ebp)

        // 如果遇到\n，根据配置决定是否转换成\r\n
        if (c == '\n' && (tty->oflags & TTY_OCRLF))
   154a0:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   154a4:	75 43                	jne    154e9 <tty_write+0x8b>
   154a6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154a9:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   154af:	83 e0 01             	and    $0x1,%eax
   154b2:	85 c0                	test   %eax,%eax
   154b4:	74 33                	je     154e9 <tty_write+0x8b>
        {
            sem_wait(&tty->osem);
   154b6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154b9:	05 14 02 00 00       	add    $0x214,%eax
   154be:	83 ec 0c             	sub    $0xc,%esp
   154c1:	50                   	push   %eax
   154c2:	e8 3e 2c 00 00       	call   18105 <sem_wait>
   154c7:	83 c4 10             	add    $0x10,%esp
            int err = tty_fifo_put(&tty->ofifo, '\r');
   154ca:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154cd:	05 00 02 00 00       	add    $0x200,%eax
   154d2:	83 ec 08             	sub    $0x8,%esp
   154d5:	6a 0d                	push   $0xd
   154d7:	50                   	push   %eax
   154d8:	e8 af fd ff ff       	call   1528c <tty_fifo_put>
   154dd:	83 c4 10             	add    $0x10,%esp
   154e0:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (err < 0)
   154e3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   154e7:	78 59                	js     15542 <tty_write+0xe4>
                break;
            }
        }

        // 写入当前字符
        sem_wait(&tty->osem);
   154e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   154ec:	05 14 02 00 00       	add    $0x214,%eax
   154f1:	83 ec 0c             	sub    $0xc,%esp
   154f4:	50                   	push   %eax
   154f5:	e8 0b 2c 00 00       	call   18105 <sem_wait>
   154fa:	83 c4 10             	add    $0x10,%esp
        int err = tty_fifo_put(&tty->ofifo, c);
   154fd:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   15501:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15504:	81 c2 00 02 00 00    	add    $0x200,%edx
   1550a:	83 ec 08             	sub    $0x8,%esp
   1550d:	50                   	push   %eax
   1550e:	52                   	push   %edx
   1550f:	e8 78 fd ff ff       	call   1528c <tty_fifo_put>
   15514:	83 c4 10             	add    $0x10,%esp
   15517:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   1551a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1551e:	78 25                	js     15545 <tty_write+0xe7>
        {
            break;
        }

        len++;
   15520:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
        size--;
   15524:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

        // 启动输出, 这里是直接由console直接输出，无需中断
        console_write(tty);
   15528:	83 ec 0c             	sub    $0xc,%esp
   1552b:	ff 75 f0             	pushl  -0x10(%ebp)
   1552e:	e8 61 e8 ff ff       	call   13d94 <console_write>
   15533:	83 c4 10             	add    $0x10,%esp
    while (size)
   15536:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1553a:	0f 85 51 ff ff ff    	jne    15491 <tty_write+0x33>
   15540:	eb 04                	jmp    15546 <tty_write+0xe8>
                break;
   15542:	90                   	nop
   15543:	eb 01                	jmp    15546 <tty_write+0xe8>
            break;
   15545:	90                   	nop
    }

    return len;
   15546:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   15549:	c9                   	leave  
   1554a:	c3                   	ret    

0001554b <tty_read>:

/**
 * @brief 从tty读取数据
 */
int tty_read(device_t *dev, int addr, char *buf, int size)
{
   1554b:	55                   	push   %ebp
   1554c:	89 e5                	mov    %esp,%ebp
   1554e:	83 ec 18             	sub    $0x18,%esp
    if (size < 0)
   15551:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15555:	79 0a                	jns    15561 <tty_read+0x16>
    {
        return -1;
   15557:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1555c:	e9 09 01 00 00       	jmp    1566a <tty_read+0x11f>
    }

    tty_t *tty = get_tty(dev);
   15561:	83 ec 0c             	sub    $0xc,%esp
   15564:	ff 75 08             	pushl  0x8(%ebp)
   15567:	e8 aa fd ff ff       	call   15316 <get_tty>
   1556c:	83 c4 10             	add    $0x10,%esp
   1556f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    char *pbuf = buf;
   15572:	8b 45 10             	mov    0x10(%ebp),%eax
   15575:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int len = 0;
   15578:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 不断读取，直到遇到文件结束符或者行结束符
    while (len < size)
   1557f:	e9 d7 00 00 00       	jmp    1565b <tty_read+0x110>
    {
        // 等待可用的数据
        sem_wait(&tty->isem);
   15584:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15587:	05 38 04 00 00       	add    $0x438,%eax
   1558c:	83 ec 0c             	sub    $0xc,%esp
   1558f:	50                   	push   %eax
   15590:	e8 70 2b 00 00       	call   18105 <sem_wait>
   15595:	83 c4 10             	add    $0x10,%esp

        // 取出数据
        char ch;
        tty_fifo_get(&tty->ififo, &ch);
   15598:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1559b:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   155a1:	83 ec 08             	sub    $0x8,%esp
   155a4:	8d 45 eb             	lea    -0x15(%ebp),%eax
   155a7:	50                   	push   %eax
   155a8:	52                   	push   %edx
   155a9:	e8 5f fc ff ff       	call   1520d <tty_fifo_get>
   155ae:	83 c4 10             	add    $0x10,%esp
        switch (ch)
   155b1:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   155b5:	0f be c0             	movsbl %al,%eax
   155b8:	83 f8 0a             	cmp    $0xa,%eax
   155bb:	74 1a                	je     155d7 <tty_read+0x8c>
   155bd:	83 f8 7f             	cmp    $0x7f,%eax
   155c0:	75 52                	jne    15614 <tty_read+0xc9>
        {
        case ASCII_DEL:
            if (len == 0)
   155c2:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   155c6:	75 05                	jne    155cd <tty_read+0x82>
   155c8:	e9 8e 00 00 00       	jmp    1565b <tty_read+0x110>
            {
                continue;
            }
            len--;
   155cd:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
            pbuf--;
   155d1:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
            break;
   155d5:	eb 51                	jmp    15628 <tty_read+0xdd>
        case '\n':
            if ((tty->iflags & TTY_INLCR) && (len < size - 1))
   155d7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   155da:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   155e0:	83 e0 01             	and    $0x1,%eax
   155e3:	85 c0                	test   %eax,%eax
   155e5:	74 1b                	je     15602 <tty_read+0xb7>
   155e7:	8b 45 14             	mov    0x14(%ebp),%eax
   155ea:	83 e8 01             	sub    $0x1,%eax
   155ed:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   155f0:	7d 10                	jge    15602 <tty_read+0xb7>
            { // \n变成\r\n
                *pbuf++ = '\r';
   155f2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155f5:	8d 50 01             	lea    0x1(%eax),%edx
   155f8:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155fb:	c6 00 0d             	movb   $0xd,(%eax)
                len++;
   155fe:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            }
            *pbuf++ = '\n';
   15602:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15605:	8d 50 01             	lea    0x1(%eax),%edx
   15608:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1560b:	c6 00 0a             	movb   $0xa,(%eax)
            len++;
   1560e:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   15612:	eb 14                	jmp    15628 <tty_read+0xdd>
        default:
            *pbuf++ = ch;
   15614:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15617:	8d 50 01             	lea    0x1(%eax),%edx
   1561a:	89 55 f4             	mov    %edx,-0xc(%ebp)
   1561d:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   15621:	88 10                	mov    %dl,(%eax)
            len++;
   15623:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
            break;
   15627:	90                   	nop
        }

        if (tty->iflags & TTY_IECHO)
   15628:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1562b:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15631:	83 e0 04             	and    $0x4,%eax
   15634:	85 c0                	test   %eax,%eax
   15636:	74 13                	je     1564b <tty_read+0x100>
        {
            tty_write(dev, 0, &ch, 1);
   15638:	6a 01                	push   $0x1
   1563a:	8d 45 eb             	lea    -0x15(%ebp),%eax
   1563d:	50                   	push   %eax
   1563e:	6a 00                	push   $0x0
   15640:	ff 75 08             	pushl  0x8(%ebp)
   15643:	e8 16 fe ff ff       	call   1545e <tty_write>
   15648:	83 c4 10             	add    $0x10,%esp
            // tty_fifo_put(&tty->ofifo, ch);
        }

        // 遇到一行结束，也直接跳出
        if ((ch == '\r') || (ch == '\n'))
   1564b:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   1564f:	3c 0d                	cmp    $0xd,%al
   15651:	74 14                	je     15667 <tty_read+0x11c>
   15653:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15657:	3c 0a                	cmp    $0xa,%al
   15659:	74 0c                	je     15667 <tty_read+0x11c>
    while (len < size)
   1565b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1565e:	3b 45 14             	cmp    0x14(%ebp),%eax
   15661:	0f 8c 1d ff ff ff    	jl     15584 <tty_read+0x39>
        {
            break;
        }
    }

    return len;
   15667:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1566a:	c9                   	leave  
   1566b:	c3                   	ret    

0001566c <tty_control>:

/**
 * @brief 向tty设备发送命令
 */
int tty_control(device_t *dev, int cmd, int arg0, int arg1)
{
   1566c:	55                   	push   %ebp
   1566d:	89 e5                	mov    %esp,%ebp
   1566f:	53                   	push   %ebx
   15670:	83 ec 14             	sub    $0x14,%esp
    tty_t *tty = get_tty(dev);
   15673:	83 ec 0c             	sub    $0xc,%esp
   15676:	ff 75 08             	pushl  0x8(%ebp)
   15679:	e8 98 fc ff ff       	call   15316 <get_tty>
   1567e:	83 c4 10             	add    $0x10,%esp
   15681:	89 45 f4             	mov    %eax,-0xc(%ebp)

    switch (cmd)
   15684:	8b 45 0c             	mov    0xc(%ebp),%eax
   15687:	83 f8 01             	cmp    $0x1,%eax
   1568a:	74 0a                	je     15696 <tty_control+0x2a>
   1568c:	83 f8 02             	cmp    $0x2,%eax
   1568f:	74 6b                	je     156fc <tty_control+0x90>
        {
            *(int *)arg0 = sem_count(&tty->isem);
        }
        break;
    default:
        break;
   15691:	e9 86 00 00 00       	jmp    1571c <tty_control+0xb0>
        if (arg0)
   15696:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1569a:	74 30                	je     156cc <tty_control+0x60>
            tty->iflags |= TTY_IECHO;
   1569c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1569f:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   156a5:	83 c8 04             	or     $0x4,%eax
   156a8:	89 c2                	mov    %eax,%edx
   156aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156ad:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
            console_set_cursor(tty->console_idx, 1);
   156b3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156b6:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   156bc:	83 ec 08             	sub    $0x8,%esp
   156bf:	6a 01                	push   $0x1
   156c1:	50                   	push   %eax
   156c2:	e8 fd e5 ff ff       	call   13cc4 <console_set_cursor>
   156c7:	83 c4 10             	add    $0x10,%esp
        break;
   156ca:	eb 50                	jmp    1571c <tty_control+0xb0>
            tty->iflags &= ~TTY_IECHO;
   156cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156cf:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   156d5:	83 e0 fb             	and    $0xfffffffb,%eax
   156d8:	89 c2                	mov    %eax,%edx
   156da:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156dd:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
            console_set_cursor(tty->console_idx, 0);
   156e3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156e6:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   156ec:	83 ec 08             	sub    $0x8,%esp
   156ef:	6a 00                	push   $0x0
   156f1:	50                   	push   %eax
   156f2:	e8 cd e5 ff ff       	call   13cc4 <console_set_cursor>
   156f7:	83 c4 10             	add    $0x10,%esp
        break;
   156fa:	eb 20                	jmp    1571c <tty_control+0xb0>
        if (arg0)
   156fc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15700:	74 19                	je     1571b <tty_control+0xaf>
            *(int *)arg0 = sem_count(&tty->isem);
   15702:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15705:	05 38 04 00 00       	add    $0x438,%eax
   1570a:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1570d:	83 ec 0c             	sub    $0xc,%esp
   15710:	50                   	push   %eax
   15711:	e8 dc 2a 00 00       	call   181f2 <sem_count>
   15716:	83 c4 10             	add    $0x10,%esp
   15719:	89 03                	mov    %eax,(%ebx)
        break;
   1571b:	90                   	nop
    }
    return 0;
   1571c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15721:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15724:	c9                   	leave  
   15725:	c3                   	ret    

00015726 <tty_close>:

/**
 * @brief 关闭tty设备
 */
void tty_close(device_t *dev)
{
   15726:	55                   	push   %ebp
   15727:	89 e5                	mov    %esp,%ebp
}
   15729:	90                   	nop
   1572a:	5d                   	pop    %ebp
   1572b:	c3                   	ret    

0001572c <tty_in>:

/**
 * @brief 输入tty字符
 */
void tty_in(char ch)
{
   1572c:	55                   	push   %ebp
   1572d:	89 e5                	mov    %esp,%ebp
   1572f:	83 ec 28             	sub    $0x28,%esp
   15732:	8b 45 08             	mov    0x8(%ebp),%eax
   15735:	88 45 e4             	mov    %al,-0x1c(%ebp)
    tty_t *tty = tty_devs + curr_tty;
   15738:	a1 a0 b8 03 00       	mov    0x3b8a0,%eax
   1573d:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15743:	05 00 96 03 00       	add    $0x39600,%eax
   15748:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 辅助队列要有空闲空间可代写入
    if (sem_count(&tty->isem) >= TTY_IBUF_SIZE)
   1574b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1574e:	05 38 04 00 00       	add    $0x438,%eax
   15753:	83 ec 0c             	sub    $0xc,%esp
   15756:	50                   	push   %eax
   15757:	e8 96 2a 00 00       	call   181f2 <sem_count>
   1575c:	83 c4 10             	add    $0x10,%esp
   1575f:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   15764:	7f 30                	jg     15796 <tty_in+0x6a>
    {
        return;
    }

    // 写入辅助队列，通知数据到达
    tty_fifo_put(&tty->ififo, ch);
   15766:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   1576a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1576d:	81 c2 24 04 00 00    	add    $0x424,%edx
   15773:	83 ec 08             	sub    $0x8,%esp
   15776:	50                   	push   %eax
   15777:	52                   	push   %edx
   15778:	e8 0f fb ff ff       	call   1528c <tty_fifo_put>
   1577d:	83 c4 10             	add    $0x10,%esp
    sem_notify(&tty->isem);
   15780:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15783:	05 38 04 00 00       	add    $0x438,%eax
   15788:	83 ec 0c             	sub    $0xc,%esp
   1578b:	50                   	push   %eax
   1578c:	e8 df 29 00 00       	call   18170 <sem_notify>
   15791:	83 c4 10             	add    $0x10,%esp
   15794:	eb 01                	jmp    15797 <tty_in+0x6b>
        return;
   15796:	90                   	nop
}
   15797:	c9                   	leave  
   15798:	c3                   	ret    

00015799 <tty_select>:

/**
 * @brief 选择tty
 */
void tty_select(int tty)
{
   15799:	55                   	push   %ebp
   1579a:	89 e5                	mov    %esp,%ebp
   1579c:	83 ec 08             	sub    $0x8,%esp
    if (tty != curr_tty)
   1579f:	a1 a0 b8 03 00       	mov    0x3b8a0,%eax
   157a4:	39 45 08             	cmp    %eax,0x8(%ebp)
   157a7:	74 16                	je     157bf <tty_select+0x26>
    {
        console_select(tty);
   157a9:	83 ec 0c             	sub    $0xc,%esp
   157ac:	ff 75 08             	pushl  0x8(%ebp)
   157af:	e8 59 e4 ff ff       	call   13c0d <console_select>
   157b4:	83 c4 10             	add    $0x10,%esp
        curr_tty = tty;
   157b7:	8b 45 08             	mov    0x8(%ebp),%eax
   157ba:	a3 a0 b8 03 00       	mov    %eax,0x3b8a0
    }
}
   157bf:	90                   	nop
   157c0:	c9                   	leave  
   157c1:	c3                   	ret    

000157c2 <devfs_mount>:
/**
 * @brief 挂载指定设备
 * 设备文件系统，不需要考虑major和minor
 */
int devfs_mount(struct _fs_t *fs, int major, int minor)
{
   157c2:	55                   	push   %ebp
   157c3:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   157c5:	8b 45 08             	mov    0x8(%ebp),%eax
   157c8:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   157cf:	00 00 00 
    return 0;
   157d2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   157d7:	5d                   	pop    %ebp
   157d8:	c3                   	ret    

000157d9 <devfs_unmount>:
/**
 * @brief 卸载指定的设备
 * @param fs
 */
void devfs_unmount(struct _fs_t *fs)
{
   157d9:	55                   	push   %ebp
   157da:	89 e5                	mov    %esp,%ebp
}
   157dc:	90                   	nop
   157dd:	5d                   	pop    %ebp
   157de:	c3                   	ret    

000157df <devfs_open>:

/**
 * @brief 打开指定的设备以进行读写
 */
int devfs_open(struct _fs_t *fs, const char *path, file_t *file)
{
   157df:	55                   	push   %ebp
   157e0:	89 e5                	mov    %esp,%ebp
   157e2:	83 ec 28             	sub    $0x28,%esp
    // 遍历所有支持的设备类型列表，根据path中的路径，找到相应的设备类型
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++)
   157e5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   157ec:	e9 04 01 00 00       	jmp    158f5 <devfs_open+0x116>
    {
        devfs_type_t *type = devfs_type_list + i;
   157f1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   157f4:	89 d0                	mov    %edx,%eax
   157f6:	01 c0                	add    %eax,%eax
   157f8:	01 d0                	add    %edx,%eax
   157fa:	c1 e0 02             	shl    $0x2,%eax
   157fd:	05 e0 b0 01 00       	add    $0x1b0e0,%eax
   15802:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 查找相同的名称，然后从中提取后续部分，转换成字符串
        int type_name_len = kernel_strlen(type->name);
   15805:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15808:	8b 00                	mov    (%eax),%eax
   1580a:	83 ec 0c             	sub    $0xc,%esp
   1580d:	50                   	push   %eax
   1580e:	e8 89 2d 00 00       	call   1859c <kernel_strlen>
   15813:	83 c4 10             	add    $0x10,%esp
   15816:	89 45 ec             	mov    %eax,-0x14(%ebp)

        // 如果存在挂载点路径，则跳过该路径，取下级子目录
        if (kernel_strncmp(path, type->name, type_name_len) == 0)
   15819:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1581c:	8b 00                	mov    (%eax),%eax
   1581e:	83 ec 04             	sub    $0x4,%esp
   15821:	ff 75 ec             	pushl  -0x14(%ebp)
   15824:	50                   	push   %eax
   15825:	ff 75 0c             	pushl  0xc(%ebp)
   15828:	e8 f1 2c 00 00       	call   1851e <kernel_strncmp>
   1582d:	83 c4 10             	add    $0x10,%esp
   15830:	85 c0                	test   %eax,%eax
   15832:	0f 85 b9 00 00 00    	jne    158f1 <devfs_open+0x112>
        {
            int minor;

            // 转换得到设备子序号
            if ((kernel_strlen(path) > type_name_len) && (path_to_num(path + type_name_len, &minor)) < 0)
   15838:	83 ec 0c             	sub    $0xc,%esp
   1583b:	ff 75 0c             	pushl  0xc(%ebp)
   1583e:	e8 59 2d 00 00       	call   1859c <kernel_strlen>
   15843:	83 c4 10             	add    $0x10,%esp
   15846:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15849:	7d 34                	jge    1587f <devfs_open+0xa0>
   1584b:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1584e:	8b 45 0c             	mov    0xc(%ebp),%eax
   15851:	01 c2                	add    %eax,%edx
   15853:	83 ec 08             	sub    $0x8,%esp
   15856:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   15859:	50                   	push   %eax
   1585a:	52                   	push   %edx
   1585b:	e8 50 20 00 00       	call   178b0 <path_to_num>
   15860:	83 c4 10             	add    $0x10,%esp
   15863:	85 c0                	test   %eax,%eax
   15865:	79 18                	jns    1587f <devfs_open+0xa0>
            {
                log_printf("Get device num failed. %s", path);
   15867:	83 ec 08             	sub    $0x8,%esp
   1586a:	ff 75 0c             	pushl  0xc(%ebp)
   1586d:	68 c0 9c 01 00       	push   $0x19cc0
   15872:	e8 c9 33 00 00       	call   18c40 <log_printf>
   15877:	83 c4 10             	add    $0x10,%esp
                break;
   1587a:	e9 80 00 00 00       	jmp    158ff <devfs_open+0x120>
            }

            // 打开设备
            int dev_id = dev_open(type->dev_type, minor, (void *)0);
   1587f:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   15882:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15885:	8b 40 04             	mov    0x4(%eax),%eax
   15888:	83 ec 04             	sub    $0x4,%esp
   1588b:	6a 00                	push   $0x0
   1588d:	52                   	push   %edx
   1588e:	50                   	push   %eax
   1588f:	e8 54 e6 ff ff       	call   13ee8 <dev_open>
   15894:	83 c4 10             	add    $0x10,%esp
   15897:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0)
   1589a:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1589e:	79 16                	jns    158b6 <devfs_open+0xd7>
            {
                log_printf("Open device failed:%s", path);
   158a0:	83 ec 08             	sub    $0x8,%esp
   158a3:	ff 75 0c             	pushl  0xc(%ebp)
   158a6:	68 da 9c 01 00       	push   $0x19cda
   158ab:	e8 90 33 00 00       	call   18c40 <log_printf>
   158b0:	83 c4 10             	add    $0x10,%esp
                break;
   158b3:	90                   	nop
   158b4:	eb 49                	jmp    158ff <devfs_open+0x120>
            }

            // 纪录所在的设备号
            file->dev_id = dev_id;
   158b6:	8b 45 10             	mov    0x10(%ebp),%eax
   158b9:	8b 55 e8             	mov    -0x18(%ebp),%edx
   158bc:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->fs = fs;
   158bf:	8b 45 10             	mov    0x10(%ebp),%eax
   158c2:	8b 55 08             	mov    0x8(%ebp),%edx
   158c5:	89 50 44             	mov    %edx,0x44(%eax)
            file->pos = 0;
   158c8:	8b 45 10             	mov    0x10(%ebp),%eax
   158cb:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   158d2:	8b 45 10             	mov    0x10(%ebp),%eax
   158d5:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
            file->type = type->file_type;
   158dc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   158df:	8b 40 08             	mov    0x8(%eax),%eax
   158e2:	89 c2                	mov    %eax,%edx
   158e4:	8b 45 10             	mov    0x10(%ebp),%eax
   158e7:	89 50 20             	mov    %edx,0x20(%eax)
            return 0;
   158ea:	b8 00 00 00 00       	mov    $0x0,%eax
   158ef:	eb 13                	jmp    15904 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++)
   158f1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   158f5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   158f9:	0f 84 f2 fe ff ff    	je     157f1 <devfs_open+0x12>
        }
    }

    return -1;
   158ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15904:	c9                   	leave  
   15905:	c3                   	ret    

00015906 <devfs_read>:

/**
 * @brief 读写指定的文件系统
 */
int devfs_read(char *buf, int size, file_t *file)
{
   15906:	55                   	push   %ebp
   15907:	89 e5                	mov    %esp,%ebp
   15909:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   1590c:	8b 45 10             	mov    0x10(%ebp),%eax
   1590f:	8b 50 30             	mov    0x30(%eax),%edx
   15912:	8b 45 10             	mov    0x10(%ebp),%eax
   15915:	8b 40 2c             	mov    0x2c(%eax),%eax
   15918:	ff 75 0c             	pushl  0xc(%ebp)
   1591b:	ff 75 08             	pushl  0x8(%ebp)
   1591e:	52                   	push   %edx
   1591f:	50                   	push   %eax
   15920:	e8 0f e7 ff ff       	call   14034 <dev_read>
   15925:	83 c4 10             	add    $0x10,%esp
}
   15928:	c9                   	leave  
   15929:	c3                   	ret    

0001592a <devfs_write>:

/**
 * @brief 写设备文件系统
 */
int devfs_write(char *buf, int size, file_t *file)
{
   1592a:	55                   	push   %ebp
   1592b:	89 e5                	mov    %esp,%ebp
   1592d:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   15930:	8b 45 10             	mov    0x10(%ebp),%eax
   15933:	8b 50 30             	mov    0x30(%eax),%edx
   15936:	8b 45 10             	mov    0x10(%ebp),%eax
   15939:	8b 40 2c             	mov    0x2c(%eax),%eax
   1593c:	ff 75 0c             	pushl  0xc(%ebp)
   1593f:	ff 75 08             	pushl  0x8(%ebp)
   15942:	52                   	push   %edx
   15943:	50                   	push   %eax
   15944:	e8 37 e7 ff ff       	call   14080 <dev_write>
   15949:	83 c4 10             	add    $0x10,%esp
}
   1594c:	c9                   	leave  
   1594d:	c3                   	ret    

0001594e <devfs_close>:

/**
 * @brief 关闭设备文件
 */
void devfs_close(file_t *file)
{
   1594e:	55                   	push   %ebp
   1594f:	89 e5                	mov    %esp,%ebp
   15951:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   15954:	8b 45 08             	mov    0x8(%ebp),%eax
   15957:	8b 40 2c             	mov    0x2c(%eax),%eax
   1595a:	83 ec 0c             	sub    $0xc,%esp
   1595d:	50                   	push   %eax
   1595e:	e8 b5 e7 ff ff       	call   14118 <dev_close>
   15963:	83 c4 10             	add    $0x10,%esp
}
   15966:	90                   	nop
   15967:	c9                   	leave  
   15968:	c3                   	ret    

00015969 <devfs_seek>:

/**
 * @brief 文件读写定位
 */
int devfs_seek(file_t *file, uint32_t offset, int dir)
{
   15969:	55                   	push   %ebp
   1596a:	89 e5                	mov    %esp,%ebp
    return -1; // 不支持定位
   1596c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15971:	5d                   	pop    %ebp
   15972:	c3                   	ret    

00015973 <devfs_stat>:

/**
 * @brief 获取文件信息
 */
int devfs_stat(file_t *file, struct stat *st)
{
   15973:	55                   	push   %ebp
   15974:	89 e5                	mov    %esp,%ebp
    return -1;
   15976:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1597b:	5d                   	pop    %ebp
   1597c:	c3                   	ret    

0001597d <devfs_ioctl>:

/**
 * @brief IO设备控制
 */
int devfs_ioctl(file_t *file, int cmd, int arg0, int arg1)
{
   1597d:	55                   	push   %ebp
   1597e:	89 e5                	mov    %esp,%ebp
   15980:	83 ec 08             	sub    $0x8,%esp
    return dev_control(file->dev_id, cmd, arg0, arg1);
   15983:	8b 45 08             	mov    0x8(%ebp),%eax
   15986:	8b 40 2c             	mov    0x2c(%eax),%eax
   15989:	ff 75 14             	pushl  0x14(%ebp)
   1598c:	ff 75 10             	pushl  0x10(%ebp)
   1598f:	ff 75 0c             	pushl  0xc(%ebp)
   15992:	50                   	push   %eax
   15993:	e8 34 e7 ff ff       	call   140cc <dev_control>
   15998:	83 c4 10             	add    $0x10,%esp
}
   1599b:	c9                   	leave  
   1599c:	c3                   	ret    

0001599d <up2>:
{
   1599d:	55                   	push   %ebp
   1599e:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   159a0:	8b 55 08             	mov    0x8(%ebp),%edx
   159a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   159a6:	01 d0                	add    %edx,%eax
   159a8:	8d 50 ff             	lea    -0x1(%eax),%edx
   159ab:	8b 45 0c             	mov    0xc(%ebp),%eax
   159ae:	f7 d8                	neg    %eax
   159b0:	21 d0                	and    %edx,%eax
}
   159b2:	5d                   	pop    %ebp
   159b3:	c3                   	ret    

000159b4 <bread_sector>:

/**
 * @brief 缓存读取磁盘数据，用于目录的遍历等
 */
static int bread_sector(fat_t *fat, int sector)
{
   159b4:	55                   	push   %ebp
   159b5:	89 e5                	mov    %esp,%ebp
   159b7:	83 ec 18             	sub    $0x18,%esp
    if (sector == fat->curr_sector)
   159ba:	8b 45 08             	mov    0x8(%ebp),%eax
   159bd:	8b 40 28             	mov    0x28(%eax),%eax
   159c0:	39 45 0c             	cmp    %eax,0xc(%ebp)
   159c3:	75 07                	jne    159cc <bread_sector+0x18>
    {
        return 0;
   159c5:	b8 00 00 00 00       	mov    $0x0,%eax
   159ca:	eb 3f                	jmp    15a0b <bread_sector+0x57>
    }

    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   159cc:	8b 45 08             	mov    0x8(%ebp),%eax
   159cf:	8b 50 24             	mov    0x24(%eax),%edx
   159d2:	8b 45 08             	mov    0x8(%ebp),%eax
   159d5:	8b 40 2c             	mov    0x2c(%eax),%eax
   159d8:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   159de:	6a 01                	push   $0x1
   159e0:	52                   	push   %edx
   159e1:	ff 75 0c             	pushl  0xc(%ebp)
   159e4:	50                   	push   %eax
   159e5:	e8 4a e6 ff ff       	call   14034 <dev_read>
   159ea:	83 c4 10             	add    $0x10,%esp
   159ed:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1)
   159f0:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   159f4:	75 10                	jne    15a06 <bread_sector+0x52>
    {
        fat->curr_sector = sector;
   159f6:	8b 45 08             	mov    0x8(%ebp),%eax
   159f9:	8b 55 0c             	mov    0xc(%ebp),%edx
   159fc:	89 50 28             	mov    %edx,0x28(%eax)
        return 0;
   159ff:	b8 00 00 00 00       	mov    $0x0,%eax
   15a04:	eb 05                	jmp    15a0b <bread_sector+0x57>
    }
    return -1;
   15a06:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15a0b:	c9                   	leave  
   15a0c:	c3                   	ret    

00015a0d <bwrite_secotr>:

/**
 * @brief 写缓存
 */
static int bwrite_secotr(fat_t *fat, int sector)
{
   15a0d:	55                   	push   %ebp
   15a0e:	89 e5                	mov    %esp,%ebp
   15a10:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15a13:	8b 45 08             	mov    0x8(%ebp),%eax
   15a16:	8b 50 24             	mov    0x24(%eax),%edx
   15a19:	8b 45 08             	mov    0x8(%ebp),%eax
   15a1c:	8b 40 2c             	mov    0x2c(%eax),%eax
   15a1f:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   15a25:	6a 01                	push   $0x1
   15a27:	52                   	push   %edx
   15a28:	ff 75 0c             	pushl  0xc(%ebp)
   15a2b:	50                   	push   %eax
   15a2c:	e8 4f e6 ff ff       	call   14080 <dev_write>
   15a31:	83 c4 10             	add    $0x10,%esp
   15a34:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return (cnt == 1) ? 0 : -1;
   15a37:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15a3b:	75 07                	jne    15a44 <bwrite_secotr+0x37>
   15a3d:	b8 00 00 00 00       	mov    $0x0,%eax
   15a42:	eb 05                	jmp    15a49 <bwrite_secotr+0x3c>
   15a44:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15a49:	c9                   	leave  
   15a4a:	c3                   	ret    

00015a4b <cluster_is_valid>:

/**
 * 检查指定簇是否可用，非占用或坏簇
 */
int cluster_is_valid(cluster_t cluster)
{
   15a4b:	55                   	push   %ebp
   15a4c:	89 e5                	mov    %esp,%ebp
   15a4e:	83 ec 04             	sub    $0x4,%esp
   15a51:	8b 45 08             	mov    0x8(%ebp),%eax
   15a54:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < 0xFFF8) && (cluster >= 0x2); // 值是否正确
   15a58:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   15a5d:	77 0e                	ja     15a6d <cluster_is_valid+0x22>
   15a5f:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15a64:	76 07                	jbe    15a6d <cluster_is_valid+0x22>
   15a66:	b8 01 00 00 00       	mov    $0x1,%eax
   15a6b:	eb 05                	jmp    15a72 <cluster_is_valid+0x27>
   15a6d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15a72:	c9                   	leave  
   15a73:	c3                   	ret    

00015a74 <cluster_get_next>:

/**
 * 获取指定簇的下一个簇
 */
int cluster_get_next(fat_t *fat, cluster_t curr)
{
   15a74:	55                   	push   %ebp
   15a75:	89 e5                	mov    %esp,%ebp
   15a77:	83 ec 28             	sub    $0x28,%esp
   15a7a:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a7d:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    if (!cluster_is_valid(curr))
   15a81:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a85:	50                   	push   %eax
   15a86:	e8 c0 ff ff ff       	call   15a4b <cluster_is_valid>
   15a8b:	83 c4 04             	add    $0x4,%esp
   15a8e:	85 c0                	test   %eax,%eax
   15a90:	75 0a                	jne    15a9c <cluster_get_next+0x28>
    {
        return FAT_CLUSTER_INVALID;
   15a92:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15a97:	e9 94 00 00 00       	jmp    15b30 <cluster_get_next+0xbc>
    }

    // 取fat表中的扇区号和在扇区中的偏移
    int offset = curr * sizeof(cluster_t);
   15a9c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15aa0:	01 c0                	add    %eax,%eax
   15aa2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15aa5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15aa8:	8b 55 08             	mov    0x8(%ebp),%edx
   15aab:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15aae:	ba 00 00 00 00       	mov    $0x0,%edx
   15ab3:	f7 f1                	div    %ecx
   15ab5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15ab8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15abb:	8b 55 08             	mov    0x8(%ebp),%edx
   15abe:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15ac1:	ba 00 00 00 00       	mov    $0x0,%edx
   15ac6:	f7 f1                	div    %ecx
   15ac8:	89 d0                	mov    %edx,%eax
   15aca:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (sector >= fat->tbl_sectors)
   15acd:	8b 45 08             	mov    0x8(%ebp),%eax
   15ad0:	8b 50 08             	mov    0x8(%eax),%edx
   15ad3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15ad6:	39 c2                	cmp    %eax,%edx
   15ad8:	77 1c                	ja     15af6 <cluster_get_next+0x82>
    {
        log_printf("cluster too big. %d", curr);
   15ada:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ade:	83 ec 08             	sub    $0x8,%esp
   15ae1:	50                   	push   %eax
   15ae2:	68 f0 9c 01 00       	push   $0x19cf0
   15ae7:	e8 54 31 00 00       	call   18c40 <log_printf>
   15aec:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15aef:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15af4:	eb 3a                	jmp    15b30 <cluster_get_next+0xbc>
    }

    // 读扇区，然后取其中簇数据
    int err = bread_sector(fat, fat->tbl_start + sector);
   15af6:	8b 45 08             	mov    0x8(%ebp),%eax
   15af9:	8b 10                	mov    (%eax),%edx
   15afb:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15afe:	01 d0                	add    %edx,%eax
   15b00:	83 ec 08             	sub    $0x8,%esp
   15b03:	50                   	push   %eax
   15b04:	ff 75 08             	pushl  0x8(%ebp)
   15b07:	e8 a8 fe ff ff       	call   159b4 <bread_sector>
   15b0c:	83 c4 10             	add    $0x10,%esp
   15b0f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   15b12:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15b16:	79 07                	jns    15b1f <cluster_get_next+0xab>
    {
        return FAT_CLUSTER_INVALID;
   15b18:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15b1d:	eb 11                	jmp    15b30 <cluster_get_next+0xbc>
    }

    return *(cluster_t *)(fat->fat_buffer + off_sector);
   15b1f:	8b 45 08             	mov    0x8(%ebp),%eax
   15b22:	8b 50 24             	mov    0x24(%eax),%edx
   15b25:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b28:	01 d0                	add    %edx,%eax
   15b2a:	0f b7 00             	movzwl (%eax),%eax
   15b2d:	0f b7 c0             	movzwl %ax,%eax
}
   15b30:	c9                   	leave  
   15b31:	c3                   	ret    

00015b32 <cluster_set_next>:

/**
 * @brief 设置簇的下一簇
 */
int cluster_set_next(fat_t *fat, cluster_t curr, cluster_t next)
{
   15b32:	55                   	push   %ebp
   15b33:	89 e5                	mov    %esp,%ebp
   15b35:	83 ec 38             	sub    $0x38,%esp
   15b38:	8b 55 0c             	mov    0xc(%ebp),%edx
   15b3b:	8b 45 10             	mov    0x10(%ebp),%eax
   15b3e:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   15b42:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
    if (!cluster_is_valid(curr))
   15b46:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b4a:	50                   	push   %eax
   15b4b:	e8 fb fe ff ff       	call   15a4b <cluster_is_valid>
   15b50:	83 c4 04             	add    $0x4,%esp
   15b53:	85 c0                	test   %eax,%eax
   15b55:	75 0a                	jne    15b61 <cluster_set_next+0x2f>
    {
        return -1;
   15b57:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b5c:	e9 fe 00 00 00       	jmp    15c5f <cluster_set_next+0x12d>
    }

    int offset = curr * sizeof(cluster_t);
   15b61:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b65:	01 c0                	add    %eax,%eax
   15b67:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15b6a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b6d:	8b 55 08             	mov    0x8(%ebp),%edx
   15b70:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b73:	ba 00 00 00 00       	mov    $0x0,%edx
   15b78:	f7 f1                	div    %ecx
   15b7a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15b7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b80:	8b 55 08             	mov    0x8(%ebp),%edx
   15b83:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b86:	ba 00 00 00 00       	mov    $0x0,%edx
   15b8b:	f7 f1                	div    %ecx
   15b8d:	89 d0                	mov    %edx,%eax
   15b8f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sector >= fat->tbl_sectors)
   15b92:	8b 45 08             	mov    0x8(%ebp),%eax
   15b95:	8b 50 08             	mov    0x8(%eax),%edx
   15b98:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b9b:	39 c2                	cmp    %eax,%edx
   15b9d:	77 1f                	ja     15bbe <cluster_set_next+0x8c>
    {
        log_printf("cluster too big. %d", curr);
   15b9f:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15ba3:	83 ec 08             	sub    $0x8,%esp
   15ba6:	50                   	push   %eax
   15ba7:	68 f0 9c 01 00       	push   $0x19cf0
   15bac:	e8 8f 30 00 00       	call   18c40 <log_printf>
   15bb1:	83 c4 10             	add    $0x10,%esp
        return -1;
   15bb4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15bb9:	e9 a1 00 00 00       	jmp    15c5f <cluster_set_next+0x12d>
    }

    // 读缓存
    int err = bread_sector(fat, fat->tbl_start + sector);
   15bbe:	8b 45 08             	mov    0x8(%ebp),%eax
   15bc1:	8b 10                	mov    (%eax),%edx
   15bc3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15bc6:	01 d0                	add    %edx,%eax
   15bc8:	83 ec 08             	sub    $0x8,%esp
   15bcb:	50                   	push   %eax
   15bcc:	ff 75 08             	pushl  0x8(%ebp)
   15bcf:	e8 e0 fd ff ff       	call   159b4 <bread_sector>
   15bd4:	83 c4 10             	add    $0x10,%esp
   15bd7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0)
   15bda:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15bde:	79 07                	jns    15be7 <cluster_set_next+0xb5>
    {
        return -1;
   15be0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15be5:	eb 78                	jmp    15c5f <cluster_set_next+0x12d>
    }

    // 改next
    *(cluster_t *)(fat->fat_buffer + off_sector) = next;
   15be7:	8b 45 08             	mov    0x8(%ebp),%eax
   15bea:	8b 50 24             	mov    0x24(%eax),%edx
   15bed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15bf0:	01 c2                	add    %eax,%edx
   15bf2:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   15bf6:	66 89 02             	mov    %ax,(%edx)

    // 回写到多个表中
    for (int i = 0; i < fat->tbl_cnt; i++)
   15bf9:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15c00:	eb 4b                	jmp    15c4d <cluster_set_next+0x11b>
    {
        err = bwrite_secotr(fat, fat->tbl_start + sector);
   15c02:	8b 45 08             	mov    0x8(%ebp),%eax
   15c05:	8b 10                	mov    (%eax),%edx
   15c07:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c0a:	01 d0                	add    %edx,%eax
   15c0c:	83 ec 08             	sub    $0x8,%esp
   15c0f:	50                   	push   %eax
   15c10:	ff 75 08             	pushl  0x8(%ebp)
   15c13:	e8 f5 fd ff ff       	call   15a0d <bwrite_secotr>
   15c18:	83 c4 10             	add    $0x10,%esp
   15c1b:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   15c1e:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15c22:	79 17                	jns    15c3b <cluster_set_next+0x109>
        {
            log_printf("write cluster failed.");
   15c24:	83 ec 0c             	sub    $0xc,%esp
   15c27:	68 04 9d 01 00       	push   $0x19d04
   15c2c:	e8 0f 30 00 00       	call   18c40 <log_printf>
   15c31:	83 c4 10             	add    $0x10,%esp
            return -1;
   15c34:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15c39:	eb 24                	jmp    15c5f <cluster_set_next+0x12d>
        }
        sector += fat->tbl_sectors;
   15c3b:	8b 45 08             	mov    0x8(%ebp),%eax
   15c3e:	8b 50 08             	mov    0x8(%eax),%edx
   15c41:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15c44:	01 d0                	add    %edx,%eax
   15c46:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; i++)
   15c49:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15c4d:	8b 45 08             	mov    0x8(%ebp),%eax
   15c50:	8b 50 04             	mov    0x4(%eax),%edx
   15c53:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15c56:	39 c2                	cmp    %eax,%edx
   15c58:	77 a8                	ja     15c02 <cluster_set_next+0xd0>
    }
    return 0;
   15c5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15c5f:	c9                   	leave  
   15c60:	c3                   	ret    

00015c61 <cluster_free_chain>:

/**
 * @brief 释放cluster链
 */
void cluster_free_chain(fat_t *fat, cluster_t start)
{
   15c61:	55                   	push   %ebp
   15c62:	89 e5                	mov    %esp,%ebp
   15c64:	83 ec 28             	sub    $0x28,%esp
   15c67:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c6a:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start))
   15c6e:	eb 34                	jmp    15ca4 <cluster_free_chain+0x43>
    {
        cluster_t next = cluster_get_next(fat, start);
   15c70:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c74:	83 ec 08             	sub    $0x8,%esp
   15c77:	50                   	push   %eax
   15c78:	ff 75 08             	pushl  0x8(%ebp)
   15c7b:	e8 f4 fd ff ff       	call   15a74 <cluster_get_next>
   15c80:	83 c4 10             	add    $0x10,%esp
   15c83:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, FAT_CLUSTER_FREE);
   15c87:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c8b:	83 ec 04             	sub    $0x4,%esp
   15c8e:	6a 00                	push   $0x0
   15c90:	50                   	push   %eax
   15c91:	ff 75 08             	pushl  0x8(%ebp)
   15c94:	e8 99 fe ff ff       	call   15b32 <cluster_set_next>
   15c99:	83 c4 10             	add    $0x10,%esp
        start = next;
   15c9c:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ca0:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start))
   15ca4:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15ca8:	83 ec 0c             	sub    $0xc,%esp
   15cab:	50                   	push   %eax
   15cac:	e8 9a fd ff ff       	call   15a4b <cluster_is_valid>
   15cb1:	83 c4 10             	add    $0x10,%esp
   15cb4:	85 c0                	test   %eax,%eax
   15cb6:	75 b8                	jne    15c70 <cluster_free_chain+0xf>
    }
}
   15cb8:	90                   	nop
   15cb9:	c9                   	leave  
   15cba:	c3                   	ret    

00015cbb <cluster_alloc_free>:

/**
 * @brief 找一个空闲的cluster
 */
cluster_t cluster_alloc_free(fat_t *fat, int cnt)
{
   15cbb:	55                   	push   %ebp
   15cbc:	89 e5                	mov    %esp,%ebp
   15cbe:	83 ec 28             	sub    $0x28,%esp
    cluster_t pre, curr, start;
    int c_total = fat->tbl_sectors * fat->bytes_per_sec / sizeof(cluster_t);
   15cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   15cc4:	8b 50 08             	mov    0x8(%eax),%edx
   15cc7:	8b 45 08             	mov    0x8(%ebp),%eax
   15cca:	8b 40 0c             	mov    0xc(%eax),%eax
   15ccd:	0f af c2             	imul   %edx,%eax
   15cd0:	d1 e8                	shr    %eax
   15cd2:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pre = start = FAT_CLUSTER_INVALID;
   15cd5:	66 c7 45 f2 f8 ff    	movw   $0xfff8,-0xe(%ebp)
   15cdb:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15cdf:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    for (curr = 2; (curr < c_total) && cnt; curr++)
   15ce3:	66 c7 45 f4 02 00    	movw   $0x2,-0xc(%ebp)
   15ce9:	e9 a0 00 00 00       	jmp    15d8e <cluster_alloc_free+0xd3>
    {
        cluster_t free = cluster_get_next(fat, curr);
   15cee:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15cf2:	83 ec 08             	sub    $0x8,%esp
   15cf5:	50                   	push   %eax
   15cf6:	ff 75 08             	pushl  0x8(%ebp)
   15cf9:	e8 76 fd ff ff       	call   15a74 <cluster_get_next>
   15cfe:	83 c4 10             	add    $0x10,%esp
   15d01:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        if (free == FAT_CLUSTER_FREE)
   15d05:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   15d0a:	75 77                	jne    15d83 <cluster_alloc_free+0xc8>
        {
            // 记录首个簇
            if (!cluster_is_valid(start))
   15d0c:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d10:	83 ec 0c             	sub    $0xc,%esp
   15d13:	50                   	push   %eax
   15d14:	e8 32 fd ff ff       	call   15a4b <cluster_is_valid>
   15d19:	83 c4 10             	add    $0x10,%esp
   15d1c:	85 c0                	test   %eax,%eax
   15d1e:	75 08                	jne    15d28 <cluster_alloc_free+0x6d>
            {
                start = curr;
   15d20:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d24:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            }

            // 前一簇如果有效，则设置。否则忽略掉
            if (cluster_is_valid(pre))
   15d28:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15d2c:	83 ec 0c             	sub    $0xc,%esp
   15d2f:	50                   	push   %eax
   15d30:	e8 16 fd ff ff       	call   15a4b <cluster_is_valid>
   15d35:	83 c4 10             	add    $0x10,%esp
   15d38:	85 c0                	test   %eax,%eax
   15d3a:	74 3b                	je     15d77 <cluster_alloc_free+0xbc>
            {
                // 找到空表项，设置前一表项的链接
                int err = cluster_set_next(fat, pre, curr);
   15d3c:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
   15d40:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15d44:	83 ec 04             	sub    $0x4,%esp
   15d47:	52                   	push   %edx
   15d48:	50                   	push   %eax
   15d49:	ff 75 08             	pushl  0x8(%ebp)
   15d4c:	e8 e1 fd ff ff       	call   15b32 <cluster_set_next>
   15d51:	83 c4 10             	add    $0x10,%esp
   15d54:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0)
   15d57:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15d5b:	79 1a                	jns    15d77 <cluster_alloc_free+0xbc>
                {
                    cluster_free_chain(fat, start);
   15d5d:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d61:	83 ec 08             	sub    $0x8,%esp
   15d64:	50                   	push   %eax
   15d65:	ff 75 08             	pushl  0x8(%ebp)
   15d68:	e8 f4 fe ff ff       	call   15c61 <cluster_free_chain>
   15d6d:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   15d70:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   15d75:	eb 6f                	jmp    15de6 <cluster_alloc_free+0x12b>
                }
            }

            pre = curr;
   15d77:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d7b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            cnt--;
   15d7f:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; (curr < c_total) && cnt; curr++)
   15d83:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d87:	83 c0 01             	add    $0x1,%eax
   15d8a:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   15d8e:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d92:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15d95:	7e 0a                	jle    15da1 <cluster_alloc_free+0xe6>
   15d97:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d9b:	0f 85 4d ff ff ff    	jne    15cee <cluster_alloc_free+0x33>
        }
    }

    // 最后的结点
    if (cnt == 0)
   15da1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15da5:	75 27                	jne    15dce <cluster_alloc_free+0x113>
    {
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   15da7:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15dab:	83 ec 04             	sub    $0x4,%esp
   15dae:	68 f8 ff 00 00       	push   $0xfff8
   15db3:	50                   	push   %eax
   15db4:	ff 75 08             	pushl  0x8(%ebp)
   15db7:	e8 76 fd ff ff       	call   15b32 <cluster_set_next>
   15dbc:	83 c4 10             	add    $0x10,%esp
   15dbf:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err == 0)
   15dc2:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   15dc6:	75 06                	jne    15dce <cluster_alloc_free+0x113>
        {
            return start;
   15dc8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15dcc:	eb 18                	jmp    15de6 <cluster_alloc_free+0x12b>
        }
    }

    // 失败，空间不够等问题
    cluster_free_chain(fat, start);
   15dce:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15dd2:	83 ec 08             	sub    $0x8,%esp
   15dd5:	50                   	push   %eax
   15dd6:	ff 75 08             	pushl  0x8(%ebp)
   15dd9:	e8 83 fe ff ff       	call   15c61 <cluster_free_chain>
   15dde:	83 c4 10             	add    $0x10,%esp
    return FAT_CLUSTER_INVALID;
   15de1:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
}
   15de6:	c9                   	leave  
   15de7:	c3                   	ret    

00015de8 <to_sfn>:

/**
 * @brief 转换文件名为diritem中的短文件名，如a.txt 转换成a      txt
 */
static void to_sfn(char *dest, const char *src)
{
   15de8:	55                   	push   %ebp
   15de9:	89 e5                	mov    %esp,%ebp
   15deb:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15dee:	83 ec 04             	sub    $0x4,%esp
   15df1:	6a 0b                	push   $0xb
   15df3:	6a 20                	push   $0x20
   15df5:	ff 75 08             	pushl  0x8(%ebp)
   15df8:	e8 29 28 00 00       	call   18626 <kernel_memset>
   15dfd:	83 c4 10             	add    $0x10,%esp

    // 不断生成直到遇到分隔符和写完缓存
    char *curr = dest;
   15e00:	8b 45 08             	mov    0x8(%ebp),%eax
   15e03:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *end = dest + SFN_LEN;
   15e06:	8b 45 08             	mov    0x8(%ebp),%eax
   15e09:	83 c0 0b             	add    $0xb,%eax
   15e0c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end))
   15e0f:	eb 49                	jmp    15e5a <to_sfn+0x72>
    {
        char c = *src++;
   15e11:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e14:	8d 50 01             	lea    0x1(%eax),%edx
   15e17:	89 55 0c             	mov    %edx,0xc(%ebp)
   15e1a:	0f b6 00             	movzbl (%eax),%eax
   15e1d:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c)
   15e20:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   15e24:	83 f8 2e             	cmp    $0x2e,%eax
   15e27:	75 0b                	jne    15e34 <to_sfn+0x4c>
        {
        case '.': // 隔附，跳到扩展名区，不写字符
            curr = dest + 8;
   15e29:	8b 45 08             	mov    0x8(%ebp),%eax
   15e2c:	83 c0 08             	add    $0x8,%eax
   15e2f:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   15e32:	eb 26                	jmp    15e5a <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z'))
   15e34:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   15e38:	7e 10                	jle    15e4a <to_sfn+0x62>
   15e3a:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   15e3e:	7f 0a                	jg     15e4a <to_sfn+0x62>
            {
                c = c - 'a' + 'A';
   15e40:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15e44:	83 e8 20             	sub    $0x20,%eax
   15e47:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   15e4a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e4d:	8d 50 01             	lea    0x1(%eax),%edx
   15e50:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15e53:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   15e57:	88 10                	mov    %dl,(%eax)
            break;
   15e59:	90                   	nop
    while (*src && (curr < end))
   15e5a:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e5d:	0f b6 00             	movzbl (%eax),%eax
   15e60:	84 c0                	test   %al,%al
   15e62:	74 08                	je     15e6c <to_sfn+0x84>
   15e64:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e67:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15e6a:	72 a5                	jb     15e11 <to_sfn+0x29>
        }
    }
}
   15e6c:	90                   	nop
   15e6d:	c9                   	leave  
   15e6e:	c3                   	ret    

00015e6f <diritem_name_match>:

/**
 * @brief 判断item项是否与指定的名称相匹配
 */
int diritem_name_match(diritem_t *item, const char *path)
{
   15e6f:	55                   	push   %ebp
   15e70:	89 e5                	mov    %esp,%ebp
   15e72:	83 ec 18             	sub    $0x18,%esp
    char buf[SFN_LEN];
    to_sfn(buf, path);
   15e75:	83 ec 08             	sub    $0x8,%esp
   15e78:	ff 75 0c             	pushl  0xc(%ebp)
   15e7b:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e7e:	50                   	push   %eax
   15e7f:	e8 64 ff ff ff       	call   15de8 <to_sfn>
   15e84:	83 c4 10             	add    $0x10,%esp
    return kernel_memcmp(buf, item->DIR_Name, SFN_LEN) == 0;
   15e87:	8b 45 08             	mov    0x8(%ebp),%eax
   15e8a:	83 ec 04             	sub    $0x4,%esp
   15e8d:	6a 0b                	push   $0xb
   15e8f:	50                   	push   %eax
   15e90:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e93:	50                   	push   %eax
   15e94:	e8 ce 27 00 00       	call   18667 <kernel_memcmp>
   15e99:	83 c4 10             	add    $0x10,%esp
   15e9c:	85 c0                	test   %eax,%eax
   15e9e:	0f 94 c0             	sete   %al
   15ea1:	0f b6 c0             	movzbl %al,%eax
}
   15ea4:	c9                   	leave  
   15ea5:	c3                   	ret    

00015ea6 <diritem_init>:

/**
 * 缺省初始化diritem
 */
int diritem_init(diritem_t *item, uint8_t attr, const char *name)
{
   15ea6:	55                   	push   %ebp
   15ea7:	89 e5                	mov    %esp,%ebp
   15ea9:	83 ec 18             	sub    $0x18,%esp
   15eac:	8b 45 0c             	mov    0xc(%ebp),%eax
   15eaf:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15eb2:	8b 45 08             	mov    0x8(%ebp),%eax
   15eb5:	83 ec 08             	sub    $0x8,%esp
   15eb8:	ff 75 10             	pushl  0x10(%ebp)
   15ebb:	50                   	push   %eax
   15ebc:	e8 27 ff ff ff       	call   15de8 <to_sfn>
   15ec1:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t)(FAT_CLUSTER_INVALID >> 16);
   15ec4:	8b 45 08             	mov    0x8(%ebp),%eax
   15ec7:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t)(FAT_CLUSTER_INVALID & 0xFFFF);
   15ecd:	8b 45 08             	mov    0x8(%ebp),%eax
   15ed0:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15ed6:	8b 45 08             	mov    0x8(%ebp),%eax
   15ed9:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15ee0:	8b 45 08             	mov    0x8(%ebp),%eax
   15ee3:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15ee7:	88 50 0b             	mov    %dl,0xb(%eax)
    item->DIR_NTRes = 0;
   15eea:	8b 45 08             	mov    0x8(%ebp),%eax
   15eed:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

    // 时间写固定值，简单方便
    item->DIR_CrtTime = 0;
   15ef1:	8b 45 08             	mov    0x8(%ebp),%eax
   15ef4:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%eax)
    item->DIR_CrtDate = 0;
   15efa:	8b 45 08             	mov    0x8(%ebp),%eax
   15efd:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    item->DIR_WrtTime = item->DIR_CrtTime;
   15f03:	8b 45 08             	mov    0x8(%ebp),%eax
   15f06:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15f0a:	8b 45 08             	mov    0x8(%ebp),%eax
   15f0d:	66 89 50 16          	mov    %dx,0x16(%eax)
    item->DIR_WrtDate = item->DIR_CrtDate;
   15f11:	8b 45 08             	mov    0x8(%ebp),%eax
   15f14:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15f18:	8b 45 08             	mov    0x8(%ebp),%eax
   15f1b:	66 89 50 18          	mov    %dx,0x18(%eax)
    item->DIR_LastAccDate = item->DIR_CrtDate;
   15f1f:	8b 45 08             	mov    0x8(%ebp),%eax
   15f22:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15f26:	8b 45 08             	mov    0x8(%ebp),%eax
   15f29:	66 89 50 12          	mov    %dx,0x12(%eax)
    return 0;
   15f2d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15f32:	c9                   	leave  
   15f33:	c3                   	ret    

00015f34 <diritem_get_name>:

/**
 * @brief 获取diritem中的名称，转换成合适
 */
void diritem_get_name(diritem_t *item, char *dest)
{
   15f34:	55                   	push   %ebp
   15f35:	89 e5                	mov    %esp,%ebp
   15f37:	83 ec 18             	sub    $0x18,%esp
    char *c = dest;
   15f3a:	8b 45 0c             	mov    0xc(%ebp),%eax
   15f3d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char *ext = (char *)0; // 扩展名
   15f40:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    kernel_memset(dest, 0, SFN_LEN + 1); // 最多11个字符
   15f47:	83 ec 04             	sub    $0x4,%esp
   15f4a:	6a 0c                	push   $0xc
   15f4c:	6a 00                	push   $0x0
   15f4e:	ff 75 0c             	pushl  0xc(%ebp)
   15f51:	e8 d0 26 00 00       	call   18626 <kernel_memset>
   15f56:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; i++)
   15f59:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15f60:	eb 43                	jmp    15fa5 <diritem_get_name+0x71>
    {
        if (item->DIR_Name[i] != ' ')
   15f62:	8b 55 08             	mov    0x8(%ebp),%edx
   15f65:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f68:	01 d0                	add    %edx,%eax
   15f6a:	0f b6 00             	movzbl (%eax),%eax
   15f6d:	3c 20                	cmp    $0x20,%al
   15f6f:	74 18                	je     15f89 <diritem_get_name+0x55>
        {
            *c++ = item->DIR_Name[i];
   15f71:	8b 55 08             	mov    0x8(%ebp),%edx
   15f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f77:	01 d0                	add    %edx,%eax
   15f79:	0f b6 08             	movzbl (%eax),%ecx
   15f7c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f7f:	8d 50 01             	lea    0x1(%eax),%edx
   15f82:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f85:	89 ca                	mov    %ecx,%edx
   15f87:	88 10                	mov    %dl,(%eax)
        }

        // 判断到 "."
        if (i == 7)
   15f89:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   15f8d:	75 12                	jne    15fa1 <diritem_get_name+0x6d>
        {
            ext = c;
   15f8f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f92:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *c++ = '.';
   15f95:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f98:	8d 50 01             	lea    0x1(%eax),%edx
   15f9b:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f9e:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; i++)
   15fa1:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15fa5:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   15fa9:	7e b7                	jle    15f62 <diritem_get_name+0x2e>
        }
    }

    // 没有扩展名的情况 去掉之前加的 "."
    if (ext && (ext[1] == '\0'))
   15fab:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15faf:	74 13                	je     15fc4 <diritem_get_name+0x90>
   15fb1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15fb4:	83 c0 01             	add    $0x1,%eax
   15fb7:	0f b6 00             	movzbl (%eax),%eax
   15fba:	84 c0                	test   %al,%al
   15fbc:	75 06                	jne    15fc4 <diritem_get_name+0x90>
    {
        ext[0] = '\0';
   15fbe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15fc1:	c6 00 00             	movb   $0x0,(%eax)
    }
}
   15fc4:	90                   	nop
   15fc5:	c9                   	leave  
   15fc6:	c3                   	ret    

00015fc7 <diritem_get_type>:

/**
 * @brief 获取文件类型
 */
file_type_t diritem_get_type(diritem_t *item)
{
   15fc7:	55                   	push   %ebp
   15fc8:	89 e5                	mov    %esp,%ebp
   15fca:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   15fcd:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 长文件名和volum id
    if (item->DIR_Attr & (DIRITEM_ATTR_VOLUME_ID | DIRITEM_ATTR_HIDDEN | DIRITEM_ATTR_SYSTEM))
   15fd4:	8b 45 08             	mov    0x8(%ebp),%eax
   15fd7:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15fdb:	0f b6 c0             	movzbl %al,%eax
   15fde:	83 e0 0e             	and    $0xe,%eax
   15fe1:	85 c0                	test   %eax,%eax
   15fe3:	74 07                	je     15fec <diritem_get_type+0x25>
    {
        return FILE_UNKNOWN;
   15fe5:	b8 00 00 00 00       	mov    $0x0,%eax
   15fea:	eb 36                	jmp    16022 <diritem_get_type+0x5b>
    }

    if ((item->DIR_Attr & DIRITEM_ATTR_LONG_NAME) == DIRITEM_ATTR_LONG_NAME)
   15fec:	8b 45 08             	mov    0x8(%ebp),%eax
   15fef:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15ff3:	0f b6 c0             	movzbl %al,%eax
   15ff6:	83 e0 0f             	and    $0xf,%eax
   15ff9:	83 f8 0f             	cmp    $0xf,%eax
   15ffc:	75 07                	jne    16005 <diritem_get_type+0x3e>
    {
        return FILE_UNKNOWN;
   15ffe:	b8 00 00 00 00       	mov    $0x0,%eax
   16003:	eb 1d                	jmp    16022 <diritem_get_type+0x5b>
    }

    return item->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   16005:	8b 45 08             	mov    0x8(%ebp),%eax
   16008:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   1600c:	0f b6 c0             	movzbl %al,%eax
   1600f:	83 e0 10             	and    $0x10,%eax
   16012:	85 c0                	test   %eax,%eax
   16014:	74 07                	je     1601d <diritem_get_type+0x56>
   16016:	b8 03 00 00 00       	mov    $0x3,%eax
   1601b:	eb 05                	jmp    16022 <diritem_get_type+0x5b>
   1601d:	b8 02 00 00 00       	mov    $0x2,%eax
}
   16022:	c9                   	leave  
   16023:	c3                   	ret    

00016024 <read_dir_entry>:

/**
 * @brief 在root目录中读取diritem
 */
static diritem_t *read_dir_entry(fat_t *fat, int index)
{
   16024:	55                   	push   %ebp
   16025:	89 e5                	mov    %esp,%ebp
   16027:	53                   	push   %ebx
   16028:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt))
   1602b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1602f:	78 0d                	js     1603e <read_dir_entry+0x1a>
   16031:	8b 45 08             	mov    0x8(%ebp),%eax
   16034:	8b 50 14             	mov    0x14(%eax),%edx
   16037:	8b 45 0c             	mov    0xc(%ebp),%eax
   1603a:	39 c2                	cmp    %eax,%edx
   1603c:	77 07                	ja     16045 <read_dir_entry+0x21>
    {
        return (diritem_t *)0;
   1603e:	b8 00 00 00 00       	mov    $0x0,%eax
   16043:	eb 5a                	jmp    1609f <read_dir_entry+0x7b>
    }

    int offset = index * sizeof(diritem_t);
   16045:	8b 45 0c             	mov    0xc(%ebp),%eax
   16048:	c1 e0 05             	shl    $0x5,%eax
   1604b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int err = bread_sector(fat, fat->root_start + offset / fat->bytes_per_sec);
   1604e:	8b 45 08             	mov    0x8(%ebp),%eax
   16051:	8b 48 18             	mov    0x18(%eax),%ecx
   16054:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16057:	8b 55 08             	mov    0x8(%ebp),%edx
   1605a:	8b 5a 0c             	mov    0xc(%edx),%ebx
   1605d:	ba 00 00 00 00       	mov    $0x0,%edx
   16062:	f7 f3                	div    %ebx
   16064:	01 c8                	add    %ecx,%eax
   16066:	83 ec 08             	sub    $0x8,%esp
   16069:	50                   	push   %eax
   1606a:	ff 75 08             	pushl  0x8(%ebp)
   1606d:	e8 42 f9 ff ff       	call   159b4 <bread_sector>
   16072:	83 c4 10             	add    $0x10,%esp
   16075:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0)
   16078:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1607c:	79 07                	jns    16085 <read_dir_entry+0x61>
    {
        return (diritem_t *)0;
   1607e:	b8 00 00 00 00       	mov    $0x0,%eax
   16083:	eb 1a                	jmp    1609f <read_dir_entry+0x7b>
    }
    return (diritem_t *)(fat->fat_buffer + offset % fat->bytes_per_sec);
   16085:	8b 45 08             	mov    0x8(%ebp),%eax
   16088:	8b 48 24             	mov    0x24(%eax),%ecx
   1608b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1608e:	8b 55 08             	mov    0x8(%ebp),%edx
   16091:	8b 5a 0c             	mov    0xc(%edx),%ebx
   16094:	ba 00 00 00 00       	mov    $0x0,%edx
   16099:	f7 f3                	div    %ebx
   1609b:	89 d0                	mov    %edx,%eax
   1609d:	01 c8                	add    %ecx,%eax
}
   1609f:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   160a2:	c9                   	leave  
   160a3:	c3                   	ret    

000160a4 <write_dir_entry>:

/**
 * @brief 写dir目录项
 */
static int write_dir_entry(fat_t *fat, diritem_t *item, int index)
{
   160a4:	55                   	push   %ebp
   160a5:	89 e5                	mov    %esp,%ebp
   160a7:	53                   	push   %ebx
   160a8:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt))
   160ab:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   160af:	78 0d                	js     160be <write_dir_entry+0x1a>
   160b1:	8b 45 08             	mov    0x8(%ebp),%eax
   160b4:	8b 50 14             	mov    0x14(%eax),%edx
   160b7:	8b 45 10             	mov    0x10(%ebp),%eax
   160ba:	39 c2                	cmp    %eax,%edx
   160bc:	77 0a                	ja     160c8 <write_dir_entry+0x24>
    {
        return -1;
   160be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   160c3:	e9 81 00 00 00       	jmp    16149 <write_dir_entry+0xa5>
    }

    int offset = index * sizeof(diritem_t);
   160c8:	8b 45 10             	mov    0x10(%ebp),%eax
   160cb:	c1 e0 05             	shl    $0x5,%eax
   160ce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start + offset / fat->bytes_per_sec;
   160d1:	8b 45 08             	mov    0x8(%ebp),%eax
   160d4:	8b 48 18             	mov    0x18(%eax),%ecx
   160d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   160da:	8b 55 08             	mov    0x8(%ebp),%edx
   160dd:	8b 5a 0c             	mov    0xc(%edx),%ebx
   160e0:	ba 00 00 00 00       	mov    $0x0,%edx
   160e5:	f7 f3                	div    %ebx
   160e7:	01 c8                	add    %ecx,%eax
   160e9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = bread_sector(fat, sector);
   160ec:	83 ec 08             	sub    $0x8,%esp
   160ef:	ff 75 f0             	pushl  -0x10(%ebp)
   160f2:	ff 75 08             	pushl  0x8(%ebp)
   160f5:	e8 ba f8 ff ff       	call   159b4 <bread_sector>
   160fa:	83 c4 10             	add    $0x10,%esp
   160fd:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   16100:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16104:	79 07                	jns    1610d <write_dir_entry+0x69>
    {
        return -1;
   16106:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1610b:	eb 3c                	jmp    16149 <write_dir_entry+0xa5>
    }
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sec, item, sizeof(diritem_t));
   1610d:	8b 45 08             	mov    0x8(%ebp),%eax
   16110:	8b 48 24             	mov    0x24(%eax),%ecx
   16113:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16116:	8b 55 08             	mov    0x8(%ebp),%edx
   16119:	8b 5a 0c             	mov    0xc(%edx),%ebx
   1611c:	ba 00 00 00 00       	mov    $0x0,%edx
   16121:	f7 f3                	div    %ebx
   16123:	89 d0                	mov    %edx,%eax
   16125:	01 c8                	add    %ecx,%eax
   16127:	83 ec 04             	sub    $0x4,%esp
   1612a:	6a 20                	push   $0x20
   1612c:	ff 75 0c             	pushl  0xc(%ebp)
   1612f:	50                   	push   %eax
   16130:	e8 a2 24 00 00       	call   185d7 <kernel_memcpy>
   16135:	83 c4 10             	add    $0x10,%esp
    return bwrite_secotr(fat, sector);
   16138:	83 ec 08             	sub    $0x8,%esp
   1613b:	ff 75 f0             	pushl  -0x10(%ebp)
   1613e:	ff 75 08             	pushl  0x8(%ebp)
   16141:	e8 c7 f8 ff ff       	call   15a0d <bwrite_secotr>
   16146:	83 c4 10             	add    $0x10,%esp
}
   16149:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1614c:	c9                   	leave  
   1614d:	c3                   	ret    

0001614e <expand_file>:

/**
 * @brief 更改文件大小, 此时当前族号已经到达了最后的簇号
 */
static int expand_file(file_t *file, int inc_bytes)
{
   1614e:	55                   	push   %ebp
   1614f:	89 e5                	mov    %esp,%ebp
   16151:	53                   	push   %ebx
   16152:	83 ec 24             	sub    $0x24,%esp
    fat_t *fat = (fat_t *)file->fs->data;
   16155:	8b 45 08             	mov    0x8(%ebp),%eax
   16158:	8b 40 44             	mov    0x44(%eax),%eax
   1615b:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16161:	89 45 f0             	mov    %eax,-0x10(%ebp)

    int cluster_cnt;
    if ((file->size == 0) || (file->size % fat->cluster_byte_size == 0))
   16164:	8b 45 08             	mov    0x8(%ebp),%eax
   16167:	8b 40 24             	mov    0x24(%eax),%eax
   1616a:	85 c0                	test   %eax,%eax
   1616c:	74 19                	je     16187 <expand_file+0x39>
   1616e:	8b 45 08             	mov    0x8(%ebp),%eax
   16171:	8b 40 24             	mov    0x24(%eax),%eax
   16174:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16177:	8b 4a 20             	mov    0x20(%edx),%ecx
   1617a:	ba 00 00 00 00       	mov    $0x0,%edx
   1617f:	f7 f1                	div    %ecx
   16181:	89 d0                	mov    %edx,%eax
   16183:	85 c0                	test   %eax,%eax
   16185:	75 29                	jne    161b0 <expand_file+0x62>
    {
        // 文件为空，或者刚好达到的簇的末尾
        cluster_cnt = up2(inc_bytes, fat->cluster_byte_size) / fat->cluster_byte_size;
   16187:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1618a:	8b 50 20             	mov    0x20(%eax),%edx
   1618d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16190:	52                   	push   %edx
   16191:	50                   	push   %eax
   16192:	e8 06 f8 ff ff       	call   1599d <up2>
   16197:	83 c4 08             	add    $0x8,%esp
   1619a:	89 c1                	mov    %eax,%ecx
   1619c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1619f:	8b 58 20             	mov    0x20(%eax),%ebx
   161a2:	89 c8                	mov    %ecx,%eax
   161a4:	ba 00 00 00 00       	mov    $0x0,%edx
   161a9:	f7 f3                	div    %ebx
   161ab:	89 45 f4             	mov    %eax,-0xc(%ebp)
   161ae:	eb 6b                	jmp    1621b <expand_file+0xcd>
    }
    else
    {
        // 文件非空，当前簇的空闲量，如果空间够增长，则直接退出了
        // 例如：大小为2048，再扩充1024,簇大小为1024
        int cfree = fat->cluster_byte_size - (file->size % fat->cluster_byte_size);
   161b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   161b3:	8b 48 20             	mov    0x20(%eax),%ecx
   161b6:	8b 45 08             	mov    0x8(%ebp),%eax
   161b9:	8b 40 24             	mov    0x24(%eax),%eax
   161bc:	8b 55 f0             	mov    -0x10(%ebp),%edx
   161bf:	8b 5a 20             	mov    0x20(%edx),%ebx
   161c2:	ba 00 00 00 00       	mov    $0x0,%edx
   161c7:	f7 f3                	div    %ebx
   161c9:	89 d0                	mov    %edx,%eax
   161cb:	29 c1                	sub    %eax,%ecx
   161cd:	89 c8                	mov    %ecx,%eax
   161cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cfree > inc_bytes)
   161d2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   161d5:	3b 45 0c             	cmp    0xc(%ebp),%eax
   161d8:	7e 0a                	jle    161e4 <expand_file+0x96>
        {
            // file->size += inc_bytes;
            return 0;
   161da:	b8 00 00 00 00       	mov    $0x0,%eax
   161df:	e9 da 00 00 00       	jmp    162be <expand_file+0x170>
        }

        // 不够，则分配新簇用来放额外的空间
        cluster_cnt = up2(inc_bytes - cfree, fat->cluster_byte_size) / fat->cluster_byte_size;
   161e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   161e7:	8b 40 20             	mov    0x20(%eax),%eax
   161ea:	8b 55 0c             	mov    0xc(%ebp),%edx
   161ed:	2b 55 ec             	sub    -0x14(%ebp),%edx
   161f0:	50                   	push   %eax
   161f1:	52                   	push   %edx
   161f2:	e8 a6 f7 ff ff       	call   1599d <up2>
   161f7:	83 c4 08             	add    $0x8,%esp
   161fa:	89 c1                	mov    %eax,%ecx
   161fc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   161ff:	8b 58 20             	mov    0x20(%eax),%ebx
   16202:	89 c8                	mov    %ecx,%eax
   16204:	ba 00 00 00 00       	mov    $0x0,%edx
   16209:	f7 f3                	div    %ebx
   1620b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (cluster_cnt == 0)
   1620e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16212:	75 07                	jne    1621b <expand_file+0xcd>
        {
            cluster_cnt = 1;
   16214:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
        }
    }

    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   1621b:	83 ec 08             	sub    $0x8,%esp
   1621e:	ff 75 f4             	pushl  -0xc(%ebp)
   16221:	ff 75 f0             	pushl  -0x10(%ebp)
   16224:	e8 92 fa ff ff       	call   15cbb <cluster_alloc_free>
   16229:	83 c4 10             	add    $0x10,%esp
   1622c:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start))
   16230:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   16234:	83 ec 0c             	sub    $0xc,%esp
   16237:	50                   	push   %eax
   16238:	e8 0e f8 ff ff       	call   15a4b <cluster_is_valid>
   1623d:	83 c4 10             	add    $0x10,%esp
   16240:	85 c0                	test   %eax,%eax
   16242:	75 17                	jne    1625b <expand_file+0x10d>
    {
        log_printf("no cluster for file write");
   16244:	83 ec 0c             	sub    $0xc,%esp
   16247:	68 1a 9d 01 00       	push   $0x19d1a
   1624c:	e8 ef 29 00 00       	call   18c40 <log_printf>
   16251:	83 c4 10             	add    $0x10,%esp
        return -1;
   16254:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16259:	eb 63                	jmp    162be <expand_file+0x170>
    }

    // 在文件关闭时，回写
    if (!cluster_is_valid(file->sblk))
   1625b:	8b 45 08             	mov    0x8(%ebp),%eax
   1625e:	8b 40 34             	mov    0x34(%eax),%eax
   16261:	0f b7 c0             	movzwl %ax,%eax
   16264:	83 ec 0c             	sub    $0xc,%esp
   16267:	50                   	push   %eax
   16268:	e8 de f7 ff ff       	call   15a4b <cluster_is_valid>
   1626d:	83 c4 10             	add    $0x10,%esp
   16270:	85 c0                	test   %eax,%eax
   16272:	75 18                	jne    1628c <expand_file+0x13e>
    {
        file->cblk = file->sblk = start;
   16274:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16278:	8b 45 08             	mov    0x8(%ebp),%eax
   1627b:	89 50 34             	mov    %edx,0x34(%eax)
   1627e:	8b 45 08             	mov    0x8(%ebp),%eax
   16281:	8b 50 34             	mov    0x34(%eax),%edx
   16284:	8b 45 08             	mov    0x8(%ebp),%eax
   16287:	89 50 38             	mov    %edx,0x38(%eax)
   1628a:	eb 2d                	jmp    162b9 <expand_file+0x16b>
    }
    else
    {
        // 建立链接关系
        int err = cluster_set_next(fat, file->cblk, start);
   1628c:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16290:	8b 45 08             	mov    0x8(%ebp),%eax
   16293:	8b 40 38             	mov    0x38(%eax),%eax
   16296:	0f b7 c0             	movzwl %ax,%eax
   16299:	83 ec 04             	sub    $0x4,%esp
   1629c:	52                   	push   %edx
   1629d:	50                   	push   %eax
   1629e:	ff 75 f0             	pushl  -0x10(%ebp)
   162a1:	e8 8c f8 ff ff       	call   15b32 <cluster_set_next>
   162a6:	83 c4 10             	add    $0x10,%esp
   162a9:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   162ac:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   162b0:	79 07                	jns    162b9 <expand_file+0x16b>
        {
            return -1;
   162b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   162b7:	eb 05                	jmp    162be <expand_file+0x170>
        }
    }

    return 0;
   162b9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   162be:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   162c1:	c9                   	leave  
   162c2:	c3                   	ret    

000162c3 <move_file_pos>:

/**
 * @brief 移动文件指针
 */
static int move_file_pos(file_t *file, fat_t *fat, uint32_t move_bytes, int expand)
{
   162c3:	55                   	push   %ebp
   162c4:	89 e5                	mov    %esp,%ebp
   162c6:	83 ec 18             	sub    $0x18,%esp
    uint32_t c_offset = file->pos % fat->cluster_byte_size;
   162c9:	8b 45 08             	mov    0x8(%ebp),%eax
   162cc:	8b 40 30             	mov    0x30(%eax),%eax
   162cf:	89 c2                	mov    %eax,%edx
   162d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   162d4:	8b 48 20             	mov    0x20(%eax),%ecx
   162d7:	89 d0                	mov    %edx,%eax
   162d9:	ba 00 00 00 00       	mov    $0x0,%edx
   162de:	f7 f1                	div    %ecx
   162e0:	89 55 f0             	mov    %edx,-0x10(%ebp)

    // 跨簇，则调整curr_cluster。注意，如果已经是最后一个簇了，则curr_cluster不会调整
    if (c_offset + move_bytes >= fat->cluster_byte_size)
   162e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   162e6:	8b 45 10             	mov    0x10(%ebp),%eax
   162e9:	01 c2                	add    %eax,%edx
   162eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   162ee:	8b 40 20             	mov    0x20(%eax),%eax
   162f1:	39 c2                	cmp    %eax,%edx
   162f3:	72 74                	jb     16369 <move_file_pos+0xa6>
    {
        cluster_t next = cluster_get_next(fat, file->cblk);
   162f5:	8b 45 08             	mov    0x8(%ebp),%eax
   162f8:	8b 40 38             	mov    0x38(%eax),%eax
   162fb:	0f b7 c0             	movzwl %ax,%eax
   162fe:	83 ec 08             	sub    $0x8,%esp
   16301:	50                   	push   %eax
   16302:	ff 75 0c             	pushl  0xc(%ebp)
   16305:	e8 6a f7 ff ff       	call   15a74 <cluster_get_next>
   1630a:	83 c4 10             	add    $0x10,%esp
   1630d:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if ((next == FAT_CLUSTER_INVALID) && expand)
   16311:	66 83 7d f6 f8       	cmpw   $0xfff8,-0xa(%ebp)
   16316:	75 47                	jne    1635f <move_file_pos+0x9c>
   16318:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1631c:	74 41                	je     1635f <move_file_pos+0x9c>
        {
            int err = expand_file(file, fat->cluster_byte_size);
   1631e:	8b 45 0c             	mov    0xc(%ebp),%eax
   16321:	8b 40 20             	mov    0x20(%eax),%eax
   16324:	83 ec 08             	sub    $0x8,%esp
   16327:	50                   	push   %eax
   16328:	ff 75 08             	pushl  0x8(%ebp)
   1632b:	e8 1e fe ff ff       	call   1614e <expand_file>
   16330:	83 c4 10             	add    $0x10,%esp
   16333:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (err < 0)
   16336:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1633a:	79 07                	jns    16343 <move_file_pos+0x80>
            {
                return -1;
   1633c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16341:	eb 40                	jmp    16383 <move_file_pos+0xc0>
            }

            next = cluster_get_next(fat, file->cblk);
   16343:	8b 45 08             	mov    0x8(%ebp),%eax
   16346:	8b 40 38             	mov    0x38(%eax),%eax
   16349:	0f b7 c0             	movzwl %ax,%eax
   1634c:	83 ec 08             	sub    $0x8,%esp
   1634f:	50                   	push   %eax
   16350:	ff 75 0c             	pushl  0xc(%ebp)
   16353:	e8 1c f7 ff ff       	call   15a74 <cluster_get_next>
   16358:	83 c4 10             	add    $0x10,%esp
   1635b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        }

        file->cblk = next;
   1635f:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16363:	8b 45 08             	mov    0x8(%ebp),%eax
   16366:	89 50 38             	mov    %edx,0x38(%eax)
    }

    file->pos += move_bytes;
   16369:	8b 45 08             	mov    0x8(%ebp),%eax
   1636c:	8b 40 30             	mov    0x30(%eax),%eax
   1636f:	89 c2                	mov    %eax,%edx
   16371:	8b 45 10             	mov    0x10(%ebp),%eax
   16374:	01 d0                	add    %edx,%eax
   16376:	89 c2                	mov    %eax,%edx
   16378:	8b 45 08             	mov    0x8(%ebp),%eax
   1637b:	89 50 30             	mov    %edx,0x30(%eax)
    return 0;
   1637e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16383:	c9                   	leave  
   16384:	c3                   	ret    

00016385 <fatfs_mount>:

/**
 * @brief 挂载fat文件系统
 */
int fatfs_mount(struct _fs_t *fs, int dev_major, int dev_minor)
{
   16385:	55                   	push   %ebp
   16386:	89 e5                	mov    %esp,%ebp
   16388:	83 ec 18             	sub    $0x18,%esp
    // 打开设备
    int dev_id = dev_open(dev_major, dev_minor, (void *)0);
   1638b:	83 ec 04             	sub    $0x4,%esp
   1638e:	6a 00                	push   $0x0
   16390:	ff 75 10             	pushl  0x10(%ebp)
   16393:	ff 75 0c             	pushl  0xc(%ebp)
   16396:	e8 4d db ff ff       	call   13ee8 <dev_open>
   1639b:	83 c4 10             	add    $0x10,%esp
   1639e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dev_id < 0)
   163a1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   163a5:	79 20                	jns    163c7 <fatfs_mount+0x42>
    {
        log_printf("open disk failed. major: %x, minor: %x", dev_major, dev_minor);
   163a7:	83 ec 04             	sub    $0x4,%esp
   163aa:	ff 75 10             	pushl  0x10(%ebp)
   163ad:	ff 75 0c             	pushl  0xc(%ebp)
   163b0:	68 34 9d 01 00       	push   $0x19d34
   163b5:	e8 86 28 00 00       	call   18c40 <log_printf>
   163ba:	83 c4 10             	add    $0x10,%esp
        return -1;
   163bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   163c2:	e9 fb 01 00 00       	jmp    165c2 <fatfs_mount+0x23d>
    }

    // 读取dbr扇区并进行检查
    dbr_t *dbr = (dbr_t *)memory_alloc_page();
   163c7:	e8 71 a8 ff ff       	call   10c3d <memory_alloc_page>
   163cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!dbr)
   163cf:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   163d3:	75 15                	jne    163ea <fatfs_mount+0x65>
    {
        log_printf("mount fat failed: can't alloc buf.");
   163d5:	83 ec 0c             	sub    $0xc,%esp
   163d8:	68 5c 9d 01 00       	push   $0x19d5c
   163dd:	e8 5e 28 00 00       	call   18c40 <log_printf>
   163e2:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   163e5:	e9 b0 01 00 00       	jmp    1659a <fatfs_mount+0x215>
    }

    // 这里需要使用查询的方式来读取，因为此时多进程还没有跑起来，只在初始化阶段
    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   163ea:	6a 01                	push   $0x1
   163ec:	ff 75 f0             	pushl  -0x10(%ebp)
   163ef:	6a 00                	push   $0x0
   163f1:	ff 75 f4             	pushl  -0xc(%ebp)
   163f4:	e8 3b dc ff ff       	call   14034 <dev_read>
   163f9:	83 c4 10             	add    $0x10,%esp
   163fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1)
   163ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16403:	7f 15                	jg     1641a <fatfs_mount+0x95>
    {
        log_printf("read dbr failed.");
   16405:	83 ec 0c             	sub    $0xc,%esp
   16408:	68 7f 9d 01 00       	push   $0x19d7f
   1640d:	e8 2e 28 00 00       	call   18c40 <log_printf>
   16412:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16415:	e9 80 01 00 00       	jmp    1659a <fatfs_mount+0x215>
    }

    // 解析DBR参数，解析出有用的参数
    fat_t *fat = &fs->fat_data;
   1641a:	8b 45 08             	mov    0x8(%ebp),%eax
   1641d:	05 18 02 00 00       	add    $0x218,%eax
   16422:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->fat_buffer = (uint8_t *)dbr;
   16425:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16428:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1642b:	89 50 24             	mov    %edx,0x24(%eax)
    fat->bytes_per_sec = dbr->BPB_BytsPerSec;
   1642e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16431:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   16435:	0f b7 d0             	movzwl %ax,%edx
   16438:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1643b:	89 50 0c             	mov    %edx,0xc(%eax)
    fat->tbl_start = dbr->BPB_RsvdSecCnt;
   1643e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16441:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   16445:	0f b7 d0             	movzwl %ax,%edx
   16448:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1644b:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   1644d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16450:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   16454:	0f b7 d0             	movzwl %ax,%edx
   16457:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1645a:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   1645d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16460:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   16464:	0f b6 d0             	movzbl %al,%edx
   16467:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1646a:	89 50 04             	mov    %edx,0x4(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   1646d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16470:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   16474:	0f b7 d0             	movzwl %ax,%edx
   16477:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1647a:	89 50 14             	mov    %edx,0x14(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   1647d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16480:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   16484:	0f b6 d0             	movzbl %al,%edx
   16487:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1648a:	89 50 10             	mov    %edx,0x10(%eax)
    fat->cluster_byte_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   1648d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16490:	8b 50 10             	mov    0x10(%eax),%edx
   16493:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16496:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   1649a:	0f b7 c0             	movzwl %ax,%eax
   1649d:	0f af d0             	imul   %eax,%edx
   164a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164a3:	89 50 20             	mov    %edx,0x20(%eax)
    fat->root_start = fat->tbl_start + fat->tbl_sectors * fat->tbl_cnt;
   164a6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164a9:	8b 10                	mov    (%eax),%edx
   164ab:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164ae:	8b 48 08             	mov    0x8(%eax),%ecx
   164b1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164b4:	8b 40 04             	mov    0x4(%eax),%eax
   164b7:	0f af c1             	imul   %ecx,%eax
   164ba:	01 c2                	add    %eax,%edx
   164bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164bf:	89 50 18             	mov    %edx,0x18(%eax)
    fat->data_start = fat->root_start + fat->root_ent_cnt * 32 / SECTOR_SIZE;
   164c2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164c5:	8b 50 18             	mov    0x18(%eax),%edx
   164c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164cb:	8b 40 14             	mov    0x14(%eax),%eax
   164ce:	c1 e0 05             	shl    $0x5,%eax
   164d1:	c1 e8 09             	shr    $0x9,%eax
   164d4:	01 c2                	add    %eax,%edx
   164d6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164d9:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->curr_sector = -1;
   164dc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164df:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    fat->fs = fs;
   164e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164e9:	8b 55 08             	mov    0x8(%ebp),%edx
   164ec:	89 50 2c             	mov    %edx,0x2c(%eax)
    mutex_init(&fat->mutex);
   164ef:	8b 45 e8             	mov    -0x18(%ebp),%eax
   164f2:	83 c0 30             	add    $0x30,%eax
   164f5:	83 ec 0c             	sub    $0xc,%esp
   164f8:	50                   	push   %eax
   164f9:	e8 5a 1a 00 00       	call   17f58 <mutex_init>
   164fe:	83 c4 10             	add    $0x10,%esp
    fs->mutex = &fat->mutex;
   16501:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16504:	8d 50 30             	lea    0x30(%eax),%edx
   16507:	8b 45 08             	mov    0x8(%ebp),%eax
   1650a:	89 90 5c 02 00 00    	mov    %edx,0x25c(%eax)

    // 简单检查是否是fat16文件系统, 可以在下边做进一步的更多检查。此处只检查做一点点检查
    if (fat->tbl_cnt != 2)
   16510:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16513:	8b 40 04             	mov    0x4(%eax),%eax
   16516:	83 f8 02             	cmp    $0x2,%eax
   16519:	74 18                	je     16533 <fatfs_mount+0x1ae>
    {
        log_printf("fat table num error, major: %x, minor: %x", dev_major, dev_minor);
   1651b:	83 ec 04             	sub    $0x4,%esp
   1651e:	ff 75 10             	pushl  0x10(%ebp)
   16521:	ff 75 0c             	pushl  0xc(%ebp)
   16524:	68 90 9d 01 00       	push   $0x19d90
   16529:	e8 12 27 00 00       	call   18c40 <log_printf>
   1652e:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16531:	eb 67                	jmp    1659a <fatfs_mount+0x215>
    }
    if (kernel_memcmp(dbr->BS_FileSysType, "FAT16", 5) != 0)
   16533:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16536:	83 c0 36             	add    $0x36,%eax
   16539:	83 ec 04             	sub    $0x4,%esp
   1653c:	6a 05                	push   $0x5
   1653e:	68 ba 9d 01 00       	push   $0x19dba
   16543:	50                   	push   %eax
   16544:	e8 1e 21 00 00       	call   18667 <kernel_memcmp>
   16549:	83 c4 10             	add    $0x10,%esp
   1654c:	85 c0                	test   %eax,%eax
   1654e:	74 18                	je     16568 <fatfs_mount+0x1e3>
    {
        log_printf("not a fat16 file system, major: %x, minor: %x", dev_major, dev_minor);
   16550:	83 ec 04             	sub    $0x4,%esp
   16553:	ff 75 10             	pushl  0x10(%ebp)
   16556:	ff 75 0c             	pushl  0xc(%ebp)
   16559:	68 c0 9d 01 00       	push   $0x19dc0
   1655e:	e8 dd 26 00 00       	call   18c40 <log_printf>
   16563:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   16566:	eb 32                	jmp    1659a <fatfs_mount+0x215>
    }

    // 记录相关的打开信息
    fs->type = FS_FAT16;
   16568:	8b 45 08             	mov    0x8(%ebp),%eax
   1656b:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   16572:	00 00 00 
    fs->data = &fs->fat_data;
   16575:	8b 45 08             	mov    0x8(%ebp),%eax
   16578:	8d 90 18 02 00 00    	lea    0x218(%eax),%edx
   1657e:	8b 45 08             	mov    0x8(%ebp),%eax
   16581:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   16587:	8b 45 08             	mov    0x8(%ebp),%eax
   1658a:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1658d:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)
    return 0;
   16593:	b8 00 00 00 00       	mov    $0x0,%eax
   16598:	eb 28                	jmp    165c2 <fatfs_mount+0x23d>
mount_failed:
    if (dbr)
   1659a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1659e:	74 0f                	je     165af <fatfs_mount+0x22a>
    {
        memory_free_page((uint32_t)dbr);
   165a0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   165a3:	83 ec 0c             	sub    $0xc,%esp
   165a6:	50                   	push   %eax
   165a7:	e8 ab a6 ff ff       	call   10c57 <memory_free_page>
   165ac:	83 c4 10             	add    $0x10,%esp
    }
    dev_close(dev_id);
   165af:	83 ec 0c             	sub    $0xc,%esp
   165b2:	ff 75 f4             	pushl  -0xc(%ebp)
   165b5:	e8 5e db ff ff       	call   14118 <dev_close>
   165ba:	83 c4 10             	add    $0x10,%esp
    return -1;
   165bd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   165c2:	c9                   	leave  
   165c3:	c3                   	ret    

000165c4 <fatfs_unmount>:

/**
 * @brief 卸载fatfs文件系统
 */
void fatfs_unmount(struct _fs_t *fs)
{
   165c4:	55                   	push   %ebp
   165c5:	89 e5                	mov    %esp,%ebp
   165c7:	83 ec 18             	sub    $0x18,%esp
    fat_t *fat = (fat_t *)fs->data;
   165ca:	8b 45 08             	mov    0x8(%ebp),%eax
   165cd:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   165d3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dev_close(fs->dev_id);
   165d6:	8b 45 08             	mov    0x8(%ebp),%eax
   165d9:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   165df:	83 ec 0c             	sub    $0xc,%esp
   165e2:	50                   	push   %eax
   165e3:	e8 30 db ff ff       	call   14118 <dev_close>
   165e8:	83 c4 10             	add    $0x10,%esp
    memory_free_page((uint32_t)fat->fat_buffer);
   165eb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   165ee:	8b 40 24             	mov    0x24(%eax),%eax
   165f1:	83 ec 0c             	sub    $0xc,%esp
   165f4:	50                   	push   %eax
   165f5:	e8 5d a6 ff ff       	call   10c57 <memory_free_page>
   165fa:	83 c4 10             	add    $0x10,%esp
}
   165fd:	90                   	nop
   165fe:	c9                   	leave  
   165ff:	c3                   	ret    

00016600 <read_from_diritem>:

/**
 * @brief 从diritem中读取相应的文件信息
 */
static void read_from_diritem(fat_t *fat, file_t *file, diritem_t *item, int index)
{
   16600:	55                   	push   %ebp
   16601:	89 e5                	mov    %esp,%ebp
    file->type = diritem_get_type(item);
   16603:	ff 75 10             	pushl  0x10(%ebp)
   16606:	e8 bc f9 ff ff       	call   15fc7 <diritem_get_type>
   1660b:	83 c4 04             	add    $0x4,%esp
   1660e:	89 c2                	mov    %eax,%edx
   16610:	8b 45 0c             	mov    0xc(%ebp),%eax
   16613:	89 50 20             	mov    %edx,0x20(%eax)
    file->size = (int)item->DIR_FileSize;
   16616:	8b 45 10             	mov    0x10(%ebp),%eax
   16619:	8b 50 1c             	mov    0x1c(%eax),%edx
   1661c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1661f:	89 50 24             	mov    %edx,0x24(%eax)
    file->pos = 0;
   16622:	8b 45 0c             	mov    0xc(%ebp),%eax
   16625:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   1662c:	8b 45 10             	mov    0x10(%ebp),%eax
   1662f:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16633:	0f b7 c0             	movzwl %ax,%eax
   16636:	c1 e0 10             	shl    $0x10,%eax
   16639:	89 c2                	mov    %eax,%edx
   1663b:	8b 45 10             	mov    0x10(%ebp),%eax
   1663e:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16642:	0f b7 c0             	movzwl %ax,%eax
   16645:	09 c2                	or     %eax,%edx
   16647:	8b 45 0c             	mov    0xc(%ebp),%eax
   1664a:	89 50 34             	mov    %edx,0x34(%eax)
    file->cblk = file->sblk;
   1664d:	8b 45 0c             	mov    0xc(%ebp),%eax
   16650:	8b 50 34             	mov    0x34(%eax),%edx
   16653:	8b 45 0c             	mov    0xc(%ebp),%eax
   16656:	89 50 38             	mov    %edx,0x38(%eax)
    file->p_index = index;
   16659:	8b 45 0c             	mov    0xc(%ebp),%eax
   1665c:	8b 55 14             	mov    0x14(%ebp),%edx
   1665f:	89 50 3c             	mov    %edx,0x3c(%eax)
}
   16662:	90                   	nop
   16663:	c9                   	leave  
   16664:	c3                   	ret    

00016665 <fatfs_open>:

/**
 * @brief 打开指定的文件
 */
int fatfs_open(struct _fs_t *fs, const char *path, file_t *file)
{
   16665:	55                   	push   %ebp
   16666:	89 e5                	mov    %esp,%ebp
   16668:	83 ec 48             	sub    $0x48,%esp
    fat_t *fat = (fat_t *)fs->data;
   1666b:	8b 45 08             	mov    0x8(%ebp),%eax
   1666e:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16674:	89 45 e8             	mov    %eax,-0x18(%ebp)
    diritem_t *file_item = (diritem_t *)0;
   16677:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;
   1667e:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++)
   16685:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1668c:	eb 6f                	jmp    166fd <fatfs_open+0x98>
    {
        diritem_t *item = read_dir_entry(fat, i);
   1668e:	83 ec 08             	sub    $0x8,%esp
   16691:	ff 75 ec             	pushl  -0x14(%ebp)
   16694:	ff 75 e8             	pushl  -0x18(%ebp)
   16697:	e8 88 f9 ff ff       	call   16024 <read_dir_entry>
   1669c:	83 c4 10             	add    $0x10,%esp
   1669f:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0)
   166a2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   166a6:	75 0a                	jne    166b2 <fatfs_open+0x4d>
        {
            return -1;
   166a8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   166ad:	e9 3f 01 00 00       	jmp    167f1 <fatfs_open+0x18c>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END)
   166b2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   166b5:	0f b6 00             	movzbl (%eax),%eax
   166b8:	84 c0                	test   %al,%al
   166ba:	75 08                	jne    166c4 <fatfs_open+0x5f>
        {
            p_index = i;
   166bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   166bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   166c2:	eb 46                	jmp    1670a <fatfs_open+0xa5>
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE)
   166c4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   166c7:	0f b6 00             	movzbl (%eax),%eax
   166ca:	3c e5                	cmp    $0xe5,%al
   166cc:	75 08                	jne    166d6 <fatfs_open+0x71>
        {
            p_index = i;
   166ce:	8b 45 ec             	mov    -0x14(%ebp),%eax
   166d1:	89 45 f0             	mov    %eax,-0x10(%ebp)
            continue;
   166d4:	eb 23                	jmp    166f9 <fatfs_open+0x94>
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path))
   166d6:	83 ec 08             	sub    $0x8,%esp
   166d9:	ff 75 0c             	pushl  0xc(%ebp)
   166dc:	ff 75 e4             	pushl  -0x1c(%ebp)
   166df:	e8 8b f7 ff ff       	call   15e6f <diritem_name_match>
   166e4:	83 c4 10             	add    $0x10,%esp
   166e7:	85 c0                	test   %eax,%eax
   166e9:	74 0e                	je     166f9 <fatfs_open+0x94>
        {
            file_item = item;
   166eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   166ee:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   166f1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   166f4:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   166f7:	eb 11                	jmp    1670a <fatfs_open+0xa5>
    for (int i = 0; i < fat->root_ent_cnt; i++)
   166f9:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   166fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16700:	8b 50 14             	mov    0x14(%eax),%edx
   16703:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16706:	39 c2                	cmp    %eax,%edx
   16708:	77 84                	ja     1668e <fatfs_open+0x29>
        }
    }

    // 已存在的文件
    if (file_item)
   1670a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1670e:	74 62                	je     16772 <fatfs_open+0x10d>
    {
        read_from_diritem(fat, file, file_item, p_index);
   16710:	ff 75 f0             	pushl  -0x10(%ebp)
   16713:	ff 75 f4             	pushl  -0xc(%ebp)
   16716:	ff 75 10             	pushl  0x10(%ebp)
   16719:	ff 75 e8             	pushl  -0x18(%ebp)
   1671c:	e8 df fe ff ff       	call   16600 <read_from_diritem>
   16721:	83 c4 10             	add    $0x10,%esp

        // 如果要截断，则清空
        if (file->mode & O_TRUNC)
   16724:	8b 45 10             	mov    0x10(%ebp),%eax
   16727:	8b 40 40             	mov    0x40(%eax),%eax
   1672a:	25 00 04 00 00       	and    $0x400,%eax
   1672f:	85 c0                	test   %eax,%eax
   16731:	74 38                	je     1676b <fatfs_open+0x106>
        {
            cluster_free_chain(fat, file->sblk);
   16733:	8b 45 10             	mov    0x10(%ebp),%eax
   16736:	8b 40 34             	mov    0x34(%eax),%eax
   16739:	0f b7 c0             	movzwl %ax,%eax
   1673c:	83 ec 08             	sub    $0x8,%esp
   1673f:	50                   	push   %eax
   16740:	ff 75 e8             	pushl  -0x18(%ebp)
   16743:	e8 19 f5 ff ff       	call   15c61 <cluster_free_chain>
   16748:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   1674b:	8b 45 10             	mov    0x10(%ebp),%eax
   1674e:	c7 40 34 f8 ff 00 00 	movl   $0xfff8,0x34(%eax)
   16755:	8b 45 10             	mov    0x10(%ebp),%eax
   16758:	8b 50 34             	mov    0x34(%eax),%edx
   1675b:	8b 45 10             	mov    0x10(%ebp),%eax
   1675e:	89 50 38             	mov    %edx,0x38(%eax)
            file->size = 0;
   16761:	8b 45 10             	mov    0x10(%ebp),%eax
   16764:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        }
        return 0;
   1676b:	b8 00 00 00 00       	mov    $0x0,%eax
   16770:	eb 7f                	jmp    167f1 <fatfs_open+0x18c>
    }
    else if ((file->mode & O_CREAT) && (p_index >= 0)) // 写入新文件
   16772:	8b 45 10             	mov    0x10(%ebp),%eax
   16775:	8b 40 40             	mov    0x40(%eax),%eax
   16778:	25 00 02 00 00       	and    $0x200,%eax
   1677d:	85 c0                	test   %eax,%eax
   1677f:	74 6b                	je     167ec <fatfs_open+0x187>
   16781:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16785:	78 65                	js     167ec <fatfs_open+0x187>
    {
        // 创建一个空闲的diritem项
        diritem_t item;
        diritem_init(&item, 0, path);
   16787:	83 ec 04             	sub    $0x4,%esp
   1678a:	ff 75 0c             	pushl  0xc(%ebp)
   1678d:	6a 00                	push   $0x0
   1678f:	8d 45 c0             	lea    -0x40(%ebp),%eax
   16792:	50                   	push   %eax
   16793:	e8 0e f7 ff ff       	call   15ea6 <diritem_init>
   16798:	83 c4 10             	add    $0x10,%esp
        int err = write_dir_entry(fat, &item, p_index);
   1679b:	83 ec 04             	sub    $0x4,%esp
   1679e:	ff 75 f0             	pushl  -0x10(%ebp)
   167a1:	8d 45 c0             	lea    -0x40(%ebp),%eax
   167a4:	50                   	push   %eax
   167a5:	ff 75 e8             	pushl  -0x18(%ebp)
   167a8:	e8 f7 f8 ff ff       	call   160a4 <write_dir_entry>
   167ad:	83 c4 10             	add    $0x10,%esp
   167b0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   167b3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   167b7:	79 17                	jns    167d0 <fatfs_open+0x16b>
        {
            log_printf("create file failed.");
   167b9:	83 ec 0c             	sub    $0xc,%esp
   167bc:	68 ee 9d 01 00       	push   $0x19dee
   167c1:	e8 7a 24 00 00       	call   18c40 <log_printf>
   167c6:	83 c4 10             	add    $0x10,%esp
            return -1;
   167c9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   167ce:	eb 21                	jmp    167f1 <fatfs_open+0x18c>
        }

        read_from_diritem(fat, file, &item, p_index);
   167d0:	ff 75 f0             	pushl  -0x10(%ebp)
   167d3:	8d 45 c0             	lea    -0x40(%ebp),%eax
   167d6:	50                   	push   %eax
   167d7:	ff 75 10             	pushl  0x10(%ebp)
   167da:	ff 75 e8             	pushl  -0x18(%ebp)
   167dd:	e8 1e fe ff ff       	call   16600 <read_from_diritem>
   167e2:	83 c4 10             	add    $0x10,%esp
        return 0;
   167e5:	b8 00 00 00 00       	mov    $0x0,%eax
   167ea:	eb 05                	jmp    167f1 <fatfs_open+0x18c>
    }

    return -1;
   167ec:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   167f1:	c9                   	leave  
   167f2:	c3                   	ret    

000167f3 <fatfs_read>:

/**
 * @brief 读了文件
 */
int fatfs_read(char *buf, int size, file_t *file)
{
   167f3:	55                   	push   %ebp
   167f4:	89 e5                	mov    %esp,%ebp
   167f6:	53                   	push   %ebx
   167f7:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t *)file->fs->data;
   167fa:	8b 45 10             	mov    0x10(%ebp),%eax
   167fd:	8b 40 44             	mov    0x44(%eax),%eax
   16800:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16806:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 调整读取量，不要超过文件总量
    uint32_t nbytes = size;
   16809:	8b 45 0c             	mov    0xc(%ebp),%eax
   1680c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size)
   1680f:	8b 45 10             	mov    0x10(%ebp),%eax
   16812:	8b 40 30             	mov    0x30(%eax),%eax
   16815:	89 c2                	mov    %eax,%edx
   16817:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1681a:	01 c2                	add    %eax,%edx
   1681c:	8b 45 10             	mov    0x10(%ebp),%eax
   1681f:	8b 40 24             	mov    0x24(%eax),%eax
   16822:	39 c2                	cmp    %eax,%edx
   16824:	76 13                	jbe    16839 <fatfs_read+0x46>
    {
        nbytes = file->size - file->pos;
   16826:	8b 45 10             	mov    0x10(%ebp),%eax
   16829:	8b 50 24             	mov    0x24(%eax),%edx
   1682c:	8b 45 10             	mov    0x10(%ebp),%eax
   1682f:	8b 40 30             	mov    0x30(%eax),%eax
   16832:	29 c2                	sub    %eax,%edx
   16834:	89 d0                	mov    %edx,%eax
   16836:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   16839:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    // 判断读取量，是否是整簇
    while (nbytes > 0)
   16840:	e9 41 01 00 00       	jmp    16986 <fatfs_read+0x193>
    {
        uint32_t curr_read = nbytes;
   16845:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16848:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   1684b:	8b 45 10             	mov    0x10(%ebp),%eax
   1684e:	8b 40 30             	mov    0x30(%eax),%eax
   16851:	89 c2                	mov    %eax,%edx
   16853:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16856:	8b 48 20             	mov    0x20(%eax),%ecx
   16859:	89 d0                	mov    %edx,%eax
   1685b:	ba 00 00 00 00       	mov    $0x0,%edx
   16860:	f7 f1                	div    %ecx
   16862:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2) * fat->sec_per_cluster; // 簇号从2开始,FAT16规定
   16865:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16868:	8b 50 1c             	mov    0x1c(%eax),%edx
   1686b:	8b 45 10             	mov    0x10(%ebp),%eax
   1686e:	8b 40 38             	mov    0x38(%eax),%eax
   16871:	83 e8 02             	sub    $0x2,%eax
   16874:	89 c1                	mov    %eax,%ecx
   16876:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16879:	8b 40 10             	mov    0x10(%eax),%eax
   1687c:	0f af c1             	imul   %ecx,%eax
   1687f:	01 d0                	add    %edx,%eax
   16881:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 如果是整簇, 只读一簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size))
   16884:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16888:	75 4c                	jne    168d6 <fatfs_read+0xe3>
   1688a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1688d:	8b 40 20             	mov    0x20(%eax),%eax
   16890:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16893:	75 41                	jne    168d6 <fatfs_read+0xe3>
        {
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16895:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16898:	8b 40 10             	mov    0x10(%eax),%eax
   1689b:	89 c1                	mov    %eax,%ecx
   1689d:	8b 55 e0             	mov    -0x20(%ebp),%edx
   168a0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168a3:	8b 40 2c             	mov    0x2c(%eax),%eax
   168a6:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   168ac:	51                   	push   %ecx
   168ad:	ff 75 08             	pushl  0x8(%ebp)
   168b0:	52                   	push   %edx
   168b1:	50                   	push   %eax
   168b2:	e8 7d d7 ff ff       	call   14034 <dev_read>
   168b7:	83 c4 10             	add    $0x10,%esp
   168ba:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0)
   168bd:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   168c1:	79 08                	jns    168cb <fatfs_read+0xd8>
            {
                return total_read;
   168c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   168c6:	e9 c8 00 00 00       	jmp    16993 <fatfs_read+0x1a0>
            }

            curr_read = fat->cluster_byte_size;
   168cb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168ce:	8b 40 20             	mov    0x20(%eax),%eax
   168d1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
   168d4:	eb 7d                	jmp    16953 <fatfs_read+0x160>
        }
        else
        {
            // 如果跨簇，只读第一个簇内的一部分
            if (cluster_offset + curr_read > fat->cluster_byte_size)
   168d6:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   168d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168dc:	01 c2                	add    %eax,%edx
   168de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168e1:	8b 40 20             	mov    0x20(%eax),%eax
   168e4:	39 c2                	cmp    %eax,%edx
   168e6:	76 0c                	jbe    168f4 <fatfs_read+0x101>
            {
                curr_read = fat->cluster_byte_size - cluster_offset;
   168e8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168eb:	8b 40 20             	mov    0x20(%eax),%eax
   168ee:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   168f1:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            // 读取整个簇，然后从中拷贝
            fat->curr_sector = -1; // 表示ls缓存无效，否则ls出错
   168f4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   168f7:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   168fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16901:	8b 40 10             	mov    0x10(%eax),%eax
   16904:	89 c3                	mov    %eax,%ebx
   16906:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16909:	8b 48 24             	mov    0x24(%eax),%ecx
   1690c:	8b 55 e0             	mov    -0x20(%ebp),%edx
   1690f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16912:	8b 40 2c             	mov    0x2c(%eax),%eax
   16915:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1691b:	53                   	push   %ebx
   1691c:	51                   	push   %ecx
   1691d:	52                   	push   %edx
   1691e:	50                   	push   %eax
   1691f:	e8 10 d7 ff ff       	call   14034 <dev_read>
   16924:	83 c4 10             	add    $0x10,%esp
   16927:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0)
   1692a:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   1692e:	79 05                	jns    16935 <fatfs_read+0x142>
            {
                return total_read;
   16930:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16933:	eb 5e                	jmp    16993 <fatfs_read+0x1a0>
            }
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   16935:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16938:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1693b:	8b 4a 24             	mov    0x24(%edx),%ecx
   1693e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16941:	01 ca                	add    %ecx,%edx
   16943:	83 ec 04             	sub    $0x4,%esp
   16946:	50                   	push   %eax
   16947:	52                   	push   %edx
   16948:	ff 75 08             	pushl  0x8(%ebp)
   1694b:	e8 87 1c 00 00       	call   185d7 <kernel_memcpy>
   16950:	83 c4 10             	add    $0x10,%esp
        }

        buf += curr_read;
   16953:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16956:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   16959:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1695c:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   1695f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16962:	01 45 f0             	add    %eax,-0x10(%ebp)

        // 前移文件指针
        int err = move_file_pos(file, fat, curr_read, 0);
   16965:	6a 00                	push   $0x0
   16967:	ff 75 ec             	pushl  -0x14(%ebp)
   1696a:	ff 75 e8             	pushl  -0x18(%ebp)
   1696d:	ff 75 10             	pushl  0x10(%ebp)
   16970:	e8 4e f9 ff ff       	call   162c3 <move_file_pos>
   16975:	83 c4 10             	add    $0x10,%esp
   16978:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0)
   1697b:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   1697f:	79 05                	jns    16986 <fatfs_read+0x193>
        {
            return total_read;
   16981:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16984:	eb 0d                	jmp    16993 <fatfs_read+0x1a0>
    while (nbytes > 0)
   16986:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1698a:	0f 85 b5 fe ff ff    	jne    16845 <fatfs_read+0x52>
        }
    }

    return total_read;
   16990:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16993:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16996:	c9                   	leave  
   16997:	c3                   	ret    

00016998 <fatfs_write>:

/**
 * @brief 写文件数据
 */
int fatfs_write(char *buf, int size, file_t *file)
{
   16998:	55                   	push   %ebp
   16999:	89 e5                	mov    %esp,%ebp
   1699b:	53                   	push   %ebx
   1699c:	83 ec 34             	sub    $0x34,%esp
    fat_t *fat = (fat_t *)file->fs->data;
   1699f:	8b 45 10             	mov    0x10(%ebp),%eax
   169a2:	8b 40 44             	mov    0x44(%eax),%eax
   169a5:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   169ab:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 如果文件大小不够，则先扩展文件大小
    if (file->pos + size > file->size)
   169ae:	8b 45 10             	mov    0x10(%ebp),%eax
   169b1:	8b 50 30             	mov    0x30(%eax),%edx
   169b4:	8b 45 0c             	mov    0xc(%ebp),%eax
   169b7:	01 d0                	add    %edx,%eax
   169b9:	89 c2                	mov    %eax,%edx
   169bb:	8b 45 10             	mov    0x10(%ebp),%eax
   169be:	8b 40 24             	mov    0x24(%eax),%eax
   169c1:	39 c2                	cmp    %eax,%edx
   169c3:	76 3e                	jbe    16a03 <fatfs_write+0x6b>
    {
        int inc_size = file->pos + size - file->size;
   169c5:	8b 45 10             	mov    0x10(%ebp),%eax
   169c8:	8b 50 30             	mov    0x30(%eax),%edx
   169cb:	8b 45 0c             	mov    0xc(%ebp),%eax
   169ce:	01 d0                	add    %edx,%eax
   169d0:	89 c2                	mov    %eax,%edx
   169d2:	8b 45 10             	mov    0x10(%ebp),%eax
   169d5:	8b 40 24             	mov    0x24(%eax),%eax
   169d8:	29 c2                	sub    %eax,%edx
   169da:	89 d0                	mov    %edx,%eax
   169dc:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = expand_file(file, inc_size);
   169df:	83 ec 08             	sub    $0x8,%esp
   169e2:	ff 75 e4             	pushl  -0x1c(%ebp)
   169e5:	ff 75 10             	pushl  0x10(%ebp)
   169e8:	e8 61 f7 ff ff       	call   1614e <expand_file>
   169ed:	83 c4 10             	add    $0x10,%esp
   169f0:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0)
   169f3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   169f7:	79 0a                	jns    16a03 <fatfs_write+0x6b>
        {
            return 0;
   169f9:	b8 00 00 00 00       	mov    $0x0,%eax
   169fe:	e9 ae 01 00 00       	jmp    16bb1 <fatfs_write+0x219>
        }
    }

    uint32_t nbytes = size;
   16a03:	8b 45 0c             	mov    0xc(%ebp),%eax
   16a06:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   16a09:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes)
   16a10:	e9 8f 01 00 00       	jmp    16ba4 <fatfs_write+0x20c>
    {
        // 每次写的数据量取决于当前簇中剩余的空间，以及size的量综合
        uint32_t curr_write = nbytes;
   16a15:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16a18:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   16a1b:	8b 45 10             	mov    0x10(%ebp),%eax
   16a1e:	8b 40 30             	mov    0x30(%eax),%eax
   16a21:	89 c2                	mov    %eax,%edx
   16a23:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a26:	8b 48 20             	mov    0x20(%eax),%ecx
   16a29:	89 d0                	mov    %edx,%eax
   16a2b:	ba 00 00 00 00       	mov    $0x0,%edx
   16a30:	f7 f1                	div    %ecx
   16a32:	89 55 dc             	mov    %edx,-0x24(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2) * fat->sec_per_cluster; // 从2开始
   16a35:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a38:	8b 50 1c             	mov    0x1c(%eax),%edx
   16a3b:	8b 45 10             	mov    0x10(%ebp),%eax
   16a3e:	8b 40 38             	mov    0x38(%eax),%eax
   16a41:	83 e8 02             	sub    $0x2,%eax
   16a44:	89 c1                	mov    %eax,%ecx
   16a46:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a49:	8b 40 10             	mov    0x10(%eax),%eax
   16a4c:	0f af c1             	imul   %ecx,%eax
   16a4f:	01 d0                	add    %edx,%eax
   16a51:	89 45 d8             	mov    %eax,-0x28(%ebp)

        // 如果是整簇, 写整簇
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size))
   16a54:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   16a58:	75 4f                	jne    16aa9 <fatfs_write+0x111>
   16a5a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a5d:	8b 40 20             	mov    0x20(%eax),%eax
   16a60:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   16a63:	75 44                	jne    16aa9 <fatfs_write+0x111>
        {
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   16a65:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a68:	8b 40 10             	mov    0x10(%eax),%eax
   16a6b:	89 c1                	mov    %eax,%ecx
   16a6d:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16a70:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a73:	8b 40 2c             	mov    0x2c(%eax),%eax
   16a76:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16a7c:	51                   	push   %ecx
   16a7d:	ff 75 08             	pushl  0x8(%ebp)
   16a80:	52                   	push   %edx
   16a81:	50                   	push   %eax
   16a82:	e8 f9 d5 ff ff       	call   14080 <dev_write>
   16a87:	83 c4 10             	add    $0x10,%esp
   16a8a:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0)
   16a8d:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16a91:	79 08                	jns    16a9b <fatfs_write+0x103>
            {
                return total_write;
   16a93:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a96:	e9 16 01 00 00       	jmp    16bb1 <fatfs_write+0x219>
            }

            curr_write = fat->cluster_byte_size;
   16a9b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a9e:	8b 40 20             	mov    0x20(%eax),%eax
   16aa1:	89 45 ec             	mov    %eax,-0x14(%ebp)
        {
   16aa4:	e9 b7 00 00 00       	jmp    16b60 <fatfs_write+0x1c8>
        }
        else
        {
            // 如果跨簇，只写第一个簇内的一部分
            if (cluster_offset + curr_write > fat->cluster_byte_size)
   16aa9:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16aac:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16aaf:	01 c2                	add    %eax,%edx
   16ab1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ab4:	8b 40 20             	mov    0x20(%eax),%eax
   16ab7:	39 c2                	cmp    %eax,%edx
   16ab9:	76 0c                	jbe    16ac7 <fatfs_write+0x12f>
            {
                curr_write = fat->cluster_byte_size - cluster_offset;
   16abb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16abe:	8b 40 20             	mov    0x20(%eax),%eax
   16ac1:	2b 45 dc             	sub    -0x24(%ebp),%eax
   16ac4:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            fat->curr_sector = -1;
   16ac7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16aca:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16ad1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ad4:	8b 40 10             	mov    0x10(%eax),%eax
   16ad7:	89 c3                	mov    %eax,%ebx
   16ad9:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16adc:	8b 48 24             	mov    0x24(%eax),%ecx
   16adf:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16ae2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ae5:	8b 40 2c             	mov    0x2c(%eax),%eax
   16ae8:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16aee:	53                   	push   %ebx
   16aef:	51                   	push   %ecx
   16af0:	52                   	push   %edx
   16af1:	50                   	push   %eax
   16af2:	e8 3d d5 ff ff       	call   14034 <dev_read>
   16af7:	83 c4 10             	add    $0x10,%esp
   16afa:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0)
   16afd:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16b01:	79 08                	jns    16b0b <fatfs_write+0x173>
            {
                return total_write;
   16b03:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b06:	e9 a6 00 00 00       	jmp    16bb1 <fatfs_write+0x219>
            }
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);
   16b0b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16b0e:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16b11:	8b 4a 24             	mov    0x24(%edx),%ecx
   16b14:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16b17:	01 ca                	add    %ecx,%edx
   16b19:	83 ec 04             	sub    $0x4,%esp
   16b1c:	50                   	push   %eax
   16b1d:	ff 75 08             	pushl  0x8(%ebp)
   16b20:	52                   	push   %edx
   16b21:	e8 b1 1a 00 00       	call   185d7 <kernel_memcpy>
   16b26:	83 c4 10             	add    $0x10,%esp

            // 写整个簇，然后从中拷贝
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16b29:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b2c:	8b 40 10             	mov    0x10(%eax),%eax
   16b2f:	89 c3                	mov    %eax,%ebx
   16b31:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b34:	8b 48 24             	mov    0x24(%eax),%ecx
   16b37:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16b3a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16b3d:	8b 40 2c             	mov    0x2c(%eax),%eax
   16b40:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16b46:	53                   	push   %ebx
   16b47:	51                   	push   %ecx
   16b48:	52                   	push   %edx
   16b49:	50                   	push   %eax
   16b4a:	e8 31 d5 ff ff       	call   14080 <dev_write>
   16b4f:	83 c4 10             	add    $0x10,%esp
   16b52:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0)
   16b55:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16b59:	79 05                	jns    16b60 <fatfs_write+0x1c8>
            {
                return total_write;
   16b5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b5e:	eb 51                	jmp    16bb1 <fatfs_write+0x219>
            }
        }

        buf += curr_write;
   16b60:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16b63:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   16b66:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16b69:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   16b6c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16b6f:	01 45 f0             	add    %eax,-0x10(%ebp)
        file->size += curr_write;
   16b72:	8b 45 10             	mov    0x10(%ebp),%eax
   16b75:	8b 50 24             	mov    0x24(%eax),%edx
   16b78:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16b7b:	01 c2                	add    %eax,%edx
   16b7d:	8b 45 10             	mov    0x10(%ebp),%eax
   16b80:	89 50 24             	mov    %edx,0x24(%eax)

        // 前移文件指针
        int err = move_file_pos(file, fat, curr_write, 1);
   16b83:	6a 01                	push   $0x1
   16b85:	ff 75 ec             	pushl  -0x14(%ebp)
   16b88:	ff 75 e8             	pushl  -0x18(%ebp)
   16b8b:	ff 75 10             	pushl  0x10(%ebp)
   16b8e:	e8 30 f7 ff ff       	call   162c3 <move_file_pos>
   16b93:	83 c4 10             	add    $0x10,%esp
   16b96:	89 45 cc             	mov    %eax,-0x34(%ebp)
        if (err < 0)
   16b99:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   16b9d:	79 05                	jns    16ba4 <fatfs_write+0x20c>
        {
            return total_write;
   16b9f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ba2:	eb 0d                	jmp    16bb1 <fatfs_write+0x219>
    while (nbytes)
   16ba4:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16ba8:	0f 85 67 fe ff ff    	jne    16a15 <fatfs_write+0x7d>
        }
    }

    return total_write;
   16bae:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16bb1:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16bb4:	c9                   	leave  
   16bb5:	c3                   	ret    

00016bb6 <fatfs_seek>:

/**
 * @brief 文件读写位置的调整
 */
int fatfs_seek(file_t *file, uint32_t offset, int dir)
{
   16bb6:	55                   	push   %ebp
   16bb7:	89 e5                	mov    %esp,%ebp
   16bb9:	83 ec 28             	sub    $0x28,%esp
    // 只支持基于文件开头的定位
    if (dir != 0)
   16bbc:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16bc0:	74 0a                	je     16bcc <fatfs_seek+0x16>
    {
        return -1;
   16bc2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bc7:	e9 c7 00 00 00       	jmp    16c93 <fatfs_seek+0xdd>
    }

    fat_t *fat = (fat_t *)file->fs->data;
   16bcc:	8b 45 08             	mov    0x8(%ebp),%eax
   16bcf:	8b 40 44             	mov    0x44(%eax),%eax
   16bd2:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16bd8:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t curr_cluster = file->sblk;
   16bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   16bde:	8b 40 34             	mov    0x34(%eax),%eax
   16be1:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16be5:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16bec:	8b 45 0c             	mov    0xc(%ebp),%eax
   16bef:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (offset_to_move > 0)
   16bf2:	eb 7d                	jmp    16c71 <fatfs_seek+0xbb>
    {
        uint32_t c_off = curr_pos % fat->cluster_byte_size;
   16bf4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16bf7:	8b 48 20             	mov    0x20(%eax),%ecx
   16bfa:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16bfd:	ba 00 00 00 00       	mov    $0x0,%edx
   16c02:	f7 f1                	div    %ecx
   16c04:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t curr_move = offset_to_move;
   16c07:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c0a:	89 45 e0             	mov    %eax,-0x20(%ebp)

        // 不超过一簇，直接调整位置，无需跑到下一簇
        if (c_off + curr_move < fat->cluster_byte_size)
   16c0d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16c10:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c13:	01 c2                	add    %eax,%edx
   16c15:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c18:	8b 40 20             	mov    0x20(%eax),%eax
   16c1b:	39 c2                	cmp    %eax,%edx
   16c1d:	73 08                	jae    16c27 <fatfs_seek+0x71>
        {
            curr_pos += curr_move;
   16c1f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c22:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16c25:	eb 54                	jmp    16c7b <fatfs_seek+0xc5>
        }

        // 超过一簇，只在当前簇内移动
        curr_move = fat->cluster_byte_size - c_off;
   16c27:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c2a:	8b 40 20             	mov    0x20(%eax),%eax
   16c2d:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16c30:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16c33:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c36:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16c39:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c3c:	29 45 ec             	sub    %eax,-0x14(%ebp)

        // 取下一簇
        curr_cluster = cluster_get_next(fat, curr_cluster);
   16c3f:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c43:	83 ec 08             	sub    $0x8,%esp
   16c46:	50                   	push   %eax
   16c47:	ff 75 e8             	pushl  -0x18(%ebp)
   16c4a:	e8 25 ee ff ff       	call   15a74 <cluster_get_next>
   16c4f:	83 c4 10             	add    $0x10,%esp
   16c52:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(curr_cluster))
   16c56:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c5a:	83 ec 0c             	sub    $0xc,%esp
   16c5d:	50                   	push   %eax
   16c5e:	e8 e8 ed ff ff       	call   15a4b <cluster_is_valid>
   16c63:	83 c4 10             	add    $0x10,%esp
   16c66:	85 c0                	test   %eax,%eax
   16c68:	75 07                	jne    16c71 <fatfs_seek+0xbb>
        {
            return -1;
   16c6a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c6f:	eb 22                	jmp    16c93 <fatfs_seek+0xdd>
    while (offset_to_move > 0)
   16c71:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16c75:	0f 85 79 ff ff ff    	jne    16bf4 <fatfs_seek+0x3e>
        }
    }

    // 最后记录一下位置
    file->pos = curr_pos;
   16c7b:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16c7e:	8b 45 08             	mov    0x8(%ebp),%eax
   16c81:	89 50 30             	mov    %edx,0x30(%eax)
    file->cblk = curr_cluster;
   16c84:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16c88:	8b 45 08             	mov    0x8(%ebp),%eax
   16c8b:	89 50 38             	mov    %edx,0x38(%eax)
    return 0;
   16c8e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16c93:	c9                   	leave  
   16c94:	c3                   	ret    

00016c95 <fatfs_stat>:

int fatfs_stat(file_t *file, struct stat *st)
{
   16c95:	55                   	push   %ebp
   16c96:	89 e5                	mov    %esp,%ebp
    return -1;
   16c98:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16c9d:	5d                   	pop    %ebp
   16c9e:	c3                   	ret    

00016c9f <fatfs_close>:

/**
 * @brief 关闭文件
 */
void fatfs_close(file_t *file)
{
   16c9f:	55                   	push   %ebp
   16ca0:	89 e5                	mov    %esp,%ebp
   16ca2:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY)
   16ca5:	8b 45 08             	mov    0x8(%ebp),%eax
   16ca8:	8b 40 40             	mov    0x40(%eax),%eax
   16cab:	85 c0                	test   %eax,%eax
   16cad:	74 74                	je     16d23 <fatfs_close+0x84>
    {
        return;
    }

    fat_t *fat = (fat_t *)file->fs->data;
   16caf:	8b 45 08             	mov    0x8(%ebp),%eax
   16cb2:	8b 40 44             	mov    0x44(%eax),%eax
   16cb5:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16cbb:	89 45 f4             	mov    %eax,-0xc(%ebp)

    diritem_t *item = read_dir_entry(fat, file->p_index);
   16cbe:	8b 45 08             	mov    0x8(%ebp),%eax
   16cc1:	8b 40 3c             	mov    0x3c(%eax),%eax
   16cc4:	83 ec 08             	sub    $0x8,%esp
   16cc7:	50                   	push   %eax
   16cc8:	ff 75 f4             	pushl  -0xc(%ebp)
   16ccb:	e8 54 f3 ff ff       	call   16024 <read_dir_entry>
   16cd0:	83 c4 10             	add    $0x10,%esp
   16cd3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0)
   16cd6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16cda:	74 4a                	je     16d26 <fatfs_close+0x87>
    {
        return;
    }

    item->DIR_FileSize = file->size;
   16cdc:	8b 45 08             	mov    0x8(%ebp),%eax
   16cdf:	8b 50 24             	mov    0x24(%eax),%edx
   16ce2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ce5:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t)(file->sblk >> 16);
   16ce8:	8b 45 08             	mov    0x8(%ebp),%eax
   16ceb:	8b 40 34             	mov    0x34(%eax),%eax
   16cee:	c1 f8 10             	sar    $0x10,%eax
   16cf1:	89 c2                	mov    %eax,%edx
   16cf3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16cf6:	66 89 50 14          	mov    %dx,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t)(file->sblk & 0xFFFF);
   16cfa:	8b 45 08             	mov    0x8(%ebp),%eax
   16cfd:	8b 40 34             	mov    0x34(%eax),%eax
   16d00:	89 c2                	mov    %eax,%edx
   16d02:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d05:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16d09:	8b 45 08             	mov    0x8(%ebp),%eax
   16d0c:	8b 40 3c             	mov    0x3c(%eax),%eax
   16d0f:	83 ec 04             	sub    $0x4,%esp
   16d12:	50                   	push   %eax
   16d13:	ff 75 f0             	pushl  -0x10(%ebp)
   16d16:	ff 75 f4             	pushl  -0xc(%ebp)
   16d19:	e8 86 f3 ff ff       	call   160a4 <write_dir_entry>
   16d1e:	83 c4 10             	add    $0x10,%esp
   16d21:	eb 04                	jmp    16d27 <fatfs_close+0x88>
        return;
   16d23:	90                   	nop
   16d24:	eb 01                	jmp    16d27 <fatfs_close+0x88>
        return;
   16d26:	90                   	nop
}
   16d27:	c9                   	leave  
   16d28:	c3                   	ret    

00016d29 <fatfs_opendir>:

/**
 * @brief 打开目录。只是简单地读取位置重设为0
 */
int fatfs_opendir(struct _fs_t *fs, const char *name, DIR *dir)
{
   16d29:	55                   	push   %ebp
   16d2a:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16d2c:	8b 45 10             	mov    0x10(%ebp),%eax
   16d2f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16d35:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16d3a:	5d                   	pop    %ebp
   16d3b:	c3                   	ret    

00016d3c <fatfs_readdir>:

/**
 * @brief 读取一个目录项
 */
int fatfs_readdir(struct _fs_t *fs, DIR *dir, struct dirent *dirent)
{
   16d3c:	55                   	push   %ebp
   16d3d:	89 e5                	mov    %esp,%ebp
   16d3f:	83 ec 18             	sub    $0x18,%esp
    fat_t *fat = (fat_t *)fs->data;
   16d42:	8b 45 08             	mov    0x8(%ebp),%eax
   16d45:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16d4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 做一些简单的判断，检查
    while (dir->index < fat->root_ent_cnt)
   16d4e:	e9 be 00 00 00       	jmp    16e11 <fatfs_readdir+0xd5>
    {
        diritem_t *item = read_dir_entry(fat, dir->index);
   16d53:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d56:	8b 00                	mov    (%eax),%eax
   16d58:	83 ec 08             	sub    $0x8,%esp
   16d5b:	50                   	push   %eax
   16d5c:	ff 75 f4             	pushl  -0xc(%ebp)
   16d5f:	e8 c0 f2 ff ff       	call   16024 <read_dir_entry>
   16d64:	83 c4 10             	add    $0x10,%esp
   16d67:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0)
   16d6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16d6e:	75 0a                	jne    16d7a <fatfs_readdir+0x3e>
        {
            return -1;
   16d70:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16d75:	e9 b4 00 00 00       	jmp    16e2e <fatfs_readdir+0xf2>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END)
   16d7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d7d:	0f b6 00             	movzbl (%eax),%eax
   16d80:	84 c0                	test   %al,%al
   16d82:	0f 84 a0 00 00 00    	je     16e28 <fatfs_readdir+0xec>
        {
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] != DIRITEM_NAME_FREE)
   16d88:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d8b:	0f b6 00             	movzbl (%eax),%eax
   16d8e:	3c e5                	cmp    $0xe5,%al
   16d90:	74 72                	je     16e04 <fatfs_readdir+0xc8>
        {
            file_type_t type = diritem_get_type(item);
   16d92:	83 ec 0c             	sub    $0xc,%esp
   16d95:	ff 75 f0             	pushl  -0x10(%ebp)
   16d98:	e8 2a f2 ff ff       	call   15fc7 <diritem_get_type>
   16d9d:	83 c4 10             	add    $0x10,%esp
   16da0:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR))
   16da3:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16da7:	74 06                	je     16daf <fatfs_readdir+0x73>
   16da9:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16dad:	75 55                	jne    16e04 <fatfs_readdir+0xc8>
            {
                dirent->index = dir->index++;
   16daf:	8b 45 0c             	mov    0xc(%ebp),%eax
   16db2:	8b 00                	mov    (%eax),%eax
   16db4:	8d 48 01             	lea    0x1(%eax),%ecx
   16db7:	8b 55 0c             	mov    0xc(%ebp),%edx
   16dba:	89 0a                	mov    %ecx,(%edx)
   16dbc:	8b 55 10             	mov    0x10(%ebp),%edx
   16dbf:	89 02                	mov    %eax,(%edx)
                dirent->type = diritem_get_type(item);
   16dc1:	83 ec 0c             	sub    $0xc,%esp
   16dc4:	ff 75 f0             	pushl  -0x10(%ebp)
   16dc7:	e8 fb f1 ff ff       	call   15fc7 <diritem_get_type>
   16dcc:	83 c4 10             	add    $0x10,%esp
   16dcf:	89 c2                	mov    %eax,%edx
   16dd1:	8b 45 10             	mov    0x10(%ebp),%eax
   16dd4:	89 50 04             	mov    %edx,0x4(%eax)
                dirent->size = item->DIR_FileSize;
   16dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16dda:	8b 40 1c             	mov    0x1c(%eax),%eax
   16ddd:	89 c2                	mov    %eax,%edx
   16ddf:	8b 45 10             	mov    0x10(%ebp),%eax
   16de2:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
                diritem_get_name(item, dirent->name);
   16de8:	8b 45 10             	mov    0x10(%ebp),%eax
   16deb:	83 c0 08             	add    $0x8,%eax
   16dee:	83 ec 08             	sub    $0x8,%esp
   16df1:	50                   	push   %eax
   16df2:	ff 75 f0             	pushl  -0x10(%ebp)
   16df5:	e8 3a f1 ff ff       	call   15f34 <diritem_get_name>
   16dfa:	83 c4 10             	add    $0x10,%esp
                return 0;
   16dfd:	b8 00 00 00 00       	mov    $0x0,%eax
   16e02:	eb 2a                	jmp    16e2e <fatfs_readdir+0xf2>
            }
        }

        dir->index++;
   16e04:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e07:	8b 00                	mov    (%eax),%eax
   16e09:	8d 50 01             	lea    0x1(%eax),%edx
   16e0c:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e0f:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt)
   16e11:	8b 45 0c             	mov    0xc(%ebp),%eax
   16e14:	8b 00                	mov    (%eax),%eax
   16e16:	89 c2                	mov    %eax,%edx
   16e18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16e1b:	8b 40 14             	mov    0x14(%eax),%eax
   16e1e:	39 c2                	cmp    %eax,%edx
   16e20:	0f 82 2d ff ff ff    	jb     16d53 <fatfs_readdir+0x17>
   16e26:	eb 01                	jmp    16e29 <fatfs_readdir+0xed>
            break;
   16e28:	90                   	nop
    }
    return -1;
   16e29:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16e2e:	c9                   	leave  
   16e2f:	c3                   	ret    

00016e30 <fatfs_closedir>:

/**
 * @brief 关闭文件扫描读取
 */
int fatfs_closedir(struct _fs_t *fs, DIR *dir)
{
   16e30:	55                   	push   %ebp
   16e31:	89 e5                	mov    %esp,%ebp
    return 0;
   16e33:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16e38:	5d                   	pop    %ebp
   16e39:	c3                   	ret    

00016e3a <fatfs_unlink>:

/**
 * @brief 删除文件
 */
int fatfs_unlink(struct _fs_t *fs, const char *path)
{
   16e3a:	55                   	push   %ebp
   16e3b:	89 e5                	mov    %esp,%ebp
   16e3d:	83 ec 38             	sub    $0x38,%esp
    fat_t *fat = (fat_t *)fs->data;
   16e40:	8b 45 08             	mov    0x8(%ebp),%eax
   16e43:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16e49:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 遍历根目录的数据区，找到已经存在的匹配项
    for (int i = 0; i < fat->root_ent_cnt; i++)
   16e4c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16e53:	e9 b3 00 00 00       	jmp    16f0b <fatfs_unlink+0xd1>
    {
        diritem_t *item = read_dir_entry(fat, i);
   16e58:	83 ec 08             	sub    $0x8,%esp
   16e5b:	ff 75 f4             	pushl  -0xc(%ebp)
   16e5e:	ff 75 f0             	pushl  -0x10(%ebp)
   16e61:	e8 be f1 ff ff       	call   16024 <read_dir_entry>
   16e66:	83 c4 10             	add    $0x10,%esp
   16e69:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0)
   16e6c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16e70:	75 0a                	jne    16e7c <fatfs_unlink+0x42>
        {
            return -1;
   16e72:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16e77:	e9 a8 00 00 00       	jmp    16f24 <fatfs_unlink+0xea>
        }

        // 结束项，不需要再扫描了，同时index也不能往前走
        if (item->DIR_Name[0] == DIRITEM_NAME_END)
   16e7c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e7f:	0f b6 00             	movzbl (%eax),%eax
   16e82:	84 c0                	test   %al,%al
   16e84:	0f 84 94 00 00 00    	je     16f1e <fatfs_unlink+0xe4>
        {
            break;
        }

        // 只显示普通文件和目录，其它的不显示
        if (item->DIR_Name[0] == DIRITEM_NAME_FREE)
   16e8a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e8d:	0f b6 00             	movzbl (%eax),%eax
   16e90:	3c e5                	cmp    $0xe5,%al
   16e92:	74 72                	je     16f06 <fatfs_unlink+0xcc>
        {
            continue;
        }

        // 找到要打开的目录
        if (diritem_name_match(item, path))
   16e94:	83 ec 08             	sub    $0x8,%esp
   16e97:	ff 75 0c             	pushl  0xc(%ebp)
   16e9a:	ff 75 ec             	pushl  -0x14(%ebp)
   16e9d:	e8 cd ef ff ff       	call   15e6f <diritem_name_match>
   16ea2:	83 c4 10             	add    $0x10,%esp
   16ea5:	85 c0                	test   %eax,%eax
   16ea7:	74 5e                	je     16f07 <fatfs_unlink+0xcd>
        {
            // 释放簇
            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   16ea9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16eac:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16eb0:	0f b7 c0             	movzwl %ax,%eax
   16eb3:	c1 e0 10             	shl    $0x10,%eax
   16eb6:	89 c2                	mov    %eax,%edx
   16eb8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16ebb:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16ebf:	0f b7 c0             	movzwl %ax,%eax
   16ec2:	09 d0                	or     %edx,%eax
   16ec4:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16ec7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16eca:	0f b7 c0             	movzwl %ax,%eax
   16ecd:	83 ec 08             	sub    $0x8,%esp
   16ed0:	50                   	push   %eax
   16ed1:	ff 75 f0             	pushl  -0x10(%ebp)
   16ed4:	e8 88 ed ff ff       	call   15c61 <cluster_free_chain>
   16ed9:	83 c4 10             	add    $0x10,%esp

            // 写diritem项
            diritem_t item;
            kernel_memset(&item, 0, sizeof(diritem_t));
   16edc:	83 ec 04             	sub    $0x4,%esp
   16edf:	6a 20                	push   $0x20
   16ee1:	6a 00                	push   $0x0
   16ee3:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16ee6:	50                   	push   %eax
   16ee7:	e8 3a 17 00 00       	call   18626 <kernel_memset>
   16eec:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &item, i);
   16eef:	83 ec 04             	sub    $0x4,%esp
   16ef2:	ff 75 f4             	pushl  -0xc(%ebp)
   16ef5:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16ef8:	50                   	push   %eax
   16ef9:	ff 75 f0             	pushl  -0x10(%ebp)
   16efc:	e8 a3 f1 ff ff       	call   160a4 <write_dir_entry>
   16f01:	83 c4 10             	add    $0x10,%esp
   16f04:	eb 1e                	jmp    16f24 <fatfs_unlink+0xea>
            continue;
   16f06:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; i++)
   16f07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16f0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16f0e:	8b 50 14             	mov    0x14(%eax),%edx
   16f11:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16f14:	39 c2                	cmp    %eax,%edx
   16f16:	0f 87 3c ff ff ff    	ja     16e58 <fatfs_unlink+0x1e>
   16f1c:	eb 01                	jmp    16f1f <fatfs_unlink+0xe5>
            break;
   16f1e:	90                   	nop
        }
    }

    return -1;
   16f1f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16f24:	c9                   	leave  
   16f25:	c3                   	ret    

00016f26 <file_alloc>:

/**
 * @brief 分配一个文件描述符
 */
file_t *file_alloc(void)
{
   16f26:	55                   	push   %ebp
   16f27:	89 e5                	mov    %esp,%ebp
   16f29:	83 ec 18             	sub    $0x18,%esp
    file_t *file = (file_t *)0;
   16f2c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   16f33:	83 ec 0c             	sub    $0xc,%esp
   16f36:	68 c0 f8 05 00       	push   $0x5f8c0
   16f3b:	e8 46 10 00 00       	call   17f86 <mutex_lock>
   16f40:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++)
   16f43:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   16f4a:	eb 47                	jmp    16f93 <file_alloc+0x6d>
    {
        file_t *p_file = file_table + i;
   16f4c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16f4f:	89 d0                	mov    %edx,%eax
   16f51:	c1 e0 03             	shl    $0x3,%eax
   16f54:	01 d0                	add    %edx,%eax
   16f56:	c1 e0 03             	shl    $0x3,%eax
   16f59:	05 c0 b8 03 00       	add    $0x3b8c0,%eax
   16f5e:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0)
   16f61:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f64:	8b 40 28             	mov    0x28(%eax),%eax
   16f67:	85 c0                	test   %eax,%eax
   16f69:	75 24                	jne    16f8f <file_alloc+0x69>
        {
            kernel_memset(p_file, 0, sizeof(file_t));
   16f6b:	83 ec 04             	sub    $0x4,%esp
   16f6e:	6a 48                	push   $0x48
   16f70:	6a 00                	push   $0x0
   16f72:	ff 75 ec             	pushl  -0x14(%ebp)
   16f75:	e8 ac 16 00 00       	call   18626 <kernel_memset>
   16f7a:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   16f7d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f80:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
            file = p_file;
   16f87:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f8a:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   16f8d:	eb 0d                	jmp    16f9c <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++)
   16f8f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   16f93:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   16f9a:	7e b0                	jle    16f4c <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   16f9c:	83 ec 0c             	sub    $0xc,%esp
   16f9f:	68 c0 f8 05 00       	push   $0x5f8c0
   16fa4:	e8 71 10 00 00       	call   1801a <mutex_unlock>
   16fa9:	83 c4 10             	add    $0x10,%esp
    return file;
   16fac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16faf:	c9                   	leave  
   16fb0:	c3                   	ret    

00016fb1 <file_free>:

/**
 * @brief 释放文件描述符
 */
void file_free(file_t *file)
{
   16fb1:	55                   	push   %ebp
   16fb2:	89 e5                	mov    %esp,%ebp
   16fb4:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16fb7:	83 ec 0c             	sub    $0xc,%esp
   16fba:	68 c0 f8 05 00       	push   $0x5f8c0
   16fbf:	e8 c2 0f 00 00       	call   17f86 <mutex_lock>
   16fc4:	83 c4 10             	add    $0x10,%esp
    if (file->ref)
   16fc7:	8b 45 08             	mov    0x8(%ebp),%eax
   16fca:	8b 40 28             	mov    0x28(%eax),%eax
   16fcd:	85 c0                	test   %eax,%eax
   16fcf:	74 0f                	je     16fe0 <file_free+0x2f>
    {
        file->ref--;
   16fd1:	8b 45 08             	mov    0x8(%ebp),%eax
   16fd4:	8b 40 28             	mov    0x28(%eax),%eax
   16fd7:	8d 50 ff             	lea    -0x1(%eax),%edx
   16fda:	8b 45 08             	mov    0x8(%ebp),%eax
   16fdd:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   16fe0:	83 ec 0c             	sub    $0xc,%esp
   16fe3:	68 c0 f8 05 00       	push   $0x5f8c0
   16fe8:	e8 2d 10 00 00       	call   1801a <mutex_unlock>
   16fed:	83 c4 10             	add    $0x10,%esp
}
   16ff0:	90                   	nop
   16ff1:	c9                   	leave  
   16ff2:	c3                   	ret    

00016ff3 <file_inc_ref>:

/**
 * @brief 增加file的引用计数
 */
void file_inc_ref(file_t *file)
{
   16ff3:	55                   	push   %ebp
   16ff4:	89 e5                	mov    %esp,%ebp
   16ff6:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16ff9:	83 ec 0c             	sub    $0xc,%esp
   16ffc:	68 c0 f8 05 00       	push   $0x5f8c0
   17001:	e8 80 0f 00 00       	call   17f86 <mutex_lock>
   17006:	83 c4 10             	add    $0x10,%esp
    file->ref++;
   17009:	8b 45 08             	mov    0x8(%ebp),%eax
   1700c:	8b 40 28             	mov    0x28(%eax),%eax
   1700f:	8d 50 01             	lea    0x1(%eax),%edx
   17012:	8b 45 08             	mov    0x8(%ebp),%eax
   17015:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   17018:	83 ec 0c             	sub    $0xc,%esp
   1701b:	68 c0 f8 05 00       	push   $0x5f8c0
   17020:	e8 f5 0f 00 00       	call   1801a <mutex_unlock>
   17025:	83 c4 10             	add    $0x10,%esp
}
   17028:	90                   	nop
   17029:	c9                   	leave  
   1702a:	c3                   	ret    

0001702b <file_table_init>:

/**
 * @brief 文件表初始化
 */
void file_table_init(void)
{
   1702b:	55                   	push   %ebp
   1702c:	89 e5                	mov    %esp,%ebp
   1702e:	83 ec 08             	sub    $0x8,%esp
    // 文件描述符表初始化
    kernel_memset(&file_table, 0, sizeof(file_table));
   17031:	83 ec 04             	sub    $0x4,%esp
   17034:	68 00 40 02 00       	push   $0x24000
   17039:	6a 00                	push   $0x0
   1703b:	68 c0 b8 03 00       	push   $0x3b8c0
   17040:	e8 e1 15 00 00       	call   18626 <kernel_memset>
   17045:	83 c4 10             	add    $0x10,%esp
    mutex_init(&file_alloc_mutex);
   17048:	83 ec 0c             	sub    $0xc,%esp
   1704b:	68 c0 f8 05 00       	push   $0x5f8c0
   17050:	e8 03 0f 00 00       	call   17f58 <mutex_init>
   17055:	83 c4 10             	add    $0x10,%esp
}
   17058:	90                   	nop
   17059:	c9                   	leave  
   1705a:	c3                   	ret    

0001705b <list_node_next>:
{
   1705b:	55                   	push   %ebp
   1705c:	89 e5                	mov    %esp,%ebp
    return node->next;
   1705e:	8b 45 08             	mov    0x8(%ebp),%eax
   17061:	8b 40 04             	mov    0x4(%eax),%eax
}
   17064:	5d                   	pop    %ebp
   17065:	c3                   	ret    

00017066 <list_first>:
{
   17066:	55                   	push   %ebp
   17067:	89 e5                	mov    %esp,%ebp
    return list->first;
   17069:	8b 45 08             	mov    0x8(%ebp),%eax
   1706c:	8b 00                	mov    (%eax),%eax
}
   1706e:	5d                   	pop    %ebp
   1706f:	c3                   	ret    

00017070 <inb>:
{
   17070:	55                   	push   %ebp
   17071:	89 e5                	mov    %esp,%ebp
   17073:	83 ec 14             	sub    $0x14,%esp
   17076:	8b 45 08             	mov    0x8(%ebp),%eax
   17079:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   1707d:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   17081:	89 c2                	mov    %eax,%edx
   17083:	ec                   	in     (%dx),%al
   17084:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   17087:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1708b:	c9                   	leave  
   1708c:	c3                   	ret    

0001708d <inw>:
{
   1708d:	55                   	push   %ebp
   1708e:	89 e5                	mov    %esp,%ebp
   17090:	83 ec 14             	sub    $0x14,%esp
   17093:	8b 45 08             	mov    0x8(%ebp),%eax
   17096:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("in %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   1709a:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   1709e:	89 c2                	mov    %eax,%edx
   170a0:	66 ed                	in     (%dx),%ax
   170a2:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    return rv;
   170a6:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   170aa:	c9                   	leave  
   170ab:	c3                   	ret    

000170ac <outb>:
{
   170ac:	55                   	push   %ebp
   170ad:	89 e5                	mov    %esp,%ebp
   170af:	83 ec 08             	sub    $0x8,%esp
   170b2:	8b 55 08             	mov    0x8(%ebp),%edx
   170b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   170b8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   170bc:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   170bf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   170c3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   170c7:	ee                   	out    %al,(%dx)
}
   170c8:	90                   	nop
   170c9:	c9                   	leave  
   170ca:	c3                   	ret    

000170cb <fs_protect>:

extern fs_op_t devfs_op;
extern fs_op_t fatfs_op;

static void fs_protect(fs_t *fs)
{
   170cb:	55                   	push   %ebp
   170cc:	89 e5                	mov    %esp,%ebp
   170ce:	83 ec 08             	sub    $0x8,%esp
    if (fs->mutex)
   170d1:	8b 45 08             	mov    0x8(%ebp),%eax
   170d4:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   170da:	85 c0                	test   %eax,%eax
   170dc:	74 15                	je     170f3 <fs_protect+0x28>
    {
        mutex_lock(fs->mutex);
   170de:	8b 45 08             	mov    0x8(%ebp),%eax
   170e1:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   170e7:	83 ec 0c             	sub    $0xc,%esp
   170ea:	50                   	push   %eax
   170eb:	e8 96 0e 00 00       	call   17f86 <mutex_lock>
   170f0:	83 c4 10             	add    $0x10,%esp
    }
}
   170f3:	90                   	nop
   170f4:	c9                   	leave  
   170f5:	c3                   	ret    

000170f6 <fs_unprotect>:

static void fs_unprotect(fs_t *fs)
{
   170f6:	55                   	push   %ebp
   170f7:	89 e5                	mov    %esp,%ebp
   170f9:	83 ec 08             	sub    $0x8,%esp
    if (fs->mutex)
   170fc:	8b 45 08             	mov    0x8(%ebp),%eax
   170ff:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17105:	85 c0                	test   %eax,%eax
   17107:	74 15                	je     1711e <fs_unprotect+0x28>
    {
        mutex_unlock(fs->mutex);
   17109:	8b 45 08             	mov    0x8(%ebp),%eax
   1710c:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17112:	83 ec 0c             	sub    $0xc,%esp
   17115:	50                   	push   %eax
   17116:	e8 ff 0e 00 00       	call   1801a <mutex_unlock>
   1711b:	83 c4 10             	add    $0x10,%esp
    }
}
   1711e:	90                   	nop
   1711f:	c9                   	leave  
   17120:	c3                   	ret    

00017121 <is_fd_bad>:

/**
 * @brief 判断文件描述符是否正确
 */
static int is_fd_bad(int file)
{
   17121:	55                   	push   %ebp
   17122:	89 e5                	mov    %esp,%ebp
    if ((file < 0) && (file >= TASK_OFILE_NR))
   17124:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17128:	79 0d                	jns    17137 <is_fd_bad+0x16>
   1712a:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   1712e:	7e 07                	jle    17137 <is_fd_bad+0x16>
    {
        return 1;
   17130:	b8 01 00 00 00       	mov    $0x1,%eax
   17135:	eb 05                	jmp    1713c <is_fd_bad+0x1b>
    }

    return 0;
   17137:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1713c:	5d                   	pop    %ebp
   1713d:	c3                   	ret    

0001713e <read_disk>:

static void read_disk(int sector, int sector_count, uint8_t *buf)
{
   1713e:	55                   	push   %ebp
   1713f:	89 e5                	mov    %esp,%ebp
   17141:	53                   	push   %ebx
   17142:	83 ec 10             	sub    $0x10,%esp
    outb(0x1F6, (uint8_t)(0xE0)); // 选择磁盘
   17145:	68 e0 00 00 00       	push   $0xe0
   1714a:	68 f6 01 00 00       	push   $0x1f6
   1714f:	e8 58 ff ff ff       	call   170ac <outb>
   17154:	83 c4 08             	add    $0x8,%esp
    outb(0x1F2, (uint8_t)(sector_count >> 8));
   17157:	8b 45 0c             	mov    0xc(%ebp),%eax
   1715a:	c1 f8 08             	sar    $0x8,%eax
   1715d:	0f b6 c0             	movzbl %al,%eax
   17160:	50                   	push   %eax
   17161:	68 f2 01 00 00       	push   $0x1f2
   17166:	e8 41 ff ff ff       	call   170ac <outb>
   1716b:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector >> 24));
   1716e:	8b 45 08             	mov    0x8(%ebp),%eax
   17171:	c1 f8 18             	sar    $0x18,%eax
   17174:	0f b6 c0             	movzbl %al,%eax
   17177:	50                   	push   %eax
   17178:	68 f3 01 00 00       	push   $0x1f3
   1717d:	e8 2a ff ff ff       	call   170ac <outb>
   17182:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(0));
   17185:	6a 00                	push   $0x0
   17187:	68 f4 01 00 00       	push   $0x1f4
   1718c:	e8 1b ff ff ff       	call   170ac <outb>
   17191:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(0));
   17194:	6a 00                	push   $0x0
   17196:	68 f5 01 00 00       	push   $0x1f5
   1719b:	e8 0c ff ff ff       	call   170ac <outb>
   171a0:	83 c4 08             	add    $0x8,%esp

    outb(0x1F2, (uint8_t)(sector_count));
   171a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   171a6:	0f b6 c0             	movzbl %al,%eax
   171a9:	50                   	push   %eax
   171aa:	68 f2 01 00 00       	push   $0x1f2
   171af:	e8 f8 fe ff ff       	call   170ac <outb>
   171b4:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector));
   171b7:	8b 45 08             	mov    0x8(%ebp),%eax
   171ba:	0f b6 c0             	movzbl %al,%eax
   171bd:	50                   	push   %eax
   171be:	68 f3 01 00 00       	push   $0x1f3
   171c3:	e8 e4 fe ff ff       	call   170ac <outb>
   171c8:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));
   171cb:	8b 45 08             	mov    0x8(%ebp),%eax
   171ce:	c1 f8 08             	sar    $0x8,%eax
   171d1:	0f b6 c0             	movzbl %al,%eax
   171d4:	50                   	push   %eax
   171d5:	68 f4 01 00 00       	push   $0x1f4
   171da:	e8 cd fe ff ff       	call   170ac <outb>
   171df:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));
   171e2:	8b 45 08             	mov    0x8(%ebp),%eax
   171e5:	c1 f8 10             	sar    $0x10,%eax
   171e8:	0f b6 c0             	movzbl %al,%eax
   171eb:	50                   	push   %eax
   171ec:	68 f5 01 00 00       	push   $0x1f5
   171f1:	e8 b6 fe ff ff       	call   170ac <outb>
   171f6:	83 c4 08             	add    $0x8,%esp

    outb(0x1F7, (uint8_t)(0x24));
   171f9:	6a 24                	push   $0x24
   171fb:	68 f7 01 00 00       	push   $0x1f7
   17200:	e8 a7 fe ff ff       	call   170ac <outb>
   17205:	83 c4 08             	add    $0x8,%esp

    uint16_t *data_buf = (uint16_t *)buf;
   17208:	8b 45 10             	mov    0x10(%ebp),%eax
   1720b:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count-- > 0)
   1720e:	eb 4a                	jmp    1725a <read_disk+0x11c>
    {
        while ((inb(0x1F7) & 0x88) != 0x8)
   17210:	90                   	nop
   17211:	68 f7 01 00 00       	push   $0x1f7
   17216:	e8 55 fe ff ff       	call   17070 <inb>
   1721b:	83 c4 04             	add    $0x4,%esp
   1721e:	0f b6 c0             	movzbl %al,%eax
   17221:	25 88 00 00 00       	and    $0x88,%eax
   17226:	83 f8 08             	cmp    $0x8,%eax
   17229:	75 e6                	jne    17211 <read_disk+0xd3>
        {
            /* code */
        }
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   1722b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17232:	eb 1d                	jmp    17251 <read_disk+0x113>
        {
            *data_buf++ = inw(0x1F0);
   17234:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   17237:	8d 43 02             	lea    0x2(%ebx),%eax
   1723a:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1723d:	68 f0 01 00 00       	push   $0x1f0
   17242:	e8 46 fe ff ff       	call   1708d <inw>
   17247:	83 c4 04             	add    $0x4,%esp
   1724a:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   1724d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17251:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   17258:	7e da                	jle    17234 <read_disk+0xf6>
    while (sector_count-- > 0)
   1725a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1725d:	8d 50 ff             	lea    -0x1(%eax),%edx
   17260:	89 55 0c             	mov    %edx,0xc(%ebp)
   17263:	85 c0                	test   %eax,%eax
   17265:	7f a9                	jg     17210 <read_disk+0xd2>
            /* code */
        }
    }
}
   17267:	90                   	nop
   17268:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1726b:	c9                   	leave  
   1726c:	c3                   	ret    

0001726d <is_path_valid>:

static int is_path_valid(const char *path)
{
   1726d:	55                   	push   %ebp
   1726e:	89 e5                	mov    %esp,%ebp
    if ((path == (const char *)0) || (path[0] == '\0'))
   17270:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   17274:	74 0a                	je     17280 <is_path_valid+0x13>
   17276:	8b 45 08             	mov    0x8(%ebp),%eax
   17279:	0f b6 00             	movzbl (%eax),%eax
   1727c:	84 c0                	test   %al,%al
   1727e:	75 07                	jne    17287 <is_path_valid+0x1a>
    {
        return 0;
   17280:	b8 00 00 00 00       	mov    $0x0,%eax
   17285:	eb 05                	jmp    1728c <is_path_valid+0x1f>
    }
    return 1;
   17287:	b8 01 00 00 00       	mov    $0x1,%eax
}
   1728c:	5d                   	pop    %ebp
   1728d:	c3                   	ret    

0001728e <sys_open>:

int sys_open(const char *name, int flags, ...)
{
   1728e:	55                   	push   %ebp
   1728f:	89 e5                	mov    %esp,%ebp
   17291:	83 ec 28             	sub    $0x28,%esp
    //     temp_pos = (uint8_t *)TEMP_ADDR;
    //     return TEMP_FILE_ID;
    // }

    // 分配文件描述符链接
    file_t *file = file_alloc();
   17294:	e8 8d fc ff ff       	call   16f26 <file_alloc>
   17299:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!file)
   1729c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   172a0:	75 0a                	jne    172ac <sys_open+0x1e>
    {
        return -1;
   172a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   172a7:	e9 6c 01 00 00       	jmp    17418 <sys_open+0x18a>
    }
    int fd = task_alloc_fd(file);
   172ac:	83 ec 0c             	sub    $0xc,%esp
   172af:	ff 75 ec             	pushl  -0x14(%ebp)
   172b2:	e8 8c af ff ff       	call   12243 <task_alloc_fd>
   172b7:	83 c4 10             	add    $0x10,%esp
   172ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (fd < 0)
   172bd:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   172c1:	0f 88 29 01 00 00    	js     173f0 <sys_open+0x162>
    {
        goto sys_open_failed;
    }

    fs_t *fs = (fs_t *)0;
   172c7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    list_node_t *node = list_first(&mounted_list);
   172ce:	83 ec 0c             	sub    $0xc,%esp
   172d1:	68 e4 88 07 00       	push   $0x788e4
   172d6:	e8 8b fd ff ff       	call   17066 <list_first>
   172db:	83 c4 10             	add    $0x10,%esp
   172de:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (node)
   172e1:	eb 47                	jmp    1732a <sys_open+0x9c>
    {
        fs_t *curr = list_node_parent(node, fs_t, node);
   172e3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   172e7:	74 0a                	je     172f3 <sys_open+0x65>
   172e9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   172ec:	2d 10 02 00 00       	sub    $0x210,%eax
   172f1:	eb 05                	jmp    172f8 <sys_open+0x6a>
   172f3:	b8 00 00 00 00       	mov    $0x0,%eax
   172f8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (path_begin_with(name, curr->mount_point))
   172fb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   172fe:	83 ec 08             	sub    $0x8,%esp
   17301:	50                   	push   %eax
   17302:	ff 75 08             	pushl  0x8(%ebp)
   17305:	e8 01 06 00 00       	call   1790b <path_begin_with>
   1730a:	83 c4 10             	add    $0x10,%esp
   1730d:	85 c0                	test   %eax,%eax
   1730f:	74 08                	je     17319 <sys_open+0x8b>
        {
            fs = curr;
   17311:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17314:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   17317:	eb 17                	jmp    17330 <sys_open+0xa2>
        }
        node = list_node_next(node);
   17319:	83 ec 0c             	sub    $0xc,%esp
   1731c:	ff 75 f0             	pushl  -0x10(%ebp)
   1731f:	e8 37 fd ff ff       	call   1705b <list_node_next>
   17324:	83 c4 10             	add    $0x10,%esp
   17327:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (node)
   1732a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1732e:	75 b3                	jne    172e3 <sys_open+0x55>
    }
    if (fs)
   17330:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17334:	74 13                	je     17349 <sys_open+0xbb>
    {
        name = path_next_child(name);
   17336:	83 ec 0c             	sub    $0xc,%esp
   17339:	ff 75 08             	pushl  0x8(%ebp)
   1733c:	e8 1a 06 00 00       	call   1795b <path_next_child>
   17341:	83 c4 10             	add    $0x10,%esp
   17344:	89 45 08             	mov    %eax,0x8(%ebp)
   17347:	eb 08                	jmp    17351 <sys_open+0xc3>
    }
    else
    {
        fs = root_fs;
   17349:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   1734e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    file->dev_id = -1;
   17351:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17354:	c7 40 2c ff ff ff ff 	movl   $0xffffffff,0x2c(%eax)
    file->fs = fs;
   1735b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1735e:	8b 55 f4             	mov    -0xc(%ebp),%edx
   17361:	89 50 44             	mov    %edx,0x44(%eax)
    file->mode = flags;
   17364:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17367:	8b 55 0c             	mov    0xc(%ebp),%edx
   1736a:	89 50 40             	mov    %edx,0x40(%eax)
    kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   1736d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17370:	83 ec 04             	sub    $0x4,%esp
   17373:	6a 20                	push   $0x20
   17375:	ff 75 08             	pushl  0x8(%ebp)
   17378:	50                   	push   %eax
   17379:	e8 30 11 00 00       	call   184ae <kernel_strncpy>
   1737e:	83 c4 10             	add    $0x10,%esp

    fs_protect(fs);
   17381:	83 ec 0c             	sub    $0xc,%esp
   17384:	ff 75 f4             	pushl  -0xc(%ebp)
   17387:	e8 3f fd ff ff       	call   170cb <fs_protect>
   1738c:	83 c4 10             	add    $0x10,%esp
    int err = fs->op->open(fs, name, file);
   1738f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17392:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17398:	8b 40 08             	mov    0x8(%eax),%eax
   1739b:	83 ec 04             	sub    $0x4,%esp
   1739e:	ff 75 ec             	pushl  -0x14(%ebp)
   173a1:	ff 75 08             	pushl  0x8(%ebp)
   173a4:	ff 75 f4             	pushl  -0xc(%ebp)
   173a7:	ff d0                	call   *%eax
   173a9:	83 c4 10             	add    $0x10,%esp
   173ac:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   173af:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   173b3:	79 28                	jns    173dd <sys_open+0x14f>
    {
        fs_unprotect(fs);
   173b5:	83 ec 0c             	sub    $0xc,%esp
   173b8:	ff 75 f4             	pushl  -0xc(%ebp)
   173bb:	e8 36 fd ff ff       	call   170f6 <fs_unprotect>
   173c0:	83 c4 10             	add    $0x10,%esp
        log_printf("open %s failed.", name);
   173c3:	83 ec 08             	sub    $0x8,%esp
   173c6:	ff 75 08             	pushl  0x8(%ebp)
   173c9:	68 04 9e 01 00       	push   $0x19e04
   173ce:	e8 6d 18 00 00       	call   18c40 <log_printf>
   173d3:	83 c4 10             	add    $0x10,%esp
        return -1;
   173d6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   173db:	eb 3b                	jmp    17418 <sys_open+0x18a>
    }
    fs_unprotect(fs);
   173dd:	83 ec 0c             	sub    $0xc,%esp
   173e0:	ff 75 f4             	pushl  -0xc(%ebp)
   173e3:	e8 0e fd ff ff       	call   170f6 <fs_unprotect>
   173e8:	83 c4 10             	add    $0x10,%esp
    return fd;
   173eb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   173ee:	eb 28                	jmp    17418 <sys_open+0x18a>
        goto sys_open_failed;
   173f0:	90                   	nop
sys_open_failed:
    file_free(file);
   173f1:	83 ec 0c             	sub    $0xc,%esp
   173f4:	ff 75 ec             	pushl  -0x14(%ebp)
   173f7:	e8 b5 fb ff ff       	call   16fb1 <file_free>
   173fc:	83 c4 10             	add    $0x10,%esp

    if (fd >= 0)
   173ff:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17403:	78 0e                	js     17413 <sys_open+0x185>
    {
        task_remove_fd(fd);
   17405:	83 ec 0c             	sub    $0xc,%esp
   17408:	ff 75 e8             	pushl  -0x18(%ebp)
   1740b:	e8 86 ae ff ff       	call   12296 <task_remove_fd>
   17410:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   17413:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   17418:	c9                   	leave  
   17419:	c3                   	ret    

0001741a <sys_read>:

int sys_read(int file, char *ptr, int len)
{
   1741a:	55                   	push   %ebp
   1741b:	89 e5                	mov    %esp,%ebp
   1741d:	83 ec 18             	sub    $0x18,%esp
    // {
    //     kernel_memcpy(ptr, temp_pos, len);
    //     temp_pos += len;
    //     return len;
    // }
    if (is_fd_bad(file) || !ptr || !len)
   17420:	ff 75 08             	pushl  0x8(%ebp)
   17423:	e8 f9 fc ff ff       	call   17121 <is_fd_bad>
   17428:	83 c4 04             	add    $0x4,%esp
   1742b:	85 c0                	test   %eax,%eax
   1742d:	75 0c                	jne    1743b <sys_read+0x21>
   1742f:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17433:	74 06                	je     1743b <sys_read+0x21>
   17435:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17439:	75 0a                	jne    17445 <sys_read+0x2b>
    {
        return 0;
   1743b:	b8 00 00 00 00       	mov    $0x0,%eax
   17440:	e9 98 00 00 00       	jmp    174dd <sys_read+0xc3>
    }
    file_t *p_file = task_file(file);
   17445:	83 ec 0c             	sub    $0xc,%esp
   17448:	ff 75 08             	pushl  0x8(%ebp)
   1744b:	e8 c1 ad ff ff       	call   12211 <task_file>
   17450:	83 c4 10             	add    $0x10,%esp
   17453:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   17456:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1745a:	75 17                	jne    17473 <sys_read+0x59>
    {
        log_printf("file not opened");
   1745c:	83 ec 0c             	sub    $0xc,%esp
   1745f:	68 14 9e 01 00       	push   $0x19e14
   17464:	e8 d7 17 00 00       	call   18c40 <log_printf>
   17469:	83 c4 10             	add    $0x10,%esp
        return -1;
   1746c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17471:	eb 6a                	jmp    174dd <sys_read+0xc3>
    }
    if (p_file->mode == O_WRONLY)
   17473:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17476:	8b 40 40             	mov    0x40(%eax),%eax
   17479:	83 f8 01             	cmp    $0x1,%eax
   1747c:	75 17                	jne    17495 <sys_read+0x7b>
    {
        log_printf("file is write only");
   1747e:	83 ec 0c             	sub    $0xc,%esp
   17481:	68 24 9e 01 00       	push   $0x19e24
   17486:	e8 b5 17 00 00       	call   18c40 <log_printf>
   1748b:	83 c4 10             	add    $0x10,%esp
        return -1;
   1748e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17493:	eb 48                	jmp    174dd <sys_read+0xc3>
    }
    // 读取文件
    fs_t *fs = p_file->fs;
   17495:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17498:	8b 40 44             	mov    0x44(%eax),%eax
   1749b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    fs_protect(fs);
   1749e:	83 ec 0c             	sub    $0xc,%esp
   174a1:	ff 75 f0             	pushl  -0x10(%ebp)
   174a4:	e8 22 fc ff ff       	call   170cb <fs_protect>
   174a9:	83 c4 10             	add    $0x10,%esp
    int err = fs->op->read(ptr, len, p_file);
   174ac:	8b 45 f0             	mov    -0x10(%ebp),%eax
   174af:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   174b5:	8b 40 0c             	mov    0xc(%eax),%eax
   174b8:	83 ec 04             	sub    $0x4,%esp
   174bb:	ff 75 f4             	pushl  -0xc(%ebp)
   174be:	ff 75 10             	pushl  0x10(%ebp)
   174c1:	ff 75 0c             	pushl  0xc(%ebp)
   174c4:	ff d0                	call   *%eax
   174c6:	83 c4 10             	add    $0x10,%esp
   174c9:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fs_unprotect(fs);
   174cc:	83 ec 0c             	sub    $0xc,%esp
   174cf:	ff 75 f0             	pushl  -0x10(%ebp)
   174d2:	e8 1f fc ff ff       	call   170f6 <fs_unprotect>
   174d7:	83 c4 10             	add    $0x10,%esp
    return err;
   174da:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   174dd:	c9                   	leave  
   174de:	c3                   	ret    

000174df <sys_write>:

int sys_write(int file, char *ptr, int len)
{
   174df:	55                   	push   %ebp
   174e0:	89 e5                	mov    %esp,%ebp
   174e2:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file) || !ptr || !len)
   174e5:	ff 75 08             	pushl  0x8(%ebp)
   174e8:	e8 34 fc ff ff       	call   17121 <is_fd_bad>
   174ed:	83 c4 04             	add    $0x4,%esp
   174f0:	85 c0                	test   %eax,%eax
   174f2:	75 0c                	jne    17500 <sys_write+0x21>
   174f4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   174f8:	74 06                	je     17500 <sys_write+0x21>
   174fa:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   174fe:	75 0a                	jne    1750a <sys_write+0x2b>
    {
        return 0;
   17500:	b8 00 00 00 00       	mov    $0x0,%eax
   17505:	e9 97 00 00 00       	jmp    175a1 <sys_write+0xc2>
    }

    file_t *p_file = task_file(file);
   1750a:	83 ec 0c             	sub    $0xc,%esp
   1750d:	ff 75 08             	pushl  0x8(%ebp)
   17510:	e8 fc ac ff ff       	call   12211 <task_file>
   17515:	83 c4 10             	add    $0x10,%esp
   17518:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   1751b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1751f:	75 17                	jne    17538 <sys_write+0x59>
    {
        log_printf("file not opened");
   17521:	83 ec 0c             	sub    $0xc,%esp
   17524:	68 14 9e 01 00       	push   $0x19e14
   17529:	e8 12 17 00 00       	call   18c40 <log_printf>
   1752e:	83 c4 10             	add    $0x10,%esp
        return -1;
   17531:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17536:	eb 69                	jmp    175a1 <sys_write+0xc2>
    }

    if (p_file->mode == O_RDONLY)
   17538:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1753b:	8b 40 40             	mov    0x40(%eax),%eax
   1753e:	85 c0                	test   %eax,%eax
   17540:	75 17                	jne    17559 <sys_write+0x7a>
    {
        log_printf("file is write only");
   17542:	83 ec 0c             	sub    $0xc,%esp
   17545:	68 24 9e 01 00       	push   $0x19e24
   1754a:	e8 f1 16 00 00       	call   18c40 <log_printf>
   1754f:	83 c4 10             	add    $0x10,%esp
        return -1;
   17552:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17557:	eb 48                	jmp    175a1 <sys_write+0xc2>
    }

    // 写入文件
    fs_t *fs = p_file->fs;
   17559:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1755c:	8b 40 44             	mov    0x44(%eax),%eax
   1755f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    fs_protect(fs);
   17562:	83 ec 0c             	sub    $0xc,%esp
   17565:	ff 75 f0             	pushl  -0x10(%ebp)
   17568:	e8 5e fb ff ff       	call   170cb <fs_protect>
   1756d:	83 c4 10             	add    $0x10,%esp
    int err = fs->op->write(ptr, len, p_file);
   17570:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17573:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17579:	8b 40 10             	mov    0x10(%eax),%eax
   1757c:	83 ec 04             	sub    $0x4,%esp
   1757f:	ff 75 f4             	pushl  -0xc(%ebp)
   17582:	ff 75 10             	pushl  0x10(%ebp)
   17585:	ff 75 0c             	pushl  0xc(%ebp)
   17588:	ff d0                	call   *%eax
   1758a:	83 c4 10             	add    $0x10,%esp
   1758d:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fs_unprotect(fs);
   17590:	83 ec 0c             	sub    $0xc,%esp
   17593:	ff 75 f0             	pushl  -0x10(%ebp)
   17596:	e8 5b fb ff ff       	call   170f6 <fs_unprotect>
   1759b:	83 c4 10             	add    $0x10,%esp
    return err;
   1759e:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   175a1:	c9                   	leave  
   175a2:	c3                   	ret    

000175a3 <sys_lseek>:

int sys_lseek(int file, int ptr, int dir)
{
   175a3:	55                   	push   %ebp
   175a4:	89 e5                	mov    %esp,%ebp
   175a6:	83 ec 18             	sub    $0x18,%esp
    // {
    //     temp_pos = (uint8_t *)(TEMP_ADDR + ptr);
    //     return 0;
    // }

    if (is_fd_bad(file))
   175a9:	ff 75 08             	pushl  0x8(%ebp)
   175ac:	e8 70 fb ff ff       	call   17121 <is_fd_bad>
   175b1:	83 c4 04             	add    $0x4,%esp
   175b4:	85 c0                	test   %eax,%eax
   175b6:	74 07                	je     175bf <sys_lseek+0x1c>
    {
        return -1;
   175b8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   175bd:	eb 77                	jmp    17636 <sys_lseek+0x93>
    }

    file_t *p_file = task_file(file);
   175bf:	83 ec 0c             	sub    $0xc,%esp
   175c2:	ff 75 08             	pushl  0x8(%ebp)
   175c5:	e8 47 ac ff ff       	call   12211 <task_file>
   175ca:	83 c4 10             	add    $0x10,%esp
   175cd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   175d0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   175d4:	75 17                	jne    175ed <sys_lseek+0x4a>
    {
        log_printf("file not opened");
   175d6:	83 ec 0c             	sub    $0xc,%esp
   175d9:	68 14 9e 01 00       	push   $0x19e14
   175de:	e8 5d 16 00 00       	call   18c40 <log_printf>
   175e3:	83 c4 10             	add    $0x10,%esp
        return -1;
   175e6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   175eb:	eb 49                	jmp    17636 <sys_lseek+0x93>
    }

    // 写入文件
    fs_t *fs = p_file->fs;
   175ed:	8b 45 f4             	mov    -0xc(%ebp),%eax
   175f0:	8b 40 44             	mov    0x44(%eax),%eax
   175f3:	89 45 f0             	mov    %eax,-0x10(%ebp)

    fs_protect(fs);
   175f6:	83 ec 0c             	sub    $0xc,%esp
   175f9:	ff 75 f0             	pushl  -0x10(%ebp)
   175fc:	e8 ca fa ff ff       	call   170cb <fs_protect>
   17601:	83 c4 10             	add    $0x10,%esp
    int err = fs->op->seek(p_file, ptr, dir);
   17604:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17607:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   1760d:	8b 40 18             	mov    0x18(%eax),%eax
   17610:	8b 55 0c             	mov    0xc(%ebp),%edx
   17613:	83 ec 04             	sub    $0x4,%esp
   17616:	ff 75 10             	pushl  0x10(%ebp)
   17619:	52                   	push   %edx
   1761a:	ff 75 f4             	pushl  -0xc(%ebp)
   1761d:	ff d0                	call   *%eax
   1761f:	83 c4 10             	add    $0x10,%esp
   17622:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fs_unprotect(fs);
   17625:	83 ec 0c             	sub    $0xc,%esp
   17628:	ff 75 f0             	pushl  -0x10(%ebp)
   1762b:	e8 c6 fa ff ff       	call   170f6 <fs_unprotect>
   17630:	83 c4 10             	add    $0x10,%esp
    return err;
   17633:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17636:	c9                   	leave  
   17637:	c3                   	ret    

00017638 <sys_close>:

int sys_close(int file)
{
   17638:	55                   	push   %ebp
   17639:	89 e5                	mov    %esp,%ebp
   1763b:	83 ec 18             	sub    $0x18,%esp
    // if (file == TEMP_FILE_ID)
    // {
    //     return 0;
    // }

    if (is_fd_bad(file))
   1763e:	ff 75 08             	pushl  0x8(%ebp)
   17641:	e8 db fa ff ff       	call   17121 <is_fd_bad>
   17646:	83 c4 04             	add    $0x4,%esp
   17649:	85 c0                	test   %eax,%eax
   1764b:	74 1a                	je     17667 <sys_close+0x2f>
    {
        log_printf("file error");
   1764d:	83 ec 0c             	sub    $0xc,%esp
   17650:	68 37 9e 01 00       	push   $0x19e37
   17655:	e8 e6 15 00 00       	call   18c40 <log_printf>
   1765a:	83 c4 10             	add    $0x10,%esp
        return -1;
   1765d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17662:	e9 cb 00 00 00       	jmp    17732 <sys_close+0xfa>
    }

    file_t *p_file = task_file(file);
   17667:	83 ec 0c             	sub    $0xc,%esp
   1766a:	ff 75 08             	pushl  0x8(%ebp)
   1766d:	e8 9f ab ff ff       	call   12211 <task_file>
   17672:	83 c4 10             	add    $0x10,%esp
   17675:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p_file == (file_t *)0)
   17678:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1767c:	75 1d                	jne    1769b <sys_close+0x63>
    {
        log_printf("file not opened. %d", file);
   1767e:	83 ec 08             	sub    $0x8,%esp
   17681:	ff 75 08             	pushl  0x8(%ebp)
   17684:	68 42 9e 01 00       	push   $0x19e42
   17689:	e8 b2 15 00 00       	call   18c40 <log_printf>
   1768e:	83 c4 10             	add    $0x10,%esp
        return -1;
   17691:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17696:	e9 97 00 00 00       	jmp    17732 <sys_close+0xfa>
    }

    ASSERT(p_file->ref > 0);
   1769b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1769e:	8b 40 28             	mov    0x28(%eax),%eax
   176a1:	85 c0                	test   %eax,%eax
   176a3:	7f 1c                	jg     176c1 <sys_close+0x89>
   176a5:	68 56 9e 01 00       	push   $0x19e56
   176aa:	68 7c 9f 01 00       	push   $0x19f7c
   176af:	68 12 01 00 00       	push   $0x112
   176b4:	68 68 9e 01 00       	push   $0x19e68
   176b9:	e8 b2 12 00 00       	call   18970 <panic>
   176be:	83 c4 10             	add    $0x10,%esp

    if (p_file->ref-- == 1)
   176c1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176c4:	8b 40 28             	mov    0x28(%eax),%eax
   176c7:	8d 48 ff             	lea    -0x1(%eax),%ecx
   176ca:	8b 55 f4             	mov    -0xc(%ebp),%edx
   176cd:	89 4a 28             	mov    %ecx,0x28(%edx)
   176d0:	83 f8 01             	cmp    $0x1,%eax
   176d3:	75 4a                	jne    1771f <sys_close+0xe7>
    {
        fs_t *fs = p_file->fs;
   176d5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176d8:	8b 40 44             	mov    0x44(%eax),%eax
   176db:	89 45 f0             	mov    %eax,-0x10(%ebp)

        fs_protect(fs);
   176de:	83 ec 0c             	sub    $0xc,%esp
   176e1:	ff 75 f0             	pushl  -0x10(%ebp)
   176e4:	e8 e2 f9 ff ff       	call   170cb <fs_protect>
   176e9:	83 c4 10             	add    $0x10,%esp
        fs->op->close(p_file);
   176ec:	8b 45 f0             	mov    -0x10(%ebp),%eax
   176ef:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   176f5:	8b 40 14             	mov    0x14(%eax),%eax
   176f8:	83 ec 0c             	sub    $0xc,%esp
   176fb:	ff 75 f4             	pushl  -0xc(%ebp)
   176fe:	ff d0                	call   *%eax
   17700:	83 c4 10             	add    $0x10,%esp
        fs_unprotect(fs);
   17703:	83 ec 0c             	sub    $0xc,%esp
   17706:	ff 75 f0             	pushl  -0x10(%ebp)
   17709:	e8 e8 f9 ff ff       	call   170f6 <fs_unprotect>
   1770e:	83 c4 10             	add    $0x10,%esp
        file_free(p_file);
   17711:	83 ec 0c             	sub    $0xc,%esp
   17714:	ff 75 f4             	pushl  -0xc(%ebp)
   17717:	e8 95 f8 ff ff       	call   16fb1 <file_free>
   1771c:	83 c4 10             	add    $0x10,%esp
    }

    task_remove_fd(file);
   1771f:	83 ec 0c             	sub    $0xc,%esp
   17722:	ff 75 08             	pushl  0x8(%ebp)
   17725:	e8 6c ab ff ff       	call   12296 <task_remove_fd>
   1772a:	83 c4 10             	add    $0x10,%esp
    return 0;
   1772d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17732:	c9                   	leave  
   17733:	c3                   	ret    

00017734 <sys_isatty>:

/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file)
{
   17734:	55                   	push   %ebp
   17735:	89 e5                	mov    %esp,%ebp
   17737:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file))
   1773a:	ff 75 08             	pushl  0x8(%ebp)
   1773d:	e8 df f9 ff ff       	call   17121 <is_fd_bad>
   17742:	83 c4 04             	add    $0x4,%esp
   17745:	85 c0                	test   %eax,%eax
   17747:	74 07                	je     17750 <sys_isatty+0x1c>
    {
        return 0;
   17749:	b8 00 00 00 00       	mov    $0x0,%eax
   1774e:	eb 2d                	jmp    1777d <sys_isatty+0x49>
    }

    file_t *pfile = task_file(file);
   17750:	83 ec 0c             	sub    $0xc,%esp
   17753:	ff 75 08             	pushl  0x8(%ebp)
   17756:	e8 b6 aa ff ff       	call   12211 <task_file>
   1775b:	83 c4 10             	add    $0x10,%esp
   1775e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pfile == (file_t *)0)
   17761:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17765:	75 07                	jne    1776e <sys_isatty+0x3a>
    {
        return 0;
   17767:	b8 00 00 00 00       	mov    $0x0,%eax
   1776c:	eb 0f                	jmp    1777d <sys_isatty+0x49>
    }

    return pfile->type == FILE_TTY;
   1776e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17771:	8b 40 20             	mov    0x20(%eax),%eax
   17774:	83 f8 01             	cmp    $0x1,%eax
   17777:	0f 94 c0             	sete   %al
   1777a:	0f b6 c0             	movzbl %al,%eax
}
   1777d:	c9                   	leave  
   1777e:	c3                   	ret    

0001777f <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st)
{
   1777f:	55                   	push   %ebp
   17780:	89 e5                	mov    %esp,%ebp
   17782:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file))
   17785:	ff 75 08             	pushl  0x8(%ebp)
   17788:	e8 94 f9 ff ff       	call   17121 <is_fd_bad>
   1778d:	83 c4 04             	add    $0x4,%esp
   17790:	85 c0                	test   %eax,%eax
   17792:	74 07                	je     1779b <sys_fstat+0x1c>
    {
        return -1;
   17794:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17799:	eb 75                	jmp    17810 <sys_fstat+0x91>
    }

    file_t *p_file = task_file(file);
   1779b:	83 ec 0c             	sub    $0xc,%esp
   1779e:	ff 75 08             	pushl  0x8(%ebp)
   177a1:	e8 6b aa ff ff       	call   12211 <task_file>
   177a6:	83 c4 10             	add    $0x10,%esp
   177a9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (p_file == (file_t *)0)
   177ac:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   177b0:	75 07                	jne    177b9 <sys_fstat+0x3a>
    {
        return -1;
   177b2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   177b7:	eb 57                	jmp    17810 <sys_fstat+0x91>
    }

    fs_t *fs = p_file->fs;
   177b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   177bc:	8b 40 44             	mov    0x44(%eax),%eax
   177bf:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kernel_memset(st, 0, sizeof(struct stat));
   177c2:	83 ec 04             	sub    $0x4,%esp
   177c5:	6a 48                	push   $0x48
   177c7:	6a 00                	push   $0x0
   177c9:	ff 75 0c             	pushl  0xc(%ebp)
   177cc:	e8 55 0e 00 00       	call   18626 <kernel_memset>
   177d1:	83 c4 10             	add    $0x10,%esp

    fs_protect(fs);
   177d4:	83 ec 0c             	sub    $0xc,%esp
   177d7:	ff 75 f0             	pushl  -0x10(%ebp)
   177da:	e8 ec f8 ff ff       	call   170cb <fs_protect>
   177df:	83 c4 10             	add    $0x10,%esp
    int err = fs->op->stat(p_file, st);
   177e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   177e5:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   177eb:	8b 40 1c             	mov    0x1c(%eax),%eax
   177ee:	83 ec 08             	sub    $0x8,%esp
   177f1:	ff 75 0c             	pushl  0xc(%ebp)
   177f4:	ff 75 f4             	pushl  -0xc(%ebp)
   177f7:	ff d0                	call   *%eax
   177f9:	83 c4 10             	add    $0x10,%esp
   177fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fs_unprotect(fs);
   177ff:	83 ec 0c             	sub    $0xc,%esp
   17802:	ff 75 f0             	pushl  -0x10(%ebp)
   17805:	e8 ec f8 ff ff       	call   170f6 <fs_unprotect>
   1780a:	83 c4 10             	add    $0x10,%esp
    return err;
   1780d:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17810:	c9                   	leave  
   17811:	c3                   	ret    

00017812 <sys_dup>:

/**
 * 复制一个文件描述符
 */
int sys_dup(int file)
{
   17812:	55                   	push   %ebp
   17813:	89 e5                	mov    %esp,%ebp
   17815:	83 ec 18             	sub    $0x18,%esp
    // 超出进程所能打开的全部，退出
    if (is_fd_bad(file))
   17818:	ff 75 08             	pushl  0x8(%ebp)
   1781b:	e8 01 f9 ff ff       	call   17121 <is_fd_bad>
   17820:	83 c4 04             	add    $0x4,%esp
   17823:	85 c0                	test   %eax,%eax
   17825:	74 1a                	je     17841 <sys_dup+0x2f>
    {
        log_printf("file(%d) is not valid.", file);
   17827:	83 ec 08             	sub    $0x8,%esp
   1782a:	ff 75 08             	pushl  0x8(%ebp)
   1782d:	68 9e 9e 01 00       	push   $0x19e9e
   17832:	e8 09 14 00 00       	call   18c40 <log_printf>
   17837:	83 c4 10             	add    $0x10,%esp
        return -1;
   1783a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1783f:	eb 6d                	jmp    178ae <sys_dup+0x9c>
    }

    file_t *p_file = task_file(file);
   17841:	83 ec 0c             	sub    $0xc,%esp
   17844:	ff 75 08             	pushl  0x8(%ebp)
   17847:	e8 c5 a9 ff ff       	call   12211 <task_file>
   1784c:	83 c4 10             	add    $0x10,%esp
   1784f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (!p_file)
   17852:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17856:	75 17                	jne    1786f <sys_dup+0x5d>
    {
        log_printf("file not opened");
   17858:	83 ec 0c             	sub    $0xc,%esp
   1785b:	68 14 9e 01 00       	push   $0x19e14
   17860:	e8 db 13 00 00       	call   18c40 <log_printf>
   17865:	83 c4 10             	add    $0x10,%esp
        return -1;
   17868:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1786d:	eb 3f                	jmp    178ae <sys_dup+0x9c>
    }

    int fd = task_alloc_fd(p_file); // 新fd指向同一描述符
   1786f:	83 ec 0c             	sub    $0xc,%esp
   17872:	ff 75 f4             	pushl  -0xc(%ebp)
   17875:	e8 c9 a9 ff ff       	call   12243 <task_alloc_fd>
   1787a:	83 c4 10             	add    $0x10,%esp
   1787d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (fd >= 0)
   17880:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17884:	78 13                	js     17899 <sys_dup+0x87>
    {
        file_inc_ref(p_file);
   17886:	83 ec 0c             	sub    $0xc,%esp
   17889:	ff 75 f4             	pushl  -0xc(%ebp)
   1788c:	e8 62 f7 ff ff       	call   16ff3 <file_inc_ref>
   17891:	83 c4 10             	add    $0x10,%esp
        return fd;
   17894:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17897:	eb 15                	jmp    178ae <sys_dup+0x9c>
    }

    log_printf("No task file avaliable");
   17899:	83 ec 0c             	sub    $0xc,%esp
   1789c:	68 b5 9e 01 00       	push   $0x19eb5
   178a1:	e8 9a 13 00 00       	call   18c40 <log_printf>
   178a6:	83 c4 10             	add    $0x10,%esp
    return -1;
   178a9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   178ae:	c9                   	leave  
   178af:	c3                   	ret    

000178b0 <path_to_num>:

/**
 * @brief 转换目录为数字
 */
int path_to_num(const char *path, int *num)
{
   178b0:	55                   	push   %ebp
   178b1:	89 e5                	mov    %esp,%ebp
   178b3:	83 ec 10             	sub    $0x10,%esp
    int n = 0;
   178b6:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    const char *c = path;
   178bd:	8b 45 08             	mov    0x8(%ebp),%eax
   178c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (*c && *c != '/')
   178c3:	eb 23                	jmp    178e8 <path_to_num+0x38>
    {
        n = n * 10 + *c - '0';
   178c5:	8b 55 fc             	mov    -0x4(%ebp),%edx
   178c8:	89 d0                	mov    %edx,%eax
   178ca:	c1 e0 02             	shl    $0x2,%eax
   178cd:	01 d0                	add    %edx,%eax
   178cf:	01 c0                	add    %eax,%eax
   178d1:	89 c2                	mov    %eax,%edx
   178d3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   178d6:	0f b6 00             	movzbl (%eax),%eax
   178d9:	0f be c0             	movsbl %al,%eax
   178dc:	01 d0                	add    %edx,%eax
   178de:	83 e8 30             	sub    $0x30,%eax
   178e1:	89 45 fc             	mov    %eax,-0x4(%ebp)
        c++;
   178e4:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c && *c != '/')
   178e8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   178eb:	0f b6 00             	movzbl (%eax),%eax
   178ee:	84 c0                	test   %al,%al
   178f0:	74 0a                	je     178fc <path_to_num+0x4c>
   178f2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   178f5:	0f b6 00             	movzbl (%eax),%eax
   178f8:	3c 2f                	cmp    $0x2f,%al
   178fa:	75 c9                	jne    178c5 <path_to_num+0x15>
    }
    *num = n;
   178fc:	8b 45 0c             	mov    0xc(%ebp),%eax
   178ff:	8b 55 fc             	mov    -0x4(%ebp),%edx
   17902:	89 10                	mov    %edx,(%eax)
    return 0;
   17904:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17909:	c9                   	leave  
   1790a:	c3                   	ret    

0001790b <path_begin_with>:

/**
 * @brief 判断路径是否以xx开头
 */
int path_begin_with(const char *path, const char *str)
{
   1790b:	55                   	push   %ebp
   1790c:	89 e5                	mov    %esp,%ebp
   1790e:	83 ec 10             	sub    $0x10,%esp
    const char *s1 = path, *s2 = str;
   17911:	8b 45 08             	mov    0x8(%ebp),%eax
   17914:	89 45 fc             	mov    %eax,-0x4(%ebp)
   17917:	8b 45 0c             	mov    0xc(%ebp),%eax
   1791a:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (*s1 && *s2 && (*s1 == *s2))
   1791d:	eb 08                	jmp    17927 <path_begin_with+0x1c>
    {
        s1++;
   1791f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        s2++;
   17923:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*s1 && *s2 && (*s1 == *s2))
   17927:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1792a:	0f b6 00             	movzbl (%eax),%eax
   1792d:	84 c0                	test   %al,%al
   1792f:	74 1a                	je     1794b <path_begin_with+0x40>
   17931:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17934:	0f b6 00             	movzbl (%eax),%eax
   17937:	84 c0                	test   %al,%al
   17939:	74 10                	je     1794b <path_begin_with+0x40>
   1793b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1793e:	0f b6 10             	movzbl (%eax),%edx
   17941:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17944:	0f b6 00             	movzbl (%eax),%eax
   17947:	38 c2                	cmp    %al,%dl
   17949:	74 d4                	je     1791f <path_begin_with+0x14>
    }

    return *s2 == '\0';
   1794b:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1794e:	0f b6 00             	movzbl (%eax),%eax
   17951:	84 c0                	test   %al,%al
   17953:	0f 94 c0             	sete   %al
   17956:	0f b6 c0             	movzbl %al,%eax
}
   17959:	c9                   	leave  
   1795a:	c3                   	ret    

0001795b <path_next_child>:

/**
 * @brief 获取下一级子目录
 */
const char *path_next_child(const char *path)
{
   1795b:	55                   	push   %ebp
   1795c:	89 e5                	mov    %esp,%ebp
   1795e:	83 ec 10             	sub    $0x10,%esp
    const char *c = path;
   17961:	8b 45 08             	mov    0x8(%ebp),%eax
   17964:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (*c && (*c++ == '/'))
   17967:	90                   	nop
   17968:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1796b:	0f b6 00             	movzbl (%eax),%eax
   1796e:	84 c0                	test   %al,%al
   17970:	74 10                	je     17982 <path_next_child+0x27>
   17972:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17975:	8d 50 01             	lea    0x1(%eax),%edx
   17978:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1797b:	0f b6 00             	movzbl (%eax),%eax
   1797e:	3c 2f                	cmp    $0x2f,%al
   17980:	74 e6                	je     17968 <path_next_child+0xd>
    {
    }
    while (*c && (*c++ != '/'))
   17982:	90                   	nop
   17983:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17986:	0f b6 00             	movzbl (%eax),%eax
   17989:	84 c0                	test   %al,%al
   1798b:	74 10                	je     1799d <path_next_child+0x42>
   1798d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17990:	8d 50 01             	lea    0x1(%eax),%edx
   17993:	89 55 fc             	mov    %edx,-0x4(%ebp)
   17996:	0f b6 00             	movzbl (%eax),%eax
   17999:	3c 2f                	cmp    $0x2f,%al
   1799b:	75 e6                	jne    17983 <path_next_child+0x28>
    {
    }
    return *c ? c : (const char *)0;
   1799d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   179a0:	0f b6 00             	movzbl (%eax),%eax
   179a3:	84 c0                	test   %al,%al
   179a5:	74 05                	je     179ac <path_next_child+0x51>
   179a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   179aa:	eb 05                	jmp    179b1 <path_next_child+0x56>
   179ac:	b8 00 00 00 00       	mov    $0x0,%eax
}
   179b1:	c9                   	leave  
   179b2:	c3                   	ret    

000179b3 <get_fs_op>:

/**
 * @brief 获取指定文件系统的操作接口
 */
static fs_op_t *get_fs_op(fs_type_t type, int major)
{
   179b3:	55                   	push   %ebp
   179b4:	89 e5                	mov    %esp,%ebp
    switch (type)
   179b6:	8b 45 08             	mov    0x8(%ebp),%eax
   179b9:	85 c0                	test   %eax,%eax
   179bb:	74 07                	je     179c4 <get_fs_op+0x11>
   179bd:	83 f8 01             	cmp    $0x1,%eax
   179c0:	74 09                	je     179cb <get_fs_op+0x18>
   179c2:	eb 0e                	jmp    179d2 <get_fs_op+0x1f>
    {
    case FS_FAT16:
        return &fatfs_op;
   179c4:	b8 40 b1 01 00       	mov    $0x1b140,%eax
   179c9:	eb 0c                	jmp    179d7 <get_fs_op+0x24>
    case FS_DEVFS:
        return &devfs_op;
   179cb:	b8 00 b1 01 00       	mov    $0x1b100,%eax
   179d0:	eb 05                	jmp    179d7 <get_fs_op+0x24>
    default:
        return (fs_op_t *)0;
   179d2:	b8 00 00 00 00       	mov    $0x0,%eax
    }
}
   179d7:	5d                   	pop    %ebp
   179d8:	c3                   	ret    

000179d9 <mount>:

/**
 * @brief 挂载文件系统
 */
static fs_t *mount(fs_type_t type, char *mount_point, int dev_major, int dev_minor)
{
   179d9:	55                   	push   %ebp
   179da:	89 e5                	mov    %esp,%ebp
   179dc:	83 ec 28             	sub    $0x28,%esp
    fs_t *fs = (fs_t *)0;
   179df:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    log_printf("mount file system, name: %s, dev: %x", mount_point, dev_major);
   179e6:	83 ec 04             	sub    $0x4,%esp
   179e9:	ff 75 10             	pushl  0x10(%ebp)
   179ec:	ff 75 0c             	pushl  0xc(%ebp)
   179ef:	68 cc 9e 01 00       	push   $0x19ecc
   179f4:	e8 47 12 00 00       	call   18c40 <log_printf>
   179f9:	83 c4 10             	add    $0x10,%esp

    // 遍历，查找是否已经有挂载
    list_node_t *curr = list_first(&mounted_list);
   179fc:	83 ec 0c             	sub    $0xc,%esp
   179ff:	68 e4 88 07 00       	push   $0x788e4
   17a04:	e8 5d f6 ff ff       	call   17066 <list_first>
   17a09:	83 c4 10             	add    $0x10,%esp
   17a0c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (curr)
   17a0f:	eb 59                	jmp    17a6a <mount+0x91>
    {
        fs_t *fs = list_node_parent(curr, fs_t, node);
   17a11:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17a15:	74 0a                	je     17a21 <mount+0x48>
   17a17:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17a1a:	2d 10 02 00 00       	sub    $0x210,%eax
   17a1f:	eb 05                	jmp    17a26 <mount+0x4d>
   17a21:	b8 00 00 00 00       	mov    $0x0,%eax
   17a26:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNTP_SIZE) == 0)
   17a29:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   17a2c:	83 ec 04             	sub    $0x4,%esp
   17a2f:	68 00 02 00 00       	push   $0x200
   17a34:	ff 75 0c             	pushl  0xc(%ebp)
   17a37:	50                   	push   %eax
   17a38:	e8 e1 0a 00 00       	call   1851e <kernel_strncmp>
   17a3d:	83 c4 10             	add    $0x10,%esp
   17a40:	85 c0                	test   %eax,%eax
   17a42:	75 15                	jne    17a59 <mount+0x80>
        {
            log_printf("fs alreay mounted.");
   17a44:	83 ec 0c             	sub    $0xc,%esp
   17a47:	68 f1 9e 01 00       	push   $0x19ef1
   17a4c:	e8 ef 11 00 00       	call   18c40 <log_printf>
   17a51:	83 c4 10             	add    $0x10,%esp
            goto mount_failed;
   17a54:	e9 21 01 00 00       	jmp    17b7a <mount+0x1a1>
        }
        curr = list_node_next(curr);
   17a59:	83 ec 0c             	sub    $0xc,%esp
   17a5c:	ff 75 f0             	pushl  -0x10(%ebp)
   17a5f:	e8 f7 f5 ff ff       	call   1705b <list_node_next>
   17a64:	83 c4 10             	add    $0x10,%esp
   17a67:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (curr)
   17a6a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17a6e:	75 a1                	jne    17a11 <mount+0x38>
    }

    // 分配新的fs结构
    list_node_t *free_node = list_remove_first(&free_list);
   17a70:	83 ec 0c             	sub    $0xc,%esp
   17a73:	68 f0 88 07 00       	push   $0x788f0
   17a78:	e8 97 10 00 00       	call   18b14 <list_remove_first>
   17a7d:	83 c4 10             	add    $0x10,%esp
   17a80:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!free_node)
   17a83:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17a87:	75 15                	jne    17a9e <mount+0xc5>
    {
        log_printf("no free fs, mount failed.");
   17a89:	83 ec 0c             	sub    $0xc,%esp
   17a8c:	68 04 9f 01 00       	push   $0x19f04
   17a91:	e8 aa 11 00 00       	call   18c40 <log_printf>
   17a96:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   17a99:	e9 dc 00 00 00       	jmp    17b7a <mount+0x1a1>
    }
    fs = list_node_parent(free_node, fs_t, node);
   17a9e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17aa2:	74 0a                	je     17aae <mount+0xd5>
   17aa4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17aa7:	2d 10 02 00 00       	sub    $0x210,%eax
   17aac:	eb 05                	jmp    17ab3 <mount+0xda>
   17aae:	b8 00 00 00 00       	mov    $0x0,%eax
   17ab3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 检查挂载的文件系统类型：不检查实际
    fs_op_t *op = get_fs_op(type, dev_major);
   17ab6:	83 ec 08             	sub    $0x8,%esp
   17ab9:	ff 75 10             	pushl  0x10(%ebp)
   17abc:	ff 75 08             	pushl  0x8(%ebp)
   17abf:	e8 ef fe ff ff       	call   179b3 <get_fs_op>
   17ac4:	83 c4 10             	add    $0x10,%esp
   17ac7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (!op)
   17aca:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17ace:	75 18                	jne    17ae8 <mount+0x10f>
    {
        log_printf("unsupported fs type: %d", type);
   17ad0:	83 ec 08             	sub    $0x8,%esp
   17ad3:	ff 75 08             	pushl  0x8(%ebp)
   17ad6:	68 1e 9f 01 00       	push   $0x19f1e
   17adb:	e8 60 11 00 00       	call   18c40 <log_printf>
   17ae0:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   17ae3:	e9 92 00 00 00       	jmp    17b7a <mount+0x1a1>
    }

    // 给定数据一些缺省的值
    kernel_memset(fs, 0, sizeof(fs_t));
   17ae8:	83 ec 04             	sub    $0x4,%esp
   17aeb:	68 60 02 00 00       	push   $0x260
   17af0:	6a 00                	push   $0x0
   17af2:	ff 75 f4             	pushl  -0xc(%ebp)
   17af5:	e8 2c 0b 00 00       	call   18626 <kernel_memset>
   17afa:	83 c4 10             	add    $0x10,%esp
    kernel_strncpy(fs->mount_point, mount_point, FS_MOUNTP_SIZE);
   17afd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b00:	83 ec 04             	sub    $0x4,%esp
   17b03:	68 00 02 00 00       	push   $0x200
   17b08:	ff 75 0c             	pushl  0xc(%ebp)
   17b0b:	50                   	push   %eax
   17b0c:	e8 9d 09 00 00       	call   184ae <kernel_strncpy>
   17b11:	83 c4 10             	add    $0x10,%esp
    fs->op = op;
   17b14:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b17:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17b1a:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)
    fs->mutex = (mutex_t *)0;
   17b20:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b23:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%eax)
   17b2a:	00 00 00 

    // 挂载文件系统
    if (op->mount(fs, dev_major, dev_minor) < 0)
   17b2d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   17b30:	8b 00                	mov    (%eax),%eax
   17b32:	83 ec 04             	sub    $0x4,%esp
   17b35:	ff 75 14             	pushl  0x14(%ebp)
   17b38:	ff 75 10             	pushl  0x10(%ebp)
   17b3b:	ff 75 f4             	pushl  -0xc(%ebp)
   17b3e:	ff d0                	call   *%eax
   17b40:	83 c4 10             	add    $0x10,%esp
   17b43:	85 c0                	test   %eax,%eax
   17b45:	79 15                	jns    17b5c <mount+0x183>
    {
        log_printf("mount fs %s failed", mount_point);
   17b47:	83 ec 08             	sub    $0x8,%esp
   17b4a:	ff 75 0c             	pushl  0xc(%ebp)
   17b4d:	68 36 9f 01 00       	push   $0x19f36
   17b52:	e8 e9 10 00 00       	call   18c40 <log_printf>
   17b57:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   17b5a:	eb 1e                	jmp    17b7a <mount+0x1a1>
    }
    list_insert_last(&mounted_list, &fs->node);
   17b5c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b5f:	05 10 02 00 00       	add    $0x210,%eax
   17b64:	83 ec 08             	sub    $0x8,%esp
   17b67:	50                   	push   %eax
   17b68:	68 e4 88 07 00       	push   $0x788e4
   17b6d:	e8 3e 0f 00 00       	call   18ab0 <list_insert_last>
   17b72:	83 c4 10             	add    $0x10,%esp
    return fs;
   17b75:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b78:	eb 24                	jmp    17b9e <mount+0x1c5>
mount_failed:
    if (fs)
   17b7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17b7e:	74 19                	je     17b99 <mount+0x1c0>
    {
        // 回收fs
        list_insert_first(&free_list, &fs->node);
   17b80:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17b83:	05 10 02 00 00       	add    $0x210,%eax
   17b88:	83 ec 08             	sub    $0x8,%esp
   17b8b:	50                   	push   %eax
   17b8c:	68 f0 88 07 00       	push   $0x788f0
   17b91:	e8 bb 0e 00 00       	call   18a51 <list_insert_first>
   17b96:	83 c4 10             	add    $0x10,%esp
    }
    return (fs_t *)0;
   17b99:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17b9e:	c9                   	leave  
   17b9f:	c3                   	ret    

00017ba0 <mount_list_init>:

/**
 * @brief 初始化挂载列表
 */
static void mount_list_init(void)
{
   17ba0:	55                   	push   %ebp
   17ba1:	89 e5                	mov    %esp,%ebp
   17ba3:	83 ec 18             	sub    $0x18,%esp
    list_init(&free_list);
   17ba6:	83 ec 0c             	sub    $0xc,%esp
   17ba9:	68 f0 88 07 00       	push   $0x788f0
   17bae:	e8 79 0e 00 00       	call   18a2c <list_init>
   17bb3:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FS_TABLE_SIZE; i++)
   17bb6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   17bbd:	eb 28                	jmp    17be7 <mount_list_init+0x47>
    {
        list_insert_first(&free_list, &fs_tbl[i].node);
   17bbf:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17bc2:	69 c0 60 02 00 00    	imul   $0x260,%eax,%eax
   17bc8:	05 10 02 00 00       	add    $0x210,%eax
   17bcd:	05 00 89 07 00       	add    $0x78900,%eax
   17bd2:	83 ec 08             	sub    $0x8,%esp
   17bd5:	50                   	push   %eax
   17bd6:	68 f0 88 07 00       	push   $0x788f0
   17bdb:	e8 71 0e 00 00       	call   18a51 <list_insert_first>
   17be0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FS_TABLE_SIZE; i++)
   17be3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17be7:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   17beb:	7e d2                	jle    17bbf <mount_list_init+0x1f>
    }
    list_init(&mounted_list);
   17bed:	83 ec 0c             	sub    $0xc,%esp
   17bf0:	68 e4 88 07 00       	push   $0x788e4
   17bf5:	e8 32 0e 00 00       	call   18a2c <list_init>
   17bfa:	83 c4 10             	add    $0x10,%esp
}
   17bfd:	90                   	nop
   17bfe:	c9                   	leave  
   17bff:	c3                   	ret    

00017c00 <fs_init>:

/**
 * @brief 文件系统初始化
 */
void fs_init(void)
{
   17c00:	55                   	push   %ebp
   17c01:	89 e5                	mov    %esp,%ebp
   17c03:	83 ec 18             	sub    $0x18,%esp
    mount_list_init();
   17c06:	e8 95 ff ff ff       	call   17ba0 <mount_list_init>
    file_table_init();
   17c0b:	e8 1b f4 ff ff       	call   1702b <file_table_init>

    // // 磁盘检查
    disk_init();
   17c10:	e8 18 cf ff ff       	call   14b2d <disk_init>

    // 挂载设备文件系统，待后续完成。挂载点名称可随意
    fs_t *fs = mount(FS_DEVFS, "/dev", 0, 0);
   17c15:	6a 00                	push   $0x0
   17c17:	6a 00                	push   $0x0
   17c19:	68 49 9f 01 00       	push   $0x19f49
   17c1e:	6a 01                	push   $0x1
   17c20:	e8 b4 fd ff ff       	call   179d9 <mount>
   17c25:	83 c4 10             	add    $0x10,%esp
   17c28:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(fs != (fs_t *)0);
   17c2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17c2f:	75 1c                	jne    17c4d <fs_init+0x4d>
   17c31:	68 4e 9f 01 00       	push   $0x19f4e
   17c36:	68 88 9f 01 00       	push   $0x19f88
   17c3b:	68 05 02 00 00       	push   $0x205
   17c40:	68 68 9e 01 00       	push   $0x19e68
   17c45:	e8 26 0d 00 00       	call   18970 <panic>
   17c4a:	83 c4 10             	add    $0x10,%esp

    // 挂载根文件系统
    root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   17c4d:	68 b1 00 00 00       	push   $0xb1
   17c52:	6a 02                	push   $0x2
   17c54:	68 5e 9f 01 00       	push   $0x19f5e
   17c59:	6a 00                	push   $0x0
   17c5b:	e8 79 fd ff ff       	call   179d9 <mount>
   17c60:	83 c4 10             	add    $0x10,%esp
   17c63:	a3 c0 a0 07 00       	mov    %eax,0x7a0c0
    ASSERT(root_fs != (fs_t *)0);
   17c68:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17c6d:	85 c0                	test   %eax,%eax
   17c6f:	75 1c                	jne    17c8d <fs_init+0x8d>
   17c71:	68 64 9f 01 00       	push   $0x19f64
   17c76:	68 88 9f 01 00       	push   $0x19f88
   17c7b:	68 09 02 00 00       	push   $0x209
   17c80:	68 68 9e 01 00       	push   $0x19e68
   17c85:	e8 e6 0c 00 00       	call   18970 <panic>
   17c8a:	83 c4 10             	add    $0x10,%esp
}
   17c8d:	90                   	nop
   17c8e:	c9                   	leave  
   17c8f:	c3                   	ret    

00017c90 <sys_opendir>:

int sys_opendir(const char *name, DIR *dir)
{
   17c90:	55                   	push   %ebp
   17c91:	89 e5                	mov    %esp,%ebp
   17c93:	83 ec 18             	sub    $0x18,%esp
    fs_protect(root_fs);
   17c96:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17c9b:	83 ec 0c             	sub    $0xc,%esp
   17c9e:	50                   	push   %eax
   17c9f:	e8 27 f4 ff ff       	call   170cb <fs_protect>
   17ca4:	83 c4 10             	add    $0x10,%esp
    int err = root_fs->op->opendir(root_fs, name, dir);
   17ca7:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17cac:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17cb2:	8b 40 24             	mov    0x24(%eax),%eax
   17cb5:	8b 15 c0 a0 07 00    	mov    0x7a0c0,%edx
   17cbb:	83 ec 04             	sub    $0x4,%esp
   17cbe:	ff 75 0c             	pushl  0xc(%ebp)
   17cc1:	ff 75 08             	pushl  0x8(%ebp)
   17cc4:	52                   	push   %edx
   17cc5:	ff d0                	call   *%eax
   17cc7:	83 c4 10             	add    $0x10,%esp
   17cca:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fs_unprotect(root_fs);
   17ccd:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17cd2:	83 ec 0c             	sub    $0xc,%esp
   17cd5:	50                   	push   %eax
   17cd6:	e8 1b f4 ff ff       	call   170f6 <fs_unprotect>
   17cdb:	83 c4 10             	add    $0x10,%esp
    return err;
   17cde:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17ce1:	c9                   	leave  
   17ce2:	c3                   	ret    

00017ce3 <sys_readdir>:

int sys_readdir(DIR *dir, struct dirent *dirent)
{
   17ce3:	55                   	push   %ebp
   17ce4:	89 e5                	mov    %esp,%ebp
   17ce6:	83 ec 18             	sub    $0x18,%esp
    fs_protect(root_fs);
   17ce9:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17cee:	83 ec 0c             	sub    $0xc,%esp
   17cf1:	50                   	push   %eax
   17cf2:	e8 d4 f3 ff ff       	call   170cb <fs_protect>
   17cf7:	83 c4 10             	add    $0x10,%esp
    int err = root_fs->op->readdir(root_fs, dir, dirent);
   17cfa:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17cff:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17d05:	8b 40 28             	mov    0x28(%eax),%eax
   17d08:	8b 15 c0 a0 07 00    	mov    0x7a0c0,%edx
   17d0e:	83 ec 04             	sub    $0x4,%esp
   17d11:	ff 75 0c             	pushl  0xc(%ebp)
   17d14:	ff 75 08             	pushl  0x8(%ebp)
   17d17:	52                   	push   %edx
   17d18:	ff d0                	call   *%eax
   17d1a:	83 c4 10             	add    $0x10,%esp
   17d1d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fs_unprotect(root_fs);
   17d20:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17d25:	83 ec 0c             	sub    $0xc,%esp
   17d28:	50                   	push   %eax
   17d29:	e8 c8 f3 ff ff       	call   170f6 <fs_unprotect>
   17d2e:	83 c4 10             	add    $0x10,%esp
    return err;
   17d31:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17d34:	c9                   	leave  
   17d35:	c3                   	ret    

00017d36 <sys_closedir>:

int sys_closedir(DIR *dir)
{
   17d36:	55                   	push   %ebp
   17d37:	89 e5                	mov    %esp,%ebp
   17d39:	83 ec 18             	sub    $0x18,%esp
    fs_protect(root_fs);
   17d3c:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17d41:	83 ec 0c             	sub    $0xc,%esp
   17d44:	50                   	push   %eax
   17d45:	e8 81 f3 ff ff       	call   170cb <fs_protect>
   17d4a:	83 c4 10             	add    $0x10,%esp
    int err = root_fs->op->closedir(root_fs, dir);
   17d4d:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17d52:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17d58:	8b 40 2c             	mov    0x2c(%eax),%eax
   17d5b:	8b 15 c0 a0 07 00    	mov    0x7a0c0,%edx
   17d61:	83 ec 08             	sub    $0x8,%esp
   17d64:	ff 75 08             	pushl  0x8(%ebp)
   17d67:	52                   	push   %edx
   17d68:	ff d0                	call   *%eax
   17d6a:	83 c4 10             	add    $0x10,%esp
   17d6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fs_unprotect(root_fs);
   17d70:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17d75:	83 ec 0c             	sub    $0xc,%esp
   17d78:	50                   	push   %eax
   17d79:	e8 78 f3 ff ff       	call   170f6 <fs_unprotect>
   17d7e:	83 c4 10             	add    $0x10,%esp
    return err;
   17d81:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17d84:	c9                   	leave  
   17d85:	c3                   	ret    

00017d86 <sys_unlink>:

int sys_unlink(const char *path)
{
   17d86:	55                   	push   %ebp
   17d87:	89 e5                	mov    %esp,%ebp
   17d89:	83 ec 18             	sub    $0x18,%esp
    fs_protect(root_fs);
   17d8c:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17d91:	83 ec 0c             	sub    $0xc,%esp
   17d94:	50                   	push   %eax
   17d95:	e8 31 f3 ff ff       	call   170cb <fs_protect>
   17d9a:	83 c4 10             	add    $0x10,%esp
    int err = root_fs->op->unlink(root_fs, path);
   17d9d:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17da2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17da8:	8b 40 30             	mov    0x30(%eax),%eax
   17dab:	8b 15 c0 a0 07 00    	mov    0x7a0c0,%edx
   17db1:	83 ec 08             	sub    $0x8,%esp
   17db4:	ff 75 08             	pushl  0x8(%ebp)
   17db7:	52                   	push   %edx
   17db8:	ff d0                	call   *%eax
   17dba:	83 c4 10             	add    $0x10,%esp
   17dbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    fs_unprotect(root_fs);
   17dc0:	a1 c0 a0 07 00       	mov    0x7a0c0,%eax
   17dc5:	83 ec 0c             	sub    $0xc,%esp
   17dc8:	50                   	push   %eax
   17dc9:	e8 28 f3 ff ff       	call   170f6 <fs_unprotect>
   17dce:	83 c4 10             	add    $0x10,%esp
    return err;
   17dd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17dd4:	c9                   	leave  
   17dd5:	c3                   	ret    

00017dd6 <sys_ioctl>:

/**
 * @brief IO设备控制
 */
int sys_ioctl(int fd, int cmd, int arg0, int arg1)
{
   17dd6:	55                   	push   %ebp
   17dd7:	89 e5                	mov    %esp,%ebp
   17dd9:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(fd))
   17ddc:	ff 75 08             	pushl  0x8(%ebp)
   17ddf:	e8 3d f3 ff ff       	call   17121 <is_fd_bad>
   17de4:	83 c4 04             	add    $0x4,%esp
   17de7:	85 c0                	test   %eax,%eax
   17de9:	74 07                	je     17df2 <sys_ioctl+0x1c>
    {
        return 0;
   17deb:	b8 00 00 00 00       	mov    $0x0,%eax
   17df0:	eb 66                	jmp    17e58 <sys_ioctl+0x82>
    }

    file_t *pfile = task_file(fd);
   17df2:	83 ec 0c             	sub    $0xc,%esp
   17df5:	ff 75 08             	pushl  0x8(%ebp)
   17df8:	e8 14 a4 ff ff       	call   12211 <task_file>
   17dfd:	83 c4 10             	add    $0x10,%esp
   17e00:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pfile == (file_t *)0)
   17e03:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17e07:	75 07                	jne    17e10 <sys_ioctl+0x3a>
    {
        return 0;
   17e09:	b8 00 00 00 00       	mov    $0x0,%eax
   17e0e:	eb 48                	jmp    17e58 <sys_ioctl+0x82>
    }

    fs_t *fs = pfile->fs;
   17e10:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17e13:	8b 40 44             	mov    0x44(%eax),%eax
   17e16:	89 45 f0             	mov    %eax,-0x10(%ebp)

    fs_protect(fs);
   17e19:	83 ec 0c             	sub    $0xc,%esp
   17e1c:	ff 75 f0             	pushl  -0x10(%ebp)
   17e1f:	e8 a7 f2 ff ff       	call   170cb <fs_protect>
   17e24:	83 c4 10             	add    $0x10,%esp
    int err = fs->op->ioctl(pfile, cmd, arg0, arg1);
   17e27:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17e2a:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17e30:	8b 40 20             	mov    0x20(%eax),%eax
   17e33:	ff 75 14             	pushl  0x14(%ebp)
   17e36:	ff 75 10             	pushl  0x10(%ebp)
   17e39:	ff 75 0c             	pushl  0xc(%ebp)
   17e3c:	ff 75 f4             	pushl  -0xc(%ebp)
   17e3f:	ff d0                	call   *%eax
   17e41:	83 c4 10             	add    $0x10,%esp
   17e44:	89 45 ec             	mov    %eax,-0x14(%ebp)
    fs_unprotect(fs);
   17e47:	83 ec 0c             	sub    $0xc,%esp
   17e4a:	ff 75 f0             	pushl  -0x10(%ebp)
   17e4d:	e8 a4 f2 ff ff       	call   170f6 <fs_unprotect>
   17e52:	83 c4 10             	add    $0x10,%esp
    return err;
   17e55:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17e58:	c9                   	leave  
   17e59:	c3                   	ret    

00017e5a <kernel_init>:
#include "dev/console.h"
#include "dev/kbd.h"
#include "fs/fs.h"

void kernel_init(boot_info_t *boot_info)
{
   17e5a:	55                   	push   %ebp
   17e5b:	89 e5                	mov    %esp,%ebp
   17e5d:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   17e60:	e8 01 a9 ff ff       	call   12766 <cpu_init>
    irq_init();
   17e65:	e8 9c af ff ff       	call   12e06 <irq_init>
    log_init();
   17e6a:	e8 a2 0d 00 00       	call   18c11 <log_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   17e6f:	83 ec 0c             	sub    $0xc,%esp
   17e72:	ff 75 08             	pushl  0x8(%ebp)
   17e75:	e8 9b 8e ff ff       	call   10d15 <memory_init>
   17e7a:	83 c4 10             	add    $0x10,%esp
    fs_init();
   17e7d:	e8 7e fd ff ff       	call   17c00 <fs_init>

    time_init();
   17e82:	e8 37 d3 ff ff       	call   151be <time_init>

    task_manager_init();
   17e87:	e8 cb 95 ff ff       	call   11457 <task_manager_init>
}
   17e8c:	90                   	nop
   17e8d:	c9                   	leave  
   17e8e:	c3                   	ret    

00017e8f <move_to_first_task>:

/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void)
{
   17e8f:	55                   	push   %ebp
   17e90:	89 e5                	mov    %esp,%ebp
   17e92:	56                   	push   %esi
   17e93:	53                   	push   %ebx
   17e94:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t *curr = task_current();
   17e97:	e8 04 97 ff ff       	call   115a0 <task_current>
   17e9c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17e9f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17ea3:	75 19                	jne    17ebe <move_to_first_task+0x2f>
   17ea5:	68 b4 9f 01 00       	push   $0x19fb4
   17eaa:	68 48 a0 01 00       	push   $0x1a048
   17eaf:	6a 58                	push   $0x58
   17eb1:	68 c0 9f 01 00       	push   $0x19fc0
   17eb6:	e8 b5 0a 00 00       	call   18970 <panic>
   17ebb:	83 c4 10             	add    $0x10,%esp

    tss_t *tss = &(curr->tss);
   17ebe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17ec1:	05 5c 02 00 00       	add    $0x25c,%eax
   17ec6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"     // SS
        "push %[esp]\n\t"    // ESP
        "push %[eflags]\n\t" // EFLAGS
        "push %[cs]\n\t"     // CS
        "push %[eip]\n\t"    // ip
        "iret\n\t" ::[ss] "r"(tss->ss),
   17ec9:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17ecc:	8b 40 50             	mov    0x50(%eax),%eax
        [esp] "r"(tss->esp), [eflags] "r"(tss->eflags),
   17ecf:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17ed2:	8b 52 38             	mov    0x38(%edx),%edx
   17ed5:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17ed8:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs] "r"(tss->cs), [eip] "r"(tss->eip));
   17edb:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17ede:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17ee1:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17ee4:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   17ee7:	50                   	push   %eax
   17ee8:	52                   	push   %edx
   17ee9:	51                   	push   %ecx
   17eea:	53                   	push   %ebx
   17eeb:	56                   	push   %esi
   17eec:	cf                   	iret   
}
   17eed:	90                   	nop
   17eee:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17ef1:	5b                   	pop    %ebx
   17ef2:	5e                   	pop    %esi
   17ef3:	5d                   	pop    %ebp
   17ef4:	c3                   	ret    

00017ef5 <init_main>:

void init_main(void)
{
   17ef5:	55                   	push   %ebp
   17ef6:	89 e5                	mov    %esp,%ebp
   17ef8:	83 ec 08             	sub    $0x8,%esp
    // list_test();
    log_printf("===================================");
   17efb:	83 ec 0c             	sub    $0xc,%esp
   17efe:	68 fc 9f 01 00       	push   $0x19ffc
   17f03:	e8 38 0d 00 00       	call   18c40 <log_printf>
   17f08:	83 c4 10             	add    $0x10,%esp
    log_printf("Kernel is running...");
   17f0b:	83 ec 0c             	sub    $0xc,%esp
   17f0e:	68 20 a0 01 00       	push   $0x1a020
   17f13:	e8 28 0d 00 00       	call   18c40 <log_printf>
   17f18:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   17f1b:	83 ec 08             	sub    $0x8,%esp
   17f1e:	68 35 a0 01 00       	push   $0x1a035
   17f23:	68 3b a0 01 00       	push   $0x1a03b
   17f28:	e8 13 0d 00 00       	call   18c40 <log_printf>
   17f2d:	83 c4 10             	add    $0x10,%esp
    log_printf("===================================");
   17f30:	83 ec 0c             	sub    $0xc,%esp
   17f33:	68 fc 9f 01 00       	push   $0x19ffc
   17f38:	e8 03 0d 00 00       	call   18c40 <log_printf>
   17f3d:	83 c4 10             	add    $0x10,%esp
    // log_printf("%d %d %x %c", 123456, -123, 0x123456, 'a');

    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]); // 压栈先-4再入栈
    task_first_init();
   17f40:	e8 14 94 ff ff       	call   11359 <task_first_init>
    move_to_first_task();
   17f45:	e8 45 ff ff ff       	call   17e8f <move_to_first_task>
    //     sem_notify(&sem);
    //     // sys_msleep(1000);
    //     // task_switch_from_to(task_first_task(), &init_task);
    //     // sys_sched_yield();
    // }
   17f4a:	90                   	nop
   17f4b:	c9                   	leave  
   17f4c:	c3                   	ret    

00017f4d <list_count>:
{
   17f4d:	55                   	push   %ebp
   17f4e:	89 e5                	mov    %esp,%ebp
    return list->count;
   17f50:	8b 45 08             	mov    0x8(%ebp),%eax
   17f53:	8b 40 08             	mov    0x8(%eax),%eax
}
   17f56:	5d                   	pop    %ebp
   17f57:	c3                   	ret    

00017f58 <mutex_init>:

/**
 * 锁初始化
 */
void mutex_init(mutex_t *mutex)
{
   17f58:	55                   	push   %ebp
   17f59:	89 e5                	mov    %esp,%ebp
   17f5b:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   17f5e:	8b 45 08             	mov    0x8(%ebp),%eax
   17f61:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   17f68:	8b 45 08             	mov    0x8(%ebp),%eax
   17f6b:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   17f71:	8b 45 08             	mov    0x8(%ebp),%eax
   17f74:	83 c0 08             	add    $0x8,%eax
   17f77:	83 ec 0c             	sub    $0xc,%esp
   17f7a:	50                   	push   %eax
   17f7b:	e8 ac 0a 00 00       	call   18a2c <list_init>
   17f80:	83 c4 10             	add    $0x10,%esp
}
   17f83:	90                   	nop
   17f84:	c9                   	leave  
   17f85:	c3                   	ret    

00017f86 <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock(mutex_t *mutex)
{
   17f86:	55                   	push   %ebp
   17f87:	89 e5                	mov    %esp,%ebp
   17f89:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   17f8c:	e8 b0 b1 ff ff       	call   13141 <irq_enter_protection>
   17f91:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t *curr = task_current();
   17f94:	e8 07 96 ff ff       	call   115a0 <task_current>
   17f99:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0)
   17f9c:	8b 45 08             	mov    0x8(%ebp),%eax
   17f9f:	8b 40 04             	mov    0x4(%eax),%eax
   17fa2:	85 c0                	test   %eax,%eax
   17fa4:	75 14                	jne    17fba <mutex_lock+0x34>
    {
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   17fa6:	8b 45 08             	mov    0x8(%ebp),%eax
   17fa9:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   17fb0:	8b 45 08             	mov    0x8(%ebp),%eax
   17fb3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17fb6:	89 10                	mov    %edx,(%eax)
   17fb8:	eb 4f                	jmp    18009 <mutex_lock+0x83>
    }
    else if (mutex->owner == curr)
   17fba:	8b 45 08             	mov    0x8(%ebp),%eax
   17fbd:	8b 00                	mov    (%eax),%eax
   17fbf:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17fc2:	75 11                	jne    17fd5 <mutex_lock+0x4f>
    {
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   17fc4:	8b 45 08             	mov    0x8(%ebp),%eax
   17fc7:	8b 40 04             	mov    0x4(%eax),%eax
   17fca:	8d 50 01             	lea    0x1(%eax),%edx
   17fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   17fd0:	89 50 04             	mov    %edx,0x4(%eax)
   17fd3:	eb 34                	jmp    18009 <mutex_lock+0x83>
    }
    else
    {
        // 有其它任务占用，则进入队列等待
        task_t *curr = task_current();
   17fd5:	e8 c6 95 ff ff       	call   115a0 <task_current>
   17fda:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   17fdd:	83 ec 0c             	sub    $0xc,%esp
   17fe0:	ff 75 ec             	pushl  -0x14(%ebp)
   17fe3:	e8 8d 95 ff ff       	call   11575 <task_set_block>
   17fe8:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   17feb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17fee:	8d 50 4c             	lea    0x4c(%eax),%edx
   17ff1:	8b 45 08             	mov    0x8(%ebp),%eax
   17ff4:	83 c0 08             	add    $0x8,%eax
   17ff7:	83 ec 08             	sub    $0x8,%esp
   17ffa:	52                   	push   %edx
   17ffb:	50                   	push   %eax
   17ffc:	e8 af 0a 00 00       	call   18ab0 <list_insert_last>
   18001:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   18004:	e8 45 96 ff ff       	call   1164e <task_dispatch>
    }

    irq_leave_protection(irq_state);
   18009:	83 ec 0c             	sub    $0xc,%esp
   1800c:	ff 75 f4             	pushl  -0xc(%ebp)
   1800f:	e8 45 b1 ff ff       	call   13159 <irq_leave_protection>
   18014:	83 c4 10             	add    $0x10,%esp
}
   18017:	90                   	nop
   18018:	c9                   	leave  
   18019:	c3                   	ret    

0001801a <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock(mutex_t *mutex)
{
   1801a:	55                   	push   %ebp
   1801b:	89 e5                	mov    %esp,%ebp
   1801d:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   18020:	e8 1c b1 ff ff       	call   13141 <irq_enter_protection>
   18025:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t *curr = task_current();
   18028:	e8 73 95 ff ff       	call   115a0 <task_current>
   1802d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr)
   18030:	8b 45 08             	mov    0x8(%ebp),%eax
   18033:	8b 00                	mov    (%eax),%eax
   18035:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   18038:	0f 85 88 00 00 00    	jne    180c6 <mutex_unlock+0xac>
    {
        if (--mutex->locked_count == 0)
   1803e:	8b 45 08             	mov    0x8(%ebp),%eax
   18041:	8b 40 04             	mov    0x4(%eax),%eax
   18044:	8d 50 ff             	lea    -0x1(%eax),%edx
   18047:	8b 45 08             	mov    0x8(%ebp),%eax
   1804a:	89 50 04             	mov    %edx,0x4(%eax)
   1804d:	8b 45 08             	mov    0x8(%ebp),%eax
   18050:	8b 40 04             	mov    0x4(%eax),%eax
   18053:	85 c0                	test   %eax,%eax
   18055:	75 6f                	jne    180c6 <mutex_unlock+0xac>
        {
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   18057:	8b 45 08             	mov    0x8(%ebp),%eax
   1805a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list))
   18060:	8b 45 08             	mov    0x8(%ebp),%eax
   18063:	83 c0 08             	add    $0x8,%eax
   18066:	83 ec 0c             	sub    $0xc,%esp
   18069:	50                   	push   %eax
   1806a:	e8 de fe ff ff       	call   17f4d <list_count>
   1806f:	83 c4 10             	add    $0x10,%esp
   18072:	85 c0                	test   %eax,%eax
   18074:	74 50                	je     180c6 <mutex_unlock+0xac>
            {
                list_node_t *task_node = list_remove_first(&mutex->wait_list);
   18076:	8b 45 08             	mov    0x8(%ebp),%eax
   18079:	83 c0 08             	add    $0x8,%eax
   1807c:	83 ec 0c             	sub    $0xc,%esp
   1807f:	50                   	push   %eax
   18080:	e8 8f 0a 00 00       	call   18b14 <list_remove_first>
   18085:	83 c4 10             	add    $0x10,%esp
   18088:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t *task = list_node_parent(task_node, task_t, wait_node);
   1808b:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1808f:	74 08                	je     18099 <mutex_unlock+0x7f>
   18091:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18094:	83 e8 4c             	sub    $0x4c,%eax
   18097:	eb 05                	jmp    1809e <mutex_unlock+0x84>
   18099:	b8 00 00 00 00       	mov    $0x0,%eax
   1809e:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   180a1:	83 ec 0c             	sub    $0xc,%esp
   180a4:	ff 75 e8             	pushl  -0x18(%ebp)
   180a7:	e8 95 94 ff ff       	call   11541 <task_set_ready>
   180ac:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   180af:	8b 45 08             	mov    0x8(%ebp),%eax
   180b2:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   180b9:	8b 45 08             	mov    0x8(%ebp),%eax
   180bc:	8b 55 e8             	mov    -0x18(%ebp),%edx
   180bf:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   180c1:	e8 88 95 ff ff       	call   1164e <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   180c6:	83 ec 0c             	sub    $0xc,%esp
   180c9:	ff 75 f4             	pushl  -0xc(%ebp)
   180cc:	e8 88 b0 ff ff       	call   13159 <irq_leave_protection>
   180d1:	83 c4 10             	add    $0x10,%esp
   180d4:	90                   	nop
   180d5:	c9                   	leave  
   180d6:	c3                   	ret    

000180d7 <list_count>:
{
   180d7:	55                   	push   %ebp
   180d8:	89 e5                	mov    %esp,%ebp
    return list->count;
   180da:	8b 45 08             	mov    0x8(%ebp),%eax
   180dd:	8b 40 08             	mov    0x8(%eax),%eax
}
   180e0:	5d                   	pop    %ebp
   180e1:	c3                   	ret    

000180e2 <sem_init>:

/**
 * 信号量初始化
 */
void sem_init(sem_t *sem, int init_count)
{
   180e2:	55                   	push   %ebp
   180e3:	89 e5                	mov    %esp,%ebp
   180e5:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   180e8:	8b 45 08             	mov    0x8(%ebp),%eax
   180eb:	8b 55 0c             	mov    0xc(%ebp),%edx
   180ee:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   180f0:	8b 45 08             	mov    0x8(%ebp),%eax
   180f3:	83 c0 04             	add    $0x4,%eax
   180f6:	83 ec 0c             	sub    $0xc,%esp
   180f9:	50                   	push   %eax
   180fa:	e8 2d 09 00 00       	call   18a2c <list_init>
   180ff:	83 c4 10             	add    $0x10,%esp
}
   18102:	90                   	nop
   18103:	c9                   	leave  
   18104:	c3                   	ret    

00018105 <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait(sem_t *sem)
{
   18105:	55                   	push   %ebp
   18106:	89 e5                	mov    %esp,%ebp
   18108:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1810b:	e8 31 b0 ff ff       	call   13141 <irq_enter_protection>
   18110:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0)
   18113:	8b 45 08             	mov    0x8(%ebp),%eax
   18116:	8b 00                	mov    (%eax),%eax
   18118:	85 c0                	test   %eax,%eax
   1811a:	7e 0f                	jle    1812b <sem_wait+0x26>
    {
        sem->count--;
   1811c:	8b 45 08             	mov    0x8(%ebp),%eax
   1811f:	8b 00                	mov    (%eax),%eax
   18121:	8d 50 ff             	lea    -0x1(%eax),%edx
   18124:	8b 45 08             	mov    0x8(%ebp),%eax
   18127:	89 10                	mov    %edx,(%eax)
   18129:	eb 34                	jmp    1815f <sem_wait+0x5a>
    }
    else
    {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t *curr = task_current();
   1812b:	e8 70 94 ff ff       	call   115a0 <task_current>
   18130:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   18133:	83 ec 0c             	sub    $0xc,%esp
   18136:	ff 75 f0             	pushl  -0x10(%ebp)
   18139:	e8 37 94 ff ff       	call   11575 <task_set_block>
   1813e:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   18141:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18144:	8d 50 4c             	lea    0x4c(%eax),%edx
   18147:	8b 45 08             	mov    0x8(%ebp),%eax
   1814a:	83 c0 04             	add    $0x4,%eax
   1814d:	83 ec 08             	sub    $0x8,%esp
   18150:	52                   	push   %edx
   18151:	50                   	push   %eax
   18152:	e8 59 09 00 00       	call   18ab0 <list_insert_last>
   18157:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   1815a:	e8 ef 94 ff ff       	call   1164e <task_dispatch>
    }

    irq_leave_protection(irq_state);
   1815f:	83 ec 0c             	sub    $0xc,%esp
   18162:	ff 75 f4             	pushl  -0xc(%ebp)
   18165:	e8 ef af ff ff       	call   13159 <irq_leave_protection>
   1816a:	83 c4 10             	add    $0x10,%esp
}
   1816d:	90                   	nop
   1816e:	c9                   	leave  
   1816f:	c3                   	ret    

00018170 <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify(sem_t *sem)
{
   18170:	55                   	push   %ebp
   18171:	89 e5                	mov    %esp,%ebp
   18173:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   18176:	e8 c6 af ff ff       	call   13141 <irq_enter_protection>
   1817b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list))
   1817e:	8b 45 08             	mov    0x8(%ebp),%eax
   18181:	83 c0 04             	add    $0x4,%eax
   18184:	83 ec 0c             	sub    $0xc,%esp
   18187:	50                   	push   %eax
   18188:	e8 4a ff ff ff       	call   180d7 <list_count>
   1818d:	83 c4 10             	add    $0x10,%esp
   18190:	85 c0                	test   %eax,%eax
   18192:	74 40                	je     181d4 <sem_notify+0x64>
    {
        // 有进程等待，则唤醒加入就绪队列
        list_node_t *node = list_remove_first(&sem->wait_list);
   18194:	8b 45 08             	mov    0x8(%ebp),%eax
   18197:	83 c0 04             	add    $0x4,%eax
   1819a:	83 ec 0c             	sub    $0xc,%esp
   1819d:	50                   	push   %eax
   1819e:	e8 71 09 00 00       	call   18b14 <list_remove_first>
   181a3:	83 c4 10             	add    $0x10,%esp
   181a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   181a9:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   181ad:	74 08                	je     181b7 <sem_notify+0x47>
   181af:	8b 45 f0             	mov    -0x10(%ebp),%eax
   181b2:	83 e8 4c             	sub    $0x4c,%eax
   181b5:	eb 05                	jmp    181bc <sem_notify+0x4c>
   181b7:	b8 00 00 00 00       	mov    $0x0,%eax
   181bc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   181bf:	83 ec 0c             	sub    $0xc,%esp
   181c2:	ff 75 ec             	pushl  -0x14(%ebp)
   181c5:	e8 77 93 ff ff       	call   11541 <task_set_ready>
   181ca:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   181cd:	e8 7c 94 ff ff       	call   1164e <task_dispatch>
   181d2:	eb 0d                	jmp    181e1 <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   181d4:	8b 45 08             	mov    0x8(%ebp),%eax
   181d7:	8b 00                	mov    (%eax),%eax
   181d9:	8d 50 01             	lea    0x1(%eax),%edx
   181dc:	8b 45 08             	mov    0x8(%ebp),%eax
   181df:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   181e1:	83 ec 0c             	sub    $0xc,%esp
   181e4:	ff 75 f4             	pushl  -0xc(%ebp)
   181e7:	e8 6d af ff ff       	call   13159 <irq_leave_protection>
   181ec:	83 c4 10             	add    $0x10,%esp
}
   181ef:	90                   	nop
   181f0:	c9                   	leave  
   181f1:	c3                   	ret    

000181f2 <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count(sem_t *sem)
{
   181f2:	55                   	push   %ebp
   181f3:	89 e5                	mov    %esp,%ebp
   181f5:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   181f8:	e8 44 af ff ff       	call   13141 <irq_enter_protection>
   181fd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   18200:	8b 45 08             	mov    0x8(%ebp),%eax
   18203:	8b 00                	mov    (%eax),%eax
   18205:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   18208:	83 ec 0c             	sub    $0xc,%esp
   1820b:	ff 75 f4             	pushl  -0xc(%ebp)
   1820e:	e8 46 af ff ff       	call   13159 <irq_leave_protection>
   18213:	83 c4 10             	add    $0x10,%esp
    return count;
   18216:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18219:	c9                   	leave  
   1821a:	c3                   	ret    

0001821b <bitmap_byte_count>:

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count(int bit_count)
{
   1821b:	55                   	push   %ebp
   1821c:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   1821e:	8b 45 08             	mov    0x8(%ebp),%eax
   18221:	83 c0 07             	add    $0x7,%eax
   18224:	8d 50 07             	lea    0x7(%eax),%edx
   18227:	85 c0                	test   %eax,%eax
   18229:	0f 48 c2             	cmovs  %edx,%eax
   1822c:	c1 f8 03             	sar    $0x3,%eax
}
   1822f:	5d                   	pop    %ebp
   18230:	c3                   	ret    

00018231 <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   18231:	55                   	push   %ebp
   18232:	89 e5                	mov    %esp,%ebp
   18234:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   18237:	8b 45 08             	mov    0x8(%ebp),%eax
   1823a:	8b 55 10             	mov    0x10(%ebp),%edx
   1823d:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   1823f:	8b 45 08             	mov    0x8(%ebp),%eax
   18242:	8b 55 0c             	mov    0xc(%ebp),%edx
   18245:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   18248:	8b 45 08             	mov    0x8(%ebp),%eax
   1824b:	8b 00                	mov    (%eax),%eax
   1824d:	50                   	push   %eax
   1824e:	e8 c8 ff ff ff       	call   1821b <bitmap_byte_count>
   18253:	83 c4 04             	add    $0x4,%esp
   18256:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes); // 将bitmap置位
   18259:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1825d:	74 07                	je     18266 <bitmap_init+0x35>
   1825f:	ba ff 00 00 00       	mov    $0xff,%edx
   18264:	eb 05                	jmp    1826b <bitmap_init+0x3a>
   18266:	ba 00 00 00 00       	mov    $0x0,%edx
   1826b:	8b 45 08             	mov    0x8(%ebp),%eax
   1826e:	8b 40 04             	mov    0x4(%eax),%eax
   18271:	83 ec 04             	sub    $0x4,%esp
   18274:	ff 75 f4             	pushl  -0xc(%ebp)
   18277:	52                   	push   %edx
   18278:	50                   	push   %eax
   18279:	e8 a8 03 00 00       	call   18626 <kernel_memset>
   1827e:	83 c4 10             	add    $0x10,%esp
}
   18281:	90                   	nop
   18282:	c9                   	leave  
   18283:	c3                   	ret    

00018284 <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   18284:	55                   	push   %ebp
   18285:	89 e5                	mov    %esp,%ebp
   18287:	56                   	push   %esi
   18288:	53                   	push   %ebx
   18289:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   1828c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   18293:	e9 a2 00 00 00       	jmp    1833a <bitmap_set_bit+0xb6>
    {
        // 可以考虑进行一定程序的优化!!
        if (bit)
   18298:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1829c:	74 4a                	je     182e8 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= 1 << (index % 8);
   1829e:	8b 45 08             	mov    0x8(%ebp),%eax
   182a1:	8b 50 04             	mov    0x4(%eax),%edx
   182a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   182a7:	8d 48 07             	lea    0x7(%eax),%ecx
   182aa:	85 c0                	test   %eax,%eax
   182ac:	0f 48 c1             	cmovs  %ecx,%eax
   182af:	c1 f8 03             	sar    $0x3,%eax
   182b2:	89 c3                	mov    %eax,%ebx
   182b4:	89 d8                	mov    %ebx,%eax
   182b6:	01 d0                	add    %edx,%eax
   182b8:	0f b6 00             	movzbl (%eax),%eax
   182bb:	89 c6                	mov    %eax,%esi
   182bd:	8b 45 0c             	mov    0xc(%ebp),%eax
   182c0:	99                   	cltd   
   182c1:	c1 ea 1d             	shr    $0x1d,%edx
   182c4:	01 d0                	add    %edx,%eax
   182c6:	83 e0 07             	and    $0x7,%eax
   182c9:	29 d0                	sub    %edx,%eax
   182cb:	ba 01 00 00 00       	mov    $0x1,%edx
   182d0:	89 c1                	mov    %eax,%ecx
   182d2:	d3 e2                	shl    %cl,%edx
   182d4:	89 d0                	mov    %edx,%eax
   182d6:	89 f2                	mov    %esi,%edx
   182d8:	09 c2                	or     %eax,%edx
   182da:	8b 45 08             	mov    0x8(%ebp),%eax
   182dd:	8b 40 04             	mov    0x4(%eax),%eax
   182e0:	89 d9                	mov    %ebx,%ecx
   182e2:	01 c8                	add    %ecx,%eax
   182e4:	88 10                	mov    %dl,(%eax)
   182e6:	eb 4a                	jmp    18332 <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   182e8:	8b 45 08             	mov    0x8(%ebp),%eax
   182eb:	8b 50 04             	mov    0x4(%eax),%edx
   182ee:	8b 45 0c             	mov    0xc(%ebp),%eax
   182f1:	8d 48 07             	lea    0x7(%eax),%ecx
   182f4:	85 c0                	test   %eax,%eax
   182f6:	0f 48 c1             	cmovs  %ecx,%eax
   182f9:	c1 f8 03             	sar    $0x3,%eax
   182fc:	89 c3                	mov    %eax,%ebx
   182fe:	89 d8                	mov    %ebx,%eax
   18300:	01 d0                	add    %edx,%eax
   18302:	0f b6 00             	movzbl (%eax),%eax
   18305:	89 c6                	mov    %eax,%esi
   18307:	8b 45 0c             	mov    0xc(%ebp),%eax
   1830a:	99                   	cltd   
   1830b:	c1 ea 1d             	shr    $0x1d,%edx
   1830e:	01 d0                	add    %edx,%eax
   18310:	83 e0 07             	and    $0x7,%eax
   18313:	29 d0                	sub    %edx,%eax
   18315:	ba 01 00 00 00       	mov    $0x1,%edx
   1831a:	89 c1                	mov    %eax,%ecx
   1831c:	d3 e2                	shl    %cl,%edx
   1831e:	89 d0                	mov    %edx,%eax
   18320:	f7 d0                	not    %eax
   18322:	89 f2                	mov    %esi,%edx
   18324:	21 c2                	and    %eax,%edx
   18326:	8b 45 08             	mov    0x8(%ebp),%eax
   18329:	8b 40 04             	mov    0x4(%eax),%eax
   1832c:	89 d9                	mov    %ebx,%ecx
   1832e:	01 c8                	add    %ecx,%eax
   18330:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   18332:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18336:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1833a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1833d:	3b 45 10             	cmp    0x10(%ebp),%eax
   18340:	7d 0e                	jge    18350 <bitmap_set_bit+0xcc>
   18342:	8b 45 08             	mov    0x8(%ebp),%eax
   18345:	8b 00                	mov    (%eax),%eax
   18347:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1834a:	0f 8c 48 ff ff ff    	jl     18298 <bitmap_set_bit+0x14>
        }
    }
}
   18350:	90                   	nop
   18351:	83 c4 10             	add    $0x10,%esp
   18354:	5b                   	pop    %ebx
   18355:	5e                   	pop    %esi
   18356:	5d                   	pop    %ebp
   18357:	c3                   	ret    

00018358 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   18358:	55                   	push   %ebp
   18359:	89 e5                	mov    %esp,%ebp
   1835b:	53                   	push   %ebx
    // return bitmap->bits[index / 8] & (1 << (index % 8));
    //  2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   1835c:	8b 45 08             	mov    0x8(%ebp),%eax
   1835f:	8b 50 04             	mov    0x4(%eax),%edx
   18362:	8b 45 0c             	mov    0xc(%ebp),%eax
   18365:	8d 48 07             	lea    0x7(%eax),%ecx
   18368:	85 c0                	test   %eax,%eax
   1836a:	0f 48 c1             	cmovs  %ecx,%eax
   1836d:	c1 f8 03             	sar    $0x3,%eax
   18370:	01 d0                	add    %edx,%eax
   18372:	0f b6 00             	movzbl (%eax),%eax
   18375:	0f b6 d8             	movzbl %al,%ebx
   18378:	8b 45 0c             	mov    0xc(%ebp),%eax
   1837b:	99                   	cltd   
   1837c:	c1 ea 1d             	shr    $0x1d,%edx
   1837f:	01 d0                	add    %edx,%eax
   18381:	83 e0 07             	and    $0x7,%eax
   18384:	29 d0                	sub    %edx,%eax
   18386:	89 c1                	mov    %eax,%ecx
   18388:	d3 fb                	sar    %cl,%ebx
   1838a:	89 d8                	mov    %ebx,%eax
   1838c:	83 e0 01             	and    $0x1,%eax
}
   1838f:	5b                   	pop    %ebx
   18390:	5d                   	pop    %ebp
   18391:	c3                   	ret    

00018392 <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   18392:	55                   	push   %ebp
   18393:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   18395:	ff 75 0c             	pushl  0xc(%ebp)
   18398:	ff 75 08             	pushl  0x8(%ebp)
   1839b:	e8 b8 ff ff ff       	call   18358 <bitmap_get_bit>
   183a0:	83 c4 08             	add    $0x8,%esp
   183a3:	85 c0                	test   %eax,%eax
   183a5:	0f 95 c0             	setne  %al
   183a8:	0f b6 c0             	movzbl %al,%eax
}
   183ab:	c9                   	leave  
   183ac:	c3                   	ret    

000183ad <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   183ad:	55                   	push   %ebp
   183ae:	89 e5                	mov    %esp,%ebp
   183b0:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   183b3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   183ba:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count)
   183c1:	e9 85 00 00 00       	jmp    1844b <bitmap_alloc_nbits+0x9e>
    {
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   183c6:	ff 75 fc             	pushl  -0x4(%ebp)
   183c9:	ff 75 08             	pushl  0x8(%ebp)
   183cc:	e8 87 ff ff ff       	call   18358 <bitmap_get_bit>
   183d1:	83 c4 08             	add    $0x8,%esp
   183d4:	39 45 0c             	cmp    %eax,0xc(%ebp)
   183d7:	74 06                	je     183df <bitmap_alloc_nbits+0x32>
        {
            // 不同，继续寻找起始的bit
            search_idx++;
   183d9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   183dd:	eb 6c                	jmp    1844b <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   183df:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183e2:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   183e5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   183ec:	eb 27                	jmp    18415 <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   183ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   183f1:	8d 50 01             	lea    0x1(%eax),%edx
   183f4:	89 55 fc             	mov    %edx,-0x4(%ebp)
   183f7:	50                   	push   %eax
   183f8:	ff 75 08             	pushl  0x8(%ebp)
   183fb:	e8 58 ff ff ff       	call   18358 <bitmap_get_bit>
   18400:	83 c4 08             	add    $0x8,%esp
   18403:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18406:	74 09                	je     18411 <bitmap_alloc_nbits+0x64>
            {
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   18408:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   1840f:	eb 16                	jmp    18427 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   18411:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18415:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18418:	3b 45 10             	cmp    0x10(%ebp),%eax
   1841b:	7d 0a                	jge    18427 <bitmap_alloc_nbits+0x7a>
   1841d:	8b 45 08             	mov    0x8(%ebp),%eax
   18420:	8b 00                	mov    (%eax),%eax
   18422:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   18425:	7c c7                	jl     183ee <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count)
   18427:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1842a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1842d:	7c 1c                	jl     1844b <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   1842f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18432:	f7 d0                	not    %eax
   18434:	50                   	push   %eax
   18435:	ff 75 10             	pushl  0x10(%ebp)
   18438:	ff 75 f8             	pushl  -0x8(%ebp)
   1843b:	ff 75 08             	pushl  0x8(%ebp)
   1843e:	e8 41 fe ff ff       	call   18284 <bitmap_set_bit>
   18443:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   18446:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18449:	eb 13                	jmp    1845e <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   1844b:	8b 45 08             	mov    0x8(%ebp),%eax
   1844e:	8b 00                	mov    (%eax),%eax
   18450:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   18453:	0f 8c 6d ff ff ff    	jl     183c6 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   18459:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1845e:	c9                   	leave  
   1845f:	c3                   	ret    

00018460 <hlt>:
{
   18460:	55                   	push   %ebp
   18461:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   18463:	f4                   	hlt    
}
   18464:	90                   	nop
   18465:	5d                   	pop    %ebp
   18466:	c3                   	ret    

00018467 <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char *dest, const char *src)
{
   18467:	55                   	push   %ebp
   18468:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   1846a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1846e:	74 3b                	je     184ab <kernel_strcpy+0x44>
   18470:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18474:	74 35                	je     184ab <kernel_strcpy+0x44>
    {
        return;
    }

    while (*dest && *src)
   18476:	eb 17                	jmp    1848f <kernel_strcpy+0x28>
    {
        *dest++ = *src++;
   18478:	8b 55 0c             	mov    0xc(%ebp),%edx
   1847b:	8d 42 01             	lea    0x1(%edx),%eax
   1847e:	89 45 0c             	mov    %eax,0xc(%ebp)
   18481:	8b 45 08             	mov    0x8(%ebp),%eax
   18484:	8d 48 01             	lea    0x1(%eax),%ecx
   18487:	89 4d 08             	mov    %ecx,0x8(%ebp)
   1848a:	0f b6 12             	movzbl (%edx),%edx
   1848d:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   1848f:	8b 45 08             	mov    0x8(%ebp),%eax
   18492:	0f b6 00             	movzbl (%eax),%eax
   18495:	84 c0                	test   %al,%al
   18497:	74 0a                	je     184a3 <kernel_strcpy+0x3c>
   18499:	8b 45 0c             	mov    0xc(%ebp),%eax
   1849c:	0f b6 00             	movzbl (%eax),%eax
   1849f:	84 c0                	test   %al,%al
   184a1:	75 d5                	jne    18478 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   184a3:	8b 45 08             	mov    0x8(%ebp),%eax
   184a6:	c6 00 00             	movb   $0x0,(%eax)
   184a9:	eb 01                	jmp    184ac <kernel_strcpy+0x45>
        return;
   184ab:	90                   	nop
}
   184ac:	5d                   	pop    %ebp
   184ad:	c3                   	ret    

000184ae <kernel_strncpy>:

void kernel_strncpy(char *dest, const char *src, int size)
{
   184ae:	55                   	push   %ebp
   184af:	89 e5                	mov    %esp,%ebp
   184b1:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   184b4:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184b8:	74 61                	je     1851b <kernel_strncpy+0x6d>
   184ba:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   184be:	74 5b                	je     1851b <kernel_strncpy+0x6d>
   184c0:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   184c4:	74 55                	je     1851b <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   184c6:	8b 45 08             	mov    0x8(%ebp),%eax
   184c9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   184cc:	8b 45 0c             	mov    0xc(%ebp),%eax
   184cf:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   184d2:	eb 17                	jmp    184eb <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   184d4:	8b 55 f8             	mov    -0x8(%ebp),%edx
   184d7:	8d 42 01             	lea    0x1(%edx),%eax
   184da:	89 45 f8             	mov    %eax,-0x8(%ebp)
   184dd:	8b 45 fc             	mov    -0x4(%ebp),%eax
   184e0:	8d 48 01             	lea    0x1(%eax),%ecx
   184e3:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   184e6:	0f b6 12             	movzbl (%edx),%edx
   184e9:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   184eb:	8b 45 10             	mov    0x10(%ebp),%eax
   184ee:	8d 50 ff             	lea    -0x1(%eax),%edx
   184f1:	89 55 10             	mov    %edx,0x10(%ebp)
   184f4:	85 c0                	test   %eax,%eax
   184f6:	7e 0a                	jle    18502 <kernel_strncpy+0x54>
   184f8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184fb:	0f b6 00             	movzbl (%eax),%eax
   184fe:	84 c0                	test   %al,%al
   18500:	75 d2                	jne    184d4 <kernel_strncpy+0x26>
    }
    if (size == 0)
   18502:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18506:	75 0b                	jne    18513 <kernel_strncpy+0x65>
    {
        *(d - 1) = '\0';
   18508:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1850b:	83 e8 01             	sub    $0x1,%eax
   1850e:	c6 00 00             	movb   $0x0,(%eax)
   18511:	eb 09                	jmp    1851c <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   18513:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18516:	c6 00 00             	movb   $0x0,(%eax)
   18519:	eb 01                	jmp    1851c <kernel_strncpy+0x6e>
        return;
   1851b:	90                   	nop
    }
}
   1851c:	c9                   	leave  
   1851d:	c3                   	ret    

0001851e <kernel_strncmp>:

int kernel_strncmp(const char *s1, const char *s2, int size)
{
   1851e:	55                   	push   %ebp
   1851f:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   18521:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18525:	74 06                	je     1852d <kernel_strncmp+0xf>
   18527:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1852b:	75 13                	jne    18540 <kernel_strncmp+0x22>
    {
        return -1;
   1852d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   18532:	eb 66                	jmp    1859a <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   18534:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   18538:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   1853c:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   18540:	8b 45 08             	mov    0x8(%ebp),%eax
   18543:	0f b6 00             	movzbl (%eax),%eax
   18546:	84 c0                	test   %al,%al
   18548:	74 20                	je     1856a <kernel_strncmp+0x4c>
   1854a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1854d:	0f b6 00             	movzbl (%eax),%eax
   18550:	84 c0                	test   %al,%al
   18552:	74 16                	je     1856a <kernel_strncmp+0x4c>
   18554:	8b 45 08             	mov    0x8(%ebp),%eax
   18557:	0f b6 10             	movzbl (%eax),%edx
   1855a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1855d:	0f b6 00             	movzbl (%eax),%eax
   18560:	38 c2                	cmp    %al,%dl
   18562:	75 06                	jne    1856a <kernel_strncmp+0x4c>
   18564:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18568:	75 ca                	jne    18534 <kernel_strncmp+0x16>
    }
    // 相等返回0
    // s1="abc",s2="abcdef" 也属于相等
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   1856a:	8b 45 08             	mov    0x8(%ebp),%eax
   1856d:	0f b6 00             	movzbl (%eax),%eax
   18570:	84 c0                	test   %al,%al
   18572:	74 21                	je     18595 <kernel_strncmp+0x77>
   18574:	8b 45 0c             	mov    0xc(%ebp),%eax
   18577:	0f b6 00             	movzbl (%eax),%eax
   1857a:	84 c0                	test   %al,%al
   1857c:	74 17                	je     18595 <kernel_strncmp+0x77>
   1857e:	8b 45 08             	mov    0x8(%ebp),%eax
   18581:	0f b6 10             	movzbl (%eax),%edx
   18584:	8b 45 0c             	mov    0xc(%ebp),%eax
   18587:	0f b6 00             	movzbl (%eax),%eax
   1858a:	38 c2                	cmp    %al,%dl
   1858c:	74 07                	je     18595 <kernel_strncmp+0x77>
   1858e:	b8 01 00 00 00       	mov    $0x1,%eax
   18593:	eb 05                	jmp    1859a <kernel_strncmp+0x7c>
   18595:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1859a:	5d                   	pop    %ebp
   1859b:	c3                   	ret    

0001859c <kernel_strlen>:

int kernel_strlen(const char *str)
{
   1859c:	55                   	push   %ebp
   1859d:	89 e5                	mov    %esp,%ebp
   1859f:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   185a2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   185a6:	75 07                	jne    185af <kernel_strlen+0x13>
    {
        return 0;
   185a8:	b8 00 00 00 00       	mov    $0x0,%eax
   185ad:	eb 26                	jmp    185d5 <kernel_strlen+0x39>
    }

    const char *c = str;
   185af:	8b 45 08             	mov    0x8(%ebp),%eax
   185b2:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   185b5:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   185bc:	eb 04                	jmp    185c2 <kernel_strlen+0x26>
    {
        len++;
   185be:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   185c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   185c5:	8d 50 01             	lea    0x1(%eax),%edx
   185c8:	89 55 fc             	mov    %edx,-0x4(%ebp)
   185cb:	0f b6 00             	movzbl (%eax),%eax
   185ce:	84 c0                	test   %al,%al
   185d0:	75 ec                	jne    185be <kernel_strlen+0x22>
    }

    return len;
   185d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   185d5:	c9                   	leave  
   185d6:	c3                   	ret    

000185d7 <kernel_memcpy>:

void kernel_memcpy(void *dest, void *src, int size)
{
   185d7:	55                   	push   %ebp
   185d8:	89 e5                	mov    %esp,%ebp
   185da:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   185dd:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   185e1:	74 40                	je     18623 <kernel_memcpy+0x4c>
   185e3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   185e7:	74 3a                	je     18623 <kernel_memcpy+0x4c>
   185e9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   185ed:	74 34                	je     18623 <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   185ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   185f2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   185f5:	8b 45 08             	mov    0x8(%ebp),%eax
   185f8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   185fb:	eb 17                	jmp    18614 <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   185fd:	8b 55 fc             	mov    -0x4(%ebp),%edx
   18600:	8d 42 01             	lea    0x1(%edx),%eax
   18603:	89 45 fc             	mov    %eax,-0x4(%ebp)
   18606:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18609:	8d 48 01             	lea    0x1(%eax),%ecx
   1860c:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   1860f:	0f b6 12             	movzbl (%edx),%edx
   18612:	88 10                	mov    %dl,(%eax)
    while (size--)
   18614:	8b 45 10             	mov    0x10(%ebp),%eax
   18617:	8d 50 ff             	lea    -0x1(%eax),%edx
   1861a:	89 55 10             	mov    %edx,0x10(%ebp)
   1861d:	85 c0                	test   %eax,%eax
   1861f:	75 dc                	jne    185fd <kernel_memcpy+0x26>
   18621:	eb 01                	jmp    18624 <kernel_memcpy+0x4d>
        return;
   18623:	90                   	nop
    }
}
   18624:	c9                   	leave  
   18625:	c3                   	ret    

00018626 <kernel_memset>:

// 内存逐字节设置v
void kernel_memset(void *dest, uint8_t v, int size)
{
   18626:	55                   	push   %ebp
   18627:	89 e5                	mov    %esp,%ebp
   18629:	83 ec 14             	sub    $0x14,%esp
   1862c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1862f:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   18632:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18636:	74 2c                	je     18664 <kernel_memset+0x3e>
   18638:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1863c:	74 26                	je     18664 <kernel_memset+0x3e>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   1863e:	8b 45 08             	mov    0x8(%ebp),%eax
   18641:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   18644:	eb 0f                	jmp    18655 <kernel_memset+0x2f>
    {
        *d++ = v;
   18646:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18649:	8d 50 01             	lea    0x1(%eax),%edx
   1864c:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1864f:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   18653:	88 10                	mov    %dl,(%eax)
    while (size--)
   18655:	8b 45 10             	mov    0x10(%ebp),%eax
   18658:	8d 50 ff             	lea    -0x1(%eax),%edx
   1865b:	89 55 10             	mov    %edx,0x10(%ebp)
   1865e:	85 c0                	test   %eax,%eax
   18660:	75 e4                	jne    18646 <kernel_memset+0x20>
   18662:	eb 01                	jmp    18665 <kernel_memset+0x3f>
        return;
   18664:	90                   	nop
    }
}
   18665:	c9                   	leave  
   18666:	c3                   	ret    

00018667 <kernel_memcmp>:

int kernel_memcmp(void *d1, void *d2, int size)
{
   18667:	55                   	push   %ebp
   18668:	89 e5                	mov    %esp,%ebp
   1866a:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   1866d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18671:	74 06                	je     18679 <kernel_memcmp+0x12>
   18673:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18677:	75 07                	jne    18680 <kernel_memcmp+0x19>
    {
        return 1;
   18679:	b8 01 00 00 00       	mov    $0x1,%eax
   1867e:	eb 43                	jmp    186c3 <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   18680:	8b 45 08             	mov    0x8(%ebp),%eax
   18683:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   18686:	8b 45 0c             	mov    0xc(%ebp),%eax
   18689:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   1868c:	eb 23                	jmp    186b1 <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   1868e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18691:	8d 50 01             	lea    0x1(%eax),%edx
   18694:	89 55 fc             	mov    %edx,-0x4(%ebp)
   18697:	0f b6 08             	movzbl (%eax),%ecx
   1869a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1869d:	8d 50 01             	lea    0x1(%eax),%edx
   186a0:	89 55 f8             	mov    %edx,-0x8(%ebp)
   186a3:	0f b6 00             	movzbl (%eax),%eax
   186a6:	38 c1                	cmp    %al,%cl
   186a8:	74 07                	je     186b1 <kernel_memcmp+0x4a>
        {
            return 1;
   186aa:	b8 01 00 00 00       	mov    $0x1,%eax
   186af:	eb 12                	jmp    186c3 <kernel_memcmp+0x5c>
    while (size--)
   186b1:	8b 45 10             	mov    0x10(%ebp),%eax
   186b4:	8d 50 ff             	lea    -0x1(%eax),%edx
   186b7:	89 55 10             	mov    %edx,0x10(%ebp)
   186ba:	85 c0                	test   %eax,%eax
   186bc:	75 d0                	jne    1868e <kernel_memcmp+0x27>
        }
    }

    // 内存一样返回0
    return 0;
   186be:	b8 00 00 00 00       	mov    $0x0,%eax
}
   186c3:	c9                   	leave  
   186c4:	c3                   	ret    

000186c5 <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   186c5:	55                   	push   %ebp
   186c6:	89 e5                	mov    %esp,%ebp
   186c8:	53                   	push   %ebx
   186c9:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   186cc:	8b 45 08             	mov    0x8(%ebp),%eax
   186cf:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   186d2:	8b 45 0c             	mov    0xc(%ebp),%eax
   186d5:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   186d8:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   186dc:	74 1d                	je     186fb <kernel_itoa+0x36>
   186de:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   186e2:	74 17                	je     186fb <kernel_itoa+0x36>
   186e4:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   186e8:	74 11                	je     186fb <kernel_itoa+0x36>
   186ea:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   186ee:	74 0b                	je     186fb <kernel_itoa+0x36>
    {
        *p = '\0';
   186f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   186f3:	c6 00 00             	movb   $0x0,(%eax)
        return;
   186f6:	e9 03 01 00 00       	jmp    187fe <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   186fb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   18702:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18706:	79 19                	jns    18721 <kernel_itoa+0x5c>
   18708:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1870c:	75 13                	jne    18721 <kernel_itoa+0x5c>
    {
        *p++ = '-';
   1870e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18711:	8d 50 01             	lea    0x1(%eax),%edx
   18714:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18717:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   1871a:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   18721:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18725:	74 3b                	je     18762 <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   18727:	8b 0d 74 b1 01 00    	mov    0x1b174,%ecx
   1872d:	8b 45 0c             	mov    0xc(%ebp),%eax
   18730:	99                   	cltd   
   18731:	f7 7d 10             	idivl  0x10(%ebp)
   18734:	89 d0                	mov    %edx,%eax
   18736:	83 c0 0f             	add    $0xf,%eax
   18739:	01 c8                	add    %ecx,%eax
   1873b:	0f b6 00             	movzbl (%eax),%eax
   1873e:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   18741:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18744:	8d 50 01             	lea    0x1(%eax),%edx
   18747:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1874a:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   1874e:	88 10                	mov    %dl,(%eax)
            num /= base;
   18750:	8b 45 0c             	mov    0xc(%ebp),%eax
   18753:	99                   	cltd   
   18754:	f7 7d 10             	idivl  0x10(%ebp)
   18757:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   1875a:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1875e:	75 c7                	jne    18727 <kernel_itoa+0x62>
   18760:	eb 4b                	jmp    187ad <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   18762:	8b 45 0c             	mov    0xc(%ebp),%eax
   18765:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   18768:	8b 0d 74 b1 01 00    	mov    0x1b174,%ecx
   1876e:	8b 5d 10             	mov    0x10(%ebp),%ebx
   18771:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18774:	ba 00 00 00 00       	mov    $0x0,%edx
   18779:	f7 f3                	div    %ebx
   1877b:	89 d0                	mov    %edx,%eax
   1877d:	83 c0 0f             	add    $0xf,%eax
   18780:	01 c8                	add    %ecx,%eax
   18782:	0f b6 00             	movzbl (%eax),%eax
   18785:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   18788:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1878b:	8d 50 01             	lea    0x1(%eax),%edx
   1878e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18791:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   18795:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   18797:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1879a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1879d:	ba 00 00 00 00       	mov    $0x0,%edx
   187a2:	f7 f3                	div    %ebx
   187a4:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   187a7:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   187ab:	75 bb                	jne    18768 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   187ad:	8b 45 f8             	mov    -0x8(%ebp),%eax
   187b0:	8d 50 ff             	lea    -0x1(%eax),%edx
   187b3:	89 55 f8             	mov    %edx,-0x8(%ebp)
   187b6:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   187b9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   187bd:	74 08                	je     187c7 <kernel_itoa+0x102>
   187bf:	8b 45 08             	mov    0x8(%ebp),%eax
   187c2:	83 c0 01             	add    $0x1,%eax
   187c5:	eb 03                	jmp    187ca <kernel_itoa+0x105>
   187c7:	8b 45 08             	mov    0x8(%ebp),%eax
   187ca:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   187cd:	eb 27                	jmp    187f6 <kernel_itoa+0x131>
    {
        char ch = *start;
   187cf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   187d2:	0f b6 00             	movzbl (%eax),%eax
   187d5:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   187d8:	8b 45 f8             	mov    -0x8(%ebp),%eax
   187db:	0f b6 10             	movzbl (%eax),%edx
   187de:	8b 45 ec             	mov    -0x14(%ebp),%eax
   187e1:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   187e3:	8b 45 f8             	mov    -0x8(%ebp),%eax
   187e6:	8d 50 ff             	lea    -0x1(%eax),%edx
   187e9:	89 55 f8             	mov    %edx,-0x8(%ebp)
   187ec:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   187f0:	88 10                	mov    %dl,(%eax)
        start++;
   187f2:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   187f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   187f9:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   187fc:	72 d1                	jb     187cf <kernel_itoa+0x10a>
    }
}
   187fe:	83 c4 20             	add    $0x20,%esp
   18801:	5b                   	pop    %ebx
   18802:	5d                   	pop    %ebp
   18803:	c3                   	ret    

00018804 <kernel_vsprintf>:

// buf 为最终显示的目标
// fmt 为整个字符串
// args 为va_list 可变变量
void kernel_vsprintf(char *buf, const char *fmt, va_list args)
{
   18804:	55                   	push   %ebp
   18805:	89 e5                	mov    %esp,%ebp
   18807:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   1880a:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buf;
   18811:	8b 45 08             	mov    0x8(%ebp),%eax
   18814:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   18817:	e9 17 01 00 00       	jmp    18933 <kernel_vsprintf+0x12f>
    {
        switch (state)
   1881c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1881f:	85 c0                	test   %eax,%eax
   18821:	74 0a                	je     1882d <kernel_vsprintf+0x29>
   18823:	83 f8 01             	cmp    $0x1,%eax
   18826:	74 2b                	je     18853 <kernel_vsprintf+0x4f>
   18828:	e9 06 01 00 00       	jmp    18933 <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   1882d:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   18831:	75 0c                	jne    1883f <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   18833:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   1883a:	e9 f4 00 00 00       	jmp    18933 <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   1883f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18842:	8d 50 01             	lea    0x1(%eax),%edx
   18845:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18848:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   1884c:	88 10                	mov    %dl,(%eax)
            }
            break;
   1884e:	e9 e0 00 00 00       	jmp    18933 <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   18853:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   18857:	75 31                	jne    1888a <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   18859:	8b 45 10             	mov    0x10(%ebp),%eax
   1885c:	8d 50 04             	lea    0x4(%eax),%edx
   1885f:	89 55 10             	mov    %edx,0x10(%ebp)
   18862:	8b 00                	mov    (%eax),%eax
   18864:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   18867:	6a 0a                	push   $0xa
   18869:	ff 75 e4             	pushl  -0x1c(%ebp)
   1886c:	ff 75 f8             	pushl  -0x8(%ebp)
   1886f:	e8 51 fe ff ff       	call   186c5 <kernel_itoa>
   18874:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr); // 移动到下一个
   18877:	ff 75 f8             	pushl  -0x8(%ebp)
   1887a:	e8 1d fd ff ff       	call   1859c <kernel_strlen>
   1887f:	83 c4 04             	add    $0x4,%esp
   18882:	01 45 f8             	add    %eax,-0x8(%ebp)
   18885:	e9 a1 00 00 00       	jmp    1892b <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   1888a:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   1888e:	75 2e                	jne    188be <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   18890:	8b 45 10             	mov    0x10(%ebp),%eax
   18893:	8d 50 04             	lea    0x4(%eax),%edx
   18896:	89 55 10             	mov    %edx,0x10(%ebp)
   18899:	8b 00                	mov    (%eax),%eax
   1889b:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   1889e:	6a 10                	push   $0x10
   188a0:	ff 75 e8             	pushl  -0x18(%ebp)
   188a3:	ff 75 f8             	pushl  -0x8(%ebp)
   188a6:	e8 1a fe ff ff       	call   186c5 <kernel_itoa>
   188ab:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   188ae:	ff 75 f8             	pushl  -0x8(%ebp)
   188b1:	e8 e6 fc ff ff       	call   1859c <kernel_strlen>
   188b6:	83 c4 04             	add    $0x4,%esp
   188b9:	01 45 f8             	add    %eax,-0x8(%ebp)
   188bc:	eb 6d                	jmp    1892b <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   188be:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   188c2:	75 1f                	jne    188e3 <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   188c4:	8b 45 10             	mov    0x10(%ebp),%eax
   188c7:	8d 50 04             	lea    0x4(%eax),%edx
   188ca:	89 55 10             	mov    %edx,0x10(%ebp)
   188cd:	8b 00                	mov    (%eax),%eax
   188cf:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   188d2:	8b 45 f8             	mov    -0x8(%ebp),%eax
   188d5:	8d 50 01             	lea    0x1(%eax),%edx
   188d8:	89 55 f8             	mov    %edx,-0x8(%ebp)
   188db:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   188df:	88 10                	mov    %dl,(%eax)
   188e1:	eb 48                	jmp    1892b <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   188e3:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   188e7:	75 42                	jne    1892b <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   188e9:	8b 45 10             	mov    0x10(%ebp),%eax
   188ec:	8d 50 04             	lea    0x4(%eax),%edx
   188ef:	89 55 10             	mov    %edx,0x10(%ebp)
   188f2:	8b 00                	mov    (%eax),%eax
   188f4:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   188f7:	ff 75 f4             	pushl  -0xc(%ebp)
   188fa:	e8 9d fc ff ff       	call   1859c <kernel_strlen>
   188ff:	83 c4 04             	add    $0x4,%esp
   18902:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   18905:	eb 17                	jmp    1891e <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   18907:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1890a:	8d 42 01             	lea    0x1(%edx),%eax
   1890d:	89 45 f4             	mov    %eax,-0xc(%ebp)
   18910:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18913:	8d 48 01             	lea    0x1(%eax),%ecx
   18916:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   18919:	0f b6 12             	movzbl (%edx),%edx
   1891c:	88 10                	mov    %dl,(%eax)
                while (len--)
   1891e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   18921:	8d 50 ff             	lea    -0x1(%eax),%edx
   18924:	89 55 f0             	mov    %edx,-0x10(%ebp)
   18927:	85 c0                	test   %eax,%eax
   18929:	75 dc                	jne    18907 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   1892b:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   18932:	90                   	nop
    while ((ch = *fmt++))
   18933:	8b 45 0c             	mov    0xc(%ebp),%eax
   18936:	8d 50 01             	lea    0x1(%eax),%edx
   18939:	89 55 0c             	mov    %edx,0xc(%ebp)
   1893c:	0f b6 00             	movzbl (%eax),%eax
   1893f:	88 45 ef             	mov    %al,-0x11(%ebp)
   18942:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   18946:	0f 85 d0 fe ff ff    	jne    1881c <kernel_vsprintf+0x18>
        }
    }
}
   1894c:	90                   	nop
   1894d:	c9                   	leave  
   1894e:	c3                   	ret    

0001894f <kernel_sprintf>:

/**
 * @brief 格式化字符串到缓存中
 */
void kernel_sprintf(char *buffer, const char *fmt, ...)
{
   1894f:	55                   	push   %ebp
   18950:	89 e5                	mov    %esp,%ebp
   18952:	83 ec 10             	sub    $0x10,%esp
    va_list args;

    va_start(args, fmt);
   18955:	8d 45 10             	lea    0x10(%ebp),%eax
   18958:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   1895b:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1895e:	50                   	push   %eax
   1895f:	ff 75 0c             	pushl  0xc(%ebp)
   18962:	ff 75 08             	pushl  0x8(%ebp)
   18965:	e8 9a fe ff ff       	call   18804 <kernel_vsprintf>
   1896a:	83 c4 0c             	add    $0xc,%esp
    va_end(args);
}
   1896d:	90                   	nop
   1896e:	c9                   	leave  
   1896f:	c3                   	ret    

00018970 <panic>:

void panic(const char *file, int line, const char *func, const char *cond)
{
   18970:	55                   	push   %ebp
   18971:	89 e5                	mov    %esp,%ebp
   18973:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   18976:	83 ec 08             	sub    $0x8,%esp
   18979:	ff 75 14             	pushl  0x14(%ebp)
   1897c:	68 5c a0 01 00       	push   $0x1a05c
   18981:	e8 ba 02 00 00       	call   18c40 <log_printf>
   18986:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   18989:	ff 75 10             	pushl  0x10(%ebp)
   1898c:	ff 75 0c             	pushl  0xc(%ebp)
   1898f:	ff 75 08             	pushl  0x8(%ebp)
   18992:	68 6e a0 01 00       	push   $0x1a06e
   18997:	e8 a4 02 00 00       	call   18c40 <log_printf>
   1899c:	83 c4 10             	add    $0x10,%esp

    for (;;)
    {
        hlt();
   1899f:	e8 bc fa ff ff       	call   18460 <hlt>
   189a4:	eb f9                	jmp    1899f <panic+0x2f>

000189a6 <get_file_name>:

/**
 * @brief 从路径中解释文件名
 */
char *get_file_name(char *name)
{
   189a6:	55                   	push   %ebp
   189a7:	89 e5                	mov    %esp,%ebp
   189a9:	83 ec 10             	sub    $0x10,%esp
    char *s = name;
   189ac:	8b 45 08             	mov    0x8(%ebp),%eax
   189af:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0')
   189b2:	eb 04                	jmp    189b8 <get_file_name+0x12>
    {
        s++;
   189b4:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0')
   189b8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   189bb:	0f b6 00             	movzbl (%eax),%eax
   189be:	84 c0                	test   %al,%al
   189c0:	75 f2                	jne    189b4 <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name))
   189c2:	eb 04                	jmp    189c8 <get_file_name+0x22>
    {
        s--;
   189c4:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name))
   189c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   189cb:	0f b6 00             	movzbl (%eax),%eax
   189ce:	3c 5c                	cmp    $0x5c,%al
   189d0:	74 12                	je     189e4 <get_file_name+0x3e>
   189d2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   189d5:	0f b6 00             	movzbl (%eax),%eax
   189d8:	3c 2f                	cmp    $0x2f,%al
   189da:	74 08                	je     189e4 <get_file_name+0x3e>
   189dc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   189df:	3b 45 08             	cmp    0x8(%ebp),%eax
   189e2:	73 e0                	jae    189c4 <get_file_name+0x1e>
    }
    return s + 1;
   189e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   189e7:	83 c0 01             	add    $0x1,%eax
}
   189ea:	c9                   	leave  
   189eb:	c3                   	ret    

000189ec <strings_count>:

/**
 * @brief 计算字符串的数量
 */
int strings_count(char **start)
{
   189ec:	55                   	push   %ebp
   189ed:	89 e5                	mov    %esp,%ebp
   189ef:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   189f2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start)
   189f9:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   189fd:	74 15                	je     18a14 <strings_count+0x28>
    {
        while (*start++)
   189ff:	eb 04                	jmp    18a05 <strings_count+0x19>
        {
            count++;
   18a01:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++)
   18a05:	8b 45 08             	mov    0x8(%ebp),%eax
   18a08:	8d 50 04             	lea    0x4(%eax),%edx
   18a0b:	89 55 08             	mov    %edx,0x8(%ebp)
   18a0e:	8b 00                	mov    (%eax),%eax
   18a10:	85 c0                	test   %eax,%eax
   18a12:	75 ed                	jne    18a01 <strings_count+0x15>
        }
    }
    return count;
   18a14:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18a17:	c9                   	leave  
   18a18:	c3                   	ret    

00018a19 <list_is_empty>:
{
   18a19:	55                   	push   %ebp
   18a1a:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   18a1c:	8b 45 08             	mov    0x8(%ebp),%eax
   18a1f:	8b 40 08             	mov    0x8(%eax),%eax
   18a22:	85 c0                	test   %eax,%eax
   18a24:	0f 94 c0             	sete   %al
   18a27:	0f b6 c0             	movzbl %al,%eax
}
   18a2a:	5d                   	pop    %ebp
   18a2b:	c3                   	ret    

00018a2c <list_init>:
/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list)
{
   18a2c:	55                   	push   %ebp
   18a2d:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   18a2f:	8b 45 08             	mov    0x8(%ebp),%eax
   18a32:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18a39:	8b 45 08             	mov    0x8(%ebp),%eax
   18a3c:	8b 50 04             	mov    0x4(%eax),%edx
   18a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   18a42:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   18a44:	8b 45 08             	mov    0x8(%ebp),%eax
   18a47:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   18a4e:	90                   	nop
   18a4f:	5d                   	pop    %ebp
   18a50:	c3                   	ret    

00018a51 <list_insert_first>:
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node)
{
   18a51:	55                   	push   %ebp
   18a52:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   18a54:	8b 45 08             	mov    0x8(%ebp),%eax
   18a57:	8b 10                	mov    (%eax),%edx
   18a59:	8b 45 0c             	mov    0xc(%ebp),%eax
   18a5c:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   18a5f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18a62:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list))
   18a68:	ff 75 08             	pushl  0x8(%ebp)
   18a6b:	e8 a9 ff ff ff       	call   18a19 <list_is_empty>
   18a70:	83 c4 04             	add    $0x4,%esp
   18a73:	85 c0                	test   %eax,%eax
   18a75:	74 15                	je     18a8c <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   18a77:	8b 45 08             	mov    0x8(%ebp),%eax
   18a7a:	8b 55 0c             	mov    0xc(%ebp),%edx
   18a7d:	89 10                	mov    %edx,(%eax)
   18a7f:	8b 45 08             	mov    0x8(%ebp),%eax
   18a82:	8b 10                	mov    (%eax),%edx
   18a84:	8b 45 08             	mov    0x8(%ebp),%eax
   18a87:	89 50 04             	mov    %edx,0x4(%eax)
   18a8a:	eb 12                	jmp    18a9e <list_insert_first+0x4d>
    }
    else
    {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   18a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   18a8f:	8b 00                	mov    (%eax),%eax
   18a91:	8b 55 0c             	mov    0xc(%ebp),%edx
   18a94:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   18a96:	8b 45 08             	mov    0x8(%ebp),%eax
   18a99:	8b 55 0c             	mov    0xc(%ebp),%edx
   18a9c:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   18a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   18aa1:	8b 40 08             	mov    0x8(%eax),%eax
   18aa4:	8d 50 01             	lea    0x1(%eax),%edx
   18aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   18aaa:	89 50 08             	mov    %edx,0x8(%eax)
}
   18aad:	90                   	nop
   18aae:	c9                   	leave  
   18aaf:	c3                   	ret    

00018ab0 <list_insert_last>:
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node)
{
   18ab0:	55                   	push   %ebp
   18ab1:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   18ab3:	8b 45 08             	mov    0x8(%ebp),%eax
   18ab6:	8b 50 04             	mov    0x4(%eax),%edx
   18ab9:	8b 45 0c             	mov    0xc(%ebp),%eax
   18abc:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   18abe:	8b 45 0c             	mov    0xc(%ebp),%eax
   18ac1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list))
   18ac8:	ff 75 08             	pushl  0x8(%ebp)
   18acb:	e8 49 ff ff ff       	call   18a19 <list_is_empty>
   18ad0:	83 c4 04             	add    $0x4,%esp
   18ad3:	85 c0                	test   %eax,%eax
   18ad5:	74 16                	je     18aed <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   18ad7:	8b 45 08             	mov    0x8(%ebp),%eax
   18ada:	8b 55 0c             	mov    0xc(%ebp),%edx
   18add:	89 50 04             	mov    %edx,0x4(%eax)
   18ae0:	8b 45 08             	mov    0x8(%ebp),%eax
   18ae3:	8b 50 04             	mov    0x4(%eax),%edx
   18ae6:	8b 45 08             	mov    0x8(%ebp),%eax
   18ae9:	89 10                	mov    %edx,(%eax)
   18aeb:	eb 15                	jmp    18b02 <list_insert_last+0x52>
    }
    else
    {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   18aed:	8b 45 08             	mov    0x8(%ebp),%eax
   18af0:	8b 40 04             	mov    0x4(%eax),%eax
   18af3:	8b 55 0c             	mov    0xc(%ebp),%edx
   18af6:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   18af9:	8b 45 08             	mov    0x8(%ebp),%eax
   18afc:	8b 55 0c             	mov    0xc(%ebp),%edx
   18aff:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   18b02:	8b 45 08             	mov    0x8(%ebp),%eax
   18b05:	8b 40 08             	mov    0x8(%eax),%eax
   18b08:	8d 50 01             	lea    0x1(%eax),%edx
   18b0b:	8b 45 08             	mov    0x8(%ebp),%eax
   18b0e:	89 50 08             	mov    %edx,0x8(%eax)
}
   18b11:	90                   	nop
   18b12:	c9                   	leave  
   18b13:	c3                   	ret    

00018b14 <list_remove_first>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t *list_remove_first(list_t *list)
{
   18b14:	55                   	push   %ebp
   18b15:	89 e5                	mov    %esp,%ebp
   18b17:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list))
   18b1a:	ff 75 08             	pushl  0x8(%ebp)
   18b1d:	e8 f7 fe ff ff       	call   18a19 <list_is_empty>
   18b22:	83 c4 04             	add    $0x4,%esp
   18b25:	85 c0                	test   %eax,%eax
   18b27:	74 07                	je     18b30 <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   18b29:	b8 00 00 00 00       	mov    $0x0,%eax
   18b2e:	eb 5a                	jmp    18b8a <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t *remove_node = list->first;
   18b30:	8b 45 08             	mov    0x8(%ebp),%eax
   18b33:	8b 00                	mov    (%eax),%eax
   18b35:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   18b38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18b3b:	8b 50 04             	mov    0x4(%eax),%edx
   18b3e:	8b 45 08             	mov    0x8(%ebp),%eax
   18b41:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0)
   18b43:	8b 45 08             	mov    0x8(%ebp),%eax
   18b46:	8b 00                	mov    (%eax),%eax
   18b48:	85 c0                	test   %eax,%eax
   18b4a:	75 0c                	jne    18b58 <list_remove_first+0x44>
    {
        // node为最后一个结点
        list->last = (list_node_t *)0;
   18b4c:	8b 45 08             	mov    0x8(%ebp),%eax
   18b4f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18b56:	eb 0c                	jmp    18b64 <list_remove_first+0x50>
    }
    else
    {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   18b58:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18b5b:	8b 40 04             	mov    0x4(%eax),%eax
   18b5e:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t *)0;
   18b64:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18b67:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   18b6d:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18b70:	8b 10                	mov    (%eax),%edx
   18b72:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18b75:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   18b78:	8b 45 08             	mov    0x8(%ebp),%eax
   18b7b:	8b 40 08             	mov    0x8(%eax),%eax
   18b7e:	8d 50 ff             	lea    -0x1(%eax),%edx
   18b81:	8b 45 08             	mov    0x8(%ebp),%eax
   18b84:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   18b87:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18b8a:	c9                   	leave  
   18b8b:	c3                   	ret    

00018b8c <list_remove>:
/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t *list_remove(list_t *list, list_node_t *remove_node)
{
   18b8c:	55                   	push   %ebp
   18b8d:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first)
   18b8f:	8b 45 08             	mov    0x8(%ebp),%eax
   18b92:	8b 00                	mov    (%eax),%eax
   18b94:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18b97:	75 0b                	jne    18ba4 <list_remove+0x18>
    {
        list->first = remove_node->next;
   18b99:	8b 45 0c             	mov    0xc(%ebp),%eax
   18b9c:	8b 50 04             	mov    0x4(%eax),%edx
   18b9f:	8b 45 08             	mov    0x8(%ebp),%eax
   18ba2:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last)
   18ba4:	8b 45 08             	mov    0x8(%ebp),%eax
   18ba7:	8b 40 04             	mov    0x4(%eax),%eax
   18baa:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18bad:	75 0b                	jne    18bba <list_remove+0x2e>
    {
        list->last = remove_node->pre;
   18baf:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bb2:	8b 10                	mov    (%eax),%edx
   18bb4:	8b 45 08             	mov    0x8(%ebp),%eax
   18bb7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre)
   18bba:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bbd:	8b 00                	mov    (%eax),%eax
   18bbf:	85 c0                	test   %eax,%eax
   18bc1:	74 0e                	je     18bd1 <list_remove+0x45>
    {
        remove_node->pre->next = remove_node->next;
   18bc3:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bc6:	8b 00                	mov    (%eax),%eax
   18bc8:	8b 55 0c             	mov    0xc(%ebp),%edx
   18bcb:	8b 52 04             	mov    0x4(%edx),%edx
   18bce:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next)
   18bd1:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bd4:	8b 40 04             	mov    0x4(%eax),%eax
   18bd7:	85 c0                	test   %eax,%eax
   18bd9:	74 0d                	je     18be8 <list_remove+0x5c>
    {
        remove_node->next->pre = remove_node->pre;
   18bdb:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bde:	8b 40 04             	mov    0x4(%eax),%eax
   18be1:	8b 55 0c             	mov    0xc(%ebp),%edx
   18be4:	8b 12                	mov    (%edx),%edx
   18be6:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t *)0;
   18be8:	8b 45 0c             	mov    0xc(%ebp),%eax
   18beb:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   18bf2:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bf5:	8b 50 04             	mov    0x4(%eax),%edx
   18bf8:	8b 45 0c             	mov    0xc(%ebp),%eax
   18bfb:	89 10                	mov    %edx,(%eax)
    --list->count;
   18bfd:	8b 45 08             	mov    0x8(%ebp),%eax
   18c00:	8b 40 08             	mov    0x8(%eax),%eax
   18c03:	8d 50 ff             	lea    -0x1(%eax),%edx
   18c06:	8b 45 08             	mov    0x8(%ebp),%eax
   18c09:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   18c0c:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   18c0f:	5d                   	pop    %ebp
   18c10:	c3                   	ret    

00018c11 <log_init>:

static int log_dev_id;
static mutex_t mutex;

void log_init(void)
{
   18c11:	55                   	push   %ebp
   18c12:	89 e5                	mov    %esp,%ebp
   18c14:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   18c17:	83 ec 0c             	sub    $0xc,%esp
   18c1a:	68 c8 a0 07 00       	push   $0x7a0c8
   18c1f:	e8 34 f3 ff ff       	call   17f58 <mutex_init>
   18c24:	83 c4 10             	add    $0x10,%esp
    log_dev_id = dev_open(DEV_TTY, 0, (void *)0);
   18c27:	83 ec 04             	sub    $0x4,%esp
   18c2a:	6a 00                	push   $0x0
   18c2c:	6a 00                	push   $0x0
   18c2e:	6a 01                	push   $0x1
   18c30:	e8 b3 b2 ff ff       	call   13ee8 <dev_open>
   18c35:	83 c4 10             	add    $0x10,%esp
   18c38:	a3 c4 a0 07 00       	mov    %eax,0x7a0c4
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
    mutex_init(&mutex);
#endif
}
   18c3d:	90                   	nop
   18c3e:	c9                   	leave  
   18c3f:	c3                   	ret    

00018c40 <log_printf>:

void log_printf(const char *fmt, ...)
{
   18c40:	55                   	push   %ebp
   18c41:	89 e5                	mov    %esp,%ebp
   18c43:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   18c49:	83 ec 04             	sub    $0x4,%esp
   18c4c:	68 80 00 00 00       	push   $0x80
   18c51:	6a 00                	push   $0x0
   18c53:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18c59:	50                   	push   %eax
   18c5a:	e8 c7 f9 ff ff       	call   18626 <kernel_memset>
   18c5f:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   18c62:	8d 45 0c             	lea    0xc(%ebp),%eax
   18c65:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   18c6b:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   18c71:	83 ec 04             	sub    $0x4,%esp
   18c74:	50                   	push   %eax
   18c75:	ff 75 08             	pushl  0x8(%ebp)
   18c78:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18c7e:	50                   	push   %eax
   18c7f:	e8 80 fb ff ff       	call   18804 <kernel_vsprintf>
   18c84:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 临界区进入
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   18c87:	83 ec 0c             	sub    $0xc,%esp
   18c8a:	68 c8 a0 07 00       	push   $0x7a0c8
   18c8f:	e8 f2 f2 ff ff       	call   17f86 <mutex_lock>
   18c94:	83 c4 10             	add    $0x10,%esp
    // 增加默认换行
    outb(COM1_PORT, '\r'); // 行号不变，列号归零
    outb(COM1_PORT, '\n'); // 列号不变，行号+1
#else
    // console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, "log:", 4);
   18c97:	a1 c4 a0 07 00       	mov    0x7a0c4,%eax
   18c9c:	6a 04                	push   $0x4
   18c9e:	68 ac a0 01 00       	push   $0x1a0ac
   18ca3:	6a 00                	push   $0x0
   18ca5:	50                   	push   %eax
   18ca6:	e8 d5 b3 ff ff       	call   14080 <dev_write>
   18cab:	83 c4 10             	add    $0x10,%esp
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   18cae:	83 ec 0c             	sub    $0xc,%esp
   18cb1:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18cb7:	50                   	push   %eax
   18cb8:	e8 df f8 ff ff       	call   1859c <kernel_strlen>
   18cbd:	83 c4 10             	add    $0x10,%esp
   18cc0:	89 c2                	mov    %eax,%edx
   18cc2:	a1 c4 a0 07 00       	mov    0x7a0c4,%eax
   18cc7:	52                   	push   %edx
   18cc8:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
   18cce:	52                   	push   %edx
   18ccf:	6a 00                	push   $0x0
   18cd1:	50                   	push   %eax
   18cd2:	e8 a9 b3 ff ff       	call   14080 <dev_write>
   18cd7:	83 c4 10             	add    $0x10,%esp
    char c = '\n';
   18cda:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    // console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   18ce1:	a1 c4 a0 07 00       	mov    0x7a0c4,%eax
   18ce6:	6a 01                	push   $0x1
   18ce8:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   18cee:	52                   	push   %edx
   18cef:	6a 00                	push   $0x0
   18cf1:	50                   	push   %eax
   18cf2:	e8 89 b3 ff ff       	call   14080 <dev_write>
   18cf7:	83 c4 10             	add    $0x10,%esp
#endif
    // irq_leave_protection(state); // 临界区退出
    mutex_unlock(&mutex);
   18cfa:	83 ec 0c             	sub    $0xc,%esp
   18cfd:	68 c8 a0 07 00       	push   $0x7a0c8
   18d02:	e8 13 f3 ff ff       	call   1801a <mutex_unlock>
   18d07:	83 c4 10             	add    $0x10,%esp
   18d0a:	90                   	nop
   18d0b:	c9                   	leave  
   18d0c:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include "core/task.h"
#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main(void)
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    {
        print_msg("child task id=%d\n", pid);
        print_msg("parent: %d\n", count);
    }
#endif
    for (int i = 0; i < TTY_NR; i++)
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
    {
        int pid = fork();
80000022:	e8 63 01 00 00       	call   8000018a <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0)
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
        {
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 90 9f 01 00       	push   $0x19f90
8000003a:	e8 23 01 00 00       	call   80000162 <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        }
        else if (pid == 0)
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
        {
            // 子进程
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char *argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 a9 9f 01 00       	push   $0x19fa9
80000082:	e8 1e 01 00 00       	call   800001a5 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 90 9f 01 00       	push   $0x19f90
80000094:	e8 c9 00 00 00       	call   80000162 <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1)
            {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 70 00 00 00       	call   80000119 <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++)
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>

    for (;;)
    {
        // 不断收集孤儿进程
        int status;
        wait(&status);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000c2:	50                   	push   %eax
800000c3:	e8 25 01 00 00       	call   800001ed <wait>
800000c8:	83 c4 10             	add    $0x10,%esp
    {
800000cb:	eb ef                	jmp    800000bc <first_task_main+0xac>

800000cd <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
800000cd:	55                   	push   %ebp
800000ce:	89 e5                	mov    %esp,%ebp
800000d0:	57                   	push   %edi
800000d1:	56                   	push   %esi
800000d2:	53                   	push   %ebx
800000d3:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
800000d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
800000e4:	8b 45 08             	mov    0x8(%ebp),%eax
800000e7:	8b 40 10             	mov    0x10(%eax),%eax
800000ea:	8b 55 08             	mov    0x8(%ebp),%edx
800000ed:	8b 52 0c             	mov    0xc(%edx),%edx
800000f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f3:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
800000f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f9:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fc:	8b 75 08             	mov    0x8(%ebp),%esi
800000ff:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000101:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000104:	50                   	push   %eax
80000105:	52                   	push   %edx
80000106:	51                   	push   %ecx
80000107:	53                   	push   %ebx
80000108:	56                   	push   %esi
80000109:	ff 1f                	lcall  *(%edi)
8000010b:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
8000010e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000111:	83 c4 10             	add    $0x10,%esp
80000114:	5b                   	pop    %ebx
80000115:	5e                   	pop    %esi
80000116:	5f                   	pop    %edi
80000117:	5d                   	pop    %ebp
80000118:	c3                   	ret    

80000119 <msleep>:

int msleep(int ms)
{
80000119:	55                   	push   %ebp
8000011a:	89 e5                	mov    %esp,%ebp
8000011c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
8000011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000123:	7f 07                	jg     8000012c <msleep+0x13>
    {
        return 0;
80000125:	b8 00 00 00 00       	mov    $0x0,%eax
8000012a:	eb 19                	jmp    80000145 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
8000012c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000133:	8b 45 08             	mov    0x8(%ebp),%eax
80000136:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000139:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000013c:	50                   	push   %eax
8000013d:	e8 8b ff ff ff       	call   800000cd <sys_call>
80000142:	83 c4 04             	add    $0x4,%esp
}
80000145:	c9                   	leave  
80000146:	c3                   	ret    

80000147 <getpid>:

int getpid()
{
80000147:	55                   	push   %ebp
80000148:	89 e5                	mov    %esp,%ebp
8000014a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000154:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000157:	50                   	push   %eax
80000158:	e8 70 ff ff ff       	call   800000cd <sys_call>
8000015d:	83 c4 04             	add    $0x4,%esp
}
80000160:	c9                   	leave  
80000161:	c3                   	ret    

80000162 <print_msg>:

void print_msg(const char *fmt, int arg)
{
80000162:	55                   	push   %ebp
80000163:	89 e5                	mov    %esp,%ebp
80000165:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000168:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016f:	8b 45 08             	mov    0x8(%ebp),%eax
80000172:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000175:	8b 45 0c             	mov    0xc(%ebp),%eax
80000178:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
8000017b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017e:	50                   	push   %eax
8000017f:	e8 49 ff ff ff       	call   800000cd <sys_call>
80000184:	83 c4 04             	add    $0x4,%esp
}
80000187:	90                   	nop
80000188:	c9                   	leave  
80000189:	c3                   	ret    

8000018a <fork>:

int fork()
{
8000018a:	55                   	push   %ebp
8000018b:	89 e5                	mov    %esp,%ebp
8000018d:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
80000190:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000197:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000019a:	50                   	push   %eax
8000019b:	e8 2d ff ff ff       	call   800000cd <sys_call>
800001a0:	83 c4 04             	add    $0x4,%esp
}
800001a3:	c9                   	leave  
800001a4:	c3                   	ret    

800001a5 <execve>:

int execve(const char *name, char *const *argv, char *const *env)
{
800001a5:	55                   	push   %ebp
800001a6:	89 e5                	mov    %esp,%ebp
800001a8:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001ab:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001b2:	8b 45 08             	mov    0x8(%ebp),%eax
800001b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b8:	8b 45 0c             	mov    0xc(%ebp),%eax
800001bb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001be:	8b 45 10             	mov    0x10(%ebp),%eax
800001c1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c4:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c7:	50                   	push   %eax
800001c8:	e8 00 ff ff ff       	call   800000cd <sys_call>
800001cd:	83 c4 04             	add    $0x4,%esp
}
800001d0:	c9                   	leave  
800001d1:	c3                   	ret    

800001d2 <yield>:

int yield(void)
{
800001d2:	55                   	push   %ebp
800001d3:	89 e5                	mov    %esp,%ebp
800001d5:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d8:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001df:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e2:	50                   	push   %eax
800001e3:	e8 e5 fe ff ff       	call   800000cd <sys_call>
800001e8:	83 c4 04             	add    $0x4,%esp
}
800001eb:	c9                   	leave  
800001ec:	c3                   	ret    

800001ed <wait>:

int wait(int *status)
{
800001ed:	55                   	push   %ebp
800001ee:	89 e5                	mov    %esp,%ebp
800001f0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
800001f3:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
800001fa:	8b 45 08             	mov    0x8(%ebp),%eax
800001fd:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000200:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000203:	50                   	push   %eax
80000204:	e8 c4 fe ff ff       	call   800000cd <sys_call>
80000209:	83 c4 04             	add    $0x4,%esp
}
8000020c:	c9                   	leave  
8000020d:	c3                   	ret    

8000020e <_exit>:

void _exit(int status)
{
8000020e:	55                   	push   %ebp
8000020f:	89 e5                	mov    %esp,%ebp
80000211:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000214:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8000021b:	8b 45 08             	mov    0x8(%ebp),%eax
8000021e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000221:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000224:	50                   	push   %eax
80000225:	e8 a3 fe ff ff       	call   800000cd <sys_call>
8000022a:	83 c4 04             	add    $0x4,%esp
    for (;;)
8000022d:	eb fe                	jmp    8000022d <_exit+0x1f>

8000022f <open>:
    {
    }
}

int open(const char *name, int flags, ...)
{
8000022f:	55                   	push   %ebp
80000230:	89 e5                	mov    %esp,%ebp
80000232:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
80000235:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8000023c:	8b 45 08             	mov    0x8(%ebp),%eax
8000023f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
80000242:	8b 45 0c             	mov    0xc(%ebp),%eax
80000245:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000248:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024b:	50                   	push   %eax
8000024c:	e8 7c fe ff ff       	call   800000cd <sys_call>
80000251:	83 c4 04             	add    $0x4,%esp
}
80000254:	c9                   	leave  
80000255:	c3                   	ret    

80000256 <read>:

int read(int file, char *ptr, int len)
{
80000256:	55                   	push   %ebp
80000257:	89 e5                	mov    %esp,%ebp
80000259:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000025c:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000263:	8b 45 08             	mov    0x8(%ebp),%eax
80000266:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000269:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000026f:	8b 45 10             	mov    0x10(%ebp),%eax
80000272:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000275:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000278:	50                   	push   %eax
80000279:	e8 4f fe ff ff       	call   800000cd <sys_call>
8000027e:	83 c4 04             	add    $0x4,%esp
}
80000281:	c9                   	leave  
80000282:	c3                   	ret    

80000283 <write>:

int write(int file, char *ptr, int len)
{
80000283:	55                   	push   %ebp
80000284:	89 e5                	mov    %esp,%ebp
80000286:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000289:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
80000290:	8b 45 08             	mov    0x8(%ebp),%eax
80000293:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000296:	8b 45 0c             	mov    0xc(%ebp),%eax
80000299:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000029c:	8b 45 10             	mov    0x10(%ebp),%eax
8000029f:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002a2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002a5:	50                   	push   %eax
800002a6:	e8 22 fe ff ff       	call   800000cd <sys_call>
800002ab:	83 c4 04             	add    $0x4,%esp
}
800002ae:	c9                   	leave  
800002af:	c3                   	ret    

800002b0 <close>:

int close(int file)
{
800002b0:	55                   	push   %ebp
800002b1:	89 e5                	mov    %esp,%ebp
800002b3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
800002b6:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
800002bd:	8b 45 08             	mov    0x8(%ebp),%eax
800002c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c6:	50                   	push   %eax
800002c7:	e8 01 fe ff ff       	call   800000cd <sys_call>
800002cc:	83 c4 04             	add    $0x4,%esp
}
800002cf:	c9                   	leave  
800002d0:	c3                   	ret    

800002d1 <lseek>:

int lseek(int file, int ptr, int dir)
{
800002d1:	55                   	push   %ebp
800002d2:	89 e5                	mov    %esp,%ebp
800002d4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002d7:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002de:	8b 45 08             	mov    0x8(%ebp),%eax
800002e1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002e4:	8b 45 0c             	mov    0xc(%ebp),%eax
800002e7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002ea:	8b 45 10             	mov    0x10(%ebp),%eax
800002ed:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002f0:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f3:	50                   	push   %eax
800002f4:	e8 d4 fd ff ff       	call   800000cd <sys_call>
800002f9:	83 c4 04             	add    $0x4,%esp
}
800002fc:	c9                   	leave  
800002fd:	c3                   	ret    

800002fe <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st)
{
800002fe:	55                   	push   %ebp
800002ff:	89 e5                	mov    %esp,%ebp
80000301:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
80000304:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8000030b:	8b 45 08             	mov    0x8(%ebp),%eax
8000030e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
80000311:	8b 45 0c             	mov    0xc(%ebp),%eax
80000314:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000317:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000031a:	50                   	push   %eax
8000031b:	e8 ad fd ff ff       	call   800000cd <sys_call>
80000320:	83 c4 04             	add    $0x4,%esp
}
80000323:	c9                   	leave  
80000324:	c3                   	ret    

80000325 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file)
{
80000325:	55                   	push   %ebp
80000326:	89 e5                	mov    %esp,%ebp
80000328:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000032b:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
80000332:	8b 45 08             	mov    0x8(%ebp),%eax
80000335:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000338:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033b:	50                   	push   %eax
8000033c:	e8 8c fd ff ff       	call   800000cd <sys_call>
80000341:	83 c4 04             	add    $0x4,%esp
}
80000344:	c9                   	leave  
80000345:	c3                   	ret    

80000346 <sbrk>:

void *sbrk(ptrdiff_t incr)
{
80000346:	55                   	push   %ebp
80000347:	89 e5                	mov    %esp,%ebp
80000349:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000034c:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
80000353:	8b 45 08             	mov    0x8(%ebp),%eax
80000356:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000359:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035c:	50                   	push   %eax
8000035d:	e8 6b fd ff ff       	call   800000cd <sys_call>
80000362:	83 c4 04             	add    $0x4,%esp
}
80000365:	c9                   	leave  
80000366:	c3                   	ret    

80000367 <dup>:

int dup(int file)
{
80000367:	55                   	push   %ebp
80000368:	89 e5                	mov    %esp,%ebp
8000036a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
8000036d:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000374:	8b 45 08             	mov    0x8(%ebp),%eax
80000377:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
8000037a:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000037d:	50                   	push   %eax
8000037e:	e8 4a fd ff ff       	call   800000cd <sys_call>
80000383:	83 c4 04             	add    $0x4,%esp
}
80000386:	c9                   	leave  
80000387:	c3                   	ret    
