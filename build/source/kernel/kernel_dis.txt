
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00005d98 memsz 0x00005d98 flags r-x
    LOAD off    0x00007000 vaddr 0x00016000 paddr 0x00016000 align 2**12
         filesz 0x00000054 memsz 0x00026098 flags rw-
    LOAD off    0x00008000 vaddr 0x80000000 paddr 0x0003c098 align 2**12
         filesz 0x00000346 memsz 0x00000346 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004e8d  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .first_task   00000346  80000000  0003c098  00008000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  2 .data         00000054  00016000  00016000  00007000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00025098  00017000  00017000  00007054  2**12
                  ALLOC
  4 .debug_line   00002be7  00000000  00000000  00008346  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00009cfb  00000000  00000000  0000af2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000209b  00000000  00000000  00014c28  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_aranges 00000280  00000000  00000000  00016cc8  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .rodata       00000ef8  00014ea0  00014ea0  00005ea0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_ranges 00000060  00000000  00000000  00016f48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00001ff9  00000000  00000000  00016fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  00018fa1  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00001dfc  00000000  00000000  00018fb4  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
80000000 l    d  .first_task	00000000 .first_task
00016000 l    d  .data	00000000 .data
00017000 l    d  .bss	00000000 .bss
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00014ea0 l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010013 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010311 l     F .text	00000017 up2
00010328 l     F .text	0000000d down2
00010335 l     F .text	0000000c write_cr3
00010341 l     F .text	00000014 pde_index
00010355 l     F .text	00000027 pde_paddr
0001037c l     F .text	00000010 pte_index
0001038c l     F .text	00000027 pte_paddr
000103b3 l     F .text	0000000f get_pte_perm
000103c2 l     F .text	00000011 mmu_set_page_dir
00019000 l     O .bss	00000028 paddr_alloc
0001a000 l     O .bss	00001000 kernel_page_dir
000103d3 l     F .text	00000010 current_page_dir
000103e3 l     F .text	00000058 addr_alloc_init
0001043b l     F .text	00000067 addr_alloc_page
000104a2 l     F .text	00000062 addr_free_page
00010504 l     F .text	00000066 show_mem_info
0001056a l     F .text	0000003c total_mem_size
00015008 l     O .rodata	00000012 __func__.2309
00016000 l     O .data	00000050 kernel_map.2321
0001501c l     O .rodata	00000013 __func__.2349
00015030 l     O .rodata	00000011 __func__.2422
00015044 l     O .rodata	0000000c __func__.2434
00015050 l     O .rodata	00000009 __func__.2442
00000000 l    df *ABS*	00000000 syscall.c
00015060 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010f8f l     F .text	0000001b list_node_init
00010faa l     F .text	0000000b list_node_next
00010fb5 l     F .text	0000000b list_count
00010fc0 l     F .text	0000000a list_first
00010fca l     F .text	0000000c write_cr3
00010fd6 l     F .text	00000007 hlt
00010fdd l     F .text	0000000c write_tr
00010fe9 l     F .text	00000011 mmu_set_page_dir
0001b000 l     O .bss	00001000 idle_task_stack
0001c000 l     O .bss	000001b8 task_manager
0001c1c0 l     O .bss	00006200 task_table
000223c0 l     O .bss	00000014 task_table_mutex
00010ffa l     F .text	00000198 tss_init
000153ac l     O .rodata	0000000a __func__.2818
000153b8 l     O .rodata	00000010 __func__.2838
000113fc l     F .text	0000000a idle_task_entry
000115ba l     F .text	00000043 task_next_run
00011800 l     F .text	00000069 alloc_task
00011869 l     F .text	00000030 free_task
00011aaf l     F .text	00000129 load_phdr
000153c8 l     O .rodata	0000000a __func__.2933
00011bd8 l     F .text	00000213 load_elf_file
00011deb l     F .text	00000130 copy_args
000153d4 l     O .rodata	0000000a __func__.2968
00000000 l    df *ABS*	00000000 cpu.c
0001212d l     F .text	00000028 lgdt
00012155 l     F .text	0000001a far_jump
000223e0 l     O .bss	00000800 gdt_table
00022be0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
0001239f l     F .text	0000001d inb
000123bc l     F .text	0000001f outb
000123db l     F .text	00000007 cli
000123e2 l     F .text	00000007 sti
000123e9 l     F .text	00000028 lidt
00012411 l     F .text	00000011 read_cr2
00012422 l     F .text	00000007 hlt
00012429 l     F .text	00000010 read_eflags
00012439 l     F .text	0000000b write_eflags
00022c00 l     O .bss	00000400 idt_table
00012444 l     F .text	000000ff dump_core_regs
00012543 l     F .text	0000004e do_default_handler
00012912 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
00012d09 l     F .text	0000001d inb
00012d26 l     F .text	0000001f outb
00023000 l     O .bss	00000068 console_buf
00012d45 l     F .text	00000074 read_cursor_pos
00012db9 l     F .text	000000c1 update_cursor_pos
00012e7a l     F .text	00000085 clear_display
00012eff l     F .text	00000091 erase_rows
00012f90 l     F .text	00000088 scroll_up
00013018 l     F .text	00000010 move_to_col0
00013028 l     F .text	00000038 move_next_line
00013060 l     F .text	00000076 move_forward
000130d6 l     F .text	00000094 show_char
00013283 l     F .text	00000078 move_backword
000132fb l     F .text	0000003a erase_backword
00013335 l     F .text	00000073 move_next_tab
000133a8 l     F .text	000000b8 write_normal
00013460 l     F .text	00000037 move_left
00013497 l     F .text	00000049 move_right
000134e0 l     F .text	00000033 move_cursor
00013513 l     F .text	00000029 clear_esc_param
0001353c l     F .text	00000075 write_esc
000135b1 l     F .text	00000051 erase_in_display
00013602 l     F .text	00000099 set_font_style
00015980 l     O .rodata	00000020 color_table.2335
0001369b l     F .text	00000107 write_esc_square
00000000 l    df *ABS*	00000000 kbd.c
00013843 l     F .text	0000001d inb
00013860 l     F .text	0000001f outb
00023068 l     O .bss	00000004 kbd_state
000159a0 l     O .rodata	00000200 map_table
0001387f l     F .text	00000015 get_key
00013894 l     F .text	0000001a is_make_code
00013958 l     F .text	00000045 update_led_status
0001399d l     F .text	0000001e do_fx_key
000139bb l     F .text	000001d2 do_normal_key
00013b8d l     F .text	0000008a do_e0_key
0002306c l     O .bss	00000004 recv_state.2042
00023070 l     O .bss	00000004 inited.2052
00000000 l    df *ABS*	00000000 time.c
00013d19 l     F .text	0000001f outb
00023074 l     O .bss	00000004 sys_tick
00013d38 l     F .text	00000060 init_pic
00000000 l    df *ABS*	00000000 fs.c
00013dd8 l     F .text	0000001d inb
00013df5 l     F .text	0000001f inw
00013e14 l     F .text	0000001f outb
00023080 l     O .bss	00019000 TEMP_ADDR
0003c080 l     O .bss	00000004 temp_pos
00013e33 l     F .text	0000012f read_disk
00000000 l    df *ABS*	00000000 init.c
00015d34 l     O .rodata	00000013 __func__.2326
00000000 l    df *ABS*	00000000 mutex.c
00014136 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
000142c0 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00014649 l     F .text	00000007 hlt
00016050 l     O .data	00000004 num2ch.1927
00000000 l    df *ABS*	00000000 list.c
00014be1 l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0003c084 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000f2 l     F .first_task	0000004c sys_call
00014541 g     F .text	0000003a bitmap_get_bit
000147c0 g     F .text	0000004f kernel_memcpy
00014024 g     F .text	0000000a sys_close
0001154f g     F .text	0000000a task_current
800001f3 g     F .first_task	0000001b yield
00012caa g     F .text	0000000b irq_enable_global
00014c78 g     F .text	00000064 list_insert_last
000102b2 g       .text	00000000 exception_handler_kbd
00010dd4 g     F .text	0000010c sys_sbrk
000120cc g     F .text	00000061 sys_yield
0001179c g     F .text	00000064 sys_msleep
000126c5 g     F .text	0000001c do_handler_segment_not_present
000114f0 g     F .text	00000034 task_set_ready
0001457b g     F .text	0000001b bitmap_is_set
0001480f g     F .text	00000041 kernel_memset
00014000 g     F .text	00000024 sys_lseek
00013cd9 g     F .text	00000040 kbd_init
00010274 g       .text	00000000 exception_handler_virtual_exception
00010efa g     F .text	00000095 do_handler_syscall
00014bb4 g     F .text	0000002d strings_count
0001236e g     F .text	0000001e cpu_init
00014dd9 g     F .text	00000006 log_init
0001192c g     F .text	00000183 sys_fork
000140e0 g     F .text	00000056 init_main
00010219 g       .text	00000000 exception_handler_alignment_check
000121ee g     F .text	00000039 gdt_free_sel
00010ee0 g     F .text	0000001a sys_print_msg
00014650 g     F .text	00000047 kernel_strcpy
00016000 g       .data	00000000 s_data
800001c6 g     F .first_task	0000002d execve
80000168 g     F .first_task	0000001b getpid
00012b8d g     F .text	0000008b irq_enable
00010035 g       .text	00000000 exception_handler_unknown
000100b1 g       .text	00000000 exception_handler_breakpoint
0001261d g     F .text	0000001c do_handler_overflow
00012719 g     F .text	0000001c do_handler_alignment_check
00010656 g     F .text	0000008c memory_create_map
00013f9b g     F .text	0000003f sys_read
0001390f g     F .text	00000035 kbd_wait_recv_ready
000101c0 g       .text	00000000 exception_handler_general_protection
00012789 g     F .text	000000b5 do_handler_general_protection
00013188 g     F .text	0000001e restore_cursor
000143db g     F .text	00000029 sem_count
80000010 g     F .first_task	000000e2 first_task_main
000125ad g     F .text	0000001c do_handler_divider
0001446d g     F .text	000000d4 bitmap_set_bit
0001268d g     F .text	0000001c do_handler_double_fault
0001283e g     F .text	000000d4 do_handler_page_fault
80000304 g     F .first_task	00000021 isatty
0001014c g       .text	00000000 exception_handler_double_fault
00012cb5 g     F .text	0000002b pic_send_eoi
000113f2 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
0001079d g     F .text	00000085 memory_create_uvm
000142ee g     F .text	0000006b sem_wait
00010cce g     F .text	00000022 memory_alloc_page_for
00013d98 g     F .text	00000028 do_handler_timer
000101a3 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00014038 g     F .text	0000000a sys_fstat
0001276d g     F .text	0000001c do_handler_virtual_exception
000100d0 g       .text	00000000 exception_handler_overflow
00012227 g     F .text	00000075 get_alloc_desc
000102d1 g       .text	00000000 simple_switch
800002b0 g     F .first_task	0000002d lseek
00017000 g     O .bss	00002000 stack
00010c35 g     F .text	00000099 memory_free_page
0003c098 g       *ABS*	00000000 s_first_task
000131a6 g     F .text	000000dd console_init
000118af g     F .text	0000007d task_uninit
00010b4f g     F .text	000000cc memory_alloc_for_page_dir
000100ef g       .text	00000000 exception_handler_bound_range
00014359 g     F .text	00000082 sem_notify
00010acc g     F .text	00000083 memory_copy_uvm_data
00013c17 g     F .text	000000c2 do_handler_kbd
00012655 g     F .text	0000001c do_handler_invalid_opcode
00010169 g       .text	00000000 exception_handler_invalid_tss
000126fd g     F .text	0000001c do_handler_fpu_error
00011308 g     F .text	000000ea task_first_init
00012735 g     F .text	0000001c do_handler_machine_check
80000262 g     F .first_task	0000002d write
00013f62 g     F .text	00000039 sys_open
000125c9 g     F .text	0000001c do_handler_Debug
800002dd g     F .first_task	00000027 fstat
0001402e g     F .text	0000000a sys_isatty
00014c19 g     F .text	0000005f list_insert_first
0001177c g     F .text	00000020 task_set_wakeup
000125e5 g     F .text	0000001c do_handler_NMI
00010054 g       .text	00000000 exception_handler_divider
00014697 g     F .text	00000070 kernel_strncpy
00012c9f g     F .text	0000000b irq_disable_global
00011559 g     F .text	00000061 sys_sched_yield
00013fda g     F .text	00000026 sys_write
0003c3de g       *ABS*	00000000 mem_free_start
000138e3 g     F .text	0000002c kbd_write
00014042 g     F .text	0000003a kernel_init
000142cb g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
000149ed g     F .text	0000014b kernel_vsprintf
00014b6e g     F .text	00000046 get_file_name
0001012d g       .text	00000000 exception_handler_device_unavailable
0001010e g       .text	00000000 exception_handler_invalid_opcode
0001316a g     F .text	0000001e save_cursor
0003c098 g       .bss	00000000 e_data
80000235 g     F .first_task	0000002d read
0001416f g     F .text	00000094 mutex_lock
00010236 g       .text	00000000 exception_handler_machine_check
000126a9 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
0003c3de g       *ABS*	00000000 e_first_task
00011742 g     F .text	0000003a task_set_sleep
00014b38 g     F .text	00000036 panic
00010293 g       .text	00000000 exception_handler_timer
00012b53 g     F .text	0000003a irq_install
0001229c g     F .text	0000008b init_gdt
800001ab g     F .first_task	0000001b fork
00012ce0 g     F .text	00000018 irq_enter_protection
00014141 g     F .text	0000002e mutex_init
00012c18 g     F .text	00000087 irq_disable
80000325 g     F .first_task	00000021 sbrk
00010255 g       .text	00000000 exception_handler_smd_exception
00010822 g     F .text	0000010f memory_destroy_uvm
00014404 g     F .text	00000016 bitmap_byte_count
00012671 g     F .text	0000001c do_handler_device_unavailable
000115fd g     F .text	0000005b task_dispatch
00010931 g     F .text	00000155 memory_copy_uvm
0001407c g     F .text	00000064 move_to_first_task
0001238c g     F .text	00000013 switch_to_tss
000137a2 g     F .text	000000a1 console_write
000138ae g     F .text	00000035 kbd_wait_send_ready
00014850 g     F .text	0000005e kernel_memcmp
000106e2 g     F .text	000000bb create_kernel_table
00014bf4 g     F .text	00000025 list_init
00012751 g     F .text	0000001c do_handler_smd_exception
000101dd g       .text	00000000 exception_handler_page_fault
00011524 g     F .text	0000002b task_set_block
00012591 g     F .text	0000001c do_handler_unknown
00010c1b g     F .text	0000001a memory_alloc_page
000101fa g       .text	00000000 exception_handler_fpu_error
000112bd g     F .text	0000001e task_switch_from_to
000129a5 g     F .text	000001ae irq_init
00014203 g     F .text	000000bd mutex_unlock
00012cf8 g     F .text	00000011 irq_leave_protection
00013944 g     F .text	00000014 kbd_read
80000183 g     F .first_task	00000028 print_msg
00014785 g     F .text	0000003b kernel_strlen
0001216f g     F .text	0000007f segment_desc_set
00012639 g     F .text	0000001c do_handler_bound_range
000102e6 g       .text	00000000 exception_handler_syscall
00014cdc g     F .text	00000078 list_remove_first
00015d98 g       .rodata	00000000 e_text
00014707 g     F .text	0000007e kernel_strncmp
0001441a g     F .text	00000053 bitmap_init
00010186 g       .text	00000000 exception_handler_segment_not_present
00010092 g       .text	00000000 exception_handler_NMI
00014596 g     F .text	000000b3 bitmap_alloc_nbits
00011406 g     F .text	000000ea task_manager_init
000112db g     F .text	0000002d task_start
00010073 g       .text	00000000 exception_handler_Debug
00011658 g     F .text	000000ea task_time_tick
00010cf0 g     F .text	000000e4 memory_init
00011f1b g     F .text	000001b1 sys_execve
00010a86 g     F .text	00000046 memory_get_paddr
000126e1 g     F .text	0000001c do_handler_stack_segment_fault
00012601 g     F .text	0000001c do_handler_breakpoint
00014ddf g     F .text	000000ae log_printf
00011192 g     F .text	0000012b task_init
8000020e g     F .first_task	00000027 open
00011899 g     F .text	00000016 sys_getpid
000148ae g     F .text	0000013f kernel_itoa
00014d54 g     F .text	00000085 list_remove
00012327 g     F .text	00000047 gate_desc_set
8000013e g     F .first_task	0000002a msleep
8000028f g     F .first_task	00000021 close
000105a6 g     F .text	000000b0 find_pte
00013dc0 g     F .text	00000018 time_init



Disassembly of section .text:

00010000 <_start>:
    .extern kernel_init
    .extern init_main
    .global _start
    # void start (boot_info_t *boot_info)
_start:
    push %ebp
   10000:	55                   	push   %ebp
    mov %esp, %ebp
   10001:	89 e5                	mov    %esp,%ebp
    mov 0x8(%ebp), %eax
   10003:	8b 45 08             	mov    0x8(%ebp),%eax

    # mov 4(%esp), %eax
    # kernel_init(boot_info)
    push %eax
   10006:	50                   	push   %eax
    call kernel_init
   10007:	e8 36 40 00 00       	call   14042 <kernel_init>
    jmp $KERNEL_SELECTOR_CS, $gdt_reload # 重新加载GDT
   1000c:	ea 13 00 01 00 08 00 	ljmp   $0x8,$0x10013

00010013 <gdt_reload>:
gdt_reload:
    mov $KERNEL_SELECTOR_DS, %ax
   10013:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10017:	8e d8                	mov    %eax,%ds
	mov %ax, %ss
   10019:	8e d0                	mov    %eax,%ss
	mov %ax, %es
   1001b:	8e c0                	mov    %eax,%es
	mov %ax, %fs
   1001d:	8e e0                	mov    %eax,%fs
	mov %ax, %gs
   1001f:	8e e8                	mov    %eax,%gs

    ; mov $stack, %eax
   10021:	b8 00 70 01 00       	mov    $0x17000,%eax
    ; mov $KERNEL_STACK_SIZE, %ebx
   10026:	bb 00 20 00 00       	mov    $0x2000,%ebx

    mov $(stack + KERNEL_STACK_SIZE), %esp
   1002b:	bc 00 90 01 00       	mov    $0x19000,%esp
    jmp init_main
   10030:	e9 ab 40 00 00       	jmp    140e0 <init_main>

00010035 <exception_handler_unknown>:
    add $(2*4), %esp

    iret
.endm

exception_handler unknown, -1, 0
   10035:	6a 00                	push   $0x0
   10037:	6a ff                	push   $0xffffffff
   10039:	60                   	pusha  
   1003a:	1e                   	push   %ds
   1003b:	06                   	push   %es
   1003c:	0f a0                	push   %fs
   1003e:	0f a8                	push   %gs
   10040:	54                   	push   %esp
   10041:	e8 4b 25 00 00       	call   12591 <do_handler_unknown>
   10046:	83 c4 04             	add    $0x4,%esp
   10049:	0f a9                	pop    %gs
   1004b:	0f a1                	pop    %fs
   1004d:	07                   	pop    %es
   1004e:	1f                   	pop    %ds
   1004f:	61                   	popa   
   10050:	83 c4 08             	add    $0x8,%esp
   10053:	cf                   	iret   

00010054 <exception_handler_divider>:
exception_handler divider, 0, 0
   10054:	6a 00                	push   $0x0
   10056:	6a 00                	push   $0x0
   10058:	60                   	pusha  
   10059:	1e                   	push   %ds
   1005a:	06                   	push   %es
   1005b:	0f a0                	push   %fs
   1005d:	0f a8                	push   %gs
   1005f:	54                   	push   %esp
   10060:	e8 48 25 00 00       	call   125ad <do_handler_divider>
   10065:	83 c4 04             	add    $0x4,%esp
   10068:	0f a9                	pop    %gs
   1006a:	0f a1                	pop    %fs
   1006c:	07                   	pop    %es
   1006d:	1f                   	pop    %ds
   1006e:	61                   	popa   
   1006f:	83 c4 08             	add    $0x8,%esp
   10072:	cf                   	iret   

00010073 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10073:	6a 00                	push   $0x0
   10075:	6a 01                	push   $0x1
   10077:	60                   	pusha  
   10078:	1e                   	push   %ds
   10079:	06                   	push   %es
   1007a:	0f a0                	push   %fs
   1007c:	0f a8                	push   %gs
   1007e:	54                   	push   %esp
   1007f:	e8 45 25 00 00       	call   125c9 <do_handler_Debug>
   10084:	83 c4 04             	add    $0x4,%esp
   10087:	0f a9                	pop    %gs
   10089:	0f a1                	pop    %fs
   1008b:	07                   	pop    %es
   1008c:	1f                   	pop    %ds
   1008d:	61                   	popa   
   1008e:	83 c4 08             	add    $0x8,%esp
   10091:	cf                   	iret   

00010092 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10092:	6a 00                	push   $0x0
   10094:	6a 02                	push   $0x2
   10096:	60                   	pusha  
   10097:	1e                   	push   %ds
   10098:	06                   	push   %es
   10099:	0f a0                	push   %fs
   1009b:	0f a8                	push   %gs
   1009d:	54                   	push   %esp
   1009e:	e8 42 25 00 00       	call   125e5 <do_handler_NMI>
   100a3:	83 c4 04             	add    $0x4,%esp
   100a6:	0f a9                	pop    %gs
   100a8:	0f a1                	pop    %fs
   100aa:	07                   	pop    %es
   100ab:	1f                   	pop    %ds
   100ac:	61                   	popa   
   100ad:	83 c4 08             	add    $0x8,%esp
   100b0:	cf                   	iret   

000100b1 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100b1:	6a 00                	push   $0x0
   100b3:	6a 03                	push   $0x3
   100b5:	60                   	pusha  
   100b6:	1e                   	push   %ds
   100b7:	06                   	push   %es
   100b8:	0f a0                	push   %fs
   100ba:	0f a8                	push   %gs
   100bc:	54                   	push   %esp
   100bd:	e8 3f 25 00 00       	call   12601 <do_handler_breakpoint>
   100c2:	83 c4 04             	add    $0x4,%esp
   100c5:	0f a9                	pop    %gs
   100c7:	0f a1                	pop    %fs
   100c9:	07                   	pop    %es
   100ca:	1f                   	pop    %ds
   100cb:	61                   	popa   
   100cc:	83 c4 08             	add    $0x8,%esp
   100cf:	cf                   	iret   

000100d0 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100d0:	6a 00                	push   $0x0
   100d2:	6a 04                	push   $0x4
   100d4:	60                   	pusha  
   100d5:	1e                   	push   %ds
   100d6:	06                   	push   %es
   100d7:	0f a0                	push   %fs
   100d9:	0f a8                	push   %gs
   100db:	54                   	push   %esp
   100dc:	e8 3c 25 00 00       	call   1261d <do_handler_overflow>
   100e1:	83 c4 04             	add    $0x4,%esp
   100e4:	0f a9                	pop    %gs
   100e6:	0f a1                	pop    %fs
   100e8:	07                   	pop    %es
   100e9:	1f                   	pop    %ds
   100ea:	61                   	popa   
   100eb:	83 c4 08             	add    $0x8,%esp
   100ee:	cf                   	iret   

000100ef <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100ef:	6a 00                	push   $0x0
   100f1:	6a 05                	push   $0x5
   100f3:	60                   	pusha  
   100f4:	1e                   	push   %ds
   100f5:	06                   	push   %es
   100f6:	0f a0                	push   %fs
   100f8:	0f a8                	push   %gs
   100fa:	54                   	push   %esp
   100fb:	e8 39 25 00 00       	call   12639 <do_handler_bound_range>
   10100:	83 c4 04             	add    $0x4,%esp
   10103:	0f a9                	pop    %gs
   10105:	0f a1                	pop    %fs
   10107:	07                   	pop    %es
   10108:	1f                   	pop    %ds
   10109:	61                   	popa   
   1010a:	83 c4 08             	add    $0x8,%esp
   1010d:	cf                   	iret   

0001010e <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   1010e:	6a 00                	push   $0x0
   10110:	6a 06                	push   $0x6
   10112:	60                   	pusha  
   10113:	1e                   	push   %ds
   10114:	06                   	push   %es
   10115:	0f a0                	push   %fs
   10117:	0f a8                	push   %gs
   10119:	54                   	push   %esp
   1011a:	e8 36 25 00 00       	call   12655 <do_handler_invalid_opcode>
   1011f:	83 c4 04             	add    $0x4,%esp
   10122:	0f a9                	pop    %gs
   10124:	0f a1                	pop    %fs
   10126:	07                   	pop    %es
   10127:	1f                   	pop    %ds
   10128:	61                   	popa   
   10129:	83 c4 08             	add    $0x8,%esp
   1012c:	cf                   	iret   

0001012d <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   1012d:	6a 00                	push   $0x0
   1012f:	6a 07                	push   $0x7
   10131:	60                   	pusha  
   10132:	1e                   	push   %ds
   10133:	06                   	push   %es
   10134:	0f a0                	push   %fs
   10136:	0f a8                	push   %gs
   10138:	54                   	push   %esp
   10139:	e8 33 25 00 00       	call   12671 <do_handler_device_unavailable>
   1013e:	83 c4 04             	add    $0x4,%esp
   10141:	0f a9                	pop    %gs
   10143:	0f a1                	pop    %fs
   10145:	07                   	pop    %es
   10146:	1f                   	pop    %ds
   10147:	61                   	popa   
   10148:	83 c4 08             	add    $0x8,%esp
   1014b:	cf                   	iret   

0001014c <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1014c:	6a 08                	push   $0x8
   1014e:	60                   	pusha  
   1014f:	1e                   	push   %ds
   10150:	06                   	push   %es
   10151:	0f a0                	push   %fs
   10153:	0f a8                	push   %gs
   10155:	54                   	push   %esp
   10156:	e8 32 25 00 00       	call   1268d <do_handler_double_fault>
   1015b:	83 c4 04             	add    $0x4,%esp
   1015e:	0f a9                	pop    %gs
   10160:	0f a1                	pop    %fs
   10162:	07                   	pop    %es
   10163:	1f                   	pop    %ds
   10164:	61                   	popa   
   10165:	83 c4 08             	add    $0x8,%esp
   10168:	cf                   	iret   

00010169 <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   10169:	6a 0a                	push   $0xa
   1016b:	60                   	pusha  
   1016c:	1e                   	push   %ds
   1016d:	06                   	push   %es
   1016e:	0f a0                	push   %fs
   10170:	0f a8                	push   %gs
   10172:	54                   	push   %esp
   10173:	e8 31 25 00 00       	call   126a9 <do_handler_invalid_tss>
   10178:	83 c4 04             	add    $0x4,%esp
   1017b:	0f a9                	pop    %gs
   1017d:	0f a1                	pop    %fs
   1017f:	07                   	pop    %es
   10180:	1f                   	pop    %ds
   10181:	61                   	popa   
   10182:	83 c4 08             	add    $0x8,%esp
   10185:	cf                   	iret   

00010186 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10186:	6a 0b                	push   $0xb
   10188:	60                   	pusha  
   10189:	1e                   	push   %ds
   1018a:	06                   	push   %es
   1018b:	0f a0                	push   %fs
   1018d:	0f a8                	push   %gs
   1018f:	54                   	push   %esp
   10190:	e8 30 25 00 00       	call   126c5 <do_handler_segment_not_present>
   10195:	83 c4 04             	add    $0x4,%esp
   10198:	0f a9                	pop    %gs
   1019a:	0f a1                	pop    %fs
   1019c:	07                   	pop    %es
   1019d:	1f                   	pop    %ds
   1019e:	61                   	popa   
   1019f:	83 c4 08             	add    $0x8,%esp
   101a2:	cf                   	iret   

000101a3 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   101a3:	6a 0c                	push   $0xc
   101a5:	60                   	pusha  
   101a6:	1e                   	push   %ds
   101a7:	06                   	push   %es
   101a8:	0f a0                	push   %fs
   101aa:	0f a8                	push   %gs
   101ac:	54                   	push   %esp
   101ad:	e8 2f 25 00 00       	call   126e1 <do_handler_stack_segment_fault>
   101b2:	83 c4 04             	add    $0x4,%esp
   101b5:	0f a9                	pop    %gs
   101b7:	0f a1                	pop    %fs
   101b9:	07                   	pop    %es
   101ba:	1f                   	pop    %ds
   101bb:	61                   	popa   
   101bc:	83 c4 08             	add    $0x8,%esp
   101bf:	cf                   	iret   

000101c0 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101c0:	6a 0d                	push   $0xd
   101c2:	60                   	pusha  
   101c3:	1e                   	push   %ds
   101c4:	06                   	push   %es
   101c5:	0f a0                	push   %fs
   101c7:	0f a8                	push   %gs
   101c9:	54                   	push   %esp
   101ca:	e8 ba 25 00 00       	call   12789 <do_handler_general_protection>
   101cf:	83 c4 04             	add    $0x4,%esp
   101d2:	0f a9                	pop    %gs
   101d4:	0f a1                	pop    %fs
   101d6:	07                   	pop    %es
   101d7:	1f                   	pop    %ds
   101d8:	61                   	popa   
   101d9:	83 c4 08             	add    $0x8,%esp
   101dc:	cf                   	iret   

000101dd <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101dd:	6a 0e                	push   $0xe
   101df:	60                   	pusha  
   101e0:	1e                   	push   %ds
   101e1:	06                   	push   %es
   101e2:	0f a0                	push   %fs
   101e4:	0f a8                	push   %gs
   101e6:	54                   	push   %esp
   101e7:	e8 52 26 00 00       	call   1283e <do_handler_page_fault>
   101ec:	83 c4 04             	add    $0x4,%esp
   101ef:	0f a9                	pop    %gs
   101f1:	0f a1                	pop    %fs
   101f3:	07                   	pop    %es
   101f4:	1f                   	pop    %ds
   101f5:	61                   	popa   
   101f6:	83 c4 08             	add    $0x8,%esp
   101f9:	cf                   	iret   

000101fa <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101fa:	6a 00                	push   $0x0
   101fc:	6a 10                	push   $0x10
   101fe:	60                   	pusha  
   101ff:	1e                   	push   %ds
   10200:	06                   	push   %es
   10201:	0f a0                	push   %fs
   10203:	0f a8                	push   %gs
   10205:	54                   	push   %esp
   10206:	e8 f2 24 00 00       	call   126fd <do_handler_fpu_error>
   1020b:	83 c4 04             	add    $0x4,%esp
   1020e:	0f a9                	pop    %gs
   10210:	0f a1                	pop    %fs
   10212:	07                   	pop    %es
   10213:	1f                   	pop    %ds
   10214:	61                   	popa   
   10215:	83 c4 08             	add    $0x8,%esp
   10218:	cf                   	iret   

00010219 <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   10219:	6a 11                	push   $0x11
   1021b:	60                   	pusha  
   1021c:	1e                   	push   %ds
   1021d:	06                   	push   %es
   1021e:	0f a0                	push   %fs
   10220:	0f a8                	push   %gs
   10222:	54                   	push   %esp
   10223:	e8 f1 24 00 00       	call   12719 <do_handler_alignment_check>
   10228:	83 c4 04             	add    $0x4,%esp
   1022b:	0f a9                	pop    %gs
   1022d:	0f a1                	pop    %fs
   1022f:	07                   	pop    %es
   10230:	1f                   	pop    %ds
   10231:	61                   	popa   
   10232:	83 c4 08             	add    $0x8,%esp
   10235:	cf                   	iret   

00010236 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10236:	6a 00                	push   $0x0
   10238:	6a 12                	push   $0x12
   1023a:	60                   	pusha  
   1023b:	1e                   	push   %ds
   1023c:	06                   	push   %es
   1023d:	0f a0                	push   %fs
   1023f:	0f a8                	push   %gs
   10241:	54                   	push   %esp
   10242:	e8 ee 24 00 00       	call   12735 <do_handler_machine_check>
   10247:	83 c4 04             	add    $0x4,%esp
   1024a:	0f a9                	pop    %gs
   1024c:	0f a1                	pop    %fs
   1024e:	07                   	pop    %es
   1024f:	1f                   	pop    %ds
   10250:	61                   	popa   
   10251:	83 c4 08             	add    $0x8,%esp
   10254:	cf                   	iret   

00010255 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10255:	6a 00                	push   $0x0
   10257:	6a 13                	push   $0x13
   10259:	60                   	pusha  
   1025a:	1e                   	push   %ds
   1025b:	06                   	push   %es
   1025c:	0f a0                	push   %fs
   1025e:	0f a8                	push   %gs
   10260:	54                   	push   %esp
   10261:	e8 eb 24 00 00       	call   12751 <do_handler_smd_exception>
   10266:	83 c4 04             	add    $0x4,%esp
   10269:	0f a9                	pop    %gs
   1026b:	0f a1                	pop    %fs
   1026d:	07                   	pop    %es
   1026e:	1f                   	pop    %ds
   1026f:	61                   	popa   
   10270:	83 c4 08             	add    $0x8,%esp
   10273:	cf                   	iret   

00010274 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10274:	6a 00                	push   $0x0
   10276:	6a 14                	push   $0x14
   10278:	60                   	pusha  
   10279:	1e                   	push   %ds
   1027a:	06                   	push   %es
   1027b:	0f a0                	push   %fs
   1027d:	0f a8                	push   %gs
   1027f:	54                   	push   %esp
   10280:	e8 e8 24 00 00       	call   1276d <do_handler_virtual_exception>
   10285:	83 c4 04             	add    $0x4,%esp
   10288:	0f a9                	pop    %gs
   1028a:	0f a1                	pop    %fs
   1028c:	07                   	pop    %es
   1028d:	1f                   	pop    %ds
   1028e:	61                   	popa   
   1028f:	83 c4 08             	add    $0x8,%esp
   10292:	cf                   	iret   

00010293 <exception_handler_timer>:

# 硬件中断
exception_handler timer, 0x20, 0
   10293:	6a 00                	push   $0x0
   10295:	6a 20                	push   $0x20
   10297:	60                   	pusha  
   10298:	1e                   	push   %ds
   10299:	06                   	push   %es
   1029a:	0f a0                	push   %fs
   1029c:	0f a8                	push   %gs
   1029e:	54                   	push   %esp
   1029f:	e8 f4 3a 00 00       	call   13d98 <do_handler_timer>
   102a4:	83 c4 04             	add    $0x4,%esp
   102a7:	0f a9                	pop    %gs
   102a9:	0f a1                	pop    %fs
   102ab:	07                   	pop    %es
   102ac:	1f                   	pop    %ds
   102ad:	61                   	popa   
   102ae:	83 c4 08             	add    $0x8,%esp
   102b1:	cf                   	iret   

000102b2 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102b2:	6a 00                	push   $0x0
   102b4:	6a 21                	push   $0x21
   102b6:	60                   	pusha  
   102b7:	1e                   	push   %ds
   102b8:	06                   	push   %es
   102b9:	0f a0                	push   %fs
   102bb:	0f a8                	push   %gs
   102bd:	54                   	push   %esp
   102be:	e8 54 39 00 00       	call   13c17 <do_handler_kbd>
   102c3:	83 c4 04             	add    $0x4,%esp
   102c6:	0f a9                	pop    %gs
   102c8:	0f a1                	pop    %fs
   102ca:	07                   	pop    %es
   102cb:	1f                   	pop    %ds
   102cc:	61                   	popa   
   102cd:	83 c4 08             	add    $0x8,%esp
   102d0:	cf                   	iret   

000102d1 <simple_switch>:
// esp不用保存，只需要让esp保存在调用之前的状态
// eflags ?
    .text
    .global simple_switch
simple_switch:
    movl 4(%esp), %eax   // 取from->stack
   102d1:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   // 取to->stack
   102d5:	8b 54 24 08          	mov    0x8(%esp),%edx

	// 保存前一任务的状态
	push %ebp
   102d9:	55                   	push   %ebp
	push %ebx
   102da:	53                   	push   %ebx
	push %esi
   102db:	56                   	push   %esi
	push %edi
   102dc:	57                   	push   %edi

	// 切换栈
	mov %esp, (%eax)    // from->stack = esp
   102dd:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp      // esp = to->stack
   102df:	89 d4                	mov    %edx,%esp

	// 加载下一任务的栈
	pop %edi
   102e1:	5f                   	pop    %edi
	pop %esi
   102e2:	5e                   	pop    %esi
	pop %ebx
   102e3:	5b                   	pop    %ebx
	pop %ebp
   102e4:	5d                   	pop    %ebp
  	ret
   102e5:	c3                   	ret    

000102e6 <exception_handler_syscall>:

    .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
    # 保存前一任务的状态
	pusha
   102e6:	60                   	pusha  
	push %ds
   102e7:	1e                   	push   %ds
	push %es
   102e8:	06                   	push   %es
	push %fs
   102e9:	0f a0                	push   %fs
	push %gs
   102eb:	0f a8                	push   %gs
	pushf
   102ed:	9c                   	pushf  

    # 使用内核段寄存器，避免使用应用层的
	mov $(KERNEL_SELECTOR_DS), %eax
   102ee:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   102f3:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   102f5:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   102f7:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   102f9:	8e e8                	mov    %eax,%gs

    # 调用处理函数
    mov %esp, %eax
   102fb:	89 e0                	mov    %esp,%eax
    push %eax
   102fd:	50                   	push   %eax
	call do_handler_syscall
   102fe:	e8 f7 0b 00 00       	call   10efa <do_handler_syscall>
	add $4, %esp
   10303:	83 c4 04             	add    $0x4,%esp

    # 再切换回来
	popf
   10306:	9d                   	popf   
	pop %gs
   10307:	0f a9                	pop    %gs
	pop %fs
   10309:	0f a1                	pop    %fs
	pop %es
   1030b:	07                   	pop    %es
	pop %ds
   1030c:	1f                   	pop    %ds
	popa
   1030d:	61                   	popa   
   1030e:	ca 14 00             	lret   $0x14

00010311 <up2>:
#include "comm/types.h"
#include <stdarg.h>

// 向上对齐到页边界
static inline uint32_t up2(uint32_t size, uint32_t bound)
{
   10311:	55                   	push   %ebp
   10312:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10314:	8b 55 08             	mov    0x8(%ebp),%edx
   10317:	8b 45 0c             	mov    0xc(%ebp),%eax
   1031a:	01 d0                	add    %edx,%eax
   1031c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1031f:	8b 45 0c             	mov    0xc(%ebp),%eax
   10322:	f7 d8                	neg    %eax
   10324:	21 d0                	and    %edx,%eax
}
   10326:	5d                   	pop    %ebp
   10327:	c3                   	ret    

00010328 <down2>:
// size = 0x1010 bound = 0x1000
// bound - 1 = 0x0FFF
// ~(bound-1) = 0xFFFF1000
// size & ~(bound-1) =  0x1010 & 0xFFFF1000 = 0x1000
static inline uint32_t down2(uint32_t size, uint32_t bound)
{
   10328:	55                   	push   %ebp
   10329:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1032b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032e:	f7 d8                	neg    %eax
   10330:	23 45 08             	and    0x8(%ebp),%eax
}
   10333:	5d                   	pop    %ebp
   10334:	c3                   	ret    

00010335 <write_cr3>:
    __asm__ __volatile__("mov %%cr3, %[v]" : [v] "=r"(cr3));
    return cr3;
}

static inline void write_cr3(uint32_t v)
{
   10335:	55                   	push   %ebp
   10336:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10338:	8b 45 08             	mov    0x8(%ebp),%eax
   1033b:	0f 22 d8             	mov    %eax,%cr3
}
   1033e:	90                   	nop
   1033f:	5d                   	pop    %ebp
   10340:	c3                   	ret    

00010341 <pde_index>:

/**
 * @brief 返回vaddr在页目录中的索引
 */
static inline uint32_t pde_index(uint32_t vaddr)
{
   10341:	55                   	push   %ebp
   10342:	89 e5                	mov    %esp,%ebp
   10344:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); // 只取高10位
   10347:	8b 45 08             	mov    0x8(%ebp),%eax
   1034a:	c1 e8 16             	shr    $0x16,%eax
   1034d:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10350:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10353:	c9                   	leave  
   10354:	c3                   	ret    

00010355 <pde_paddr>:

/**
 * @brief 获取pde中地址
 */
static inline uint32_t pde_paddr(pde_t *pde)
{
   10355:	55                   	push   %ebp
   10356:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   10358:	8b 45 08             	mov    0x8(%ebp),%eax
   1035b:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   1035f:	c0 ea 04             	shr    $0x4,%dl
   10362:	0f b6 d2             	movzbl %dl,%edx
   10365:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   10369:	c1 e1 04             	shl    $0x4,%ecx
   1036c:	09 ca                	or     %ecx,%edx
   1036e:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10372:	c1 e0 0c             	shl    $0xc,%eax
   10375:	09 d0                	or     %edx,%eax
   10377:	c1 e0 0c             	shl    $0xc,%eax
}
   1037a:	5d                   	pop    %ebp
   1037b:	c3                   	ret    

0001037c <pte_index>:

/**
 * @brief 返回vaddr在页表中的索引
 */
static inline int pte_index(uint32_t vaddr)
{
   1037c:	55                   	push   %ebp
   1037d:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF; // 取中间10位
   1037f:	8b 45 08             	mov    0x8(%ebp),%eax
   10382:	c1 e8 0c             	shr    $0xc,%eax
   10385:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1038a:	5d                   	pop    %ebp
   1038b:	c3                   	ret    

0001038c <pte_paddr>:

/**
 * @brief 获取pte中的物理地址
 */
static inline uint32_t pte_paddr(pte_t *pte)
{
   1038c:	55                   	push   %ebp
   1038d:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   1038f:	8b 45 08             	mov    0x8(%ebp),%eax
   10392:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10396:	c0 ea 04             	shr    $0x4,%dl
   10399:	0f b6 d2             	movzbl %dl,%edx
   1039c:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103a0:	c1 e1 04             	shl    $0x4,%ecx
   103a3:	09 ca                	or     %ecx,%edx
   103a5:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103a9:	c1 e0 0c             	shl    $0xc,%eax
   103ac:	09 d0                	or     %edx,%eax
   103ae:	c1 e0 0c             	shl    $0xc,%eax
}
   103b1:	5d                   	pop    %ebp
   103b2:	c3                   	ret    

000103b3 <get_pte_perm>:

/**
 * @brief 获取pte中的权限位
 */
static inline uint32_t get_pte_perm(pte_t *pte)
{
   103b3:	55                   	push   %ebp
   103b4:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);
   103b6:	8b 45 08             	mov    0x8(%ebp),%eax
   103b9:	8b 00                	mov    (%eax),%eax
   103bb:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103c0:	5d                   	pop    %ebp
   103c1:	c3                   	ret    

000103c2 <mmu_set_page_dir>:
/**
 * @brief 重新加载整个页表至cr3高20位寄存器
 * @param vaddr 页表的虚拟地址
 */
static inline void mmu_set_page_dir(uint32_t paddr)
{
   103c2:	55                   	push   %ebp
   103c3:	89 e5                	mov    %esp,%ebp
    // 将虚拟地址转换为物理地址
    write_cr3(paddr);
   103c5:	ff 75 08             	pushl  0x8(%ebp)
   103c8:	e8 68 ff ff ff       	call   10335 <write_cr3>
   103cd:	83 c4 04             	add    $0x4,%esp
}
   103d0:	90                   	nop
   103d1:	c9                   	leave  
   103d2:	c3                   	ret    

000103d3 <current_page_dir>:

/**
 * @brief 获取当前页表地址
 */
static pde_t *current_page_dir(void)
{
   103d3:	55                   	push   %ebp
   103d4:	89 e5                	mov    %esp,%ebp
   103d6:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103d9:	e8 71 11 00 00       	call   1154f <task_current>
   103de:	8b 40 74             	mov    0x74(%eax),%eax
}
   103e1:	c9                   	leave  
   103e2:	c3                   	ret    

000103e3 <addr_alloc_init>:
 * @brief 初始化地址分配结构
 * 以下不检查start和size的页边界，由上层调用者检查
 */
static void addr_alloc_init(addr_alloc_t *alloc, uint8_t *bits,
                            uint32_t start, uint32_t size, uint32_t page_size)
{
   103e3:	55                   	push   %ebp
   103e4:	89 e5                	mov    %esp,%ebp
   103e6:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103e9:	8b 45 08             	mov    0x8(%ebp),%eax
   103ec:	83 ec 0c             	sub    $0xc,%esp
   103ef:	50                   	push   %eax
   103f0:	e8 4c 3d 00 00       	call   14141 <mutex_init>
   103f5:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   103f8:	8b 45 08             	mov    0x8(%ebp),%eax
   103fb:	8b 55 10             	mov    0x10(%ebp),%edx
   103fe:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10401:	8b 45 08             	mov    0x8(%ebp),%eax
   10404:	8b 55 14             	mov    0x14(%ebp),%edx
   10407:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1040a:	8b 45 08             	mov    0x8(%ebp),%eax
   1040d:	8b 55 18             	mov    0x18(%ebp),%edx
   10410:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10413:	8b 45 08             	mov    0x8(%ebp),%eax
   10416:	8b 40 24             	mov    0x24(%eax),%eax
   10419:	ba 00 00 00 00       	mov    $0x0,%edx
   1041e:	f7 75 18             	divl   0x18(%ebp)
   10421:	89 c2                	mov    %eax,%edx
   10423:	8b 45 08             	mov    0x8(%ebp),%eax
   10426:	83 c0 14             	add    $0x14,%eax
   10429:	6a 00                	push   $0x0
   1042b:	52                   	push   %edx
   1042c:	ff 75 0c             	pushl  0xc(%ebp)
   1042f:	50                   	push   %eax
   10430:	e8 e5 3f 00 00       	call   1441a <bitmap_init>
   10435:	83 c4 10             	add    $0x10,%esp
}
   10438:	90                   	nop
   10439:	c9                   	leave  
   1043a:	c3                   	ret    

0001043b <addr_alloc_page>:

/**
 * @brief 分配多页内存
 */
static uint32_t addr_alloc_page(addr_alloc_t *alloc, int page_count)
{
   1043b:	55                   	push   %ebp
   1043c:	89 e5                	mov    %esp,%ebp
   1043e:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10441:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   10448:	8b 45 08             	mov    0x8(%ebp),%eax
   1044b:	83 ec 0c             	sub    $0xc,%esp
   1044e:	50                   	push   %eax
   1044f:	e8 1b 3d 00 00       	call   1416f <mutex_lock>
   10454:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   10457:	8b 45 08             	mov    0x8(%ebp),%eax
   1045a:	83 c0 14             	add    $0x14,%eax
   1045d:	83 ec 04             	sub    $0x4,%esp
   10460:	ff 75 0c             	pushl  0xc(%ebp)
   10463:	6a 00                	push   $0x0
   10465:	50                   	push   %eax
   10466:	e8 2b 41 00 00       	call   14596 <bitmap_alloc_nbits>
   1046b:	83 c4 10             	add    $0x10,%esp
   1046e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0)
   10471:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10475:	78 17                	js     1048e <addr_alloc_page+0x53>
    {
        addr = alloc->start + page_index * alloc->page_size;
   10477:	8b 45 08             	mov    0x8(%ebp),%eax
   1047a:	8b 50 20             	mov    0x20(%eax),%edx
   1047d:	8b 45 08             	mov    0x8(%ebp),%eax
   10480:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10483:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10486:	0f af c1             	imul   %ecx,%eax
   10489:	01 d0                	add    %edx,%eax
   1048b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   1048e:	8b 45 08             	mov    0x8(%ebp),%eax
   10491:	83 ec 0c             	sub    $0xc,%esp
   10494:	50                   	push   %eax
   10495:	e8 69 3d 00 00       	call   14203 <mutex_unlock>
   1049a:	83 c4 10             	add    $0x10,%esp
    return addr;
   1049d:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104a0:	c9                   	leave  
   104a1:	c3                   	ret    

000104a2 <addr_free_page>:

/**
 * @brief 释放多页内存
 */
static void addr_free_page(addr_alloc_t *alloc, uint32_t addr, int page_count)
{
   104a2:	55                   	push   %ebp
   104a3:	89 e5                	mov    %esp,%ebp
   104a5:	53                   	push   %ebx
   104a6:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104a9:	8b 45 08             	mov    0x8(%ebp),%eax
   104ac:	83 ec 0c             	sub    $0xc,%esp
   104af:	50                   	push   %eax
   104b0:	e8 ba 3c 00 00       	call   1416f <mutex_lock>
   104b5:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104b8:	8b 45 08             	mov    0x8(%ebp),%eax
   104bb:	8b 40 20             	mov    0x20(%eax),%eax
   104be:	8b 55 0c             	mov    0xc(%ebp),%edx
   104c1:	89 d1                	mov    %edx,%ecx
   104c3:	29 c1                	sub    %eax,%ecx
   104c5:	8b 45 08             	mov    0x8(%ebp),%eax
   104c8:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104cb:	89 c8                	mov    %ecx,%eax
   104cd:	ba 00 00 00 00       	mov    $0x0,%edx
   104d2:	f7 f3                	div    %ebx
   104d4:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104d7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104da:	8b 55 08             	mov    0x8(%ebp),%edx
   104dd:	83 c2 14             	add    $0x14,%edx
   104e0:	6a 00                	push   $0x0
   104e2:	ff 75 10             	pushl  0x10(%ebp)
   104e5:	50                   	push   %eax
   104e6:	52                   	push   %edx
   104e7:	e8 81 3f 00 00       	call   1446d <bitmap_set_bit>
   104ec:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   104ef:	8b 45 08             	mov    0x8(%ebp),%eax
   104f2:	83 ec 0c             	sub    $0xc,%esp
   104f5:	50                   	push   %eax
   104f6:	e8 08 3d 00 00       	call   14203 <mutex_unlock>
   104fb:	83 c4 10             	add    $0x10,%esp
}
   104fe:	90                   	nop
   104ff:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10502:	c9                   	leave  
   10503:	c3                   	ret    

00010504 <show_mem_info>:

static void show_mem_info(boot_info_t *boot_info)
{
   10504:	55                   	push   %ebp
   10505:	89 e5                	mov    %esp,%ebp
   10507:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1050a:	83 ec 0c             	sub    $0xc,%esp
   1050d:	68 a0 4e 01 00       	push   $0x14ea0
   10512:	e8 c8 48 00 00       	call   14ddf <log_printf>
   10517:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   1051a:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10521:	eb 29                	jmp    1054c <show_mem_info+0x48>
    {
        log_printf("[%d]: 0x%x - 0x%x", i,
   10523:	8b 45 08             	mov    0x8(%ebp),%eax
   10526:	8b 55 f4             	mov    -0xc(%ebp),%edx
   10529:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1052d:	8b 45 08             	mov    0x8(%ebp),%eax
   10530:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10533:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   10536:	52                   	push   %edx
   10537:	50                   	push   %eax
   10538:	ff 75 f4             	pushl  -0xc(%ebp)
   1053b:	68 ac 4e 01 00       	push   $0x14eac
   10540:	e8 9a 48 00 00       	call   14ddf <log_printf>
   10545:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10548:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1054c:	8b 45 08             	mov    0x8(%ebp),%eax
   1054f:	8b 40 50             	mov    0x50(%eax),%eax
   10552:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   10555:	7c cc                	jl     10523 <show_mem_info+0x1f>
                   boot_info->ram_region_cfg[i].start,
                   boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   10557:	83 ec 0c             	sub    $0xc,%esp
   1055a:	68 be 4e 01 00       	push   $0x14ebe
   1055f:	e8 7b 48 00 00       	call   14ddf <log_printf>
   10564:	83 c4 10             	add    $0x10,%esp
}
   10567:	90                   	nop
   10568:	c9                   	leave  
   10569:	c3                   	ret    

0001056a <total_mem_size>:

/**
 * @brief 获取可用的物理内存大小
 */
static uint32_t total_mem_size(boot_info_t *boot_info)
{
   1056a:	55                   	push   %ebp
   1056b:	89 e5                	mov    %esp,%ebp
   1056d:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10570:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    // 简单起见，暂不考虑中间有空洞的情况
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10577:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   1057e:	eb 16                	jmp    10596 <total_mem_size+0x2c>
    {
        mem_size += boot_info->ram_region_cfg[i].size;
   10580:	8b 45 08             	mov    0x8(%ebp),%eax
   10583:	8b 55 f8             	mov    -0x8(%ebp),%edx
   10586:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1058a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1058d:	01 d0                	add    %edx,%eax
   1058f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++)
   10592:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   10596:	8b 45 08             	mov    0x8(%ebp),%eax
   10599:	8b 40 50             	mov    0x50(%eax),%eax
   1059c:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1059f:	7c df                	jl     10580 <total_mem_size+0x16>
    }
    return mem_size;
   105a1:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105a4:	c9                   	leave  
   105a5:	c3                   	ret    

000105a6 <find_pte>:

pte_t *find_pte(pde_t *page_dir, uint32_t vaddr, int alloc)
{
   105a6:	55                   	push   %ebp
   105a7:	89 e5                	mov    %esp,%ebp
   105a9:	83 ec 18             	sub    $0x18,%esp
    pte_t *page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105ac:	ff 75 0c             	pushl  0xc(%ebp)
   105af:	e8 8d fd ff ff       	call   10341 <pde_index>
   105b4:	83 c4 04             	add    $0x4,%esp
   105b7:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105be:	8b 45 08             	mov    0x8(%ebp),%eax
   105c1:	01 d0                	add    %edx,%eax
   105c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present)
   105c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105c9:	0f b6 00             	movzbl (%eax),%eax
   105cc:	83 e0 01             	and    $0x1,%eax
   105cf:	84 c0                	test   %al,%al
   105d1:	74 10                	je     105e3 <find_pte+0x3d>
    {
        page_table = (pte_t *)pde_paddr(pde);
   105d3:	ff 75 f0             	pushl  -0x10(%ebp)
   105d6:	e8 7a fd ff ff       	call   10355 <pde_paddr>
   105db:	83 c4 04             	add    $0x4,%esp
   105de:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105e1:	eb 57                	jmp    1063a <find_pte+0x94>
    }
    else
    {
        // 如果不存在，则考虑分配一个
        if (alloc == 0)
   105e3:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105e7:	75 07                	jne    105f0 <find_pte+0x4a>
        {
            return (pte_t *)0;
   105e9:	b8 00 00 00 00       	mov    $0x0,%eax
   105ee:	eb 64                	jmp    10654 <find_pte+0xae>
        }

        // 分配一个物理页表
        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   105f0:	83 ec 08             	sub    $0x8,%esp
   105f3:	6a 01                	push   $0x1
   105f5:	68 00 90 01 00       	push   $0x19000
   105fa:	e8 3c fe ff ff       	call   1043b <addr_alloc_page>
   105ff:	83 c4 10             	add    $0x10,%esp
   10602:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0)
   10605:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   10609:	75 07                	jne    10612 <find_pte+0x6c>
        {
            return (pte_t *)0;
   1060b:	b8 00 00 00 00       	mov    $0x0,%eax
   10610:	eb 42                	jmp    10654 <find_pte+0xae>
        }

        // 设置为用户可读写，将被pte中设置所覆盖
        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10612:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10615:	83 c8 07             	or     $0x7,%eax
   10618:	89 c2                	mov    %eax,%edx
   1061a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1061d:	89 10                	mov    %edx,(%eax)
        // 为物理页表绑定虚拟地址的映射，这样下面就可以计算出虚拟地址了
        // kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        // 清空页表，防止出现异常
        // 这里虚拟地址和物理地址一一映射，所以直接写入
        page_table = (pte_t *)(pg_paddr);
   1061f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10622:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   10625:	83 ec 04             	sub    $0x4,%esp
   10628:	68 00 10 00 00       	push   $0x1000
   1062d:	6a 00                	push   $0x0
   1062f:	ff 75 f4             	pushl  -0xc(%ebp)
   10632:	e8 d8 41 00 00       	call   1480f <kernel_memset>
   10637:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1063a:	83 ec 0c             	sub    $0xc,%esp
   1063d:	ff 75 0c             	pushl  0xc(%ebp)
   10640:	e8 37 fd ff ff       	call   1037c <pte_index>
   10645:	83 c4 10             	add    $0x10,%esp
   10648:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1064f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10652:	01 d0                	add    %edx,%eax
}
   10654:	c9                   	leave  
   10655:	c3                   	ret    

00010656 <memory_create_map>:

/**
 * @brief 将指定的地址空间进行一页的映射
 */
int memory_create_map(pde_t *page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm)
{
   10656:	55                   	push   %ebp
   10657:	89 e5                	mov    %esp,%ebp
   10659:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++)
   1065c:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10663:	eb 6e                	jmp    106d3 <memory_create_map+0x7d>
    {
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t *pte = find_pte(page_dir, vaddr, 1);
   10665:	83 ec 04             	sub    $0x4,%esp
   10668:	6a 01                	push   $0x1
   1066a:	ff 75 0c             	pushl  0xc(%ebp)
   1066d:	ff 75 08             	pushl  0x8(%ebp)
   10670:	e8 31 ff ff ff       	call   105a6 <find_pte>
   10675:	83 c4 10             	add    $0x10,%esp
   10678:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0)
   1067b:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1067f:	75 07                	jne    10688 <memory_create_map+0x32>
        {
            // log_printf("create pte failed. pte == 0");
            return -1;
   10681:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10686:	eb 58                	jmp    106e0 <memory_create_map+0x8a>
        }

        // 创建映射的时候，这条pte应当是不存在的。
        // 如果存在，说明可能有问题
        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   10688:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1068b:	0f b6 00             	movzbl (%eax),%eax
   1068e:	83 e0 01             	and    $0x1,%eax
   10691:	84 c0                	test   %al,%al
   10693:	74 1c                	je     106b1 <memory_create_map+0x5b>
   10695:	68 c0 4e 01 00       	push   $0x14ec0
   1069a:	68 08 50 01 00       	push   $0x15008
   1069f:	68 97 00 00 00       	push   $0x97
   106a4:	68 d4 4e 01 00       	push   $0x14ed4
   106a9:	e8 8a 44 00 00       	call   14b38 <panic>
   106ae:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106b1:	8b 45 10             	mov    0x10(%ebp),%eax
   106b4:	0b 45 18             	or     0x18(%ebp),%eax
   106b7:	83 c8 01             	or     $0x1,%eax
   106ba:	89 c2                	mov    %eax,%edx
   106bc:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106bf:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106c1:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106c8:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++)
   106cf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106d3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106d6:	3b 45 14             	cmp    0x14(%ebp),%eax
   106d9:	7c 8a                	jl     10665 <memory_create_map+0xf>
    }

    return 0;
   106db:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106e0:	c9                   	leave  
   106e1:	c3                   	ret    

000106e2 <create_kernel_table>:

/**
 * @brief 根据内存映射表，构造内核页表
 */
void create_kernel_table(void)
{
   106e2:	55                   	push   %ebp
   106e3:	89 e5                	mov    %esp,%ebp
   106e5:	83 ec 28             	sub    $0x28,%esp
        // 1M以上空间扩展V\P一一映射，方便直接操作
        {(void *)MEM_EXT_START, (void *)MEM_EXT_END, (void *)MEM_EXT_START, PTE_W},
    };

    // 清空页目录表
    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106e8:	83 ec 04             	sub    $0x4,%esp
   106eb:	68 00 10 00 00       	push   $0x1000
   106f0:	6a 00                	push   $0x0
   106f2:	68 00 a0 01 00       	push   $0x1a000
   106f7:	e8 13 41 00 00       	call   1480f <kernel_memset>
   106fc:	83 c4 10             	add    $0x10,%esp

    // 清空后，然后依次根据映射关系创建映射表
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   106ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10706:	e9 83 00 00 00       	jmp    1078e <create_kernel_table+0xac>
    {
        memory_map_t *map = kernel_map + i;
   1070b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1070e:	c1 e0 04             	shl    $0x4,%eax
   10711:	05 00 60 01 00       	add    $0x16000,%eax
   10716:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 可能有多个页，建立多个页的配置
        // 简化起见，不考虑4M的情况
        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   10719:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1071c:	8b 00                	mov    (%eax),%eax
   1071e:	83 ec 08             	sub    $0x8,%esp
   10721:	68 00 10 00 00       	push   $0x1000
   10726:	50                   	push   %eax
   10727:	e8 fc fb ff ff       	call   10328 <down2>
   1072c:	83 c4 10             	add    $0x10,%esp
   1072f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10732:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10735:	8b 40 04             	mov    0x4(%eax),%eax
   10738:	83 ec 08             	sub    $0x8,%esp
   1073b:	68 00 10 00 00       	push   $0x1000
   10740:	50                   	push   %eax
   10741:	e8 cb fb ff ff       	call   10311 <up2>
   10746:	83 c4 10             	add    $0x10,%esp
   10749:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1074c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1074f:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10752:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   10758:	85 c0                	test   %eax,%eax
   1075a:	0f 48 c2             	cmovs  %edx,%eax
   1075d:	c1 f8 0c             	sar    $0xc,%eax
   10760:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10763:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10766:	8b 50 0c             	mov    0xc(%eax),%edx
   10769:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1076c:	8b 40 08             	mov    0x8(%eax),%eax
   1076f:	89 c1                	mov    %eax,%ecx
   10771:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10774:	83 ec 0c             	sub    $0xc,%esp
   10777:	52                   	push   %edx
   10778:	ff 75 e4             	pushl  -0x1c(%ebp)
   1077b:	51                   	push   %ecx
   1077c:	50                   	push   %eax
   1077d:	68 00 a0 01 00       	push   $0x1a000
   10782:	e8 cf fe ff ff       	call   10656 <memory_create_map>
   10787:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++)
   1078a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1078e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10791:	83 f8 04             	cmp    $0x4,%eax
   10794:	0f 86 71 ff ff ff    	jbe    1070b <create_kernel_table+0x29>
    }
}
   1079a:	90                   	nop
   1079b:	c9                   	leave  
   1079c:	c3                   	ret    

0001079d <memory_create_uvm>:
/**
 * @brief 创建进程的初始页表
 * 主要的工作创建页目录表，然后从内核页表中复制一部分
 */
uint32_t memory_create_uvm(void)
{
   1079d:	55                   	push   %ebp
   1079e:	89 e5                	mov    %esp,%ebp
   107a0:	83 ec 18             	sub    $0x18,%esp
    pde_t *page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107a3:	83 ec 08             	sub    $0x8,%esp
   107a6:	6a 01                	push   $0x1
   107a8:	68 00 90 01 00       	push   $0x19000
   107ad:	e8 89 fc ff ff       	call   1043b <addr_alloc_page>
   107b2:	83 c4 10             	add    $0x10,%esp
   107b5:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0)
   107b8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107bc:	75 07                	jne    107c5 <memory_create_uvm+0x28>
    {
        return 0;
   107be:	b8 00 00 00 00       	mov    $0x0,%eax
   107c3:	eb 5b                	jmp    10820 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107c5:	83 ec 04             	sub    $0x4,%esp
   107c8:	68 00 10 00 00       	push   $0x1000
   107cd:	6a 00                	push   $0x0
   107cf:	ff 75 f0             	pushl  -0x10(%ebp)
   107d2:	e8 38 40 00 00       	call   1480f <kernel_memset>
   107d7:	83 c4 10             	add    $0x10,%esp

    // 复制整个内核空间的页目录项，以便与其它进程共享内核空间
    // 用户空间的内存映射暂不处理，等加载程序时创建
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107da:	83 ec 0c             	sub    $0xc,%esp
   107dd:	68 00 00 00 80       	push   $0x80000000
   107e2:	e8 5a fb ff ff       	call   10341 <pde_index>
   107e7:	83 c4 10             	add    $0x10,%esp
   107ea:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++)
   107ed:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   107f4:	eb 1f                	jmp    10815 <memory_create_uvm+0x78>
    {
        page_dir[i].v = kernel_page_dir[i].v;
   107f6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107f9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10800:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10803:	01 c2                	add    %eax,%edx
   10805:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10808:	8b 04 85 00 a0 01 00 	mov    0x1a000(,%eax,4),%eax
   1080f:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++)
   10811:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10815:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10818:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1081b:	77 d9                	ja     107f6 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   1081d:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10820:	c9                   	leave  
   10821:	c3                   	ret    

00010822 <memory_destroy_uvm>:

/**
 * @brief 销毁用户空间内存
 */
void memory_destroy_uvm(uint32_t page_dir)
{
   10822:	55                   	push   %ebp
   10823:	89 e5                	mov    %esp,%ebp
   10825:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10828:	68 00 00 00 80       	push   $0x80000000
   1082d:	e8 0f fb ff ff       	call   10341 <pde_index>
   10832:	83 c4 04             	add    $0x4,%esp
   10835:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   10838:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1083b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10842:	8b 45 08             	mov    0x8(%ebp),%eax
   10845:	01 d0                	add    %edx,%eax
   10847:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1084a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1084e:	75 1c                	jne    1086c <memory_destroy_uvm+0x4a>
   10850:	68 10 4f 01 00       	push   $0x14f10
   10855:	68 1c 50 01 00       	push   $0x1501c
   1085a:	68 e7 00 00 00       	push   $0xe7
   1085f:	68 d4 4e 01 00       	push   $0x14ed4
   10864:	e8 cf 42 00 00       	call   14b38 <panic>
   10869:	83 c4 10             	add    $0x10,%esp

    // 释放页表中对应的各项，不包含映射的内核页面
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   1086c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1086f:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10872:	e9 95 00 00 00       	jmp    1090c <memory_destroy_uvm+0xea>
    {
        if (!pde->present)
   10877:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1087a:	0f b6 00             	movzbl (%eax),%eax
   1087d:	83 e0 01             	and    $0x1,%eax
   10880:	84 c0                	test   %al,%al
   10882:	74 7f                	je     10903 <memory_destroy_uvm+0xe1>
        {
            continue;
        }

        // 释放页表对应的物理页 + 页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   10884:	83 ec 0c             	sub    $0xc,%esp
   10887:	ff 75 f4             	pushl  -0xc(%ebp)
   1088a:	e8 c6 fa ff ff       	call   10355 <pde_paddr>
   1088f:	83 c4 10             	add    $0x10,%esp
   10892:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   10895:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   1089c:	eb 39                	jmp    108d7 <memory_destroy_uvm+0xb5>
        {
            if (!pte->present)
   1089e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108a1:	0f b6 00             	movzbl (%eax),%eax
   108a4:	83 e0 01             	and    $0x1,%eax
   108a7:	84 c0                	test   %al,%al
   108a9:	74 23                	je     108ce <memory_destroy_uvm+0xac>
            {
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108ab:	83 ec 0c             	sub    $0xc,%esp
   108ae:	ff 75 ec             	pushl  -0x14(%ebp)
   108b1:	e8 d6 fa ff ff       	call   1038c <pte_paddr>
   108b6:	83 c4 10             	add    $0x10,%esp
   108b9:	83 ec 04             	sub    $0x4,%esp
   108bc:	6a 01                	push   $0x1
   108be:	50                   	push   %eax
   108bf:	68 00 90 01 00       	push   $0x19000
   108c4:	e8 d9 fb ff ff       	call   104a2 <addr_free_page>
   108c9:	83 c4 10             	add    $0x10,%esp
   108cc:	eb 01                	jmp    108cf <memory_destroy_uvm+0xad>
                continue;
   108ce:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   108cf:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108d3:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108d7:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108de:	7e be                	jle    1089e <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108e0:	83 ec 0c             	sub    $0xc,%esp
   108e3:	ff 75 f4             	pushl  -0xc(%ebp)
   108e6:	e8 6a fa ff ff       	call   10355 <pde_paddr>
   108eb:	83 c4 10             	add    $0x10,%esp
   108ee:	83 ec 04             	sub    $0x4,%esp
   108f1:	6a 01                	push   $0x1
   108f3:	50                   	push   %eax
   108f4:	68 00 90 01 00       	push   $0x19000
   108f9:	e8 a4 fb ff ff       	call   104a2 <addr_free_page>
   108fe:	83 c4 10             	add    $0x10,%esp
   10901:	eb 01                	jmp    10904 <memory_destroy_uvm+0xe2>
            continue;
   10903:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10904:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10908:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   1090c:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10913:	0f 8e 5e ff ff ff    	jle    10877 <memory_destroy_uvm+0x55>
    }

    // 页目录表
    addr_free_page(&paddr_alloc, page_dir, 1);
   10919:	83 ec 04             	sub    $0x4,%esp
   1091c:	6a 01                	push   $0x1
   1091e:	ff 75 08             	pushl  0x8(%ebp)
   10921:	68 00 90 01 00       	push   $0x19000
   10926:	e8 77 fb ff ff       	call   104a2 <addr_free_page>
   1092b:	83 c4 10             	add    $0x10,%esp
}
   1092e:	90                   	nop
   1092f:	c9                   	leave  
   10930:	c3                   	ret    

00010931 <memory_copy_uvm>:

/**
 * @brief 复制页表及其所有的内存空间
 */
uint32_t memory_copy_uvm(uint32_t page_dir)
{
   10931:	55                   	push   %ebp
   10932:	89 e5                	mov    %esp,%ebp
   10934:	83 ec 38             	sub    $0x38,%esp
    // 复制基础页表
    uint32_t to_page_dir = memory_create_uvm();
   10937:	e8 61 fe ff ff       	call   1079d <memory_create_uvm>
   1093c:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0)
   1093f:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10943:	0f 84 1b 01 00 00    	je     10a64 <memory_copy_uvm+0x133>
    {
        goto copy_uvm_failed;
    }

    // 再复制用户空间的各项
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   10949:	83 ec 0c             	sub    $0xc,%esp
   1094c:	68 00 00 00 80       	push   $0x80000000
   10951:	e8 eb f9 ff ff       	call   10341 <pde_index>
   10956:	83 c4 10             	add    $0x10,%esp
   10959:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t *pde = (pde_t *)page_dir + user_pde_start;
   1095c:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1095f:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10966:	8b 45 08             	mov    0x8(%ebp),%eax
   10969:	01 d0                	add    %edx,%eax
   1096b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 遍历用户空间页目录项
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   1096e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10971:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10974:	e9 d9 00 00 00       	jmp    10a52 <memory_copy_uvm+0x121>
    {
        if (!pde->present)
   10979:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1097c:	0f b6 00             	movzbl (%eax),%eax
   1097f:	83 e0 01             	and    $0x1,%eax
   10982:	84 c0                	test   %al,%al
   10984:	0f 84 bf 00 00 00    	je     10a49 <memory_copy_uvm+0x118>
        {
            continue;
        }

        // 遍历页表
        pte_t *pte = (pte_t *)pde_paddr(pde);
   1098a:	83 ec 0c             	sub    $0xc,%esp
   1098d:	ff 75 f4             	pushl  -0xc(%ebp)
   10990:	e8 c0 f9 ff ff       	call   10355 <pde_paddr>
   10995:	83 c4 10             	add    $0x10,%esp
   10998:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++)
   1099b:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109a2:	e9 93 00 00 00       	jmp    10a3a <memory_copy_uvm+0x109>
        {
            if (!pte->present)
   109a7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109aa:	0f b6 00             	movzbl (%eax),%eax
   109ad:	83 e0 01             	and    $0x1,%eax
   109b0:	84 c0                	test   %al,%al
   109b2:	74 7d                	je     10a31 <memory_copy_uvm+0x100>
            {
                continue;
            }

            // 分配物理内存
            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109b4:	83 ec 08             	sub    $0x8,%esp
   109b7:	6a 01                	push   $0x1
   109b9:	68 00 90 01 00       	push   $0x19000
   109be:	e8 78 fa ff ff       	call   1043b <addr_alloc_page>
   109c3:	83 c4 10             	add    $0x10,%esp
   109c6:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0)
   109c9:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109cd:	0f 84 94 00 00 00    	je     10a67 <memory_copy_uvm+0x136>
            {
                goto copy_uvm_failed;
            }

            // 建立映射关系
            uint32_t vaddr = (i << 22) | (j << 12);
   109d3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109d6:	c1 e0 16             	shl    $0x16,%eax
   109d9:	89 c2                	mov    %eax,%edx
   109db:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109de:	c1 e0 0c             	shl    $0xc,%eax
   109e1:	09 d0                	or     %edx,%eax
   109e3:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109e6:	83 ec 0c             	sub    $0xc,%esp
   109e9:	ff 75 ec             	pushl  -0x14(%ebp)
   109ec:	e8 c2 f9 ff ff       	call   103b3 <get_pte_perm>
   109f1:	83 c4 10             	add    $0x10,%esp
   109f4:	89 c2                	mov    %eax,%edx
   109f6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   109f9:	83 ec 0c             	sub    $0xc,%esp
   109fc:	52                   	push   %edx
   109fd:	6a 01                	push   $0x1
   109ff:	ff 75 dc             	pushl  -0x24(%ebp)
   10a02:	ff 75 d8             	pushl  -0x28(%ebp)
   10a05:	50                   	push   %eax
   10a06:	e8 4b fc ff ff       	call   10656 <memory_create_map>
   10a0b:	83 c4 20             	add    $0x20,%esp
   10a0e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0)
   10a11:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a15:	78 53                	js     10a6a <memory_copy_uvm+0x139>
            {
                goto copy_uvm_failed;
            }

            // 复制内容。
            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a17:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a1a:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a1d:	83 ec 04             	sub    $0x4,%esp
   10a20:	68 00 10 00 00       	push   $0x1000
   10a25:	52                   	push   %edx
   10a26:	50                   	push   %eax
   10a27:	e8 94 3d 00 00       	call   147c0 <kernel_memcpy>
   10a2c:	83 c4 10             	add    $0x10,%esp
   10a2f:	eb 01                	jmp    10a32 <memory_copy_uvm+0x101>
                continue;
   10a31:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++)
   10a32:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a36:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a3a:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a41:	0f 8e 60 ff ff ff    	jle    109a7 <memory_copy_uvm+0x76>
   10a47:	eb 01                	jmp    10a4a <memory_copy_uvm+0x119>
            continue;
   10a49:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++)
   10a4a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a4e:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a52:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a59:	0f 8e 1a ff ff ff    	jle    10979 <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a5f:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a62:	eb 20                	jmp    10a84 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a64:	90                   	nop
   10a65:	eb 04                	jmp    10a6b <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a67:	90                   	nop
   10a68:	eb 01                	jmp    10a6b <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a6a:	90                   	nop

copy_uvm_failed:
    if (to_page_dir)
   10a6b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a6f:	74 0e                	je     10a7f <memory_copy_uvm+0x14e>
    {
        memory_destroy_uvm(to_page_dir);
   10a71:	83 ec 0c             	sub    $0xc,%esp
   10a74:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a77:	e8 a6 fd ff ff       	call   10822 <memory_destroy_uvm>
   10a7c:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a7f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a84:	c9                   	leave  
   10a85:	c3                   	ret    

00010a86 <memory_get_paddr>:
/**
 * @brief 获取指定虚拟地址的物理地址
 * 如果转换失败，返回0。
 */
uint32_t memory_get_paddr(uint32_t page_dir, uint32_t vaddr)
{
   10a86:	55                   	push   %ebp
   10a87:	89 e5                	mov    %esp,%ebp
   10a89:	83 ec 18             	sub    $0x18,%esp
    pte_t *pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10a8c:	8b 45 08             	mov    0x8(%ebp),%eax
   10a8f:	83 ec 04             	sub    $0x4,%esp
   10a92:	6a 00                	push   $0x0
   10a94:	ff 75 0c             	pushl  0xc(%ebp)
   10a97:	50                   	push   %eax
   10a98:	e8 09 fb ff ff       	call   105a6 <find_pte>
   10a9d:	83 c4 10             	add    $0x10,%esp
   10aa0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0)
   10aa3:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10aa7:	75 07                	jne    10ab0 <memory_get_paddr+0x2a>
    {
        return 0;
   10aa9:	b8 00 00 00 00       	mov    $0x0,%eax
   10aae:	eb 1a                	jmp    10aca <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ab0:	83 ec 0c             	sub    $0xc,%esp
   10ab3:	ff 75 f4             	pushl  -0xc(%ebp)
   10ab6:	e8 d1 f8 ff ff       	call   1038c <pte_paddr>
   10abb:	83 c4 10             	add    $0x10,%esp
   10abe:	89 c2                	mov    %eax,%edx
   10ac0:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ac3:	25 ff 0f 00 00       	and    $0xfff,%eax
   10ac8:	01 d0                	add    %edx,%eax
}
   10aca:	c9                   	leave  
   10acb:	c3                   	ret    

00010acc <memory_copy_uvm_data>:
/**
 * @brief 在不同的进程空间中拷贝字符串
 * page_dir为目标页表，当前仍为老页表
 */
int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size)
{
   10acc:	55                   	push   %ebp
   10acd:	89 e5                	mov    %esp,%ebp
   10acf:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while (size > 0)
   10ad2:	eb 6e                	jmp    10b42 <memory_copy_uvm_data+0x76>
    {
        // 获取目标的物理地址, 也即其另一个虚拟地址
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ad4:	83 ec 08             	sub    $0x8,%esp
   10ad7:	ff 75 08             	pushl  0x8(%ebp)
   10ada:	ff 75 0c             	pushl  0xc(%ebp)
   10add:	e8 a4 ff ff ff       	call   10a86 <memory_get_paddr>
   10ae2:	83 c4 10             	add    $0x10,%esp
   10ae5:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0)
   10ae8:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10aec:	75 07                	jne    10af5 <memory_copy_uvm_data+0x29>
        {
            return -1;
   10aee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10af3:	eb 58                	jmp    10b4d <memory_copy_uvm_data+0x81>
        }

        // 计算当前可拷贝的大小
        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10af5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10af8:	25 ff 0f 00 00       	and    $0xfff,%eax
   10afd:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b00:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b05:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b08:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size)
   10b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b0e:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b11:	76 06                	jbe    10b19 <memory_copy_uvm_data+0x4d>
        {
            curr_size = size; // 如果比较大，超过页边界，则只拷贝此页内的
   10b13:	8b 45 14             	mov    0x14(%ebp),%eax
   10b16:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b19:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b1c:	8b 55 10             	mov    0x10(%ebp),%edx
   10b1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b22:	83 ec 04             	sub    $0x4,%esp
   10b25:	51                   	push   %ecx
   10b26:	52                   	push   %edx
   10b27:	50                   	push   %eax
   10b28:	e8 93 3c 00 00       	call   147c0 <kernel_memcpy>
   10b2d:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b30:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b33:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b36:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b39:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b3f:	01 45 10             	add    %eax,0x10(%ebp)
    while (size > 0)
   10b42:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b46:	75 8c                	jne    10ad4 <memory_copy_uvm_data+0x8>
    }

    return 0;
   10b48:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b4d:	c9                   	leave  
   10b4e:	c3                   	ret    

00010b4f <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir(uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm)
{
   10b4f:	55                   	push   %ebp
   10b50:	89 e5                	mov    %esp,%ebp
   10b52:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b55:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b58:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b5b:	68 00 10 00 00       	push   $0x1000
   10b60:	ff 75 10             	pushl  0x10(%ebp)
   10b63:	e8 a9 f7 ff ff       	call   10311 <up2>
   10b68:	83 c4 08             	add    $0x8,%esp
   10b6b:	c1 e8 0c             	shr    $0xc,%eax
   10b6e:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b71:	68 00 10 00 00       	push   $0x1000
   10b76:	ff 75 0c             	pushl  0xc(%ebp)
   10b79:	e8 aa f7 ff ff       	call   10328 <down2>
   10b7e:	83 c4 08             	add    $0x8,%esp
   10b81:	89 45 0c             	mov    %eax,0xc(%ebp)

    // 逐页分配内存，然后建立映射关系
    for (int i = 0; i < page_count; i++)
   10b84:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10b8b:	eb 7b                	jmp    10c08 <memory_alloc_for_page_dir+0xb9>
    {
        // 分配需要的内存
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10b8d:	83 ec 08             	sub    $0x8,%esp
   10b90:	6a 01                	push   $0x1
   10b92:	68 00 90 01 00       	push   $0x19000
   10b97:	e8 9f f8 ff ff       	call   1043b <addr_alloc_page>
   10b9c:	83 c4 10             	add    $0x10,%esp
   10b9f:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0)
   10ba2:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10ba6:	75 17                	jne    10bbf <memory_alloc_for_page_dir+0x70>
        {
            log_printf("mem alloc failed. no memory");
   10ba8:	83 ec 0c             	sub    $0xc,%esp
   10bab:	68 1e 4f 01 00       	push   $0x14f1e
   10bb0:	e8 2a 42 00 00       	call   14ddf <log_printf>
   10bb5:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bb8:	b8 00 00 00 00       	mov    $0x0,%eax
   10bbd:	eb 5a                	jmp    10c19 <memory_alloc_for_page_dir+0xca>
        }

        // 建立分配的内存与指定地址的关联
        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bbf:	8b 55 14             	mov    0x14(%ebp),%edx
   10bc2:	8b 45 08             	mov    0x8(%ebp),%eax
   10bc5:	83 ec 0c             	sub    $0xc,%esp
   10bc8:	52                   	push   %edx
   10bc9:	6a 01                	push   $0x1
   10bcb:	ff 75 e8             	pushl  -0x18(%ebp)
   10bce:	ff 75 f4             	pushl  -0xc(%ebp)
   10bd1:	50                   	push   %eax
   10bd2:	e8 7f fa ff ff       	call   10656 <memory_create_map>
   10bd7:	83 c4 20             	add    $0x20,%esp
   10bda:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   10bdd:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10be1:	79 1a                	jns    10bfd <memory_alloc_for_page_dir+0xae>
        {
            log_printf("create memory map failed. err = %d", err);
   10be3:	83 ec 08             	sub    $0x8,%esp
   10be6:	ff 75 e4             	pushl  -0x1c(%ebp)
   10be9:	68 3c 4f 01 00       	push   $0x14f3c
   10bee:	e8 ec 41 00 00       	call   14ddf <log_printf>
   10bf3:	83 c4 10             	add    $0x10,%esp
            // addr_free_page(&paddr_alloc, vaddr, i + 1); 清理之前分配的页
            return -1;
   10bf6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10bfb:	eb 1c                	jmp    10c19 <memory_alloc_for_page_dir+0xca>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10bfd:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++)
   10c04:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c08:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c0b:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c0e:	0f 8c 79 ff ff ff    	jl     10b8d <memory_alloc_for_page_dir+0x3e>
    }

    return 0;
   10c14:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c19:	c9                   	leave  
   10c1a:	c3                   	ret    

00010c1b <memory_alloc_page>:
/**
 * @brief 分配一页内存
 * 主要用于内核空间内存的分配，不用于进程内存空间
 */
uint32_t memory_alloc_page(void)
{
   10c1b:	55                   	push   %ebp
   10c1c:	89 e5                	mov    %esp,%ebp
   10c1e:	83 ec 08             	sub    $0x8,%esp
    // 内核空间虚拟地址与物理地址相同
    return addr_alloc_page(&paddr_alloc, 1);
   10c21:	83 ec 08             	sub    $0x8,%esp
   10c24:	6a 01                	push   $0x1
   10c26:	68 00 90 01 00       	push   $0x19000
   10c2b:	e8 0b f8 ff ff       	call   1043b <addr_alloc_page>
   10c30:	83 c4 10             	add    $0x10,%esp
}
   10c33:	c9                   	leave  
   10c34:	c3                   	ret    

00010c35 <memory_free_page>:

/**
 * @brief 释放一页内存
 */
void memory_free_page(uint32_t addr)
{
   10c35:	55                   	push   %ebp
   10c36:	89 e5                	mov    %esp,%ebp
   10c38:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE)
   10c3b:	8b 45 08             	mov    0x8(%ebp),%eax
   10c3e:	85 c0                	test   %eax,%eax
   10c40:	78 17                	js     10c59 <memory_free_page+0x24>
    {
        // 内核空间，直接释放
        addr_free_page(&paddr_alloc, addr, 1);
   10c42:	83 ec 04             	sub    $0x4,%esp
   10c45:	6a 01                	push   $0x1
   10c47:	ff 75 08             	pushl  0x8(%ebp)
   10c4a:	68 00 90 01 00       	push   $0x19000
   10c4f:	e8 4e f8 ff ff       	call   104a2 <addr_free_page>
   10c54:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        // 释放页表
        pte->v = 0;
    }
}
   10c57:	eb 72                	jmp    10ccb <memory_free_page+0x96>
        pte_t *pte = find_pte(current_page_dir(), addr, 0);
   10c59:	e8 75 f7 ff ff       	call   103d3 <current_page_dir>
   10c5e:	83 ec 04             	sub    $0x4,%esp
   10c61:	6a 00                	push   $0x0
   10c63:	ff 75 08             	pushl  0x8(%ebp)
   10c66:	50                   	push   %eax
   10c67:	e8 3a f9 ff ff       	call   105a6 <find_pte>
   10c6c:	83 c4 10             	add    $0x10,%esp
   10c6f:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10c72:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10c76:	75 0d                	jne    10c85 <memory_free_page+0x50>
   10c78:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10c7b:	0f b6 00             	movzbl (%eax),%eax
   10c7e:	83 e0 01             	and    $0x1,%eax
   10c81:	84 c0                	test   %al,%al
   10c83:	75 1c                	jne    10ca1 <memory_free_page+0x6c>
   10c85:	68 60 4f 01 00       	push   $0x14f60
   10c8a:	68 30 50 01 00       	push   $0x15030
   10c8f:	68 ac 01 00 00       	push   $0x1ac
   10c94:	68 d4 4e 01 00       	push   $0x14ed4
   10c99:	e8 9a 3e 00 00       	call   14b38 <panic>
   10c9e:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10ca1:	83 ec 0c             	sub    $0xc,%esp
   10ca4:	ff 75 f4             	pushl  -0xc(%ebp)
   10ca7:	e8 e0 f6 ff ff       	call   1038c <pte_paddr>
   10cac:	83 c4 10             	add    $0x10,%esp
   10caf:	83 ec 04             	sub    $0x4,%esp
   10cb2:	6a 01                	push   $0x1
   10cb4:	50                   	push   %eax
   10cb5:	68 00 90 01 00       	push   $0x19000
   10cba:	e8 e3 f7 ff ff       	call   104a2 <addr_free_page>
   10cbf:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10cc2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10cc5:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10ccb:	90                   	nop
   10ccc:	c9                   	leave  
   10ccd:	c3                   	ret    

00010cce <memory_alloc_page_for>:

/**
 * @brief 为指定的虚拟地址空间分配多页内存
 */
int memory_alloc_page_for(uint32_t addr, uint32_t size, int perm)
{
   10cce:	55                   	push   %ebp
   10ccf:	89 e5                	mov    %esp,%ebp
   10cd1:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10cd4:	e8 76 08 00 00       	call   1154f <task_current>
   10cd9:	8b 40 74             	mov    0x74(%eax),%eax
   10cdc:	ff 75 10             	pushl  0x10(%ebp)
   10cdf:	ff 75 0c             	pushl  0xc(%ebp)
   10ce2:	ff 75 08             	pushl  0x8(%ebp)
   10ce5:	50                   	push   %eax
   10ce6:	e8 64 fe ff ff       	call   10b4f <memory_alloc_for_page_dir>
   10ceb:	83 c4 10             	add    $0x10,%esp
}
   10cee:	c9                   	leave  
   10cef:	c3                   	ret    

00010cf0 <memory_init>:
 * 该函数的主要任务：
 * 1、初始化物理内存分配器：将所有物理内存管理起来. 在1MB内存中分配物理位图
 * 2、重新创建内核页表：原loader中创建的页表已经不再合适
 */
void memory_init(boot_info_t *boot_info)
{
   10cf0:	55                   	push   %ebp
   10cf1:	89 e5                	mov    %esp,%ebp
   10cf3:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t *mem_free_start;
    log_printf("mem init");
   10cf6:	83 ec 0c             	sub    $0xc,%esp
   10cf9:	68 84 4f 01 00       	push   $0x14f84
   10cfe:	e8 dc 40 00 00       	call   14ddf <log_printf>
   10d03:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d06:	83 ec 0c             	sub    $0xc,%esp
   10d09:	ff 75 08             	pushl  0x8(%ebp)
   10d0c:	e8 f3 f7 ff ff       	call   10504 <show_mem_info>
   10d11:	83 c4 10             	add    $0x10,%esp

    // 在内核数据后面放物理页位图
    uint8_t *mem_free = (uint8_t *)&mem_free_start;
   10d14:	c7 45 f4 de c3 03 00 	movl   $0x3c3de,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d1b:	83 ec 0c             	sub    $0xc,%esp
   10d1e:	ff 75 08             	pushl  0x8(%ebp)
   10d21:	e8 44 f8 ff ff       	call   1056a <total_mem_size>
   10d26:	83 c4 10             	add    $0x10,%esp
   10d29:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);
   10d31:	83 ec 08             	sub    $0x8,%esp
   10d34:	68 00 10 00 00       	push   $0x1000
   10d39:	ff 75 f0             	pushl  -0x10(%ebp)
   10d3c:	e8 e7 f5 ff ff       	call   10328 <down2>
   10d41:	83 c4 10             	add    $0x10,%esp
   10d44:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("free memory: 0x%x, size:0x%x", MEM_EXT_START, mem_up1MB_free);
   10d47:	83 ec 04             	sub    $0x4,%esp
   10d4a:	ff 75 f0             	pushl  -0x10(%ebp)
   10d4d:	68 00 00 10 00       	push   $0x100000
   10d52:	68 8d 4f 01 00       	push   $0x14f8d
   10d57:	e8 83 40 00 00       	call   14ddf <log_printf>
   10d5c:	83 c4 10             	add    $0x10,%esp

    // 4GB大小需要总共4*1024*1024*1024/4096/8=128KB的位图, 使用低1MB的RAM空间中足够
    // 该部分的内存仅跟在mem_free_start开始放置
    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d5f:	83 ec 0c             	sub    $0xc,%esp
   10d62:	68 00 10 00 00       	push   $0x1000
   10d67:	ff 75 f0             	pushl  -0x10(%ebp)
   10d6a:	68 00 00 10 00       	push   $0x100000
   10d6f:	ff 75 f4             	pushl  -0xc(%ebp)
   10d72:	68 00 90 01 00       	push   $0x19000
   10d77:	e8 67 f6 ff ff       	call   103e3 <addr_alloc_init>
   10d7c:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE); // mem_free 跳过bit的地址
   10d7f:	a1 24 90 01 00       	mov    0x19024,%eax
   10d84:	c1 e8 0c             	shr    $0xc,%eax
   10d87:	83 ec 0c             	sub    $0xc,%esp
   10d8a:	50                   	push   %eax
   10d8b:	e8 74 36 00 00       	call   14404 <bitmap_byte_count>
   10d90:	83 c4 10             	add    $0x10,%esp
   10d93:	01 45 f4             	add    %eax,-0xc(%ebp)
    // 到这里，mem_free应该比EBDA地址要小
    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10d96:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10d9d:	76 1c                	jbe    10dbb <memory_init+0xcb>
   10d9f:	68 ac 4f 01 00       	push   $0x14fac
   10da4:	68 44 50 01 00       	push   $0x15044
   10da9:	68 d6 01 00 00       	push   $0x1d6
   10dae:	68 d4 4e 01 00       	push   $0x14ed4
   10db3:	e8 80 3d 00 00       	call   14b38 <panic>
   10db8:	83 c4 10             	add    $0x10,%esp

    // 创建内核页表并切换过去
    create_kernel_table();
   10dbb:	e8 22 f9 ff ff       	call   106e2 <create_kernel_table>
    // 先切换到当前页表
    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10dc0:	b8 00 a0 01 00       	mov    $0x1a000,%eax
   10dc5:	83 ec 0c             	sub    $0xc,%esp
   10dc8:	50                   	push   %eax
   10dc9:	e8 f4 f5 ff ff       	call   103c2 <mmu_set_page_dir>
   10dce:	83 c4 10             	add    $0x10,%esp
    // {
    //     addr_free_page(&addr_alloc, addr, 2);
    //     addr += 4096 * 2;
    //     log_printf("alloc addr: 0x%x", addr);
    // }
}
   10dd1:	90                   	nop
   10dd2:	c9                   	leave  
   10dd3:	c3                   	ret    

00010dd4 <sys_sbrk>:

/**
 * @brief 调整堆的内存分配，返回堆之前的指针
 */
char *sys_sbrk(int incr)
{
   10dd4:	55                   	push   %ebp
   10dd5:	89 e5                	mov    %esp,%ebp
   10dd7:	83 ec 38             	sub    $0x38,%esp
    task_t *task = task_current();
   10dda:	e8 70 07 00 00       	call   1154f <task_current>
   10ddf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char *pre_heap_end = (char *)task->heap_end;
   10de2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10de5:	8b 40 30             	mov    0x30(%eax),%eax
   10de8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10deb:	8b 45 08             	mov    0x8(%ebp),%eax
   10dee:	89 45 e8             	mov    %eax,-0x18(%ebp)
    ASSERT(incr >= 0);
   10df1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10df5:	79 1c                	jns    10e13 <sys_sbrk+0x3f>
   10df7:	68 d1 4f 01 00       	push   $0x14fd1
   10dfc:	68 50 50 01 00       	push   $0x15050
   10e01:	68 f7 01 00 00       	push   $0x1f7
   10e06:	68 d4 4e 01 00       	push   $0x14ed4
   10e0b:	e8 28 3d 00 00       	call   14b38 <panic>
   10e10:	83 c4 10             	add    $0x10,%esp
    // 如果地址为0，则返回有效的heap区域的顶端
    if (incr == 0)
   10e13:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e17:	75 1b                	jne    10e34 <sys_sbrk+0x60>
    {
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e19:	83 ec 08             	sub    $0x8,%esp
   10e1c:	ff 75 ec             	pushl  -0x14(%ebp)
   10e1f:	68 db 4f 01 00       	push   $0x14fdb
   10e24:	e8 b6 3f 00 00       	call   14ddf <log_printf>
   10e29:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e2c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e2f:	e9 aa 00 00 00       	jmp    10ede <sys_sbrk+0x10a>
    }
    uint32_t start = task->heap_end;
   10e34:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e37:	8b 40 30             	mov    0x30(%eax),%eax
   10e3a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e3d:	8b 55 08             	mov    0x8(%ebp),%edx
   10e40:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e43:	01 d0                	add    %edx,%eax
   10e45:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    // 起始偏移非0
    int start_offset = start % MEM_PAGE_SIZE;
   10e48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e4b:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e50:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset)
   10e53:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e57:	74 37                	je     10e90 <sys_sbrk+0xbc>
    {
        // 不超过1页，只调整
        if (start_offset + incr <= MEM_PAGE_SIZE)
   10e59:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10e5f:	01 d0                	add    %edx,%eax
   10e61:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e66:	7f 0e                	jg     10e76 <sys_sbrk+0xa2>
        {
            task->heap_end = end;
   10e68:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e6b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10e6e:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10e71:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e74:	eb 68                	jmp    10ede <sys_sbrk+0x10a>
        }
        else
        {
            // 超过1页，先只调本页的
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10e76:	b8 00 10 00 00       	mov    $0x1000,%eax
   10e7b:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10e7e:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10e81:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10e84:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10e87:	8b 45 08             	mov    0x8(%ebp),%eax
   10e8a:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10e8d:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }
    // 处理其余的，起始对齐的页边界的
    if (incr)
   10e90:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e94:	74 3c                	je     10ed2 <sys_sbrk+0xfe>
    {
        uint32_t curr_size = end - start;
   10e96:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10e99:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10e9c:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10e9f:	83 ec 04             	sub    $0x4,%esp
   10ea2:	6a 07                	push   $0x7
   10ea4:	ff 75 d8             	pushl  -0x28(%ebp)
   10ea7:	ff 75 f4             	pushl  -0xc(%ebp)
   10eaa:	e8 1f fe ff ff       	call   10cce <memory_alloc_page_for>
   10eaf:	83 c4 10             	add    $0x10,%esp
   10eb2:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0)
   10eb5:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10eb9:	79 17                	jns    10ed2 <sys_sbrk+0xfe>
        {
            log_printf("sbrk: alloc mem failed.");
   10ebb:	83 ec 0c             	sub    $0xc,%esp
   10ebe:	68 ef 4f 01 00       	push   $0x14fef
   10ec3:	e8 17 3f 00 00       	call   14ddf <log_printf>
   10ec8:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10ecb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10ed0:	eb 0c                	jmp    10ede <sys_sbrk+0x10a>
        }
    }

    // log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10ed2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10ed5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ed8:	89 50 30             	mov    %edx,0x30(%eax)
    return (char *)pre_heap_end;
   10edb:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ede:	c9                   	leave  
   10edf:	c3                   	ret    

00010ee0 <sys_print_msg>:

// 系统调用处理函数类型
typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

void sys_print_msg(char *fmt, int arg)
{
   10ee0:	55                   	push   %ebp
   10ee1:	89 e5                	mov    %esp,%ebp
   10ee3:	83 ec 08             	sub    $0x8,%esp
    log_printf(fmt, arg);
   10ee6:	83 ec 08             	sub    $0x8,%esp
   10ee9:	ff 75 0c             	pushl  0xc(%ebp)
   10eec:	ff 75 08             	pushl  0x8(%ebp)
   10eef:	e8 eb 3e 00 00       	call   14ddf <log_printf>
   10ef4:	83 c4 10             	add    $0x10,%esp
}
   10ef7:	90                   	nop
   10ef8:	c9                   	leave  
   10ef9:	c3                   	ret    

00010efa <do_handler_syscall>:

/**
 * 处理系统调用。该函数由系统调用函数调用
 */
void do_handler_syscall(syscall_frame_t *frame)
{
   10efa:	55                   	push   %ebp
   10efb:	89 e5                	mov    %esp,%ebp
   10efd:	53                   	push   %ebx
   10efe:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0]))
   10f01:	8b 45 08             	mov    0x8(%ebp),%eax
   10f04:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f07:	83 f8 64             	cmp    $0x64,%eax
   10f0a:	77 4e                	ja     10f5a <do_handler_syscall+0x60>
    {
        // 查表取得处理函数，然后调用处理
        syscall_handler_t handler = sys_table[frame->func_id];
   10f0c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f0f:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f12:	8b 04 85 60 50 01 00 	mov    0x15060(,%eax,4),%eax
   10f19:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (handler)
   10f1c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f20:	74 38                	je     10f5a <do_handler_syscall+0x60>
        {
            int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f22:	8b 45 08             	mov    0x8(%ebp),%eax
   10f25:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f28:	89 c3                	mov    %eax,%ebx
   10f2a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f2d:	8b 40 48             	mov    0x48(%eax),%eax
   10f30:	89 c1                	mov    %eax,%ecx
   10f32:	8b 45 08             	mov    0x8(%ebp),%eax
   10f35:	8b 40 44             	mov    0x44(%eax),%eax
   10f38:	89 c2                	mov    %eax,%edx
   10f3a:	8b 45 08             	mov    0x8(%ebp),%eax
   10f3d:	8b 40 40             	mov    0x40(%eax),%eax
   10f40:	53                   	push   %ebx
   10f41:	51                   	push   %ecx
   10f42:	52                   	push   %edx
   10f43:	50                   	push   %eax
   10f44:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f47:	ff d0                	call   *%eax
   10f49:	83 c4 10             	add    $0x10,%esp
   10f4c:	89 45 f0             	mov    %eax,-0x10(%ebp)
            frame->eax = ret; // 设置系统调用的返回值，由eax传递
   10f4f:	8b 45 08             	mov    0x8(%ebp),%eax
   10f52:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f55:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f58:	eb 30                	jmp    10f8a <do_handler_syscall+0x90>
        }
    }
    // 不支持的系统调用，打印出错信息
    task_t *task = task_current();
   10f5a:	e8 f0 05 00 00       	call   1154f <task_current>
   10f5f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    log_printf("task: %s, Unknown syscall: %d", task->name, frame->func_id);
   10f62:	8b 45 08             	mov    0x8(%ebp),%eax
   10f65:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f68:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f6b:	83 c2 04             	add    $0x4,%edx
   10f6e:	83 ec 04             	sub    $0x4,%esp
   10f71:	50                   	push   %eax
   10f72:	52                   	push   %edx
   10f73:	68 f4 51 01 00       	push   $0x151f4
   10f78:	e8 62 3e 00 00       	call   14ddf <log_printf>
   10f7d:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1; // 设置系统调用的返回值，由eax传递
   10f80:	8b 45 08             	mov    0x8(%ebp),%eax
   10f83:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10f8a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10f8d:	c9                   	leave  
   10f8e:	c3                   	ret    

00010f8f <list_node_init>:
/**
 * 头结点的初始化
 * @param node 待初始化的结果
 */
static inline void list_node_init(list_node_t *node)
{
   10f8f:	55                   	push   %ebp
   10f90:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10f92:	8b 45 08             	mov    0x8(%ebp),%eax
   10f95:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10f9c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f9f:	8b 50 04             	mov    0x4(%eax),%edx
   10fa2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fa5:	89 10                	mov    %edx,(%eax)
}
   10fa7:	90                   	nop
   10fa8:	5d                   	pop    %ebp
   10fa9:	c3                   	ret    

00010faa <list_node_next>:
 * 获取结点的后一结点
 * @param node 查询的结点
 * @return 后继结点
 */
static inline list_node_t *list_node_next(list_node_t *node)
{
   10faa:	55                   	push   %ebp
   10fab:	89 e5                	mov    %esp,%ebp
    return node->next;
   10fad:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb0:	8b 40 04             	mov    0x4(%eax),%eax
}
   10fb3:	5d                   	pop    %ebp
   10fb4:	c3                   	ret    

00010fb5 <list_count>:
 * 获取链表的结点数量
 * @param list 查询的链表
 * @return 结果的数据
 */
static inline int list_count(list_t *list)
{
   10fb5:	55                   	push   %ebp
   10fb6:	89 e5                	mov    %esp,%ebp
    return list->count;
   10fb8:	8b 45 08             	mov    0x8(%ebp),%eax
   10fbb:	8b 40 08             	mov    0x8(%eax),%eax
}
   10fbe:	5d                   	pop    %ebp
   10fbf:	c3                   	ret    

00010fc0 <list_first>:
 * 获取指定链表的第一个表项
 * @param list 查询的链表
 * @return 第一个表项
 */
static inline list_node_t *list_first(list_t *list)
{
   10fc0:	55                   	push   %ebp
   10fc1:	89 e5                	mov    %esp,%ebp
    return list->first;
   10fc3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc6:	8b 00                	mov    (%eax),%eax
}
   10fc8:	5d                   	pop    %ebp
   10fc9:	c3                   	ret    

00010fca <write_cr3>:
{
   10fca:	55                   	push   %ebp
   10fcb:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
   10fcd:	8b 45 08             	mov    0x8(%ebp),%eax
   10fd0:	0f 22 d8             	mov    %eax,%cr3
}
   10fd3:	90                   	nop
   10fd4:	5d                   	pop    %ebp
   10fd5:	c3                   	ret    

00010fd6 <hlt>:
    uint32_t addr[] = {offset, selector};
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
}

static inline void hlt(void)
{
   10fd6:	55                   	push   %ebp
   10fd7:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fd9:	f4                   	hlt    
}
   10fda:	90                   	nop
   10fdb:	5d                   	pop    %ebp
   10fdc:	c3                   	ret    

00010fdd <write_tr>:

// 写tss register 当前运行那个进程
static inline void write_tr(uint32_t tss_selector)
{
   10fdd:	55                   	push   %ebp
   10fde:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax" ::"a"(tss_selector));
   10fe0:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe3:	0f 00 d8             	ltr    %ax
}
   10fe6:	90                   	nop
   10fe7:	5d                   	pop    %ebp
   10fe8:	c3                   	ret    

00010fe9 <mmu_set_page_dir>:
{
   10fe9:	55                   	push   %ebp
   10fea:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   10fec:	ff 75 08             	pushl  0x8(%ebp)
   10fef:	e8 d6 ff ff ff       	call   10fca <write_cr3>
   10ff4:	83 c4 04             	add    $0x4,%esp
}
   10ff7:	90                   	nop
   10ff8:	c9                   	leave  
   10ff9:	c3                   	ret    

00010ffa <tss_init>:
static task_manager_t task_manager; // 任务管理器
static task_t task_table[TASK_NR];
static mutex_t task_table_mutex;

static int tss_init(task_t *task, int flag, uint32_t entry, uint32_t esp)
{
   10ffa:	55                   	push   %ebp
   10ffb:	89 e5                	mov    %esp,%ebp
   10ffd:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = get_alloc_desc();
   11000:	e8 22 12 00 00       	call   12227 <get_alloc_desc>
   11005:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0)
   11008:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1100c:	79 1a                	jns    11028 <tss_init+0x2e>
    {
        log_printf("alloc tss failed.\n");
   1100e:	83 ec 0c             	sub    $0xc,%esp
   11011:	68 14 52 01 00       	push   $0x15214
   11016:	e8 c4 3d 00 00       	call   14ddf <log_printf>
   1101b:	83 c4 10             	add    $0x10,%esp
        return -1;
   1101e:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11023:	e9 68 01 00 00       	jmp    11190 <tss_init+0x196>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t), SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS); // 设置GDT表项内容
   11028:	8b 45 08             	mov    0x8(%ebp),%eax
   1102b:	83 c0 58             	add    $0x58,%eax
   1102e:	68 89 00 00 00       	push   $0x89
   11033:	6a 68                	push   $0x68
   11035:	50                   	push   %eax
   11036:	ff 75 ec             	pushl  -0x14(%ebp)
   11039:	e8 31 11 00 00       	call   1216f <segment_desc_set>
   1103e:	83 c4 10             	add    $0x10,%esp

    // tss段初始化
    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11041:	8b 45 08             	mov    0x8(%ebp),%eax
   11044:	83 c0 58             	add    $0x58,%eax
   11047:	83 ec 04             	sub    $0x4,%esp
   1104a:	6a 68                	push   $0x68
   1104c:	6a 00                	push   $0x0
   1104e:	50                   	push   %eax
   1104f:	e8 bb 37 00 00       	call   1480f <kernel_memset>
   11054:	83 c4 10             	add    $0x10,%esp

    // 分配内核栈，得到的是物理地址
    uint32_t kernel_stack = memory_alloc_page();
   11057:	e8 bf fb ff ff       	call   10c1b <memory_alloc_page>
   1105c:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0)
   1105f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11063:	0f 84 fc 00 00 00    	je     11165 <tss_init+0x16b>

    int code_sel, data_sel;
    // code_sel = task_manager.app_code_sel | SEG_CPL3;
    // data_sel = task_manager.app_data_sel | SEG_CPL3;
    // 根据不同的权限选择不同的访问选择子
    if (flag & TASK_FLAG_SYSTEM)
   11069:	8b 45 0c             	mov    0xc(%ebp),%eax
   1106c:	83 e0 01             	and    $0x1,%eax
   1106f:	85 c0                	test   %eax,%eax
   11071:	74 10                	je     11083 <tss_init+0x89>
    {
        code_sel = KERNEL_SELECTOR_CS;
   11073:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   1107a:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   11081:	eb 16                	jmp    11099 <tss_init+0x9f>
    }
    else
    {
        // 注意加了RP3,不然将产生段保护错误
        code_sel = task_manager.app_code_sel | SEG_CPL3;
   11083:	a1 b0 c1 01 00       	mov    0x1c1b0,%eax
   11088:	83 c8 03             	or     $0x3,%eax
   1108b:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_CPL3;
   1108e:	a1 b4 c1 01 00       	mov    0x1c1b4,%eax
   11093:	83 c8 03             	or     $0x3,%eax
   11096:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   11099:	8b 45 08             	mov    0x8(%ebp),%eax
   1109c:	8b 55 10             	mov    0x10(%ebp),%edx
   1109f:	89 50 78             	mov    %edx,0x78(%eax)
    // task->tss.esp = task->tss.esp0 = esp;
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; // 未指定栈则用内核栈，即运行在特权级0的进程
   110a2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110a6:	75 0a                	jne    110b2 <tss_init+0xb8>
   110a8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110ab:	05 00 10 00 00       	add    $0x1000,%eax
   110b0:	eb 03                	jmp    110b5 <tss_init+0xbb>
   110b2:	8b 45 14             	mov    0x14(%ebp),%eax
   110b5:	8b 55 08             	mov    0x8(%ebp),%edx
   110b8:	89 82 90 00 00 00    	mov    %eax,0x90(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110be:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110c1:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   110c7:	8b 45 08             	mov    0x8(%ebp),%eax
   110ca:	89 50 5c             	mov    %edx,0x5c(%eax)
    task->tss.ss = data_sel;            // 特权3
   110cd:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110d0:	8b 45 08             	mov    0x8(%ebp),%eax
   110d3:	89 90 a8 00 00 00    	mov    %edx,0xa8(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS; // 特权0
   110d9:	8b 45 08             	mov    0x8(%ebp),%eax
   110dc:	c7 40 60 10 00 00 00 	movl   $0x10,0x60(%eax)
    task->tss.es = task->tss.ds = task->tss.fs = task->tss.gs = data_sel;
   110e3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   110e6:	8b 45 08             	mov    0x8(%ebp),%eax
   110e9:	89 90 b4 00 00 00    	mov    %edx,0xb4(%eax)
   110ef:	8b 45 08             	mov    0x8(%ebp),%eax
   110f2:	8b 90 b4 00 00 00    	mov    0xb4(%eax),%edx
   110f8:	8b 45 08             	mov    0x8(%ebp),%eax
   110fb:	89 90 b0 00 00 00    	mov    %edx,0xb0(%eax)
   11101:	8b 45 08             	mov    0x8(%ebp),%eax
   11104:	8b 90 b0 00 00 00    	mov    0xb0(%eax),%edx
   1110a:	8b 45 08             	mov    0x8(%ebp),%eax
   1110d:	89 90 ac 00 00 00    	mov    %edx,0xac(%eax)
   11113:	8b 45 08             	mov    0x8(%ebp),%eax
   11116:	8b 90 ac 00 00 00    	mov    0xac(%eax),%edx
   1111c:	8b 45 08             	mov    0x8(%ebp),%eax
   1111f:	89 90 a0 00 00 00    	mov    %edx,0xa0(%eax)
    task->tss.cs = code_sel;
   11125:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11128:	8b 45 08             	mov    0x8(%ebp),%eax
   1112b:	89 90 a4 00 00 00    	mov    %edx,0xa4(%eax)
    task->tss.eflags = EFLAGS_DEFAULT | EFLAGS_IF;
   11131:	8b 45 08             	mov    0x8(%ebp),%eax
   11134:	c7 40 7c 02 02 00 00 	movl   $0x202,0x7c(%eax)

    // 页表初始化
    uint32_t page_dir = memory_create_uvm();
   1113b:	e8 5d f6 ff ff       	call   1079d <memory_create_uvm>
   11140:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0)
   11143:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11147:	74 1f                	je     11168 <tss_init+0x16e>
    {
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   11149:	8b 45 08             	mov    0x8(%ebp),%eax
   1114c:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1114f:	89 50 74             	mov    %edx,0x74(%eax)
    task->tss_sel = tss_sel;
   11152:	8b 45 08             	mov    0x8(%ebp),%eax
   11155:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11158:	89 90 c0 00 00 00    	mov    %edx,0xc0(%eax)
    return 0;
   1115e:	b8 00 00 00 00       	mov    $0x0,%eax
   11163:	eb 2b                	jmp    11190 <tss_init+0x196>
        goto tss_init_failed;
   11165:	90                   	nop
   11166:	eb 01                	jmp    11169 <tss_init+0x16f>
        goto tss_init_failed;
   11168:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   11169:	83 ec 0c             	sub    $0xc,%esp
   1116c:	ff 75 ec             	pushl  -0x14(%ebp)
   1116f:	e8 7a 10 00 00       	call   121ee <gdt_free_sel>
   11174:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack)
   11177:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1117b:	74 0e                	je     1118b <tss_init+0x191>
    {
        memory_free_page(kernel_stack);
   1117d:	83 ec 0c             	sub    $0xc,%esp
   11180:	ff 75 e8             	pushl  -0x18(%ebp)
   11183:	e8 ad fa ff ff       	call   10c35 <memory_free_page>
   11188:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   1118b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11190:	c9                   	leave  
   11191:	c3                   	ret    

00011192 <task_init>:

int task_init(task_t *task, const char *name, int flag, uint32_t entry, uint32_t esp)
{
   11192:	55                   	push   %ebp
   11193:	89 e5                	mov    %esp,%ebp
   11195:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   11198:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1119c:	75 19                	jne    111b7 <task_init+0x25>
   1119e:	68 27 52 01 00       	push   $0x15227
   111a3:	68 ac 53 01 00       	push   $0x153ac
   111a8:	6a 57                	push   $0x57
   111aa:	68 3c 52 01 00       	push   $0x1523c
   111af:	e8 84 39 00 00       	call   14b38 <panic>
   111b4:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   111b7:	ff 75 18             	pushl  0x18(%ebp)
   111ba:	ff 75 14             	pushl  0x14(%ebp)
   111bd:	ff 75 10             	pushl  0x10(%ebp)
   111c0:	ff 75 08             	pushl  0x8(%ebp)
   111c3:	e8 32 fe ff ff       	call   10ffa <tss_init>
   111c8:	83 c4 10             	add    $0x10,%esp
   111cb:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0)
   111ce:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   111d2:	79 18                	jns    111ec <task_init+0x5a>
    {
        log_printf("init task failed.\n");
   111d4:	83 ec 0c             	sub    $0xc,%esp
   111d7:	68 76 52 01 00       	push   $0x15276
   111dc:	e8 fe 3b 00 00       	call   14ddf <log_printf>
   111e1:	83 c4 10             	add    $0x10,%esp
        return err;
   111e4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   111e7:	e9 cf 00 00 00       	jmp    112bb <task_init+0x129>
    }

    // 任务字段初始化
    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   111ec:	8b 45 08             	mov    0x8(%ebp),%eax
   111ef:	83 c0 04             	add    $0x4,%eax
   111f2:	83 ec 04             	sub    $0x4,%esp
   111f5:	6a 20                	push   $0x20
   111f7:	ff 75 0c             	pushl  0xc(%ebp)
   111fa:	50                   	push   %eax
   111fb:	e8 97 34 00 00       	call   14697 <kernel_strncpy>
   11200:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   11203:	8b 45 08             	mov    0x8(%ebp),%eax
   11206:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   1120c:	8b 45 08             	mov    0x8(%ebp),%eax
   1120f:	c7 40 34 00 00 00 00 	movl   $0x0,0x34(%eax)
    task->parent = (task_t *)0;
   11216:	8b 45 08             	mov    0x8(%ebp),%eax
   11219:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   11220:	8b 45 08             	mov    0x8(%ebp),%eax
   11223:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   1122a:	8b 45 08             	mov    0x8(%ebp),%eax
   1122d:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    task->time_ticks = TASK_TIME_SLICE_DEFAULT;
   11234:	8b 45 08             	mov    0x8(%ebp),%eax
   11237:	c7 40 38 0a 00 00 00 	movl   $0xa,0x38(%eax)
    task->slice_ticks = task->time_ticks;
   1123e:	8b 45 08             	mov    0x8(%ebp),%eax
   11241:	8b 50 38             	mov    0x38(%eax),%edx
   11244:	8b 45 08             	mov    0x8(%ebp),%eax
   11247:	89 50 3c             	mov    %edx,0x3c(%eax)
    list_node_init(&task->all_node);
   1124a:	8b 45 08             	mov    0x8(%ebp),%eax
   1124d:	83 c0 50             	add    $0x50,%eax
   11250:	83 ec 0c             	sub    $0xc,%esp
   11253:	50                   	push   %eax
   11254:	e8 36 fd ff ff       	call   10f8f <list_node_init>
   11259:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   1125c:	8b 45 08             	mov    0x8(%ebp),%eax
   1125f:	83 c0 40             	add    $0x40,%eax
   11262:	83 ec 0c             	sub    $0xc,%esp
   11265:	50                   	push   %eax
   11266:	e8 24 fd ff ff       	call   10f8f <list_node_init>
   1126b:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   1126e:	8b 45 08             	mov    0x8(%ebp),%eax
   11271:	83 c0 48             	add    $0x48,%eax
   11274:	83 ec 0c             	sub    $0xc,%esp
   11277:	50                   	push   %eax
   11278:	e8 12 fd ff ff       	call   10f8f <list_node_init>
   1127d:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   11280:	e8 5b 1a 00 00       	call   12ce0 <irq_enter_protection>
   11285:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task;
   11288:	8b 55 08             	mov    0x8(%ebp),%edx
   1128b:	8b 45 08             	mov    0x8(%ebp),%eax
   1128e:	89 50 24             	mov    %edx,0x24(%eax)
    // task_set_ready(task);
    list_insert_last(&task_manager.task_list, &task->all_node); // 插入所有task进队尾
   11291:	8b 45 08             	mov    0x8(%ebp),%eax
   11294:	83 c0 50             	add    $0x50,%eax
   11297:	83 ec 08             	sub    $0x8,%esp
   1129a:	50                   	push   %eax
   1129b:	68 10 c0 01 00       	push   $0x1c010
   112a0:	e8 d3 39 00 00       	call   14c78 <list_insert_last>
   112a5:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   112a8:	83 ec 0c             	sub    $0xc,%esp
   112ab:	ff 75 f0             	pushl  -0x10(%ebp)
   112ae:	e8 45 1a 00 00       	call   12cf8 <irq_leave_protection>
   112b3:	83 c4 10             	add    $0x10,%esp
    return 0;
   112b6:	b8 00 00 00 00       	mov    $0x0,%eax
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    //     *(--pesp) = 0;
    // }
}
   112bb:	c9                   	leave  
   112bc:	c3                   	ret    

000112bd <task_switch_from_to>:

void task_switch_from_to(task_t *from, task_t *to)
{
   112bd:	55                   	push   %ebp
   112be:	89 e5                	mov    %esp,%ebp
   112c0:	83 ec 08             	sub    $0x8,%esp
    switch_to_tss(to->tss_sel);
   112c3:	8b 45 0c             	mov    0xc(%ebp),%eax
   112c6:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   112cc:	83 ec 0c             	sub    $0xc,%esp
   112cf:	50                   	push   %eax
   112d0:	e8 b7 10 00 00       	call   1238c <switch_to_tss>
   112d5:	83 c4 10             	add    $0x10,%esp
    // simple_switch(&from->stack, to->stack);
}
   112d8:	90                   	nop
   112d9:	c9                   	leave  
   112da:	c3                   	ret    

000112db <task_start>:

/**
 * @brief 启动任务
 */
void task_start(task_t *task)
{
   112db:	55                   	push   %ebp
   112dc:	89 e5                	mov    %esp,%ebp
   112de:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   112e1:	e8 fa 19 00 00       	call   12ce0 <irq_enter_protection>
   112e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   112e9:	83 ec 0c             	sub    $0xc,%esp
   112ec:	ff 75 08             	pushl  0x8(%ebp)
   112ef:	e8 fc 01 00 00       	call   114f0 <task_set_ready>
   112f4:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   112f7:	83 ec 0c             	sub    $0xc,%esp
   112fa:	ff 75 f4             	pushl  -0xc(%ebp)
   112fd:	e8 f6 19 00 00       	call   12cf8 <irq_leave_protection>
   11302:	83 c4 10             	add    $0x10,%esp
}
   11305:	90                   	nop
   11306:	c9                   	leave  
   11307:	c3                   	ret    

00011308 <task_first_init>:
 * 不过，考虑到init可能用到newlib库，如果与kernel合并编译，在lds中很难控制将newlib的
 * 代码与init进程的放在一起，有可能与kernel放在了一起。
 * 综上，最好是分离。
 */
void task_first_init(void)
{
   11308:	55                   	push   %ebp
   11309:	89 e5                	mov    %esp,%ebp
   1130b:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry(void);
    // 以下获得的是bin文件在内存中的物理地址，起始和结束
    extern uint8_t s_first_task[], e_first_task[];
    // 分配的空间比实际存储的空间要大一些，多余的用于放置栈
    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   1130e:	ba de c3 03 00       	mov    $0x3c3de,%edx
   11313:	b8 98 c0 03 00       	mov    $0x3c098,%eax
   11318:	29 c2                	sub    %eax,%edx
   1131a:	89 d0                	mov    %edx,%eax
   1131c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   1131f:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11326:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11329:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   1132c:	72 1c                	jb     1134a <task_first_init+0x42>
   1132e:	68 89 52 01 00       	push   $0x15289
   11333:	68 b8 53 01 00       	push   $0x153b8
   11338:	68 9f 00 00 00       	push   $0x9f
   1133d:	68 3c 52 01 00       	push   $0x1523c
   11342:	e8 f1 37 00 00       	call   14b38 <panic>
   11347:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   1134a:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)
    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   11351:	8b 55 ec             	mov    -0x14(%ebp),%edx
   11354:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11357:	01 d0                	add    %edx,%eax
   11359:	83 ec 0c             	sub    $0xc,%esp
   1135c:	50                   	push   %eax
   1135d:	ff 75 ec             	pushl  -0x14(%ebp)
   11360:	6a 00                	push   $0x0
   11362:	68 a0 52 01 00       	push   $0x152a0
   11367:	68 28 c0 01 00       	push   $0x1c028
   1136c:	e8 21 fe ff ff       	call   11192 <task_init>
   11371:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task; // 这里不对
   11374:	b8 de c3 03 00       	mov    $0x3c3de,%eax
   11379:	a3 54 c0 01 00       	mov    %eax,0x1c054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   1137e:	a1 54 c0 01 00       	mov    0x1c054,%eax
   11383:	a3 58 c0 01 00       	mov    %eax,0x1c058

    // 写TR寄存器，指示当前运行的第一个任务
    write_tr(task_manager.first_task.tss_sel);
   11388:	a1 e8 c0 01 00       	mov    0x1c0e8,%eax
   1138d:	83 ec 0c             	sub    $0xc,%esp
   11390:	50                   	push   %eax
   11391:	e8 47 fc ff ff       	call   10fdd <write_tr>
   11396:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = &task_manager.first_task;
   11399:	c7 05 00 c0 01 00 28 	movl   $0x1c028,0x1c000
   113a0:	c0 01 00 

    // 切换页表
    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   113a3:	a1 9c c0 01 00       	mov    0x1c09c,%eax
   113a8:	83 ec 0c             	sub    $0xc,%esp
   113ab:	50                   	push   %eax
   113ac:	e8 38 fc ff ff       	call   10fe9 <mmu_set_page_dir>
   113b1:	83 c4 10             	add    $0x10,%esp

    // 分配一页内存供代码存放使用，然后将代码复制过去
    memory_alloc_page_for(first_start, alloc_size, PTE_P | PTE_W | PTE_U);
   113b4:	83 ec 04             	sub    $0x4,%esp
   113b7:	6a 07                	push   $0x7
   113b9:	ff 75 f0             	pushl  -0x10(%ebp)
   113bc:	ff 75 ec             	pushl  -0x14(%ebp)
   113bf:	e8 0a f9 ff ff       	call   10cce <memory_alloc_page_for>
   113c4:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   113c7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   113ca:	8b 45 ec             	mov    -0x14(%ebp),%eax
   113cd:	83 ec 04             	sub    $0x4,%esp
   113d0:	52                   	push   %edx
   113d1:	68 98 c0 03 00       	push   $0x3c098
   113d6:	50                   	push   %eax
   113d7:	e8 e4 33 00 00       	call   147c0 <kernel_memcpy>
   113dc:	83 c4 10             	add    $0x10,%esp

    // 启动进程
    task_start(&task_manager.first_task);
   113df:	83 ec 0c             	sub    $0xc,%esp
   113e2:	68 28 c0 01 00       	push   $0x1c028
   113e7:	e8 ef fe ff ff       	call   112db <task_start>
   113ec:	83 c4 10             	add    $0x10,%esp

    // 写TR寄存器，指示当前运行的第一个任务
    // write_tr(task_manager.first_task.tss_sel);
}
   113ef:	90                   	nop
   113f0:	c9                   	leave  
   113f1:	c3                   	ret    

000113f2 <task_first_task>:

/**
 * @brief 返回初始任务
 */
task_t *task_first_task(void)
{
   113f2:	55                   	push   %ebp
   113f3:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   113f5:	b8 28 c0 01 00       	mov    $0x1c028,%eax
}
   113fa:	5d                   	pop    %ebp
   113fb:	c3                   	ret    

000113fc <idle_task_entry>:

static void idle_task_entry(void)
{
   113fc:	55                   	push   %ebp
   113fd:	89 e5                	mov    %esp,%ebp
    for (;;)
    {
        hlt();
   113ff:	e8 d2 fb ff ff       	call   10fd6 <hlt>
   11404:	eb f9                	jmp    113ff <idle_task_entry+0x3>

00011406 <task_manager_init>:
    }
}

void task_manager_init(void)
{
   11406:	55                   	push   %ebp
   11407:	89 e5                	mov    %esp,%ebp
   11409:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1140c:	83 ec 04             	sub    $0x4,%esp
   1140f:	68 00 62 00 00       	push   $0x6200
   11414:	6a 00                	push   $0x0
   11416:	68 c0 c1 01 00       	push   $0x1c1c0
   1141b:	e8 ef 33 00 00       	call   1480f <kernel_memset>
   11420:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11423:	83 ec 0c             	sub    $0xc,%esp
   11426:	68 c0 23 02 00       	push   $0x223c0
   1142b:	e8 11 2d 00 00       	call   14141 <mutex_init>
   11430:	83 c4 10             	add    $0x10,%esp

    int sel = get_alloc_desc();
   11433:	e8 ef 0d 00 00       	call   12227 <get_alloc_desc>
   11438:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1143b:	68 f2 40 00 00       	push   $0x40f2
   11440:	6a ff                	push   $0xffffffff
   11442:	6a 00                	push   $0x0
   11444:	ff 75 f4             	pushl  -0xc(%ebp)
   11447:	e8 23 0d 00 00       	call   1216f <segment_desc_set>
   1144c:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   1144f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11452:	a3 b4 c1 01 00       	mov    %eax,0x1c1b4

    sel = get_alloc_desc();
   11457:	e8 cb 0d 00 00       	call   12227 <get_alloc_desc>
   1145c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1145f:	68 fa 40 00 00       	push   $0x40fa
   11464:	6a ff                	push   $0xffffffff
   11466:	6a 00                	push   $0x0
   11468:	ff 75 f4             	pushl  -0xc(%ebp)
   1146b:	e8 ff 0c 00 00       	call   1216f <segment_desc_set>
   11470:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                         SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   11473:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11476:	a3 b0 c1 01 00       	mov    %eax,0x1c1b0

    // 各队列初始化
    list_init(&task_manager.ready_list);
   1147b:	83 ec 0c             	sub    $0xc,%esp
   1147e:	68 04 c0 01 00       	push   $0x1c004
   11483:	e8 6c 37 00 00       	call   14bf4 <list_init>
   11488:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   1148b:	83 ec 0c             	sub    $0xc,%esp
   1148e:	68 10 c0 01 00       	push   $0x1c010
   11493:	e8 5c 37 00 00       	call   14bf4 <list_init>
   11498:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   1149b:	83 ec 0c             	sub    $0xc,%esp
   1149e:	68 1c c0 01 00       	push   $0x1c01c
   114a3:	e8 4c 37 00 00       	call   14bf4 <list_init>
   114a8:	83 c4 10             	add    $0x10,%esp
    task_manager.curr_task = (task_t *)0;
   114ab:	c7 05 00 c0 01 00 00 	movl   $0x0,0x1c000
   114b2:	00 00 00 

    task_init(&task_manager.idle_task, "idle_task", TASK_FLAG_SYSTEM, (uint32_t)idle_task_entry, (uint32_t)idle_task_stack + 1024);
   114b5:	b8 00 b0 01 00       	mov    $0x1b000,%eax
   114ba:	05 00 04 00 00       	add    $0x400,%eax
   114bf:	ba fc 13 01 00       	mov    $0x113fc,%edx
   114c4:	83 ec 0c             	sub    $0xc,%esp
   114c7:	50                   	push   %eax
   114c8:	52                   	push   %edx
   114c9:	6a 01                	push   $0x1
   114cb:	68 ab 52 01 00       	push   $0x152ab
   114d0:	68 ec c0 01 00       	push   $0x1c0ec
   114d5:	e8 b8 fc ff ff       	call   11192 <task_init>
   114da:	83 c4 20             	add    $0x20,%esp
    task_start(&task_manager.idle_task);
   114dd:	83 ec 0c             	sub    $0xc,%esp
   114e0:	68 ec c0 01 00       	push   $0x1c0ec
   114e5:	e8 f1 fd ff ff       	call   112db <task_start>
   114ea:	83 c4 10             	add    $0x10,%esp
}
   114ed:	90                   	nop
   114ee:	c9                   	leave  
   114ef:	c3                   	ret    

000114f0 <task_set_ready>:

/**
 * @brief 将任务插入就绪队列
 */
void task_set_ready(task_t *task)
{
   114f0:	55                   	push   %ebp
   114f1:	89 e5                	mov    %esp,%ebp
   114f3:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   114f6:	81 7d 08 ec c0 01 00 	cmpl   $0x1c0ec,0x8(%ebp)
   114fd:	74 22                	je     11521 <task_set_ready+0x31>
    {
        return;
    }
    list_insert_last(&task_manager.ready_list, &task->run_node);
   114ff:	8b 45 08             	mov    0x8(%ebp),%eax
   11502:	83 c0 40             	add    $0x40,%eax
   11505:	83 ec 08             	sub    $0x8,%esp
   11508:	50                   	push   %eax
   11509:	68 04 c0 01 00       	push   $0x1c004
   1150e:	e8 65 37 00 00       	call   14c78 <list_insert_last>
   11513:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_READY;
   11516:	8b 45 08             	mov    0x8(%ebp),%eax
   11519:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
   1151f:	eb 01                	jmp    11522 <task_set_ready+0x32>
        return;
   11521:	90                   	nop
}
   11522:	c9                   	leave  
   11523:	c3                   	ret    

00011524 <task_set_block>:

/**
 * @brief 将任务从就绪队列移除
 */
void task_set_block(task_t *task)
{
   11524:	55                   	push   %ebp
   11525:	89 e5                	mov    %esp,%ebp
   11527:	83 ec 08             	sub    $0x8,%esp
    if (task == &task_manager.idle_task)
   1152a:	81 7d 08 ec c0 01 00 	cmpl   $0x1c0ec,0x8(%ebp)
   11531:	74 19                	je     1154c <task_set_block+0x28>
    {
        return;
    }
    list_remove(&task_manager.ready_list, &task->run_node);
   11533:	8b 45 08             	mov    0x8(%ebp),%eax
   11536:	83 c0 40             	add    $0x40,%eax
   11539:	83 ec 08             	sub    $0x8,%esp
   1153c:	50                   	push   %eax
   1153d:	68 04 c0 01 00       	push   $0x1c004
   11542:	e8 0d 38 00 00       	call   14d54 <list_remove>
   11547:	83 c4 10             	add    $0x10,%esp
   1154a:	eb 01                	jmp    1154d <task_set_block+0x29>
        return;
   1154c:	90                   	nop
}
   1154d:	c9                   	leave  
   1154e:	c3                   	ret    

0001154f <task_current>:

/**
 * @brief 获取当前正在运行的任务
 */
task_t *task_current(void)
{
   1154f:	55                   	push   %ebp
   11550:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   11552:	a1 00 c0 01 00       	mov    0x1c000,%eax
}
   11557:	5d                   	pop    %ebp
   11558:	c3                   	ret    

00011559 <sys_sched_yield>:

int sys_sched_yield(void)
{
   11559:	55                   	push   %ebp
   1155a:	89 e5                	mov    %esp,%ebp
   1155c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1155f:	e8 7c 17 00 00       	call   12ce0 <irq_enter_protection>
   11564:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (list_count(&task_manager.ready_list) > 1)
   11567:	83 ec 0c             	sub    $0xc,%esp
   1156a:	68 04 c0 01 00       	push   $0x1c004
   1156f:	e8 41 fa ff ff       	call   10fb5 <list_count>
   11574:	83 c4 10             	add    $0x10,%esp
   11577:	83 f8 01             	cmp    $0x1,%eax
   1157a:	7e 29                	jle    115a5 <sys_sched_yield+0x4c>
    {
        task_t *curr_task = task_current();
   1157c:	e8 ce ff ff ff       	call   1154f <task_current>
   11581:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   11584:	83 ec 0c             	sub    $0xc,%esp
   11587:	ff 75 f0             	pushl  -0x10(%ebp)
   1158a:	e8 95 ff ff ff       	call   11524 <task_set_block>
   1158f:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   11592:	83 ec 0c             	sub    $0xc,%esp
   11595:	ff 75 f0             	pushl  -0x10(%ebp)
   11598:	e8 53 ff ff ff       	call   114f0 <task_set_ready>
   1159d:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   115a0:	e8 58 00 00 00       	call   115fd <task_dispatch>
    }
    irq_leave_protection(state);
   115a5:	83 ec 0c             	sub    $0xc,%esp
   115a8:	ff 75 f4             	pushl  -0xc(%ebp)
   115ab:	e8 48 17 00 00       	call   12cf8 <irq_leave_protection>
   115b0:	83 c4 10             	add    $0x10,%esp
    return 0;
   115b3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   115b8:	c9                   	leave  
   115b9:	c3                   	ret    

000115ba <task_next_run>:

/**
 * @brief 获取下一将要运行的任务
 */
static task_t *task_next_run(void)
{
   115ba:	55                   	push   %ebp
   115bb:	89 e5                	mov    %esp,%ebp
   115bd:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0)
   115c0:	68 04 c0 01 00       	push   $0x1c004
   115c5:	e8 eb f9 ff ff       	call   10fb5 <list_count>
   115ca:	83 c4 04             	add    $0x4,%esp
   115cd:	85 c0                	test   %eax,%eax
   115cf:	75 07                	jne    115d8 <task_next_run+0x1e>
    {
        return &task_manager.idle_task;
   115d1:	b8 ec c0 01 00       	mov    $0x1c0ec,%eax
   115d6:	eb 23                	jmp    115fb <task_next_run+0x41>
    }

    // 普通任务
    list_node_t *task_node = list_first(&task_manager.ready_list);
   115d8:	68 04 c0 01 00       	push   $0x1c004
   115dd:	e8 de f9 ff ff       	call   10fc0 <list_first>
   115e2:	83 c4 04             	add    $0x4,%esp
   115e5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   115e8:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   115ec:	74 08                	je     115f6 <task_next_run+0x3c>
   115ee:	8b 45 fc             	mov    -0x4(%ebp),%eax
   115f1:	83 e8 40             	sub    $0x40,%eax
   115f4:	eb 05                	jmp    115fb <task_next_run+0x41>
   115f6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   115fb:	c9                   	leave  
   115fc:	c3                   	ret    

000115fd <task_dispatch>:

/**
 * @brief 进行一次任务调度
 */
void task_dispatch(void)
{
   115fd:	55                   	push   %ebp
   115fe:	89 e5                	mov    %esp,%ebp
   11600:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   11603:	e8 d8 16 00 00       	call   12ce0 <irq_enter_protection>
   11608:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *to = task_next_run();
   1160b:	e8 aa ff ff ff       	call   115ba <task_next_run>
   11610:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (to != task_manager.curr_task)
   11613:	a1 00 c0 01 00       	mov    0x1c000,%eax
   11618:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1161b:	74 2a                	je     11647 <task_dispatch+0x4a>
    {
        task_t *from = task_manager.curr_task;
   1161d:	a1 00 c0 01 00       	mov    0x1c000,%eax
   11622:	89 45 ec             	mov    %eax,-0x14(%ebp)

        task_manager.curr_task = to;
   11625:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11628:	a3 00 c0 01 00       	mov    %eax,0x1c000
        to->state = TASK_RUNNING;
   1162d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11630:	c7 00 01 00 00 00    	movl   $0x1,(%eax)
        task_switch_from_to(from, to);
   11636:	83 ec 08             	sub    $0x8,%esp
   11639:	ff 75 f0             	pushl  -0x10(%ebp)
   1163c:	ff 75 ec             	pushl  -0x14(%ebp)
   1163f:	e8 79 fc ff ff       	call   112bd <task_switch_from_to>
   11644:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   11647:	83 ec 0c             	sub    $0xc,%esp
   1164a:	ff 75 f4             	pushl  -0xc(%ebp)
   1164d:	e8 a6 16 00 00       	call   12cf8 <irq_leave_protection>
   11652:	83 c4 10             	add    $0x10,%esp
}
   11655:	90                   	nop
   11656:	c9                   	leave  
   11657:	c3                   	ret    

00011658 <task_time_tick>:
/**
 * @brief 时间处理
 * 该函数在中断处理函数中调用
 */
void task_time_tick(void)
{
   11658:	55                   	push   %ebp
   11659:	89 e5                	mov    %esp,%ebp
   1165b:	83 ec 28             	sub    $0x28,%esp
    task_t *curr_task = task_current();
   1165e:	e8 ec fe ff ff       	call   1154f <task_current>
   11663:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_state_t state = irq_enter_protection();
   11666:	e8 75 16 00 00       	call   12ce0 <irq_enter_protection>
   1166b:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0)
   1166e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11671:	8b 40 3c             	mov    0x3c(%eax),%eax
   11674:	8d 50 ff             	lea    -0x1(%eax),%edx
   11677:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1167a:	89 50 3c             	mov    %edx,0x3c(%eax)
   1167d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11680:	8b 40 3c             	mov    0x3c(%eax),%eax
   11683:	85 c0                	test   %eax,%eax
   11685:	75 28                	jne    116af <task_time_tick+0x57>
    {
        // 时间片用完，重新加载时间片
        // 对于空闲任务，此处减未用
        curr_task->slice_ticks = curr_task->time_ticks;
   11687:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1168a:	8b 50 38             	mov    0x38(%eax),%edx
   1168d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11690:	89 50 3c             	mov    %edx,0x3c(%eax)

        // 调整队列的位置到尾部，不用直接操作队列
        task_set_block(curr_task);
   11693:	83 ec 0c             	sub    $0xc,%esp
   11696:	ff 75 f0             	pushl  -0x10(%ebp)
   11699:	e8 86 fe ff ff       	call   11524 <task_set_block>
   1169e:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   116a1:	83 ec 0c             	sub    $0xc,%esp
   116a4:	ff 75 f0             	pushl  -0x10(%ebp)
   116a7:	e8 44 fe ff ff       	call   114f0 <task_set_ready>
   116ac:	83 c4 10             	add    $0x10,%esp
    }

    // 睡眠处理
    list_node_t *curr = list_first(&task_manager.sleep_list);
   116af:	83 ec 0c             	sub    $0xc,%esp
   116b2:	68 1c c0 01 00       	push   $0x1c01c
   116b7:	e8 04 f9 ff ff       	call   10fc0 <list_first>
   116bc:	83 c4 10             	add    $0x10,%esp
   116bf:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   116c2:	eb 62                	jmp    11726 <task_time_tick+0xce>
    {
        list_node_t *next = list_node_next(curr);
   116c4:	83 ec 0c             	sub    $0xc,%esp
   116c7:	ff 75 f4             	pushl  -0xc(%ebp)
   116ca:	e8 db f8 ff ff       	call   10faa <list_node_next>
   116cf:	83 c4 10             	add    $0x10,%esp
   116d2:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t *task = list_node_parent(curr, task_t, run_node);
   116d5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   116d9:	74 08                	je     116e3 <task_time_tick+0x8b>
   116db:	8b 45 f4             	mov    -0xc(%ebp),%eax
   116de:	83 e8 40             	sub    $0x40,%eax
   116e1:	eb 05                	jmp    116e8 <task_time_tick+0x90>
   116e3:	b8 00 00 00 00       	mov    $0x0,%eax
   116e8:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0)
   116eb:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   116ee:	8b 40 34             	mov    0x34(%eax),%eax
   116f1:	8d 50 ff             	lea    -0x1(%eax),%edx
   116f4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   116f7:	89 50 34             	mov    %edx,0x34(%eax)
   116fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   116fd:	8b 40 34             	mov    0x34(%eax),%eax
   11700:	85 c0                	test   %eax,%eax
   11702:	75 1c                	jne    11720 <task_time_tick+0xc8>
        {
            // 延时时间到达，从睡眠队列中移除，送至就绪队列
            task_set_wakeup(task);
   11704:	83 ec 0c             	sub    $0xc,%esp
   11707:	ff 75 e4             	pushl  -0x1c(%ebp)
   1170a:	e8 6d 00 00 00       	call   1177c <task_set_wakeup>
   1170f:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11712:	83 ec 0c             	sub    $0xc,%esp
   11715:	ff 75 e4             	pushl  -0x1c(%ebp)
   11718:	e8 d3 fd ff ff       	call   114f0 <task_set_ready>
   1171d:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11720:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11723:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr)
   11726:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1172a:	75 98                	jne    116c4 <task_time_tick+0x6c>
    }
    task_dispatch();
   1172c:	e8 cc fe ff ff       	call   115fd <task_dispatch>
    irq_leave_protection(state);
   11731:	83 ec 0c             	sub    $0xc,%esp
   11734:	ff 75 ec             	pushl  -0x14(%ebp)
   11737:	e8 bc 15 00 00       	call   12cf8 <irq_leave_protection>
   1173c:	83 c4 10             	add    $0x10,%esp
}
   1173f:	90                   	nop
   11740:	c9                   	leave  
   11741:	c3                   	ret    

00011742 <task_set_sleep>:

/**
 * @brief 将任务加入睡眠状态
 */
void task_set_sleep(task_t *task, uint32_t ticks)
{
   11742:	55                   	push   %ebp
   11743:	89 e5                	mov    %esp,%ebp
   11745:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0)
   11748:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1174c:	74 2b                	je     11779 <task_set_sleep+0x37>
    {
        return;
    }

    task->sleep_ticks = ticks;
   1174e:	8b 55 0c             	mov    0xc(%ebp),%edx
   11751:	8b 45 08             	mov    0x8(%ebp),%eax
   11754:	89 50 34             	mov    %edx,0x34(%eax)
    task->state = TASK_SLEEP;
   11757:	8b 45 08             	mov    0x8(%ebp),%eax
   1175a:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   11760:	8b 45 08             	mov    0x8(%ebp),%eax
   11763:	83 c0 40             	add    $0x40,%eax
   11766:	83 ec 08             	sub    $0x8,%esp
   11769:	50                   	push   %eax
   1176a:	68 1c c0 01 00       	push   $0x1c01c
   1176f:	e8 04 35 00 00       	call   14c78 <list_insert_last>
   11774:	83 c4 10             	add    $0x10,%esp
   11777:	eb 01                	jmp    1177a <task_set_sleep+0x38>
        return;
   11779:	90                   	nop
}
   1177a:	c9                   	leave  
   1177b:	c3                   	ret    

0001177c <task_set_wakeup>:
 * @brief 将任务从延时队列移除
 *
 * @param task
 */
void task_set_wakeup(task_t *task)
{
   1177c:	55                   	push   %ebp
   1177d:	89 e5                	mov    %esp,%ebp
   1177f:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   11782:	8b 45 08             	mov    0x8(%ebp),%eax
   11785:	83 c0 40             	add    $0x40,%eax
   11788:	83 ec 08             	sub    $0x8,%esp
   1178b:	50                   	push   %eax
   1178c:	68 1c c0 01 00       	push   $0x1c01c
   11791:	e8 be 35 00 00       	call   14d54 <list_remove>
   11796:	83 c4 10             	add    $0x10,%esp
}
   11799:	90                   	nop
   1179a:	c9                   	leave  
   1179b:	c3                   	ret    

0001179c <sys_msleep>:
 * @brief 任务进入睡眠状态
 *
 * @param ms
 */
void sys_msleep(uint32_t ms)
{
   1179c:	55                   	push   %ebp
   1179d:	89 e5                	mov    %esp,%ebp
   1179f:	83 ec 18             	sub    $0x18,%esp
    // 至少延时1个tick
    if (ms < OS_TICK_MS)
   117a2:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   117a6:	77 07                	ja     117af <sys_msleep+0x13>
    {
        ms = OS_TICK_MS;
   117a8:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   117af:	e8 2c 15 00 00       	call   12ce0 <irq_enter_protection>
   117b4:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 从就绪队列移除，加入睡眠队列
    task_set_block(task_manager.curr_task);
   117b7:	a1 00 c0 01 00       	mov    0x1c000,%eax
   117bc:	83 ec 0c             	sub    $0xc,%esp
   117bf:	50                   	push   %eax
   117c0:	e8 5f fd ff ff       	call   11524 <task_set_block>
   117c5:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1)) / OS_TICK_MS);
   117c8:	8b 45 08             	mov    0x8(%ebp),%eax
   117cb:	83 c0 09             	add    $0x9,%eax
   117ce:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   117d3:	f7 e2                	mul    %edx
   117d5:	c1 ea 03             	shr    $0x3,%edx
   117d8:	a1 00 c0 01 00       	mov    0x1c000,%eax
   117dd:	83 ec 08             	sub    $0x8,%esp
   117e0:	52                   	push   %edx
   117e1:	50                   	push   %eax
   117e2:	e8 5b ff ff ff       	call   11742 <task_set_sleep>
   117e7:	83 c4 10             	add    $0x10,%esp

    // 进行一次调度
    task_dispatch();
   117ea:	e8 0e fe ff ff       	call   115fd <task_dispatch>

    irq_leave_protection(state);
   117ef:	83 ec 0c             	sub    $0xc,%esp
   117f2:	ff 75 f4             	pushl  -0xc(%ebp)
   117f5:	e8 fe 14 00 00       	call   12cf8 <irq_leave_protection>
   117fa:	83 c4 10             	add    $0x10,%esp
}
   117fd:	90                   	nop
   117fe:	c9                   	leave  
   117ff:	c3                   	ret    

00011800 <alloc_task>:

/**
 * @brief 分配一个任务结构
 */
static task_t *alloc_task(void)
{
   11800:	55                   	push   %ebp
   11801:	89 e5                	mov    %esp,%ebp
   11803:	83 ec 18             	sub    $0x18,%esp
    task_t *task = (task_t *)0;
   11806:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   1180d:	83 ec 0c             	sub    $0xc,%esp
   11810:	68 c0 23 02 00       	push   $0x223c0
   11815:	e8 55 29 00 00       	call   1416f <mutex_lock>
   1181a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++)
   1181d:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11824:	eb 28                	jmp    1184e <alloc_task+0x4e>
    {
        task_t *curr = task_table + i;
   11826:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11829:	69 c0 c4 00 00 00    	imul   $0xc4,%eax,%eax
   1182f:	05 c0 c1 01 00       	add    $0x1c1c0,%eax
   11834:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == '\0')
   11837:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1183a:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   1183e:	84 c0                	test   %al,%al
   11840:	75 08                	jne    1184a <alloc_task+0x4a>
        {
            task = curr;
   11842:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11845:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11848:	eb 0a                	jmp    11854 <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++)
   1184a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1184e:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   11852:	7e d2                	jle    11826 <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   11854:	83 ec 0c             	sub    $0xc,%esp
   11857:	68 c0 23 02 00       	push   $0x223c0
   1185c:	e8 a2 29 00 00       	call   14203 <mutex_unlock>
   11861:	83 c4 10             	add    $0x10,%esp

    return task;
   11864:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   11867:	c9                   	leave  
   11868:	c3                   	ret    

00011869 <free_task>:

/**
 * @brief 释放任务结构
 */
static void free_task(task_t *task)
{
   11869:	55                   	push   %ebp
   1186a:	89 e5                	mov    %esp,%ebp
   1186c:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   1186f:	83 ec 0c             	sub    $0xc,%esp
   11872:	68 c0 23 02 00       	push   $0x223c0
   11877:	e8 f3 28 00 00       	call   1416f <mutex_lock>
   1187c:	83 c4 10             	add    $0x10,%esp
    task->name[0] = '\0';
   1187f:	8b 45 08             	mov    0x8(%ebp),%eax
   11882:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   11886:	83 ec 0c             	sub    $0xc,%esp
   11889:	68 c0 23 02 00       	push   $0x223c0
   1188e:	e8 70 29 00 00       	call   14203 <mutex_unlock>
   11893:	83 c4 10             	add    $0x10,%esp
}
   11896:	90                   	nop
   11897:	c9                   	leave  
   11898:	c3                   	ret    

00011899 <sys_getpid>:

/**
 * 返回任务的pid
 */
int sys_getpid(void)
{
   11899:	55                   	push   %ebp
   1189a:	89 e5                	mov    %esp,%ebp
   1189c:	83 ec 10             	sub    $0x10,%esp
    task_t *curr_task = task_current();
   1189f:	e8 ab fc ff ff       	call   1154f <task_current>
   118a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   118a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   118aa:	8b 40 24             	mov    0x24(%eax),%eax
}
   118ad:	c9                   	leave  
   118ae:	c3                   	ret    

000118af <task_uninit>:

/**
 * @brief 任务初始时分配的各项资源
 */
void task_uninit(task_t *task)
{
   118af:	55                   	push   %ebp
   118b0:	89 e5                	mov    %esp,%ebp
   118b2:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel)
   118b5:	8b 45 08             	mov    0x8(%ebp),%eax
   118b8:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   118be:	85 c0                	test   %eax,%eax
   118c0:	74 15                	je     118d7 <task_uninit+0x28>
    {
        gdt_free_sel(task->tss_sel);
   118c2:	8b 45 08             	mov    0x8(%ebp),%eax
   118c5:	8b 80 c0 00 00 00    	mov    0xc0(%eax),%eax
   118cb:	83 ec 0c             	sub    $0xc,%esp
   118ce:	50                   	push   %eax
   118cf:	e8 1a 09 00 00       	call   121ee <gdt_free_sel>
   118d4:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0)
   118d7:	8b 45 08             	mov    0x8(%ebp),%eax
   118da:	8b 40 5c             	mov    0x5c(%eax),%eax
   118dd:	85 c0                	test   %eax,%eax
   118df:	74 17                	je     118f8 <task_uninit+0x49>
    {
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   118e1:	8b 45 08             	mov    0x8(%ebp),%eax
   118e4:	8b 40 5c             	mov    0x5c(%eax),%eax
   118e7:	2d 00 10 00 00       	sub    $0x1000,%eax
   118ec:	83 ec 0c             	sub    $0xc,%esp
   118ef:	50                   	push   %eax
   118f0:	e8 40 f3 ff ff       	call   10c35 <memory_free_page>
   118f5:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3)
   118f8:	8b 45 08             	mov    0x8(%ebp),%eax
   118fb:	8b 40 74             	mov    0x74(%eax),%eax
   118fe:	85 c0                	test   %eax,%eax
   11900:	74 12                	je     11914 <task_uninit+0x65>
    {
        memory_destroy_uvm(task->tss.cr3);
   11902:	8b 45 08             	mov    0x8(%ebp),%eax
   11905:	8b 40 74             	mov    0x74(%eax),%eax
   11908:	83 ec 0c             	sub    $0xc,%esp
   1190b:	50                   	push   %eax
   1190c:	e8 11 ef ff ff       	call   10822 <memory_destroy_uvm>
   11911:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   11914:	83 ec 04             	sub    $0x4,%esp
   11917:	68 c4 00 00 00       	push   $0xc4
   1191c:	6a 00                	push   $0x0
   1191e:	ff 75 08             	pushl  0x8(%ebp)
   11921:	e8 e9 2e 00 00       	call   1480f <kernel_memset>
   11926:	83 c4 10             	add    $0x10,%esp
}
   11929:	90                   	nop
   1192a:	c9                   	leave  
   1192b:	c3                   	ret    

0001192c <sys_fork>:

/**
 * @brief 创建进程的副本
 */
int sys_fork(void)
{
   1192c:	55                   	push   %ebp
   1192d:	89 e5                	mov    %esp,%ebp
   1192f:	83 ec 28             	sub    $0x28,%esp
    task_t *parent_task = task_current();
   11932:	e8 18 fc ff ff       	call   1154f <task_current>
   11937:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_t *child_task = alloc_task();
   1193a:	e8 c1 fe ff ff       	call   11800 <alloc_task>
   1193f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0)
   11942:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11946:	0f 84 36 01 00 00    	je     11a82 <sys_fork+0x156>
    {
        goto fork_failed;
    }
    syscall_frame_t *frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t)); // 拿到父进程的寄存器
   1194c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1194f:	8b 40 5c             	mov    0x5c(%eax),%eax
   11952:	83 e8 58             	sub    $0x58,%eax
   11955:	89 45 ec             	mov    %eax,-0x14(%ebp)
    // 对子进程进行初始化，并对必要的字段进行调整
    // 其中esp要减去系统调用的总参数字节大小，因为其是通过正常的ret返回, 而没有走系统调用处理的ret(参数个数返回)
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t) * SYSCALL_PARAM_COUNT);
   11958:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1195b:	8b 40 50             	mov    0x50(%eax),%eax
   1195e:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task, parent_task->name, 0, frame->eip,
   11961:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11964:	8b 40 34             	mov    0x34(%eax),%eax
   11967:	89 c1                	mov    %eax,%ecx
   11969:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1196c:	83 c0 04             	add    $0x4,%eax
   1196f:	83 ec 0c             	sub    $0xc,%esp
   11972:	52                   	push   %edx
   11973:	51                   	push   %ecx
   11974:	6a 00                	push   $0x0
   11976:	50                   	push   %eax
   11977:	ff 75 f0             	pushl  -0x10(%ebp)
   1197a:	e8 13 f8 ff ff       	call   11192 <task_init>
   1197f:	83 c4 20             	add    $0x20,%esp
   11982:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0)
   11985:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11989:	0f 88 f6 00 00 00    	js     11a85 <sys_fork+0x159>
    {
        goto fork_failed;
    }
    // 从父进程的栈中取部分状态，然后写入tss。
    // 注意检查esp, eip等是否在用户空间范围内，不然会造成page_fault
    tss_t *tss = &child_task->tss;
   1198f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11992:	83 c0 58             	add    $0x58,%eax
   11995:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0; // 子进程返回0
   11998:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1199b:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   119a2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119a5:	8b 40 24             	mov    0x24(%eax),%eax
   119a8:	89 c2                	mov    %eax,%edx
   119aa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119ad:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   119b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119b3:	8b 40 2c             	mov    0x2c(%eax),%eax
   119b6:	89 c2                	mov    %eax,%edx
   119b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119bb:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   119be:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119c1:	8b 40 28             	mov    0x28(%eax),%eax
   119c4:	89 c2                	mov    %eax,%edx
   119c6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119c9:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   119cc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119cf:	8b 40 18             	mov    0x18(%eax),%eax
   119d2:	89 c2                	mov    %eax,%edx
   119d4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119d7:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   119da:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119dd:	8b 40 14             	mov    0x14(%eax),%eax
   119e0:	89 c2                	mov    %eax,%edx
   119e2:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119e5:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   119e8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119eb:	8b 40 1c             	mov    0x1c(%eax),%eax
   119ee:	89 c2                	mov    %eax,%edx
   119f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   119f3:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   119f6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   119f9:	8b 40 38             	mov    0x38(%eax),%eax
   119fc:	89 c2                	mov    %eax,%edx
   119fe:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a01:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11a04:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a07:	8b 40 10             	mov    0x10(%eax),%eax
   11a0a:	89 c2                	mov    %eax,%edx
   11a0c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a0f:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11a12:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a15:	8b 40 0c             	mov    0xc(%eax),%eax
   11a18:	89 c2                	mov    %eax,%edx
   11a1a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a1d:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11a20:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a23:	8b 40 08             	mov    0x8(%eax),%eax
   11a26:	89 c2                	mov    %eax,%edx
   11a28:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a2b:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11a2e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a31:	8b 40 04             	mov    0x4(%eax),%eax
   11a34:	89 c2                	mov    %eax,%edx
   11a36:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a39:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11a3c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11a3f:	8b 00                	mov    (%eax),%eax
   11a41:	89 c2                	mov    %eax,%edx
   11a43:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11a46:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11a49:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a4c:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a4f:	89 50 28             	mov    %edx,0x28(%eax)
    // 复制父进程的内存空间到子进程
    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0)
   11a52:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11a55:	8b 40 74             	mov    0x74(%eax),%eax
   11a58:	83 ec 0c             	sub    $0xc,%esp
   11a5b:	50                   	push   %eax
   11a5c:	e8 d0 ee ff ff       	call   10931 <memory_copy_uvm>
   11a61:	83 c4 10             	add    $0x10,%esp
   11a64:	89 c2                	mov    %eax,%edx
   11a66:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a69:	89 50 74             	mov    %edx,0x74(%eax)
    {
        goto fork_failed;
    }
    // 创建成功，返回子进程的pid
    task_start(child_task);
   11a6c:	83 ec 0c             	sub    $0xc,%esp
   11a6f:	ff 75 f0             	pushl  -0x10(%ebp)
   11a72:	e8 64 f8 ff ff       	call   112db <task_start>
   11a77:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11a7a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a7d:	8b 40 24             	mov    0x24(%eax),%eax
   11a80:	eb 2b                	jmp    11aad <sys_fork+0x181>
        goto fork_failed;
   11a82:	90                   	nop
   11a83:	eb 01                	jmp    11a86 <sys_fork+0x15a>
        goto fork_failed;
   11a85:	90                   	nop
fork_failed:
    if (child_task)
   11a86:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11a8a:	74 1c                	je     11aa8 <sys_fork+0x17c>
    {
        task_uninit(child_task);
   11a8c:	83 ec 0c             	sub    $0xc,%esp
   11a8f:	ff 75 f0             	pushl  -0x10(%ebp)
   11a92:	e8 18 fe ff ff       	call   118af <task_uninit>
   11a97:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11a9a:	83 ec 0c             	sub    $0xc,%esp
   11a9d:	ff 75 f0             	pushl  -0x10(%ebp)
   11aa0:	e8 c4 fd ff ff       	call   11869 <free_task>
   11aa5:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11aa8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11aad:	c9                   	leave  
   11aae:	c3                   	ret    

00011aaf <load_phdr>:

/**
 * @brief 加载一个程序表头的数据到内存中
 */
static int load_phdr(int file, Elf32_Phdr *phdr, uint32_t page_dir)
{
   11aaf:	55                   	push   %ebp
   11ab0:	89 e5                	mov    %esp,%ebp
   11ab2:	83 ec 28             	sub    $0x28,%esp
    // 生成的ELF文件要求是页边界对齐的
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11ab5:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ab8:	8b 40 08             	mov    0x8(%eax),%eax
   11abb:	25 ff 0f 00 00       	and    $0xfff,%eax
   11ac0:	85 c0                	test   %eax,%eax
   11ac2:	74 1c                	je     11ae0 <load_phdr+0x31>
   11ac4:	68 b8 52 01 00       	push   $0x152b8
   11ac9:	68 c8 53 01 00       	push   $0x153c8
   11ace:	68 0e 02 00 00       	push   $0x20e
   11ad3:	68 3c 52 01 00       	push   $0x1523c
   11ad8:	e8 5b 30 00 00       	call   14b38 <panic>
   11add:	83 c4 10             	add    $0x10,%esp

    // 分配空间
    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11ae0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ae3:	8b 50 14             	mov    0x14(%eax),%edx
   11ae6:	8b 45 0c             	mov    0xc(%ebp),%eax
   11ae9:	8b 40 08             	mov    0x8(%eax),%eax
   11aec:	6a 07                	push   $0x7
   11aee:	52                   	push   %edx
   11aef:	50                   	push   %eax
   11af0:	ff 75 10             	pushl  0x10(%ebp)
   11af3:	e8 57 f0 ff ff       	call   10b4f <memory_alloc_for_page_dir>
   11af8:	83 c4 10             	add    $0x10,%esp
   11afb:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0)
   11afe:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11b02:	79 1a                	jns    11b1e <load_phdr+0x6f>
    {
        log_printf("no memory");
   11b04:	83 ec 0c             	sub    $0xc,%esp
   11b07:	68 e3 52 01 00       	push   $0x152e3
   11b0c:	e8 ce 32 00 00       	call   14ddf <log_printf>
   11b11:	83 c4 10             	add    $0x10,%esp
        return -1;
   11b14:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b19:	e9 b8 00 00 00       	jmp    11bd6 <load_phdr+0x127>
    }

    // 调整当前的读写位置
    if (sys_lseek(file, phdr->p_offset, 0) < 0)
   11b1e:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b21:	8b 40 04             	mov    0x4(%eax),%eax
   11b24:	83 ec 04             	sub    $0x4,%esp
   11b27:	6a 00                	push   $0x0
   11b29:	50                   	push   %eax
   11b2a:	ff 75 08             	pushl  0x8(%ebp)
   11b2d:	e8 ce 24 00 00       	call   14000 <sys_lseek>
   11b32:	83 c4 10             	add    $0x10,%esp
   11b35:	85 c0                	test   %eax,%eax
   11b37:	79 1a                	jns    11b53 <load_phdr+0xa4>
    {
        log_printf("read file failed");
   11b39:	83 ec 0c             	sub    $0xc,%esp
   11b3c:	68 ed 52 01 00       	push   $0x152ed
   11b41:	e8 99 32 00 00       	call   14ddf <log_printf>
   11b46:	83 c4 10             	add    $0x10,%esp
        return -1;
   11b49:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11b4e:	e9 83 00 00 00       	jmp    11bd6 <load_phdr+0x127>
    }

    // 为段分配所有的内存空间.后续操作如果失败，将在上层释放
    // 简单起见，设置成可写模式，也许可考虑根据phdr->flags设置成只读
    // 因为没有找到该值的详细定义，所以没有加上
    uint32_t vaddr = phdr->p_vaddr; // 内存中的起始地址
   11b53:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b56:	8b 40 08             	mov    0x8(%eax),%eax
   11b59:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz; // 文件需要拷贝的数据量
   11b5c:	8b 45 0c             	mov    0xc(%ebp),%eax
   11b5f:	8b 40 10             	mov    0x10(%eax),%eax
   11b62:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0)
   11b65:	eb 64                	jmp    11bcb <load_phdr+0x11c>
    {
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size; // 至多copy一页的数据
   11b67:	b8 00 10 00 00       	mov    $0x1000,%eax
   11b6c:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11b73:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11b77:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr); // 拿到物理地址，因为该页还没启用，不能直接copy
   11b7a:	83 ec 08             	sub    $0x8,%esp
   11b7d:	ff 75 f4             	pushl  -0xc(%ebp)
   11b80:	ff 75 10             	pushl  0x10(%ebp)
   11b83:	e8 fe ee ff ff       	call   10a86 <memory_get_paddr>
   11b88:	83 c4 10             	add    $0x10,%esp
   11b8b:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        // 注意，这里用的页表仍然是当前的
        if (sys_read(file, (char *)paddr, curr_size) < curr_size)
   11b8e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b91:	83 ec 04             	sub    $0x4,%esp
   11b94:	ff 75 e8             	pushl  -0x18(%ebp)
   11b97:	50                   	push   %eax
   11b98:	ff 75 08             	pushl  0x8(%ebp)
   11b9b:	e8 fb 23 00 00       	call   13f9b <sys_read>
   11ba0:	83 c4 10             	add    $0x10,%esp
   11ba3:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11ba6:	7e 17                	jle    11bbf <load_phdr+0x110>
        {
            log_printf("read file failed");
   11ba8:	83 ec 0c             	sub    $0xc,%esp
   11bab:	68 ed 52 01 00       	push   $0x152ed
   11bb0:	e8 2a 32 00 00       	call   14ddf <log_printf>
   11bb5:	83 c4 10             	add    $0x10,%esp
            return -1;
   11bb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11bbd:	eb 17                	jmp    11bd6 <load_phdr+0x127>
        }

        size -= curr_size;
   11bbf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11bc2:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11bc5:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11bc8:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0)
   11bcb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11bcf:	75 96                	jne    11b67 <load_phdr+0xb8>

    // bss区考虑由crt0和cstart自行清0，这样更简单一些
    // 如果在上边进行处理，需要考虑到有可能的跨页表填充数据，懒得写代码
    // 或者也可修改memory_alloc_for_page_dir，增加分配时清0页表，但这样开销较大
    // 所以，直接放在cstart哐crt0中直接内存填0，比较简单
    return 0;
   11bd1:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11bd6:	c9                   	leave  
   11bd7:	c3                   	ret    

00011bd8 <load_elf_file>:

/**
 * @brief 加载elf文件到内存中
 */
static uint32_t load_elf_file(task_t *task, const char *name, uint32_t page_dir)
{
   11bd8:	55                   	push   %ebp
   11bd9:	89 e5                	mov    %esp,%ebp
   11bdb:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    int file = sys_open(name, 0);
   11bde:	83 ec 08             	sub    $0x8,%esp
   11be1:	6a 00                	push   $0x0
   11be3:	ff 75 0c             	pushl  0xc(%ebp)
   11be6:	e8 77 23 00 00       	call   13f62 <sys_open>
   11beb:	83 c4 10             	add    $0x10,%esp
   11bee:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0)
   11bf1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11bf5:	79 18                	jns    11c0f <load_elf_file+0x37>
    {
        log_printf("open failed. %s", name);
   11bf7:	83 ec 08             	sub    $0x8,%esp
   11bfa:	ff 75 0c             	pushl  0xc(%ebp)
   11bfd:	68 fe 52 01 00       	push   $0x152fe
   11c02:	e8 d8 31 00 00       	call   14ddf <log_printf>
   11c07:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11c0a:	e9 c1 01 00 00       	jmp    11dd0 <load_elf_file+0x1f8>
    }
    // 先读取文件头
    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11c0f:	83 ec 04             	sub    $0x4,%esp
   11c12:	6a 34                	push   $0x34
   11c14:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11c17:	50                   	push   %eax
   11c18:	ff 75 ec             	pushl  -0x14(%ebp)
   11c1b:	e8 7b 23 00 00       	call   13f9b <sys_read>
   11c20:	83 c4 10             	add    $0x10,%esp
   11c23:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr))
   11c26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11c29:	83 f8 33             	cmp    $0x33,%eax
   11c2c:	77 18                	ja     11c46 <load_elf_file+0x6e>
    {
        log_printf("elf hdr too small. size=%d", cnt);
   11c2e:	83 ec 08             	sub    $0x8,%esp
   11c31:	ff 75 e8             	pushl  -0x18(%ebp)
   11c34:	68 0e 53 01 00       	push   $0x1530e
   11c39:	e8 a1 31 00 00       	call   14ddf <log_printf>
   11c3e:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11c41:	e9 8a 01 00 00       	jmp    11dd0 <load_elf_file+0x1f8>
    }
    // 做点必要性的检查。当然可以再做其它检查
    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E') || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F'))
   11c46:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11c4a:	3c 7f                	cmp    $0x7f,%al
   11c4c:	75 18                	jne    11c66 <load_elf_file+0x8e>
   11c4e:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11c52:	3c 45                	cmp    $0x45,%al
   11c54:	75 10                	jne    11c66 <load_elf_file+0x8e>
   11c56:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11c5a:	3c 4c                	cmp    $0x4c,%al
   11c5c:	75 08                	jne    11c66 <load_elf_file+0x8e>
   11c5e:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11c62:	3c 46                	cmp    $0x46,%al
   11c64:	74 15                	je     11c7b <load_elf_file+0xa3>
    {
        log_printf("check elf indent failed.");
   11c66:	83 ec 0c             	sub    $0xc,%esp
   11c69:	68 29 53 01 00       	push   $0x15329
   11c6e:	e8 6c 31 00 00       	call   14ddf <log_printf>
   11c73:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11c76:	e9 55 01 00 00       	jmp    11dd0 <load_elf_file+0x1f8>
    }

    // 必须是可执行文件和针对386处理器的类型，且有入口
    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0))
   11c7b:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11c7f:	66 83 f8 02          	cmp    $0x2,%ax
   11c83:	75 11                	jne    11c96 <load_elf_file+0xbe>
   11c85:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11c89:	66 83 f8 03          	cmp    $0x3,%ax
   11c8d:	75 07                	jne    11c96 <load_elf_file+0xbe>
   11c8f:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11c92:	85 c0                	test   %eax,%eax
   11c94:	75 15                	jne    11cab <load_elf_file+0xd3>
    {
        log_printf("check elf type or entry failed.");
   11c96:	83 ec 0c             	sub    $0xc,%esp
   11c99:	68 44 53 01 00       	push   $0x15344
   11c9e:	e8 3c 31 00 00       	call   14ddf <log_printf>
   11ca3:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11ca6:	e9 25 01 00 00       	jmp    11dd0 <load_elf_file+0x1f8>
    }

    // 必须有程序头部
    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0))
   11cab:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11caf:	66 85 c0             	test   %ax,%ax
   11cb2:	74 07                	je     11cbb <load_elf_file+0xe3>
   11cb4:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11cb7:	85 c0                	test   %eax,%eax
   11cb9:	75 15                	jne    11cd0 <load_elf_file+0xf8>
    {
        log_printf("none programe header");
   11cbb:	83 ec 0c             	sub    $0xc,%esp
   11cbe:	68 64 53 01 00       	push   $0x15364
   11cc3:	e8 17 31 00 00       	call   14ddf <log_printf>
   11cc8:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11ccb:	e9 00 01 00 00       	jmp    11dd0 <load_elf_file+0x1f8>
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    uint32_t e_phoff = elf_hdr.e_phoff;
   11cd0:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11cd3:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11cd6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11cdd:	e9 cb 00 00 00       	jmp    11dad <load_elf_file+0x1d5>
    {
        if (sys_lseek(file, e_phoff, 0) < 0)
   11ce2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ce5:	83 ec 04             	sub    $0x4,%esp
   11ce8:	6a 00                	push   $0x0
   11cea:	50                   	push   %eax
   11ceb:	ff 75 ec             	pushl  -0x14(%ebp)
   11cee:	e8 0d 23 00 00       	call   14000 <sys_lseek>
   11cf3:	83 c4 10             	add    $0x10,%esp
   11cf6:	85 c0                	test   %eax,%eax
   11cf8:	79 15                	jns    11d0f <load_elf_file+0x137>
        {
            log_printf("read file failed");
   11cfa:	83 ec 0c             	sub    $0xc,%esp
   11cfd:	68 ed 52 01 00       	push   $0x152ed
   11d02:	e8 d8 30 00 00       	call   14ddf <log_printf>
   11d07:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11d0a:	e9 c1 00 00 00       	jmp    11dd0 <load_elf_file+0x1f8>
        }

        // 读取程序头后解析，这里不用读取到新进程的页表中，因为只是临时使用下
        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11d0f:	83 ec 04             	sub    $0x4,%esp
   11d12:	6a 20                	push   $0x20
   11d14:	8d 45 90             	lea    -0x70(%ebp),%eax
   11d17:	50                   	push   %eax
   11d18:	ff 75 ec             	pushl  -0x14(%ebp)
   11d1b:	e8 7b 22 00 00       	call   13f9b <sys_read>
   11d20:	83 c4 10             	add    $0x10,%esp
   11d23:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr))
   11d26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d29:	83 f8 1f             	cmp    $0x1f,%eax
   11d2c:	77 15                	ja     11d43 <load_elf_file+0x16b>
        {
            log_printf("read file failed");
   11d2e:	83 ec 0c             	sub    $0xc,%esp
   11d31:	68 ed 52 01 00       	push   $0x152ed
   11d36:	e8 a4 30 00 00       	call   14ddf <log_printf>
   11d3b:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11d3e:	e9 8d 00 00 00       	jmp    11dd0 <load_elf_file+0x1f8>
        }

        // 简单做一些检查，如有必要，可自行加更多
        // 主要判断是否是可加载的类型，并且要求加载的地址必须是用户空间
        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE))
   11d43:	8b 45 90             	mov    -0x70(%ebp),%eax
   11d46:	83 f8 01             	cmp    $0x1,%eax
   11d49:	75 53                	jne    11d9e <load_elf_file+0x1c6>
   11d4b:	8b 45 98             	mov    -0x68(%ebp),%eax
   11d4e:	85 c0                	test   %eax,%eax
   11d50:	79 4c                	jns    11d9e <load_elf_file+0x1c6>
        {
            continue;
        }

        // 加载当前程序头
        int err = load_phdr(file, &elf_phdr, page_dir);
   11d52:	83 ec 04             	sub    $0x4,%esp
   11d55:	ff 75 10             	pushl  0x10(%ebp)
   11d58:	8d 45 90             	lea    -0x70(%ebp),%eax
   11d5b:	50                   	push   %eax
   11d5c:	ff 75 ec             	pushl  -0x14(%ebp)
   11d5f:	e8 4b fd ff ff       	call   11aaf <load_phdr>
   11d64:	83 c4 10             	add    $0x10,%esp
   11d67:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0)
   11d6a:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11d6e:	79 12                	jns    11d82 <load_elf_file+0x1aa>
        {
            log_printf("load program hdr failed");
   11d70:	83 ec 0c             	sub    $0xc,%esp
   11d73:	68 79 53 01 00       	push   $0x15379
   11d78:	e8 62 30 00 00       	call   14ddf <log_printf>
   11d7d:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11d80:	eb 4e                	jmp    11dd0 <load_elf_file+0x1f8>
        }

        // 简单起见，不检查了，以最后的地址为bss的地址
        // 最后地址是最后一个elf段加载的地址
        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11d82:	8b 55 98             	mov    -0x68(%ebp),%edx
   11d85:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11d88:	01 c2                	add    %eax,%edx
   11d8a:	8b 45 08             	mov    0x8(%ebp),%eax
   11d8d:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11d90:	8b 45 08             	mov    0x8(%ebp),%eax
   11d93:	8b 50 2c             	mov    0x2c(%eax),%edx
   11d96:	8b 45 08             	mov    0x8(%ebp),%eax
   11d99:	89 50 30             	mov    %edx,0x30(%eax)
   11d9c:	eb 01                	jmp    11d9f <load_elf_file+0x1c7>
            continue;
   11d9e:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize)
   11d9f:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11da3:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11da7:	0f b7 c0             	movzwl %ax,%eax
   11daa:	01 45 f4             	add    %eax,-0xc(%ebp)
   11dad:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11db1:	0f b7 c0             	movzwl %ax,%eax
   11db4:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11db7:	0f 8c 25 ff ff ff    	jl     11ce2 <load_elf_file+0x10a>
    }
    sys_close(file);
   11dbd:	83 ec 0c             	sub    $0xc,%esp
   11dc0:	ff 75 ec             	pushl  -0x14(%ebp)
   11dc3:	e8 5c 22 00 00       	call   14024 <sys_close>
   11dc8:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11dcb:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11dce:	eb 19                	jmp    11de9 <load_elf_file+0x211>
load_failed:
    // 文件已经打开
    if (file >= 0)
   11dd0:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11dd4:	78 0e                	js     11de4 <load_elf_file+0x20c>
    {
        sys_close(file);
   11dd6:	83 ec 0c             	sub    $0xc,%esp
   11dd9:	ff 75 ec             	pushl  -0x14(%ebp)
   11ddc:	e8 43 22 00 00       	call   14024 <sys_close>
   11de1:	83 c4 10             	add    $0x10,%esp
    }
    return 0;
   11de4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11de9:	c9                   	leave  
   11dea:	c3                   	ret    

00011deb <copy_args>:

/**
 * @brief 复制进程参数到栈中。注意argv和env指向的空间在另一个页表里
 */
static int copy_args(char *to, uint32_t page_dir, int argc, char **argv)
{
   11deb:	55                   	push   %ebp
   11dec:	89 e5                	mov    %esp,%ebp
   11dee:	83 ec 38             	sub    $0x38,%esp
    // 在stack_top中依次写入argc, argv指针，参数字符串
    task_args_t task_args;
    task_args.argc = argc;
   11df1:	8b 45 10             	mov    0x10(%ebp),%eax
   11df4:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11df7:	8b 45 08             	mov    0x8(%ebp),%eax
   11dfa:	83 c0 0c             	add    $0xc,%eax
   11dfd:	89 45 dc             	mov    %eax,-0x24(%ebp)

    // 复制各项参数, 跳过task_args和参数表
    // 各argv参数写入的内存空间
    char *dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1); // 留出结束符
   11e00:	8b 45 10             	mov    0x10(%ebp),%eax
   11e03:	83 c0 04             	add    $0x4,%eax
   11e06:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11e10:	01 d0                	add    %edx,%eax
   11e12:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // argv表
    char **dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11e15:	8b 45 08             	mov    0x8(%ebp),%eax
   11e18:	83 c0 0c             	add    $0xc,%eax
   11e1b:	83 ec 08             	sub    $0x8,%esp
   11e1e:	50                   	push   %eax
   11e1f:	ff 75 0c             	pushl  0xc(%ebp)
   11e22:	e8 5f ec ff ff       	call   10a86 <memory_get_paddr>
   11e27:	83 c4 10             	add    $0x10,%esp
   11e2a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11e2d:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11e31:	75 1c                	jne    11e4f <copy_args+0x64>
   11e33:	68 91 53 01 00       	push   $0x15391
   11e38:	68 d4 53 01 00       	push   $0x153d4
   11e3d:	68 a8 02 00 00       	push   $0x2a8
   11e42:	68 3c 52 01 00       	push   $0x1523c
   11e47:	e8 ec 2c 00 00       	call   14b38 <panic>
   11e4c:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++)
   11e4f:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e56:	e9 82 00 00 00       	jmp    11edd <copy_args+0xf2>
    {
        char *from = argv[i];
   11e5b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11e5e:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11e65:	8b 45 14             	mov    0x14(%ebp),%eax
   11e68:	01 d0                	add    %edx,%eax
   11e6a:	8b 00                	mov    (%eax),%eax
   11e6c:	89 45 e8             	mov    %eax,-0x18(%ebp)

        // 不能用kernel_strcpy，因为to和argv不在一个页表里
        int len = kernel_strlen(from) + 1; // 包含结束符
   11e6f:	83 ec 0c             	sub    $0xc,%esp
   11e72:	ff 75 e8             	pushl  -0x18(%ebp)
   11e75:	e8 0b 29 00 00       	call   14785 <kernel_strlen>
   11e7a:	83 c4 10             	add    $0x10,%esp
   11e7d:	83 c0 01             	add    $0x1,%eax
   11e80:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   11e83:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   11e86:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11e89:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e8c:	51                   	push   %ecx
   11e8d:	52                   	push   %edx
   11e8e:	ff 75 0c             	pushl  0xc(%ebp)
   11e91:	50                   	push   %eax
   11e92:	e8 35 ec ff ff       	call   10acc <memory_copy_uvm_data>
   11e97:	83 c4 10             	add    $0x10,%esp
   11e9a:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   11e9d:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11ea1:	79 1c                	jns    11ebf <copy_args+0xd4>
   11ea3:	68 a3 53 01 00       	push   $0x153a3
   11ea8:	68 d4 53 01 00       	push   $0x153d4
   11ead:	68 b1 02 00 00       	push   $0x2b1
   11eb2:	68 3c 52 01 00       	push   $0x1523c
   11eb7:	e8 7c 2c 00 00       	call   14b38 <panic>
   11ebc:	83 c4 10             	add    $0x10,%esp

        // 关联arg
        dest_argv_tb[i] = dest_arg;
   11ebf:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ec2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ec9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ecc:	01 c2                	add    %eax,%edx
   11ece:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11ed1:	89 02                	mov    %eax,(%edx)

        // 记录下位置后，复制的位置前移
        dest_arg += len;
   11ed3:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11ed6:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++)
   11ed9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11edd:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ee0:	3b 45 10             	cmp    0x10(%ebp),%eax
   11ee3:	0f 8c 72 ff ff ff    	jl     11e5b <copy_args+0x70>
    }
    // 可能存在无参的情况，此时不需要写入
    if (argc)
   11ee9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   11eed:	74 15                	je     11f04 <copy_args+0x119>
    {
        dest_argv_tb[argc] = '\0';
   11eef:	8b 45 10             	mov    0x10(%ebp),%eax
   11ef2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ef9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11efc:	01 d0                	add    %edx,%eax
   11efe:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 写入task_args
    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   11f04:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   11f07:	8b 45 08             	mov    0x8(%ebp),%eax
   11f0a:	6a 0c                	push   $0xc
   11f0c:	52                   	push   %edx
   11f0d:	ff 75 0c             	pushl  0xc(%ebp)
   11f10:	50                   	push   %eax
   11f11:	e8 b6 eb ff ff       	call   10acc <memory_copy_uvm_data>
   11f16:	83 c4 10             	add    $0x10,%esp
}
   11f19:	c9                   	leave  
   11f1a:	c3                   	ret    

00011f1b <sys_execve>:
 * @brief 加载一个进程
 * 这个比较复杂，argv/name/env都是原进程空间中的数据，execve中涉及到页表的切换
 * 在对argv和name进行处理时，会涉及到不同进程空间中数据的传递。
 */
int sys_execve(char *name, char **argv, char **env)
{
   11f1b:	55                   	push   %ebp
   11f1c:	89 e5                	mov    %esp,%ebp
   11f1e:	83 ec 28             	sub    $0x28,%esp
    task_t *task = task_current();
   11f21:	e8 29 f6 ff ff       	call   1154f <task_current>
   11f26:	89 45 f4             	mov    %eax,-0xc(%ebp)
    // 后面会切换页表，所以先处理需要从进程空间取数据的情况
    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   11f29:	83 ec 0c             	sub    $0xc,%esp
   11f2c:	ff 75 08             	pushl  0x8(%ebp)
   11f2f:	e8 3a 2c 00 00       	call   14b6e <get_file_name>
   11f34:	83 c4 10             	add    $0x10,%esp
   11f37:	89 c2                	mov    %eax,%edx
   11f39:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f3c:	83 c0 04             	add    $0x4,%eax
   11f3f:	83 ec 04             	sub    $0x4,%esp
   11f42:	6a 20                	push   $0x20
   11f44:	52                   	push   %edx
   11f45:	50                   	push   %eax
   11f46:	e8 4c 27 00 00       	call   14697 <kernel_strncpy>
   11f4b:	83 c4 10             	add    $0x10,%esp
    // 现在开始加载了，先准备应用页表，由于所有操作均在内核区中进行，所以可以直接先切换到新页表
    uint32_t old_page_dir = task->tss.cr3;
   11f4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11f51:	8b 40 74             	mov    0x74(%eax),%eax
   11f54:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   11f57:	e8 41 e8 ff ff       	call   1079d <memory_create_uvm>
   11f5c:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir)
   11f5f:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f63:	0f 84 27 01 00 00    	je     12090 <sys_execve+0x175>
    {
        goto exec_failed;
    }
    // 加载elf文件到内存中。要放在开启新页表之后，这样才能对相应的内存区域写
    uint32_t entry = load_elf_file(task, name, new_page_dir); // 暂时置用task->name表示
   11f69:	83 ec 04             	sub    $0x4,%esp
   11f6c:	ff 75 ec             	pushl  -0x14(%ebp)
   11f6f:	ff 75 08             	pushl  0x8(%ebp)
   11f72:	ff 75 f4             	pushl  -0xc(%ebp)
   11f75:	e8 5e fc ff ff       	call   11bd8 <load_elf_file>
   11f7a:	83 c4 10             	add    $0x10,%esp
   11f7d:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0)
   11f80:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11f84:	0f 84 09 01 00 00    	je     12093 <sys_execve+0x178>
    {
        goto exec_failed;
    }

    // 准备用户栈空间，预留环境环境及参数的空间
    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE; // 预留一部分参数空间
   11f8a:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   11f91:	6a 07                	push   $0x7
   11f93:	68 00 40 1f 00       	push   $0x1f4000
   11f98:	68 00 c0 e0 df       	push   $0xdfe0c000
   11f9d:	ff 75 ec             	pushl  -0x14(%ebp)
   11fa0:	e8 aa eb ff ff       	call   10b4f <memory_alloc_for_page_dir>
   11fa5:	83 c4 10             	add    $0x10,%esp
   11fa8:	89 45 e0             	mov    %eax,-0x20(%ebp)
                                        MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                                        MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0)
   11fab:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11faf:	0f 88 e1 00 00 00    	js     12096 <sys_execve+0x17b>
    {
        goto exec_failed;
    }

    // 复制参数，写入到栈顶的后边
    int argc = strings_count(argv);
   11fb5:	83 ec 0c             	sub    $0xc,%esp
   11fb8:	ff 75 0c             	pushl  0xc(%ebp)
   11fbb:	e8 f4 2b 00 00       	call   14bb4 <strings_count>
   11fc0:	83 c4 10             	add    $0x10,%esp
   11fc3:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   11fc6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11fc9:	ff 75 0c             	pushl  0xc(%ebp)
   11fcc:	ff 75 dc             	pushl  -0x24(%ebp)
   11fcf:	ff 75 ec             	pushl  -0x14(%ebp)
   11fd2:	50                   	push   %eax
   11fd3:	e8 13 fe ff ff       	call   11deb <copy_args>
   11fd8:	83 c4 10             	add    $0x10,%esp
   11fdb:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0)
   11fde:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   11fe2:	0f 88 b1 00 00 00    	js     12099 <sys_execve+0x17e>

    // 加载完毕，为程序的执行做必要准备
    // 注意，exec的作用是替换掉当前进程，所以只要改变当前进程的执行流即可
    // 当该进程恢复运行时，像完全重新运行一样，所以用户栈要设置成初始模式
    // 运行地址要设备成整个程序的入口地址
    syscall_frame_t *frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   11fe8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11feb:	8b 40 5c             	mov    0x5c(%eax),%eax
   11fee:	83 e8 58             	sub    $0x58,%eax
   11ff1:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   11ff4:	8b 55 e8             	mov    -0x18(%ebp),%edx
   11ff7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   11ffa:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   11ffd:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12000:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   12007:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1200a:	8b 50 28             	mov    0x28(%eax),%edx
   1200d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12010:	89 50 2c             	mov    %edx,0x2c(%eax)
   12013:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12016:	8b 50 2c             	mov    0x2c(%eax),%edx
   12019:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1201c:	89 50 24             	mov    %edx,0x24(%eax)
   1201f:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12022:	8b 50 24             	mov    0x24(%eax),%edx
   12025:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12028:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   1202b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1202e:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   12035:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12038:	8b 50 1c             	mov    0x1c(%eax),%edx
   1203b:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1203e:	89 50 14             	mov    %edx,0x14(%eax)
   12041:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12044:	8b 50 14             	mov    0x14(%eax),%edx
   12047:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1204a:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT | EFLAGS_IF; // 段寄存器无需修改
   1204d:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12050:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    // 内核栈不用设置，保持不变，后面调用memory_destroy_uvm并不会销毁内核栈的映射。
    // 但用户栈需要更改, 同样要加上调用门的参数压栈空间
    frame->esp = stack_top - sizeof(uint32_t) * SYSCALL_PARAM_COUNT;
   12056:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12059:	83 e8 14             	sub    $0x14,%eax
   1205c:	89 c2                	mov    %eax,%edx
   1205e:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12061:	89 50 50             	mov    %edx,0x50(%eax)

    // 切换到新的页表
    task->tss.cr3 = new_page_dir;
   12064:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12067:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1206a:	89 50 74             	mov    %edx,0x74(%eax)
    mmu_set_page_dir(new_page_dir); // 切换至新的页表。由于不用访问原栈及数据，所以并无问题
   1206d:	83 ec 0c             	sub    $0xc,%esp
   12070:	ff 75 ec             	pushl  -0x14(%ebp)
   12073:	e8 71 ef ff ff       	call   10fe9 <mmu_set_page_dir>
   12078:	83 c4 10             	add    $0x10,%esp

    // 调整页表，切换成新的，同时释放掉之前的
    // 当前使用的是内核栈，而内核栈并未映射到进程地址空间中，所以下面的释放没有问题
    memory_destroy_uvm(old_page_dir); // 再释放掉了原进程的内容空间
   1207b:	83 ec 0c             	sub    $0xc,%esp
   1207e:	ff 75 f0             	pushl  -0x10(%ebp)
   12081:	e8 9c e7 ff ff       	call   10822 <memory_destroy_uvm>
   12086:	83 c4 10             	add    $0x10,%esp

    // 当从系统调用中返回时，将切换至新进程的入口地址运行，并且进程能够获取参数
    // 注意，如果用户栈设置不当，可能导致返回后运行出现异常。可在gdb中使用nexti单步观察运行流程
    return 0;
   12089:	b8 00 00 00 00       	mov    $0x0,%eax
   1208e:	eb 3a                	jmp    120ca <sys_execve+0x1af>
        goto exec_failed;
   12090:	90                   	nop
   12091:	eb 07                	jmp    1209a <sys_execve+0x17f>
        goto exec_failed;
   12093:	90                   	nop
   12094:	eb 04                	jmp    1209a <sys_execve+0x17f>
        goto exec_failed;
   12096:	90                   	nop
   12097:	eb 01                	jmp    1209a <sys_execve+0x17f>
        goto exec_failed;
   12099:	90                   	nop

exec_failed: // 必要的资源释放
    if (new_page_dir)
   1209a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1209e:	74 25                	je     120c5 <sys_execve+0x1aa>
    {
        // 有页表空间切换，切换至旧页表，销毁新页表
        task->tss.cr3 = old_page_dir;
   120a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120a3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   120a6:	89 50 74             	mov    %edx,0x74(%eax)
        mmu_set_page_dir(old_page_dir);
   120a9:	83 ec 0c             	sub    $0xc,%esp
   120ac:	ff 75 f0             	pushl  -0x10(%ebp)
   120af:	e8 35 ef ff ff       	call   10fe9 <mmu_set_page_dir>
   120b4:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   120b7:	83 ec 0c             	sub    $0xc,%esp
   120ba:	ff 75 ec             	pushl  -0x14(%ebp)
   120bd:	e8 60 e7 ff ff       	call   10822 <memory_destroy_uvm>
   120c2:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   120c5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   120ca:	c9                   	leave  
   120cb:	c3                   	ret    

000120cc <sys_yield>:

/**
 * @brief 当前任务主动放弃CPU
 */
int sys_yield(void)
{
   120cc:	55                   	push   %ebp
   120cd:	89 e5                	mov    %esp,%ebp
   120cf:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   120d2:	e8 09 0c 00 00       	call   12ce0 <irq_enter_protection>
   120d7:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1)
   120da:	83 ec 0c             	sub    $0xc,%esp
   120dd:	68 04 c0 01 00       	push   $0x1c004
   120e2:	e8 ce ee ff ff       	call   10fb5 <list_count>
   120e7:	83 c4 10             	add    $0x10,%esp
   120ea:	83 f8 01             	cmp    $0x1,%eax
   120ed:	7e 29                	jle    12118 <sys_yield+0x4c>
    {
        task_t *curr_task = task_current();
   120ef:	e8 5b f4 ff ff       	call   1154f <task_current>
   120f4:	89 45 f0             	mov    %eax,-0x10(%ebp)

        // 如果队列中还有其它任务，则将当前任务移入到队列尾部
        task_set_block(curr_task);
   120f7:	83 ec 0c             	sub    $0xc,%esp
   120fa:	ff 75 f0             	pushl  -0x10(%ebp)
   120fd:	e8 22 f4 ff ff       	call   11524 <task_set_block>
   12102:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   12105:	83 ec 0c             	sub    $0xc,%esp
   12108:	ff 75 f0             	pushl  -0x10(%ebp)
   1210b:	e8 e0 f3 ff ff       	call   114f0 <task_set_ready>
   12110:	83 c4 10             	add    $0x10,%esp

        // 切换至下一个任务，在切换完成前要保护，不然可能下一任务
        // 由于某些原因运行后阻塞或删除，再回到这里切换将发生问题
        task_dispatch();
   12113:	e8 e5 f4 ff ff       	call   115fd <task_dispatch>
    }
    irq_leave_protection(state);
   12118:	83 ec 0c             	sub    $0xc,%esp
   1211b:	ff 75 f4             	pushl  -0xc(%ebp)
   1211e:	e8 d5 0b 00 00       	call   12cf8 <irq_leave_protection>
   12123:	83 c4 10             	add    $0x10,%esp

    return 0;
   12126:	b8 00 00 00 00       	mov    $0x0,%eax
   1212b:	c9                   	leave  
   1212c:	c3                   	ret    

0001212d <lgdt>:
{
   1212d:	55                   	push   %ebp
   1212e:	89 e5                	mov    %esp,%ebp
   12130:	83 ec 10             	sub    $0x10,%esp
    gdt.start31_16 = start >> 16;
   12133:	8b 45 08             	mov    0x8(%ebp),%eax
   12136:	c1 e8 10             	shr    $0x10,%eax
   12139:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
   1213d:	8b 45 08             	mov    0x8(%ebp),%eax
   12140:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
   12144:	8b 45 0c             	mov    0xc(%ebp),%eax
   12147:	83 e8 01             	sub    $0x1,%eax
   1214a:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
   1214e:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   12152:	90                   	nop
   12153:	c9                   	leave  
   12154:	c3                   	ret    

00012155 <far_jump>:
{
   12155:	55                   	push   %ebp
   12156:	89 e5                	mov    %esp,%ebp
   12158:	83 ec 10             	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
   1215b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1215e:	89 45 f8             	mov    %eax,-0x8(%ebp)
   12161:	8b 45 08             	mov    0x8(%ebp),%eax
   12164:	89 45 fc             	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
   12167:	8d 45 f8             	lea    -0x8(%ebp),%eax
   1216a:	ff 28                	ljmp   *(%eax)
}
   1216c:	90                   	nop
   1216d:	c9                   	leave  
   1216e:	c3                   	ret    

0001216f <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;

void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr)
{
   1216f:	55                   	push   %ebp
   12170:	89 e5                	mov    %esp,%ebp
   12172:	83 ec 14             	sub    $0x14,%esp
   12175:	8b 45 14             	mov    0x14(%ebp),%eax
   12178:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t *desc = gdt_table + (selector / sizeof(segment_desc_t)); //
   1217c:	8b 45 08             	mov    0x8(%ebp),%eax
   1217f:	83 e0 f8             	and    $0xfffffff8,%eax
   12182:	05 e0 23 02 00       	add    $0x223e0,%eax
   12187:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 设置limit单位为4kB
    if (limit > 0xFFFF)
   1218a:	81 7d 10 ff ff 00 00 	cmpl   $0xffff,0x10(%ebp)
   12191:	76 0f                	jbe    121a2 <segment_desc_set+0x33>
    {
        attr |= SEG_G; // G 标志位
   12193:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
        limit /= 0x1000;
   12199:	8b 45 10             	mov    0x10(%ebp),%eax
   1219c:	c1 e8 0c             	shr    $0xc,%eax
   1219f:	89 45 10             	mov    %eax,0x10(%ebp)
    }

    desc->limit15_0 = limit & 0xFFFF;
   121a2:	8b 45 10             	mov    0x10(%ebp),%eax
   121a5:	89 c2                	mov    %eax,%edx
   121a7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121aa:	66 89 10             	mov    %dx,(%eax)
    desc->base15_0 = base & 0xFFFF;
   121ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   121b0:	89 c2                	mov    %eax,%edx
   121b2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121b5:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->base23_16 = (base >> 16) & 0xFF;
   121b9:	8b 45 0c             	mov    0xc(%ebp),%eax
   121bc:	c1 e8 10             	shr    $0x10,%eax
   121bf:	89 c2                	mov    %eax,%edx
   121c1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121c4:	88 50 04             	mov    %dl,0x4(%eax)
    desc->base31_24 = (base >> 24) & 0xFF;
   121c7:	8b 45 0c             	mov    0xc(%ebp),%eax
   121ca:	c1 e8 18             	shr    $0x18,%eax
   121cd:	89 c2                	mov    %eax,%edx
   121cf:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121d2:	88 50 07             	mov    %dl,0x7(%eax)
    desc->attr = attr | (((limit >> 16) & 0xFF) << 8);
   121d5:	8b 45 10             	mov    0x10(%ebp),%eax
   121d8:	c1 e8 10             	shr    $0x10,%eax
   121db:	c1 e0 08             	shl    $0x8,%eax
   121de:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   121e2:	89 c2                	mov    %eax,%edx
   121e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   121e7:	66 89 50 05          	mov    %dx,0x5(%eax)
}
   121eb:	90                   	nop
   121ec:	c9                   	leave  
   121ed:	c3                   	ret    

000121ee <gdt_free_sel>:

void gdt_free_sel(int sel)
{
   121ee:	55                   	push   %ebp
   121ef:	89 e5                	mov    %esp,%ebp
   121f1:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   121f4:	83 ec 0c             	sub    $0xc,%esp
   121f7:	68 e0 2b 02 00       	push   $0x22be0
   121fc:	e8 6e 1f 00 00       	call   1416f <mutex_lock>
   12201:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   12204:	8b 45 08             	mov    0x8(%ebp),%eax
   12207:	c1 e8 03             	shr    $0x3,%eax
   1220a:	66 c7 04 c5 e5 23 02 	movw   $0x0,0x223e5(,%eax,8)
   12211:	00 00 00 
    mutex_unlock(&mutex);
   12214:	83 ec 0c             	sub    $0xc,%esp
   12217:	68 e0 2b 02 00       	push   $0x22be0
   1221c:	e8 e2 1f 00 00       	call   14203 <mutex_unlock>
   12221:	83 c4 10             	add    $0x10,%esp
}
   12224:	90                   	nop
   12225:	c9                   	leave  
   12226:	c3                   	ret    

00012227 <get_alloc_desc>:

int get_alloc_desc()
{
   12227:	55                   	push   %ebp
   12228:	89 e5                	mov    %esp,%ebp
   1222a:	83 ec 18             	sub    $0x18,%esp
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   1222d:	83 ec 0c             	sub    $0xc,%esp
   12230:	68 e0 2b 02 00       	push   $0x22be0
   12235:	e8 35 1f 00 00       	call   1416f <mutex_lock>
   1223a:	83 c4 10             	add    $0x10,%esp

    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   1223d:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   12244:	eb 36                	jmp    1227c <get_alloc_desc+0x55>
    {
        segment_desc_t *desc = gdt_table + i;
   12246:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12249:	c1 e0 03             	shl    $0x3,%eax
   1224c:	05 e0 23 02 00       	add    $0x223e0,%eax
   12251:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) // 根据属性是否为0判断
   12254:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12257:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   1225b:	66 85 c0             	test   %ax,%ax
   1225e:	75 18                	jne    12278 <get_alloc_desc+0x51>
        {
            // irq_leave_protection(state);
            mutex_unlock(&mutex);
   12260:	83 ec 0c             	sub    $0xc,%esp
   12263:	68 e0 2b 02 00       	push   $0x22be0
   12268:	e8 96 1f 00 00       	call   14203 <mutex_unlock>
   1226d:	83 c4 10             	add    $0x10,%esp
            return i * sizeof(segment_desc_t);
   12270:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12273:	c1 e0 03             	shl    $0x3,%eax
   12276:	eb 22                	jmp    1229a <get_alloc_desc+0x73>
    for (int i = 1; i < GDT_TABLE_SIZE; i++)
   12278:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1227c:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12283:	7e c1                	jle    12246 <get_alloc_desc+0x1f>
        }
    }
    // irq_leave_protection(state);
    mutex_unlock(&mutex);
   12285:	83 ec 0c             	sub    $0xc,%esp
   12288:	68 e0 2b 02 00       	push   $0x22be0
   1228d:	e8 71 1f 00 00       	call   14203 <mutex_unlock>
   12292:	83 c4 10             	add    $0x10,%esp
    return -1;
   12295:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1229a:	c9                   	leave  
   1229b:	c3                   	ret    

0001229c <init_gdt>:

void init_gdt(void)
{
   1229c:	55                   	push   %ebp
   1229d:	89 e5                	mov    %esp,%ebp
   1229f:	83 ec 18             	sub    $0x18,%esp
    // 全部清空
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   122a2:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122a9:	eb 19                	jmp    122c4 <init_gdt+0x28>
    {
        segment_desc_set(i * sizeof(segment_desc_t), 0, 0, 0); // 找到第几个GDT表项
   122ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122ae:	c1 e0 03             	shl    $0x3,%eax
   122b1:	6a 00                	push   $0x0
   122b3:	6a 00                	push   $0x0
   122b5:	6a 00                	push   $0x0
   122b7:	50                   	push   %eax
   122b8:	e8 b2 fe ff ff       	call   1216f <segment_desc_set>
   122bd:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++)
   122c0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   122c4:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   122cb:	7e de                	jle    122ab <init_gdt+0xf>
    }
    // 数据段
    segment_desc_set(KERNEL_SELECTOR_DS, 0, 0xFFFFFFFF,
   122cd:	68 92 40 00 00       	push   $0x4092
   122d2:	6a ff                	push   $0xffffffff
   122d4:	6a 00                	push   $0x0
   122d6:	6a 10                	push   $0x10
   122d8:	e8 92 fe ff ff       	call   1216f <segment_desc_set>
   122dd:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    // 代码段
    segment_desc_set(KERNEL_SELECTOR_CS, 0, 0xFFFFFFFF,
   122e0:	68 9a 40 00 00       	push   $0x409a
   122e5:	6a ff                	push   $0xffffffff
   122e7:	6a 00                	push   $0x0
   122e9:	6a 08                	push   $0x8
   122eb:	e8 7f fe ff ff       	call   1216f <segment_desc_set>
   122f0:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);

    // 调用门
    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   122f3:	ba e6 02 01 00       	mov    $0x102e6,%edx
   122f8:	b8 f8 23 02 00       	mov    $0x223f8,%eax
   122fd:	68 05 ec 00 00       	push   $0xec05
   12302:	52                   	push   %edx
   12303:	6a 08                	push   $0x8
   12305:	50                   	push   %eax
   12306:	e8 1c 00 00 00       	call   12327 <gate_desc_set>
   1230b:	83 c4 10             	add    $0x10,%esp
                  KERNEL_SELECTOR_CS,
                  (uint32_t)exception_handler_syscall,
                  GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);
    // 重新加载GDT
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1230e:	b8 e0 23 02 00       	mov    $0x223e0,%eax
   12313:	83 ec 08             	sub    $0x8,%esp
   12316:	68 00 08 00 00       	push   $0x800
   1231b:	50                   	push   %eax
   1231c:	e8 0c fe ff ff       	call   1212d <lgdt>
   12321:	83 c4 10             	add    $0x10,%esp
}
   12324:	90                   	nop
   12325:	c9                   	leave  
   12326:	c3                   	ret    

00012327 <gate_desc_set>:

void gate_desc_set(gate_desc_t *desc, uint16_t selector, uint32_t offset, uint16_t attr)
{
   12327:	55                   	push   %ebp
   12328:	89 e5                	mov    %esp,%ebp
   1232a:	83 ec 08             	sub    $0x8,%esp
   1232d:	8b 55 0c             	mov    0xc(%ebp),%edx
   12330:	8b 45 14             	mov    0x14(%ebp),%eax
   12333:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12337:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
    desc->offset15_0 = offset & 0xFFFF;
   1233b:	8b 45 10             	mov    0x10(%ebp),%eax
   1233e:	89 c2                	mov    %eax,%edx
   12340:	8b 45 08             	mov    0x8(%ebp),%eax
   12343:	66 89 10             	mov    %dx,(%eax)
    desc->selector = selector;
   12346:	8b 45 08             	mov    0x8(%ebp),%eax
   12349:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1234d:	66 89 50 02          	mov    %dx,0x2(%eax)
    desc->attr = attr;
   12351:	8b 45 08             	mov    0x8(%ebp),%eax
   12354:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   12358:	66 89 50 04          	mov    %dx,0x4(%eax)
    desc->offset31_16 = (offset >> 16) & 0xFFFFF;
   1235c:	8b 45 10             	mov    0x10(%ebp),%eax
   1235f:	c1 e8 10             	shr    $0x10,%eax
   12362:	89 c2                	mov    %eax,%edx
   12364:	8b 45 08             	mov    0x8(%ebp),%eax
   12367:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   1236b:	90                   	nop
   1236c:	c9                   	leave  
   1236d:	c3                   	ret    

0001236e <cpu_init>:

void cpu_init(void)
{
   1236e:	55                   	push   %ebp
   1236f:	89 e5                	mov    %esp,%ebp
   12371:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   12374:	83 ec 0c             	sub    $0xc,%esp
   12377:	68 e0 2b 02 00       	push   $0x22be0
   1237c:	e8 c0 1d 00 00       	call   14141 <mutex_init>
   12381:	83 c4 10             	add    $0x10,%esp
    init_gdt();
   12384:	e8 13 ff ff ff       	call   1229c <init_gdt>
}
   12389:	90                   	nop
   1238a:	c9                   	leave  
   1238b:	c3                   	ret    

0001238c <switch_to_tss>:

void switch_to_tss(uint32_t tss_selector)
{
   1238c:	55                   	push   %ebp
   1238d:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   1238f:	6a 00                	push   $0x0
   12391:	ff 75 08             	pushl  0x8(%ebp)
   12394:	e8 bc fd ff ff       	call   12155 <far_jump>
   12399:	83 c4 08             	add    $0x8,%esp
   1239c:	90                   	nop
   1239d:	c9                   	leave  
   1239e:	c3                   	ret    

0001239f <inb>:
{
   1239f:	55                   	push   %ebp
   123a0:	89 e5                	mov    %esp,%ebp
   123a2:	83 ec 14             	sub    $0x14,%esp
   123a5:	8b 45 08             	mov    0x8(%ebp),%eax
   123a8:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   123ac:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   123b0:	89 c2                	mov    %eax,%edx
   123b2:	ec                   	in     (%dx),%al
   123b3:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   123b6:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   123ba:	c9                   	leave  
   123bb:	c3                   	ret    

000123bc <outb>:
{
   123bc:	55                   	push   %ebp
   123bd:	89 e5                	mov    %esp,%ebp
   123bf:	83 ec 08             	sub    $0x8,%esp
   123c2:	8b 55 08             	mov    0x8(%ebp),%edx
   123c5:	8b 45 0c             	mov    0xc(%ebp),%eax
   123c8:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   123cc:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   123cf:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   123d3:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   123d7:	ee                   	out    %al,(%dx)
}
   123d8:	90                   	nop
   123d9:	c9                   	leave  
   123da:	c3                   	ret    

000123db <cli>:
{
   123db:	55                   	push   %ebp
   123dc:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("cli");
   123de:	fa                   	cli    
}
   123df:	90                   	nop
   123e0:	5d                   	pop    %ebp
   123e1:	c3                   	ret    

000123e2 <sti>:
{
   123e2:	55                   	push   %ebp
   123e3:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("sti");
   123e5:	fb                   	sti    
}
   123e6:	90                   	nop
   123e7:	5d                   	pop    %ebp
   123e8:	c3                   	ret    

000123e9 <lidt>:
{
   123e9:	55                   	push   %ebp
   123ea:	89 e5                	mov    %esp,%ebp
   123ec:	83 ec 10             	sub    $0x10,%esp
    idt.start31_16 = start >> 16;
   123ef:	8b 45 08             	mov    0x8(%ebp),%eax
   123f2:	c1 e8 10             	shr    $0x10,%eax
   123f5:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    idt.start15_0 = start & 0xFFFF;
   123f9:	8b 45 08             	mov    0x8(%ebp),%eax
   123fc:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    idt.limit = size - 1;
   12400:	8b 45 0c             	mov    0xc(%ebp),%eax
   12403:	83 e8 01             	sub    $0x1,%eax
   12406:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
   1240a:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   1240e:	90                   	nop
   1240f:	c9                   	leave  
   12410:	c3                   	ret    

00012411 <read_cr2>:
{
   12411:	55                   	push   %ebp
   12412:	89 e5                	mov    %esp,%ebp
   12414:	83 ec 10             	sub    $0x10,%esp
    __asm__ __volatile__("mov %%cr2, %[v]" : [v] "=r"(cr2));
   12417:	0f 20 d0             	mov    %cr2,%eax
   1241a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return cr2;
   1241d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12420:	c9                   	leave  
   12421:	c3                   	ret    

00012422 <hlt>:
{
   12422:	55                   	push   %ebp
   12423:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   12425:	f4                   	hlt    
}
   12426:	90                   	nop
   12427:	5d                   	pop    %ebp
   12428:	c3                   	ret    

00012429 <read_eflags>:

static inline uint32_t read_eflags(void)
{
   12429:	55                   	push   %ebp
   1242a:	89 e5                	mov    %esp,%ebp
   1242c:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax" : "=a"(eflags));
   1242f:	9c                   	pushf  
   12430:	58                   	pop    %eax
   12431:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   12434:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12437:	c9                   	leave  
   12438:	c3                   	ret    

00012439 <write_eflags>:

static inline void write_eflags(uint32_t eflags)
{
   12439:	55                   	push   %ebp
   1243a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl" ::"a"(eflags));
   1243c:	8b 45 08             	mov    0x8(%ebp),%eax
   1243f:	50                   	push   %eax
   12440:	9d                   	popf   
}
   12441:	90                   	nop
   12442:	5d                   	pop    %ebp
   12443:	c3                   	ret    

00012444 <dump_core_regs>:
#define IDT_TABLE_NR 128

static gate_desc_t idt_table[IDT_TABLE_NR];

static void dump_core_regs(exception_frame_t *frame)
{
   12444:	55                   	push   %ebp
   12445:	89 e5                	mov    %esp,%ebp
   12447:	57                   	push   %edi
   12448:	56                   	push   %esi
   12449:	53                   	push   %ebx
   1244a:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t esp, ss;
    if (frame->cs & 0x7)
   1244d:	8b 45 08             	mov    0x8(%ebp),%eax
   12450:	8b 40 3c             	mov    0x3c(%eax),%eax
   12453:	83 e0 07             	and    $0x7,%eax
   12456:	85 c0                	test   %eax,%eax
   12458:	74 14                	je     1246e <dump_core_regs+0x2a>
    {
        ss = frame->ds;
   1245a:	8b 45 08             	mov    0x8(%ebp),%eax
   1245d:	8b 40 0c             	mov    0xc(%eax),%eax
   12460:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   12463:	8b 45 08             	mov    0x8(%ebp),%eax
   12466:	8b 40 1c             	mov    0x1c(%eax),%eax
   12469:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   1246c:	eb 12                	jmp    12480 <dump_core_regs+0x3c>
    }
    else
    {
        ss = frame->ss3;
   1246e:	8b 45 08             	mov    0x8(%ebp),%eax
   12471:	8b 40 48             	mov    0x48(%eax),%eax
   12474:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   12477:	8b 45 08             	mov    0x8(%ebp),%eax
   1247a:	8b 40 44             	mov    0x44(%eax),%eax
   1247d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }

    // 打印CPU寄存器相关内容
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->err_code);
   12480:	8b 45 08             	mov    0x8(%ebp),%eax
   12483:	8b 50 34             	mov    0x34(%eax),%edx
   12486:	8b 45 08             	mov    0x8(%ebp),%eax
   12489:	8b 40 30             	mov    0x30(%eax),%eax
   1248c:	83 ec 04             	sub    $0x4,%esp
   1248f:	52                   	push   %edx
   12490:	50                   	push   %eax
   12491:	68 e0 53 01 00       	push   $0x153e0
   12496:	e8 44 29 00 00       	call   14ddf <log_printf>
   1249b:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   1249e:	8b 45 08             	mov    0x8(%ebp),%eax
   124a1:	8b 30                	mov    (%eax),%esi
   124a3:	8b 45 08             	mov    0x8(%ebp),%eax
   124a6:	8b 58 04             	mov    0x4(%eax),%ebx
   124a9:	8b 45 08             	mov    0x8(%ebp),%eax
   124ac:	8b 48 08             	mov    0x8(%eax),%ecx
   124af:	8b 45 08             	mov    0x8(%ebp),%eax
   124b2:	8b 50 0c             	mov    0xc(%eax),%edx
   124b5:	8b 45 08             	mov    0x8(%ebp),%eax
   124b8:	8b 40 3c             	mov    0x3c(%eax),%eax
   124bb:	83 ec 04             	sub    $0x4,%esp
   124be:	56                   	push   %esi
   124bf:	53                   	push   %ebx
   124c0:	ff 75 e0             	pushl  -0x20(%ebp)
   124c3:	51                   	push   %ecx
   124c4:	52                   	push   %edx
   124c5:	50                   	push   %eax
   124c6:	68 fc 53 01 00       	push   $0x153fc
   124cb:	e8 0f 29 00 00       	call   14ddf <log_printf>
   124d0:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs);
    log_printf("EAX:0x%x\n"
   124d3:	8b 45 08             	mov    0x8(%ebp),%eax
   124d6:	8b 40 18             	mov    0x18(%eax),%eax
   124d9:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   124dc:	8b 45 08             	mov    0x8(%ebp),%eax
   124df:	8b 78 14             	mov    0x14(%eax),%edi
   124e2:	8b 45 08             	mov    0x8(%ebp),%eax
   124e5:	8b 70 10             	mov    0x10(%eax),%esi
   124e8:	8b 45 08             	mov    0x8(%ebp),%eax
   124eb:	8b 58 24             	mov    0x24(%eax),%ebx
   124ee:	8b 45 08             	mov    0x8(%ebp),%eax
   124f1:	8b 48 28             	mov    0x28(%eax),%ecx
   124f4:	8b 45 08             	mov    0x8(%ebp),%eax
   124f7:	8b 50 20             	mov    0x20(%eax),%edx
   124fa:	8b 45 08             	mov    0x8(%ebp),%eax
   124fd:	8b 40 2c             	mov    0x2c(%eax),%eax
   12500:	83 ec 0c             	sub    $0xc,%esp
   12503:	ff 75 e4             	pushl  -0x1c(%ebp)
   12506:	ff 75 d4             	pushl  -0x2c(%ebp)
   12509:	57                   	push   %edi
   1250a:	56                   	push   %esi
   1250b:	53                   	push   %ebx
   1250c:	51                   	push   %ecx
   1250d:	52                   	push   %edx
   1250e:	50                   	push   %eax
   1250f:	68 24 54 01 00       	push   $0x15424
   12514:	e8 c6 28 00 00       	call   14ddf <log_printf>
   12519:	83 c4 30             	add    $0x30,%esp
               "ESI:0x%x\n"
               "EBP:0x%x\n"
               "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   1251c:	8b 45 08             	mov    0x8(%ebp),%eax
   1251f:	8b 50 40             	mov    0x40(%eax),%edx
   12522:	8b 45 08             	mov    0x8(%ebp),%eax
   12525:	8b 40 38             	mov    0x38(%eax),%eax
   12528:	83 ec 04             	sub    $0x4,%esp
   1252b:	52                   	push   %edx
   1252c:	50                   	push   %eax
   1252d:	68 6d 54 01 00       	push   $0x1546d
   12532:	e8 a8 28 00 00       	call   14ddf <log_printf>
   12537:	83 c4 10             	add    $0x10,%esp
}
   1253a:	90                   	nop
   1253b:	8d 65 f4             	lea    -0xc(%ebp),%esp
   1253e:	5b                   	pop    %ebx
   1253f:	5e                   	pop    %esi
   12540:	5f                   	pop    %edi
   12541:	5d                   	pop    %ebp
   12542:	c3                   	ret    

00012543 <do_default_handler>:

static void do_default_handler(exception_frame_t *frame, const char *msg)
{
   12543:	55                   	push   %ebp
   12544:	89 e5                	mov    %esp,%ebp
   12546:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12549:	83 ec 0c             	sub    $0xc,%esp
   1254c:	68 84 54 01 00       	push   $0x15484
   12551:	e8 89 28 00 00       	call   14ddf <log_printf>
   12556:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", msg);
   12559:	83 ec 08             	sub    $0x8,%esp
   1255c:	ff 75 0c             	pushl  0xc(%ebp)
   1255f:	68 a5 54 01 00       	push   $0x154a5
   12564:	e8 76 28 00 00       	call   14ddf <log_printf>
   12569:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame); // 打印寄存器
   1256c:	83 ec 0c             	sub    $0xc,%esp
   1256f:	ff 75 08             	pushl  0x8(%ebp)
   12572:	e8 cd fe ff ff       	call   12444 <dump_core_regs>
   12577:	83 c4 10             	add    $0x10,%esp
    log_printf("--------------------------------");
   1257a:	83 ec 0c             	sub    $0xc,%esp
   1257d:	68 84 54 01 00       	push   $0x15484
   12582:	e8 58 28 00 00       	call   14ddf <log_printf>
   12587:	83 c4 10             	add    $0x10,%esp
    for (;;)
    {
        hlt();
   1258a:	e8 93 fe ff ff       	call   12422 <hlt>
   1258f:	eb f9                	jmp    1258a <do_default_handler+0x47>

00012591 <do_handler_unknown>:
    }
}

void do_handler_unknown(exception_frame_t *frame)
{
   12591:	55                   	push   %ebp
   12592:	89 e5                	mov    %esp,%ebp
   12594:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "unknown exception");
   12597:	83 ec 08             	sub    $0x8,%esp
   1259a:	68 c0 54 01 00       	push   $0x154c0
   1259f:	ff 75 08             	pushl  0x8(%ebp)
   125a2:	e8 9c ff ff ff       	call   12543 <do_default_handler>
   125a7:	83 c4 10             	add    $0x10,%esp
}
   125aa:	90                   	nop
   125ab:	c9                   	leave  
   125ac:	c3                   	ret    

000125ad <do_handler_divider>:

void do_handler_divider(exception_frame_t *frame)
{
   125ad:	55                   	push   %ebp
   125ae:	89 e5                	mov    %esp,%ebp
   125b0:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "divider exception");
   125b3:	83 ec 08             	sub    $0x8,%esp
   125b6:	68 d2 54 01 00       	push   $0x154d2
   125bb:	ff 75 08             	pushl  0x8(%ebp)
   125be:	e8 80 ff ff ff       	call   12543 <do_default_handler>
   125c3:	83 c4 10             	add    $0x10,%esp
}
   125c6:	90                   	nop
   125c7:	c9                   	leave  
   125c8:	c3                   	ret    

000125c9 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t *frame)
{
   125c9:	55                   	push   %ebp
   125ca:	89 e5                	mov    %esp,%ebp
   125cc:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Debug Exception");
   125cf:	83 ec 08             	sub    $0x8,%esp
   125d2:	68 e4 54 01 00       	push   $0x154e4
   125d7:	ff 75 08             	pushl  0x8(%ebp)
   125da:	e8 64 ff ff ff       	call   12543 <do_default_handler>
   125df:	83 c4 10             	add    $0x10,%esp
}
   125e2:	90                   	nop
   125e3:	c9                   	leave  
   125e4:	c3                   	ret    

000125e5 <do_handler_NMI>:

void do_handler_NMI(exception_frame_t *frame)
{
   125e5:	55                   	push   %ebp
   125e6:	89 e5                	mov    %esp,%ebp
   125e8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "NMI Interrupt.");
   125eb:	83 ec 08             	sub    $0x8,%esp
   125ee:	68 f4 54 01 00       	push   $0x154f4
   125f3:	ff 75 08             	pushl  0x8(%ebp)
   125f6:	e8 48 ff ff ff       	call   12543 <do_default_handler>
   125fb:	83 c4 10             	add    $0x10,%esp
}
   125fe:	90                   	nop
   125ff:	c9                   	leave  
   12600:	c3                   	ret    

00012601 <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t *frame)
{
   12601:	55                   	push   %ebp
   12602:	89 e5                	mov    %esp,%ebp
   12604:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Breakpoint.");
   12607:	83 ec 08             	sub    $0x8,%esp
   1260a:	68 03 55 01 00       	push   $0x15503
   1260f:	ff 75 08             	pushl  0x8(%ebp)
   12612:	e8 2c ff ff ff       	call   12543 <do_default_handler>
   12617:	83 c4 10             	add    $0x10,%esp
}
   1261a:	90                   	nop
   1261b:	c9                   	leave  
   1261c:	c3                   	ret    

0001261d <do_handler_overflow>:

void do_handler_overflow(exception_frame_t *frame)
{
   1261d:	55                   	push   %ebp
   1261e:	89 e5                	mov    %esp,%ebp
   12620:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Overflow.");
   12623:	83 ec 08             	sub    $0x8,%esp
   12626:	68 0f 55 01 00       	push   $0x1550f
   1262b:	ff 75 08             	pushl  0x8(%ebp)
   1262e:	e8 10 ff ff ff       	call   12543 <do_default_handler>
   12633:	83 c4 10             	add    $0x10,%esp
}
   12636:	90                   	nop
   12637:	c9                   	leave  
   12638:	c3                   	ret    

00012639 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t *frame)
{
   12639:	55                   	push   %ebp
   1263a:	89 e5                	mov    %esp,%ebp
   1263c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "BOUND Range Exceeded.");
   1263f:	83 ec 08             	sub    $0x8,%esp
   12642:	68 19 55 01 00       	push   $0x15519
   12647:	ff 75 08             	pushl  0x8(%ebp)
   1264a:	e8 f4 fe ff ff       	call   12543 <do_default_handler>
   1264f:	83 c4 10             	add    $0x10,%esp
}
   12652:	90                   	nop
   12653:	c9                   	leave  
   12654:	c3                   	ret    

00012655 <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t *frame)
{
   12655:	55                   	push   %ebp
   12656:	89 e5                	mov    %esp,%ebp
   12658:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid Opcode.");
   1265b:	83 ec 08             	sub    $0x8,%esp
   1265e:	68 2f 55 01 00       	push   $0x1552f
   12663:	ff 75 08             	pushl  0x8(%ebp)
   12666:	e8 d8 fe ff ff       	call   12543 <do_default_handler>
   1266b:	83 c4 10             	add    $0x10,%esp
}
   1266e:	90                   	nop
   1266f:	c9                   	leave  
   12670:	c3                   	ret    

00012671 <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t *frame)
{
   12671:	55                   	push   %ebp
   12672:	89 e5                	mov    %esp,%ebp
   12674:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Device Not Available.");
   12677:	83 ec 08             	sub    $0x8,%esp
   1267a:	68 3f 55 01 00       	push   $0x1553f
   1267f:	ff 75 08             	pushl  0x8(%ebp)
   12682:	e8 bc fe ff ff       	call   12543 <do_default_handler>
   12687:	83 c4 10             	add    $0x10,%esp
}
   1268a:	90                   	nop
   1268b:	c9                   	leave  
   1268c:	c3                   	ret    

0001268d <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t *frame)
{
   1268d:	55                   	push   %ebp
   1268e:	89 e5                	mov    %esp,%ebp
   12690:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Double Fault.");
   12693:	83 ec 08             	sub    $0x8,%esp
   12696:	68 55 55 01 00       	push   $0x15555
   1269b:	ff 75 08             	pushl  0x8(%ebp)
   1269e:	e8 a0 fe ff ff       	call   12543 <do_default_handler>
   126a3:	83 c4 10             	add    $0x10,%esp
}
   126a6:	90                   	nop
   126a7:	c9                   	leave  
   126a8:	c3                   	ret    

000126a9 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t *frame)
{
   126a9:	55                   	push   %ebp
   126aa:	89 e5                	mov    %esp,%ebp
   126ac:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Invalid TSS");
   126af:	83 ec 08             	sub    $0x8,%esp
   126b2:	68 63 55 01 00       	push   $0x15563
   126b7:	ff 75 08             	pushl  0x8(%ebp)
   126ba:	e8 84 fe ff ff       	call   12543 <do_default_handler>
   126bf:	83 c4 10             	add    $0x10,%esp
}
   126c2:	90                   	nop
   126c3:	c9                   	leave  
   126c4:	c3                   	ret    

000126c5 <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t *frame)
{
   126c5:	55                   	push   %ebp
   126c6:	89 e5                	mov    %esp,%ebp
   126c8:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Segment Not Present.");
   126cb:	83 ec 08             	sub    $0x8,%esp
   126ce:	68 6f 55 01 00       	push   $0x1556f
   126d3:	ff 75 08             	pushl  0x8(%ebp)
   126d6:	e8 68 fe ff ff       	call   12543 <do_default_handler>
   126db:	83 c4 10             	add    $0x10,%esp
}
   126de:	90                   	nop
   126df:	c9                   	leave  
   126e0:	c3                   	ret    

000126e1 <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t *frame)
{
   126e1:	55                   	push   %ebp
   126e2:	89 e5                	mov    %esp,%ebp
   126e4:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Stack-Segment Fault.");
   126e7:	83 ec 08             	sub    $0x8,%esp
   126ea:	68 84 55 01 00       	push   $0x15584
   126ef:	ff 75 08             	pushl  0x8(%ebp)
   126f2:	e8 4c fe ff ff       	call   12543 <do_default_handler>
   126f7:	83 c4 10             	add    $0x10,%esp
}
   126fa:	90                   	nop
   126fb:	c9                   	leave  
   126fc:	c3                   	ret    

000126fd <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t *frame)
{
   126fd:	55                   	push   %ebp
   126fe:	89 e5                	mov    %esp,%ebp
   12700:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "X87 FPU Floating Point Error.");
   12703:	83 ec 08             	sub    $0x8,%esp
   12706:	68 99 55 01 00       	push   $0x15599
   1270b:	ff 75 08             	pushl  0x8(%ebp)
   1270e:	e8 30 fe ff ff       	call   12543 <do_default_handler>
   12713:	83 c4 10             	add    $0x10,%esp
}
   12716:	90                   	nop
   12717:	c9                   	leave  
   12718:	c3                   	ret    

00012719 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t *frame)
{
   12719:	55                   	push   %ebp
   1271a:	89 e5                	mov    %esp,%ebp
   1271c:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Alignment Check.");
   1271f:	83 ec 08             	sub    $0x8,%esp
   12722:	68 b7 55 01 00       	push   $0x155b7
   12727:	ff 75 08             	pushl  0x8(%ebp)
   1272a:	e8 14 fe ff ff       	call   12543 <do_default_handler>
   1272f:	83 c4 10             	add    $0x10,%esp
}
   12732:	90                   	nop
   12733:	c9                   	leave  
   12734:	c3                   	ret    

00012735 <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t *frame)
{
   12735:	55                   	push   %ebp
   12736:	89 e5                	mov    %esp,%ebp
   12738:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Machine Check.");
   1273b:	83 ec 08             	sub    $0x8,%esp
   1273e:	68 c8 55 01 00       	push   $0x155c8
   12743:	ff 75 08             	pushl  0x8(%ebp)
   12746:	e8 f8 fd ff ff       	call   12543 <do_default_handler>
   1274b:	83 c4 10             	add    $0x10,%esp
}
   1274e:	90                   	nop
   1274f:	c9                   	leave  
   12750:	c3                   	ret    

00012751 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t *frame)
{
   12751:	55                   	push   %ebp
   12752:	89 e5                	mov    %esp,%ebp
   12754:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "SIMD Floating Point Exception.");
   12757:	83 ec 08             	sub    $0x8,%esp
   1275a:	68 d8 55 01 00       	push   $0x155d8
   1275f:	ff 75 08             	pushl  0x8(%ebp)
   12762:	e8 dc fd ff ff       	call   12543 <do_default_handler>
   12767:	83 c4 10             	add    $0x10,%esp
}
   1276a:	90                   	nop
   1276b:	c9                   	leave  
   1276c:	c3                   	ret    

0001276d <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t *frame)
{
   1276d:	55                   	push   %ebp
   1276e:	89 e5                	mov    %esp,%ebp
   12770:	83 ec 08             	sub    $0x8,%esp
    do_default_handler(frame, "Virtualization Exception.");
   12773:	83 ec 08             	sub    $0x8,%esp
   12776:	68 f7 55 01 00       	push   $0x155f7
   1277b:	ff 75 08             	pushl  0x8(%ebp)
   1277e:	e8 c0 fd ff ff       	call   12543 <do_default_handler>
   12783:	83 c4 10             	add    $0x10,%esp
}
   12786:	90                   	nop
   12787:	c9                   	leave  
   12788:	c3                   	ret    

00012789 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t *frame)
{
   12789:	55                   	push   %ebp
   1278a:	89 e5                	mov    %esp,%ebp
   1278c:	83 ec 08             	sub    $0x8,%esp
    // do_default_handler(frame, "General_protection Exception.");
    log_printf("--------------------------------");
   1278f:	83 ec 0c             	sub    $0xc,%esp
   12792:	68 84 54 01 00       	push   $0x15484
   12797:	e8 43 26 00 00       	call   14ddf <log_printf>
   1279c:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   1279f:	83 ec 0c             	sub    $0xc,%esp
   127a2:	68 14 56 01 00       	push   $0x15614
   127a7:	e8 33 26 00 00       	call   14ddf <log_printf>
   127ac:	83 c4 10             	add    $0x10,%esp
    if (frame->err_code & ERR_EXT)
   127af:	8b 45 08             	mov    0x8(%ebp),%eax
   127b2:	8b 40 34             	mov    0x34(%eax),%eax
   127b5:	83 e0 01             	and    $0x1,%eax
   127b8:	85 c0                	test   %eax,%eax
   127ba:	74 12                	je     127ce <do_handler_general_protection+0x45>
    {
        log_printf("the exception occurred during delivery of an "
   127bc:	83 ec 0c             	sub    $0xc,%esp
   127bf:	68 40 56 01 00       	push   $0x15640
   127c4:	e8 16 26 00 00       	call   14ddf <log_printf>
   127c9:	83 c4 10             	add    $0x10,%esp
   127cc:	eb 10                	jmp    127de <do_handler_general_protection+0x55>
                   "event external to the program, such as an interrupt"
                   "or an earlier exception.");
    }
    else
    {
        log_printf("the exception occurred during delivery of a"
   127ce:	83 ec 0c             	sub    $0xc,%esp
   127d1:	68 bc 56 01 00       	push   $0x156bc
   127d6:	e8 04 26 00 00       	call   14ddf <log_printf>
   127db:	83 c4 10             	add    $0x10,%esp
                   "software interrupt (INT n, INT3, or INTO).");
    }

    if (frame->err_code & ERR_IDT)
   127de:	8b 45 08             	mov    0x8(%ebp),%eax
   127e1:	8b 40 34             	mov    0x34(%eax),%eax
   127e4:	83 e0 02             	and    $0x2,%eax
   127e7:	85 c0                	test   %eax,%eax
   127e9:	74 12                	je     127fd <do_handler_general_protection+0x74>
    {
        log_printf("the index portion of the error code refers "
   127eb:	83 ec 0c             	sub    $0xc,%esp
   127ee:	68 14 57 01 00       	push   $0x15714
   127f3:	e8 e7 25 00 00       	call   14ddf <log_printf>
   127f8:	83 c4 10             	add    $0x10,%esp
   127fb:	eb 10                	jmp    1280d <do_handler_general_protection+0x84>
                   "to a gate descriptor in the IDT");
    }
    else
    {
        log_printf("the index refers to a descriptor in the GDT");
   127fd:	83 ec 0c             	sub    $0xc,%esp
   12800:	68 60 57 01 00       	push   $0x15760
   12805:	e8 d5 25 00 00       	call   14ddf <log_printf>
   1280a:	83 c4 10             	add    $0x10,%esp
    }

    log_printf("segment index: %d", frame->err_code & 0xFFF8);
   1280d:	8b 45 08             	mov    0x8(%ebp),%eax
   12810:	8b 40 34             	mov    0x34(%eax),%eax
   12813:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12818:	83 ec 08             	sub    $0x8,%esp
   1281b:	50                   	push   %eax
   1281c:	68 8c 57 01 00       	push   $0x1578c
   12821:	e8 b9 25 00 00       	call   14ddf <log_printf>
   12826:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12829:	83 ec 0c             	sub    $0xc,%esp
   1282c:	ff 75 08             	pushl  0x8(%ebp)
   1282f:	e8 10 fc ff ff       	call   12444 <dump_core_regs>
   12834:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   12837:	e8 e6 fb ff ff       	call   12422 <hlt>
   1283c:	eb f9                	jmp    12837 <do_handler_general_protection+0xae>

0001283e <do_handler_page_fault>:
    //     }
    // }
}

void do_handler_page_fault(exception_frame_t *frame)
{
   1283e:	55                   	push   %ebp
   1283f:	89 e5                	mov    %esp,%ebp
   12841:	83 ec 08             	sub    $0x8,%esp

    log_printf("--------------------------------");
   12844:	83 ec 0c             	sub    $0xc,%esp
   12847:	68 84 54 01 00       	push   $0x15484
   1284c:	e8 8e 25 00 00       	call   14ddf <log_printf>
   12851:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12854:	83 ec 0c             	sub    $0xc,%esp
   12857:	68 a0 57 01 00       	push   $0x157a0
   1285c:	e8 7e 25 00 00       	call   14ddf <log_printf>
   12861:	83 c4 10             	add    $0x10,%esp
    // do_default_handler(frame, "Page_fault Exception.");
    if (frame->err_code & ERR_PAGE_P)
   12864:	8b 45 08             	mov    0x8(%ebp),%eax
   12867:	8b 40 34             	mov    0x34(%eax),%eax
   1286a:	83 e0 01             	and    $0x1,%eax
   1286d:	85 c0                	test   %eax,%eax
   1286f:	74 18                	je     12889 <do_handler_page_fault+0x4b>
    {
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12871:	e8 9b fb ff ff       	call   12411 <read_cr2>
   12876:	83 ec 08             	sub    $0x8,%esp
   12879:	50                   	push   %eax
   1287a:	68 c4 57 01 00       	push   $0x157c4
   1287f:	e8 5b 25 00 00       	call   14ddf <log_printf>
   12884:	83 c4 10             	add    $0x10,%esp
   12887:	eb 16                	jmp    1289f <do_handler_page_fault+0x61>
    }
    else
    {
        log_printf("\tPage doesn't present 0x%x", read_cr2());
   12889:	e8 83 fb ff ff       	call   12411 <read_cr2>
   1288e:	83 ec 08             	sub    $0x8,%esp
   12891:	50                   	push   %eax
   12892:	68 ec 57 01 00       	push   $0x157ec
   12897:	e8 43 25 00 00       	call   14ddf <log_printf>
   1289c:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_WR)
   1289f:	8b 45 08             	mov    0x8(%ebp),%eax
   128a2:	8b 40 34             	mov    0x34(%eax),%eax
   128a5:	83 e0 02             	and    $0x2,%eax
   128a8:	85 c0                	test   %eax,%eax
   128aa:	74 12                	je     128be <do_handler_page_fault+0x80>
    {
        log_printf("\tThe access causing the fault was a read.");
   128ac:	83 ec 0c             	sub    $0xc,%esp
   128af:	68 08 58 01 00       	push   $0x15808
   128b4:	e8 26 25 00 00       	call   14ddf <log_printf>
   128b9:	83 c4 10             	add    $0x10,%esp
   128bc:	eb 10                	jmp    128ce <do_handler_page_fault+0x90>
    }
    else
    {
        log_printf("\tThe access causing the fault was a write.");
   128be:	83 ec 0c             	sub    $0xc,%esp
   128c1:	68 34 58 01 00       	push   $0x15834
   128c6:	e8 14 25 00 00       	call   14ddf <log_printf>
   128cb:	83 c4 10             	add    $0x10,%esp
    }

    if (frame->err_code & ERR_PAGE_US)
   128ce:	8b 45 08             	mov    0x8(%ebp),%eax
   128d1:	8b 40 34             	mov    0x34(%eax),%eax
   128d4:	83 e0 02             	and    $0x2,%eax
   128d7:	85 c0                	test   %eax,%eax
   128d9:	74 12                	je     128ed <do_handler_page_fault+0xaf>
    {
        log_printf("\tA supervisor-mode access caused the fault.");
   128db:	83 ec 0c             	sub    $0xc,%esp
   128de:	68 60 58 01 00       	push   $0x15860
   128e3:	e8 f7 24 00 00       	call   14ddf <log_printf>
   128e8:	83 c4 10             	add    $0x10,%esp
   128eb:	eb 10                	jmp    128fd <do_handler_page_fault+0xbf>
    }
    else
    {
        log_printf("\tA user-mode access caused the fault.");
   128ed:	83 ec 0c             	sub    $0xc,%esp
   128f0:	68 8c 58 01 00       	push   $0x1588c
   128f5:	e8 e5 24 00 00       	call   14ddf <log_printf>
   128fa:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   128fd:	83 ec 0c             	sub    $0xc,%esp
   12900:	ff 75 08             	pushl  0x8(%ebp)
   12903:	e8 3c fb ff ff       	call   12444 <dump_core_regs>
   12908:	83 c4 10             	add    $0x10,%esp
    while (1)
    {
        hlt();
   1290b:	e8 12 fb ff ff       	call   12422 <hlt>
   12910:	eb f9                	jmp    1290b <do_handler_page_fault+0xcd>

00012912 <init_pic>:
    //     }
    // }
}

static void init_pic(void)
{
   12912:	55                   	push   %ebp
   12913:	89 e5                	mov    %esp,%ebp
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12915:	6a 11                	push   $0x11
   12917:	6a 20                	push   $0x20
   12919:	e8 9e fa ff ff       	call   123bc <outb>
   1291e:	83 c4 08             	add    $0x8,%esp
    // 对应的中断号起始序号0x20
    outb(PIC0_ICW2, IRQ_PIC_START);
   12921:	6a 20                	push   $0x20
   12923:	6a 21                	push   $0x21
   12925:	e8 92 fa ff ff       	call   123bc <outb>
   1292a:	83 c4 08             	add    $0x8,%esp
    // 主片IRQ2有从片
    outb(PIC0_ICW3, 1 << 2);
   1292d:	6a 04                	push   $0x4
   1292f:	6a 21                	push   $0x21
   12931:	e8 86 fa ff ff       	call   123bc <outb>
   12936:	83 c4 08             	add    $0x8,%esp
    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC0_ICW4, PIC_ICW4_8086);
   12939:	6a 01                	push   $0x1
   1293b:	6a 21                	push   $0x21
   1293d:	e8 7a fa ff ff       	call   123bc <outb>
   12942:	83 c4 08             	add    $0x8,%esp

    // 第二块芯片
    // 边缘触发，级联，需要配置icw4, 8086模式
    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12945:	6a 11                	push   $0x11
   12947:	68 a0 00 00 00       	push   $0xa0
   1294c:	e8 6b fa ff ff       	call   123bc <outb>
   12951:	83 c4 08             	add    $0x8,%esp

    // 起始中断序号，要加上8
    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12954:	6a 28                	push   $0x28
   12956:	68 a1 00 00 00       	push   $0xa1
   1295b:	e8 5c fa ff ff       	call   123bc <outb>
   12960:	83 c4 08             	add    $0x8,%esp

    // 没有从片，连接到主片的IRQ2上
    outb(PIC1_ICW3, 2);
   12963:	6a 02                	push   $0x2
   12965:	68 a1 00 00 00       	push   $0xa1
   1296a:	e8 4d fa ff ff       	call   123bc <outb>
   1296f:	83 c4 08             	add    $0x8,%esp

    // 普通全嵌套、非缓冲、非自动结束、8086模式
    outb(PIC1_ICW4, PIC_ICW4_8086);
   12972:	6a 01                	push   $0x1
   12974:	68 a1 00 00 00       	push   $0xa1
   12979:	e8 3e fa ff ff       	call   123bc <outb>
   1297e:	83 c4 08             	add    $0x8,%esp

    // 禁止所有中断, 允许从PIC1传来的中断
    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12981:	68 fb 00 00 00       	push   $0xfb
   12986:	6a 21                	push   $0x21
   12988:	e8 2f fa ff ff       	call   123bc <outb>
   1298d:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12990:	68 ff 00 00 00       	push   $0xff
   12995:	68 a1 00 00 00       	push   $0xa1
   1299a:	e8 1d fa ff ff       	call   123bc <outb>
   1299f:	83 c4 08             	add    $0x8,%esp
}
   129a2:	90                   	nop
   129a3:	c9                   	leave  
   129a4:	c3                   	ret    

000129a5 <irq_init>:

void irq_init(void)
{
   129a5:	55                   	push   %ebp
   129a6:	89 e5                	mov    %esp,%ebp
   129a8:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   129ab:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   129b2:	eb 25                	jmp    129d9 <irq_init+0x34>
    {
        gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t)exception_handler_unknown, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   129b4:	ba 35 00 01 00       	mov    $0x10035,%edx
   129b9:	8b 45 f4             	mov    -0xc(%ebp),%eax
   129bc:	c1 e0 03             	shl    $0x3,%eax
   129bf:	05 00 2c 02 00       	add    $0x22c00,%eax
   129c4:	68 00 8e 00 00       	push   $0x8e00
   129c9:	52                   	push   %edx
   129ca:	6a 08                	push   $0x8
   129cc:	50                   	push   %eax
   129cd:	e8 55 f9 ff ff       	call   12327 <gate_desc_set>
   129d2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < IDT_TABLE_NR; i++)
   129d5:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   129d9:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   129dd:	7e d5                	jle    129b4 <irq_init+0xf>
    }
    irq_install(IRQ0_DE, (irq_handler_t)exception_handler_divider);
   129df:	83 ec 08             	sub    $0x8,%esp
   129e2:	68 54 00 01 00       	push   $0x10054
   129e7:	6a 00                	push   $0x0
   129e9:	e8 65 01 00 00       	call   12b53 <irq_install>
   129ee:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ1_DB, (irq_handler_t)exception_handler_Debug);
   129f1:	83 ec 08             	sub    $0x8,%esp
   129f4:	68 73 00 01 00       	push   $0x10073
   129f9:	6a 01                	push   $0x1
   129fb:	e8 53 01 00 00       	call   12b53 <irq_install>
   12a00:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ2_NMI, (irq_handler_t)exception_handler_NMI);
   12a03:	83 ec 08             	sub    $0x8,%esp
   12a06:	68 92 00 01 00       	push   $0x10092
   12a0b:	6a 02                	push   $0x2
   12a0d:	e8 41 01 00 00       	call   12b53 <irq_install>
   12a12:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ3_BP, (irq_handler_t)exception_handler_breakpoint);
   12a15:	83 ec 08             	sub    $0x8,%esp
   12a18:	68 b1 00 01 00       	push   $0x100b1
   12a1d:	6a 03                	push   $0x3
   12a1f:	e8 2f 01 00 00       	call   12b53 <irq_install>
   12a24:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ4_OF, (irq_handler_t)exception_handler_overflow);
   12a27:	83 ec 08             	sub    $0x8,%esp
   12a2a:	68 d0 00 01 00       	push   $0x100d0
   12a2f:	6a 04                	push   $0x4
   12a31:	e8 1d 01 00 00       	call   12b53 <irq_install>
   12a36:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ5_BR, (irq_handler_t)exception_handler_bound_range);
   12a39:	83 ec 08             	sub    $0x8,%esp
   12a3c:	68 ef 00 01 00       	push   $0x100ef
   12a41:	6a 05                	push   $0x5
   12a43:	e8 0b 01 00 00       	call   12b53 <irq_install>
   12a48:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ6_UD, (irq_handler_t)exception_handler_invalid_opcode);
   12a4b:	83 ec 08             	sub    $0x8,%esp
   12a4e:	68 0e 01 01 00       	push   $0x1010e
   12a53:	6a 06                	push   $0x6
   12a55:	e8 f9 00 00 00       	call   12b53 <irq_install>
   12a5a:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ7_NM, (irq_handler_t)exception_handler_device_unavailable);
   12a5d:	83 ec 08             	sub    $0x8,%esp
   12a60:	68 2d 01 01 00       	push   $0x1012d
   12a65:	6a 07                	push   $0x7
   12a67:	e8 e7 00 00 00       	call   12b53 <irq_install>
   12a6c:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ8_DF, (irq_handler_t)exception_handler_double_fault);
   12a6f:	83 ec 08             	sub    $0x8,%esp
   12a72:	68 4c 01 01 00       	push   $0x1014c
   12a77:	6a 08                	push   $0x8
   12a79:	e8 d5 00 00 00       	call   12b53 <irq_install>
   12a7e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ10_TS, (irq_handler_t)exception_handler_invalid_tss);
   12a81:	83 ec 08             	sub    $0x8,%esp
   12a84:	68 69 01 01 00       	push   $0x10169
   12a89:	6a 0a                	push   $0xa
   12a8b:	e8 c3 00 00 00       	call   12b53 <irq_install>
   12a90:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ11_NP, (irq_handler_t)exception_handler_segment_not_present);
   12a93:	83 ec 08             	sub    $0x8,%esp
   12a96:	68 86 01 01 00       	push   $0x10186
   12a9b:	6a 0b                	push   $0xb
   12a9d:	e8 b1 00 00 00       	call   12b53 <irq_install>
   12aa2:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ12_SS, (irq_handler_t)exception_handler_stack_segment_fault);
   12aa5:	83 ec 08             	sub    $0x8,%esp
   12aa8:	68 a3 01 01 00       	push   $0x101a3
   12aad:	6a 0c                	push   $0xc
   12aaf:	e8 9f 00 00 00       	call   12b53 <irq_install>
   12ab4:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ13_GP, (irq_handler_t)exception_handler_general_protection);
   12ab7:	83 ec 08             	sub    $0x8,%esp
   12aba:	68 c0 01 01 00       	push   $0x101c0
   12abf:	6a 0d                	push   $0xd
   12ac1:	e8 8d 00 00 00       	call   12b53 <irq_install>
   12ac6:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ14_PF, (irq_handler_t)exception_handler_page_fault);
   12ac9:	83 ec 08             	sub    $0x8,%esp
   12acc:	68 dd 01 01 00       	push   $0x101dd
   12ad1:	6a 0e                	push   $0xe
   12ad3:	e8 7b 00 00 00       	call   12b53 <irq_install>
   12ad8:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ16_MF, (irq_handler_t)exception_handler_fpu_error);
   12adb:	83 ec 08             	sub    $0x8,%esp
   12ade:	68 fa 01 01 00       	push   $0x101fa
   12ae3:	6a 10                	push   $0x10
   12ae5:	e8 69 00 00 00       	call   12b53 <irq_install>
   12aea:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ17_AC, (irq_handler_t)exception_handler_alignment_check);
   12aed:	83 ec 08             	sub    $0x8,%esp
   12af0:	68 19 02 01 00       	push   $0x10219
   12af5:	6a 11                	push   $0x11
   12af7:	e8 57 00 00 00       	call   12b53 <irq_install>
   12afc:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ18_MC, (irq_handler_t)exception_handler_machine_check);
   12aff:	83 ec 08             	sub    $0x8,%esp
   12b02:	68 36 02 01 00       	push   $0x10236
   12b07:	6a 12                	push   $0x12
   12b09:	e8 45 00 00 00       	call   12b53 <irq_install>
   12b0e:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ19_XM, (irq_handler_t)exception_handler_smd_exception);
   12b11:	83 ec 08             	sub    $0x8,%esp
   12b14:	68 55 02 01 00       	push   $0x10255
   12b19:	6a 13                	push   $0x13
   12b1b:	e8 33 00 00 00       	call   12b53 <irq_install>
   12b20:	83 c4 10             	add    $0x10,%esp
    irq_install(IRQ20_VE, (irq_handler_t)exception_handler_virtual_exception);
   12b23:	83 ec 08             	sub    $0x8,%esp
   12b26:	68 74 02 01 00       	push   $0x10274
   12b2b:	6a 14                	push   $0x14
   12b2d:	e8 21 00 00 00       	call   12b53 <irq_install>
   12b32:	83 c4 10             	add    $0x10,%esp
    lidt((uint32_t)idt_table, sizeof(idt_table));
   12b35:	b8 00 2c 02 00       	mov    $0x22c00,%eax
   12b3a:	83 ec 08             	sub    $0x8,%esp
   12b3d:	68 00 04 00 00       	push   $0x400
   12b42:	50                   	push   %eax
   12b43:	e8 a1 f8 ff ff       	call   123e9 <lidt>
   12b48:	83 c4 10             	add    $0x10,%esp

    init_pic();
   12b4b:	e8 c2 fd ff ff       	call   12912 <init_pic>
}
   12b50:	90                   	nop
   12b51:	c9                   	leave  
   12b52:	c3                   	ret    

00012b53 <irq_install>:

int irq_install(int irq_num, irq_handler_t handler)
{
   12b53:	55                   	push   %ebp
   12b54:	89 e5                	mov    %esp,%ebp
   12b56:	83 ec 08             	sub    $0x8,%esp
    if (irq_num >= IDT_TABLE_NR)
   12b59:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12b5d:	7e 07                	jle    12b66 <irq_install+0x13>
    {
        return -1;
   12b5f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12b64:	eb 25                	jmp    12b8b <irq_install+0x38>
    }

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t)handler, GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
   12b66:	8b 45 0c             	mov    0xc(%ebp),%eax
   12b69:	8b 55 08             	mov    0x8(%ebp),%edx
   12b6c:	c1 e2 03             	shl    $0x3,%edx
   12b6f:	81 c2 00 2c 02 00    	add    $0x22c00,%edx
   12b75:	68 00 8e 00 00       	push   $0x8e00
   12b7a:	50                   	push   %eax
   12b7b:	6a 08                	push   $0x8
   12b7d:	52                   	push   %edx
   12b7e:	e8 a4 f7 ff ff       	call   12327 <gate_desc_set>
   12b83:	83 c4 10             	add    $0x10,%esp
    return 0;
   12b86:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12b8b:	c9                   	leave  
   12b8c:	c3                   	ret    

00012b8d <irq_enable>:

void irq_enable(int irq_num)
{
   12b8d:	55                   	push   %ebp
   12b8e:	89 e5                	mov    %esp,%ebp
   12b90:	53                   	push   %ebx
   12b91:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12b94:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12b98:	7e 78                	jle    12c12 <irq_enable+0x85>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12b9a:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12b9e:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12ba2:	7f 32                	jg     12bd6 <irq_enable+0x49>
    {
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12ba4:	6a 21                	push   $0x21
   12ba6:	e8 f4 f7 ff ff       	call   1239f <inb>
   12bab:	83 c4 04             	add    $0x4,%esp
   12bae:	89 c2                	mov    %eax,%edx
   12bb0:	8b 45 08             	mov    0x8(%ebp),%eax
   12bb3:	bb 01 00 00 00       	mov    $0x1,%ebx
   12bb8:	89 c1                	mov    %eax,%ecx
   12bba:	d3 e3                	shl    %cl,%ebx
   12bbc:	89 d8                	mov    %ebx,%eax
   12bbe:	f7 d0                	not    %eax
   12bc0:	21 d0                	and    %edx,%eax
   12bc2:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12bc5:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12bc9:	50                   	push   %eax
   12bca:	6a 21                	push   $0x21
   12bcc:	e8 eb f7 ff ff       	call   123bc <outb>
   12bd1:	83 c4 08             	add    $0x8,%esp
   12bd4:	eb 3d                	jmp    12c13 <irq_enable+0x86>
    }
    else
    {
        irq_num -= 8;
   12bd6:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   12bda:	68 a1 00 00 00       	push   $0xa1
   12bdf:	e8 bb f7 ff ff       	call   1239f <inb>
   12be4:	83 c4 04             	add    $0x4,%esp
   12be7:	89 c2                	mov    %eax,%edx
   12be9:	8b 45 08             	mov    0x8(%ebp),%eax
   12bec:	bb 01 00 00 00       	mov    $0x1,%ebx
   12bf1:	89 c1                	mov    %eax,%ecx
   12bf3:	d3 e3                	shl    %cl,%ebx
   12bf5:	89 d8                	mov    %ebx,%eax
   12bf7:	f7 d0                	not    %eax
   12bf9:	21 d0                	and    %edx,%eax
   12bfb:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   12bfe:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12c02:	50                   	push   %eax
   12c03:	68 a1 00 00 00       	push   $0xa1
   12c08:	e8 af f7 ff ff       	call   123bc <outb>
   12c0d:	83 c4 08             	add    $0x8,%esp
   12c10:	eb 01                	jmp    12c13 <irq_enable+0x86>
        return;
   12c12:	90                   	nop
    }
}
   12c13:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12c16:	c9                   	leave  
   12c17:	c3                   	ret    

00012c18 <irq_disable>:

void irq_disable(int irq_num)
{
   12c18:	55                   	push   %ebp
   12c19:	89 e5                	mov    %esp,%ebp
   12c1b:	53                   	push   %ebx
   12c1c:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START)
   12c1f:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12c23:	7e 74                	jle    12c99 <irq_disable+0x81>
    {
        return;
    }

    irq_num -= IRQ_PIC_START;
   12c25:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8)
   12c29:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12c2d:	7f 30                	jg     12c5f <irq_disable+0x47>
    {
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   12c2f:	6a 21                	push   $0x21
   12c31:	e8 69 f7 ff ff       	call   1239f <inb>
   12c36:	83 c4 04             	add    $0x4,%esp
   12c39:	89 c3                	mov    %eax,%ebx
   12c3b:	8b 45 08             	mov    0x8(%ebp),%eax
   12c3e:	ba 01 00 00 00       	mov    $0x1,%edx
   12c43:	89 c1                	mov    %eax,%ecx
   12c45:	d3 e2                	shl    %cl,%edx
   12c47:	89 d0                	mov    %edx,%eax
   12c49:	09 d8                	or     %ebx,%eax
   12c4b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   12c4e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   12c52:	50                   	push   %eax
   12c53:	6a 21                	push   $0x21
   12c55:	e8 62 f7 ff ff       	call   123bc <outb>
   12c5a:	83 c4 08             	add    $0x8,%esp
   12c5d:	eb 3b                	jmp    12c9a <irq_disable+0x82>
    }
    else
    {
        irq_num -= 8;
   12c5f:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   12c63:	68 a1 00 00 00       	push   $0xa1
   12c68:	e8 32 f7 ff ff       	call   1239f <inb>
   12c6d:	83 c4 04             	add    $0x4,%esp
   12c70:	89 c3                	mov    %eax,%ebx
   12c72:	8b 45 08             	mov    0x8(%ebp),%eax
   12c75:	ba 01 00 00 00       	mov    $0x1,%edx
   12c7a:	89 c1                	mov    %eax,%ecx
   12c7c:	d3 e2                	shl    %cl,%edx
   12c7e:	89 d0                	mov    %edx,%eax
   12c80:	09 d8                	or     %ebx,%eax
   12c82:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   12c85:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   12c89:	50                   	push   %eax
   12c8a:	68 a1 00 00 00       	push   $0xa1
   12c8f:	e8 28 f7 ff ff       	call   123bc <outb>
   12c94:	83 c4 08             	add    $0x8,%esp
   12c97:	eb 01                	jmp    12c9a <irq_disable+0x82>
        return;
   12c99:	90                   	nop
    }
}
   12c9a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   12c9d:	c9                   	leave  
   12c9e:	c3                   	ret    

00012c9f <irq_disable_global>:

void irq_disable_global(void)
{
   12c9f:	55                   	push   %ebp
   12ca0:	89 e5                	mov    %esp,%ebp
    cli();
   12ca2:	e8 34 f7 ff ff       	call   123db <cli>
}
   12ca7:	90                   	nop
   12ca8:	5d                   	pop    %ebp
   12ca9:	c3                   	ret    

00012caa <irq_enable_global>:

void irq_enable_global(void)
{
   12caa:	55                   	push   %ebp
   12cab:	89 e5                	mov    %esp,%ebp
    sti();
   12cad:	e8 30 f7 ff ff       	call   123e2 <sti>
}
   12cb2:	90                   	nop
   12cb3:	5d                   	pop    %ebp
   12cb4:	c3                   	ret    

00012cb5 <pic_send_eoi>:

void pic_send_eoi(int irq_num)
{
   12cb5:	55                   	push   %ebp
   12cb6:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12cb8:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    // 从片也可能需要发送EOI
    if (irq_num >= 8)
   12cbc:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12cc0:	7e 0f                	jle    12cd1 <pic_send_eoi+0x1c>
    {
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12cc2:	6a 20                	push   $0x20
   12cc4:	68 a0 00 00 00       	push   $0xa0
   12cc9:	e8 ee f6 ff ff       	call   123bc <outb>
   12cce:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12cd1:	6a 20                	push   $0x20
   12cd3:	6a 20                	push   $0x20
   12cd5:	e8 e2 f6 ff ff       	call   123bc <outb>
   12cda:	83 c4 08             	add    $0x8,%esp
}
   12cdd:	90                   	nop
   12cde:	c9                   	leave  
   12cdf:	c3                   	ret    

00012ce0 <irq_enter_protection>:

/**
 * @brief 进入中断保护
 */
irq_state_t irq_enter_protection(void)
{
   12ce0:	55                   	push   %ebp
   12ce1:	89 e5                	mov    %esp,%ebp
   12ce3:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags(); // 保存之前的中断状态
   12ce6:	e8 3e f7 ff ff       	call   12429 <read_eflags>
   12ceb:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   12cee:	e8 ac ff ff ff       	call   12c9f <irq_disable_global>
    return state;
   12cf3:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   12cf6:	c9                   	leave  
   12cf7:	c3                   	ret    

00012cf8 <irq_leave_protection>:

/**
 * @brief 退出中断保护
 */
void irq_leave_protection(irq_state_t state)
{
   12cf8:	55                   	push   %ebp
   12cf9:	89 e5                	mov    %esp,%ebp
    write_eflags(state); // 恢复之前的中断状态
   12cfb:	ff 75 08             	pushl  0x8(%ebp)
   12cfe:	e8 36 f7 ff ff       	call   12439 <write_eflags>
   12d03:	83 c4 04             	add    $0x4,%esp
   12d06:	90                   	nop
   12d07:	c9                   	leave  
   12d08:	c3                   	ret    

00012d09 <inb>:
{
   12d09:	55                   	push   %ebp
   12d0a:	89 e5                	mov    %esp,%ebp
   12d0c:	83 ec 14             	sub    $0x14,%esp
   12d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   12d12:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   12d16:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12d1a:	89 c2                	mov    %eax,%edx
   12d1c:	ec                   	in     (%dx),%al
   12d1d:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   12d20:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   12d24:	c9                   	leave  
   12d25:	c3                   	ret    

00012d26 <outb>:
{
   12d26:	55                   	push   %ebp
   12d27:	89 e5                	mov    %esp,%ebp
   12d29:	83 ec 08             	sub    $0x8,%esp
   12d2c:	8b 55 08             	mov    0x8(%ebp),%edx
   12d2f:	8b 45 0c             	mov    0xc(%ebp),%eax
   12d32:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12d36:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   12d39:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12d3d:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   12d41:	ee                   	out    %al,(%dx)
}
   12d42:	90                   	nop
   12d43:	c9                   	leave  
   12d44:	c3                   	ret    

00012d45 <read_cursor_pos>:

/**
 * @brief 读取当前光标的位置
 */
static int read_cursor_pos(void)
{
   12d45:	55                   	push   %ebp
   12d46:	89 e5                	mov    %esp,%ebp
   12d48:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   12d4b:	e8 90 ff ff ff       	call   12ce0 <irq_enter_protection>
   12d50:	89 45 f4             	mov    %eax,-0xc(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   12d53:	83 ec 08             	sub    $0x8,%esp
   12d56:	6a 0f                	push   $0xf
   12d58:	68 d4 03 00 00       	push   $0x3d4
   12d5d:	e8 c4 ff ff ff       	call   12d26 <outb>
   12d62:	83 c4 10             	add    $0x10,%esp
    pos = inb(0x3D5);
   12d65:	83 ec 0c             	sub    $0xc,%esp
   12d68:	68 d5 03 00 00       	push   $0x3d5
   12d6d:	e8 97 ff ff ff       	call   12d09 <inb>
   12d72:	83 c4 10             	add    $0x10,%esp
   12d75:	0f b6 c0             	movzbl %al,%eax
   12d78:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0E); // 写高地址
   12d7b:	83 ec 08             	sub    $0x8,%esp
   12d7e:	6a 0e                	push   $0xe
   12d80:	68 d4 03 00 00       	push   $0x3d4
   12d85:	e8 9c ff ff ff       	call   12d26 <outb>
   12d8a:	83 c4 10             	add    $0x10,%esp
    pos |= inb(0x3D5) << 8;
   12d8d:	83 ec 0c             	sub    $0xc,%esp
   12d90:	68 d5 03 00 00       	push   $0x3d5
   12d95:	e8 6f ff ff ff       	call   12d09 <inb>
   12d9a:	83 c4 10             	add    $0x10,%esp
   12d9d:	0f b6 c0             	movzbl %al,%eax
   12da0:	c1 e0 08             	shl    $0x8,%eax
   12da3:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   12da6:	83 ec 0c             	sub    $0xc,%esp
   12da9:	ff 75 f4             	pushl  -0xc(%ebp)
   12dac:	e8 47 ff ff ff       	call   12cf8 <irq_leave_protection>
   12db1:	83 c4 10             	add    $0x10,%esp
    return pos;
   12db4:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   12db7:	c9                   	leave  
   12db8:	c3                   	ret    

00012db9 <update_cursor_pos>:

/**
 * @brief 更新鼠标的位置
 */
static void update_cursor_pos(console_t *console)
{
   12db9:	55                   	push   %ebp
   12dba:	89 e5                	mov    %esp,%ebp
   12dbc:	83 ec 18             	sub    $0x18,%esp
    uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   12dbf:	8b 45 08             	mov    0x8(%ebp),%eax
   12dc2:	ba 00 30 02 00       	mov    $0x23000,%edx
   12dc7:	29 d0                	sub    %edx,%eax
   12dc9:	c1 f8 03             	sar    $0x3,%eax
   12dcc:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   12dd2:	89 c2                	mov    %eax,%edx
   12dd4:	8b 45 08             	mov    0x8(%ebp),%eax
   12dd7:	8b 40 14             	mov    0x14(%eax),%eax
   12dda:	89 c1                	mov    %eax,%ecx
   12ddc:	8b 45 08             	mov    0x8(%ebp),%eax
   12ddf:	8b 40 10             	mov    0x10(%eax),%eax
   12de2:	0f af c1             	imul   %ecx,%eax
   12de5:	0f af c2             	imul   %edx,%eax
   12de8:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row * console->display_cols + console->cursor_col;
   12dec:	8b 45 08             	mov    0x8(%ebp),%eax
   12def:	8b 40 08             	mov    0x8(%eax),%eax
   12df2:	89 c2                	mov    %eax,%edx
   12df4:	8b 45 08             	mov    0x8(%ebp),%eax
   12df7:	8b 40 14             	mov    0x14(%eax),%eax
   12dfa:	0f af d0             	imul   %eax,%edx
   12dfd:	8b 45 08             	mov    0x8(%ebp),%eax
   12e00:	8b 40 0c             	mov    0xc(%eax),%eax
   12e03:	01 d0                	add    %edx,%eax
   12e05:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   12e09:	e8 d2 fe ff ff       	call   12ce0 <irq_enter_protection>
   12e0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    outb(0x3D4, 0x0F); // 写低地址
   12e11:	83 ec 08             	sub    $0x8,%esp
   12e14:	6a 0f                	push   $0xf
   12e16:	68 d4 03 00 00       	push   $0x3d4
   12e1b:	e8 06 ff ff ff       	call   12d26 <outb>
   12e20:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)(pos & 0xFF));
   12e23:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12e27:	0f b6 c0             	movzbl %al,%eax
   12e2a:	83 ec 08             	sub    $0x8,%esp
   12e2d:	50                   	push   %eax
   12e2e:	68 d5 03 00 00       	push   $0x3d5
   12e33:	e8 ee fe ff ff       	call   12d26 <outb>
   12e38:	83 c4 10             	add    $0x10,%esp
    outb(0x3D4, 0x0E); // 写高地址
   12e3b:	83 ec 08             	sub    $0x8,%esp
   12e3e:	6a 0e                	push   $0xe
   12e40:	68 d4 03 00 00       	push   $0x3d4
   12e45:	e8 dc fe ff ff       	call   12d26 <outb>
   12e4a:	83 c4 10             	add    $0x10,%esp
    outb(0x3D5, (uint8_t)((pos >> 8) & 0xFF));
   12e4d:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   12e51:	66 c1 e8 08          	shr    $0x8,%ax
   12e55:	0f b6 c0             	movzbl %al,%eax
   12e58:	83 ec 08             	sub    $0x8,%esp
   12e5b:	50                   	push   %eax
   12e5c:	68 d5 03 00 00       	push   $0x3d5
   12e61:	e8 c0 fe ff ff       	call   12d26 <outb>
   12e66:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   12e69:	83 ec 0c             	sub    $0xc,%esp
   12e6c:	ff 75 f0             	pushl  -0x10(%ebp)
   12e6f:	e8 84 fe ff ff       	call   12cf8 <irq_leave_protection>
   12e74:	83 c4 10             	add    $0x10,%esp
}
   12e77:	90                   	nop
   12e78:	c9                   	leave  
   12e79:	c3                   	ret    

00012e7a <clear_display>:

static void clear_display(console_t *console)
{
   12e7a:	55                   	push   %ebp
   12e7b:	89 e5                	mov    %esp,%ebp
   12e7d:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   12e80:	8b 45 08             	mov    0x8(%ebp),%eax
   12e83:	8b 50 14             	mov    0x14(%eax),%edx
   12e86:	8b 45 08             	mov    0x8(%ebp),%eax
   12e89:	8b 40 10             	mov    0x10(%eax),%eax
   12e8c:	0f af c2             	imul   %edx,%eax
   12e8f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t *start = console->disp_base;
   12e92:	8b 45 08             	mov    0x8(%ebp),%eax
   12e95:	8b 00                	mov    (%eax),%eax
   12e97:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++)
   12e9a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   12ea1:	eb 51                	jmp    12ef4 <clear_display+0x7a>
    {
        // 为便于理解，以下分开三步写一个字符，速度慢一些
        start->c = ' ';
   12ea3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12ea6:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   12ea9:	8b 45 08             	mov    0x8(%ebp),%eax
   12eac:	8b 40 24             	mov    0x24(%eax),%eax
   12eaf:	c1 e0 05             	shl    $0x5,%eax
   12eb2:	c0 f8 05             	sar    $0x5,%al
   12eb5:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12eb8:	83 e0 07             	and    $0x7,%eax
   12ebb:	c1 e0 04             	shl    $0x4,%eax
   12ebe:	89 c1                	mov    %eax,%ecx
   12ec0:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   12ec4:	83 e0 8f             	and    $0xffffff8f,%eax
   12ec7:	09 c8                	or     %ecx,%eax
   12ec9:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   12ecc:	8b 45 08             	mov    0x8(%ebp),%eax
   12ecf:	8b 40 20             	mov    0x20(%eax),%eax
   12ed2:	c1 e0 04             	shl    $0x4,%eax
   12ed5:	c0 f8 04             	sar    $0x4,%al
   12ed8:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12edb:	83 e0 0f             	and    $0xf,%eax
   12ede:	89 c1                	mov    %eax,%ecx
   12ee0:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   12ee4:	83 e0 f0             	and    $0xfffffff0,%eax
   12ee7:	09 c8                	or     %ecx,%eax
   12ee9:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++)
   12eec:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   12ef0:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   12ef4:	8b 45 f8             	mov    -0x8(%ebp),%eax
   12ef7:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   12efa:	7c a7                	jl     12ea3 <clear_display+0x29>
    }
}
   12efc:	90                   	nop
   12efd:	c9                   	leave  
   12efe:	c3                   	ret    

00012eff <erase_rows>:

/**
 * @brief 擦除从start到end的行
 */
static void erase_rows(console_t *console, int start, int end)
{
   12eff:	55                   	push   %ebp
   12f00:	89 e5                	mov    %esp,%ebp
   12f02:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t *disp_start = console->disp_base + console->display_cols * start;
   12f05:	8b 45 08             	mov    0x8(%ebp),%eax
   12f08:	8b 10                	mov    (%eax),%edx
   12f0a:	8b 45 08             	mov    0x8(%ebp),%eax
   12f0d:	8b 40 14             	mov    0x14(%eax),%eax
   12f10:	0f af 45 0c          	imul   0xc(%ebp),%eax
   12f14:	01 c0                	add    %eax,%eax
   12f16:	01 d0                	add    %edx,%eax
   12f18:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t *disp_end = console->disp_base + console->display_cols * (end + 1);
   12f1b:	8b 45 08             	mov    0x8(%ebp),%eax
   12f1e:	8b 10                	mov    (%eax),%edx
   12f20:	8b 45 08             	mov    0x8(%ebp),%eax
   12f23:	8b 40 14             	mov    0x14(%eax),%eax
   12f26:	8b 4d 10             	mov    0x10(%ebp),%ecx
   12f29:	83 c1 01             	add    $0x1,%ecx
   12f2c:	0f af c1             	imul   %ecx,%eax
   12f2f:	01 c0                	add    %eax,%eax
   12f31:	01 d0                	add    %edx,%eax
   12f33:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end)
   12f36:	eb 4d                	jmp    12f85 <erase_rows+0x86>
    {
        disp_start->c = ' ';
   12f38:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f3b:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   12f3e:	8b 45 08             	mov    0x8(%ebp),%eax
   12f41:	8b 40 20             	mov    0x20(%eax),%eax
   12f44:	c1 e0 04             	shl    $0x4,%eax
   12f47:	c0 f8 04             	sar    $0x4,%al
   12f4a:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12f4d:	83 e0 0f             	and    $0xf,%eax
   12f50:	89 c1                	mov    %eax,%ecx
   12f52:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   12f56:	83 e0 f0             	and    $0xfffffff0,%eax
   12f59:	09 c8                	or     %ecx,%eax
   12f5b:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   12f5e:	8b 45 08             	mov    0x8(%ebp),%eax
   12f61:	8b 40 24             	mov    0x24(%eax),%eax
   12f64:	c1 e0 05             	shl    $0x5,%eax
   12f67:	c0 f8 05             	sar    $0x5,%al
   12f6a:	8b 55 fc             	mov    -0x4(%ebp),%edx
   12f6d:	83 e0 07             	and    $0x7,%eax
   12f70:	c1 e0 04             	shl    $0x4,%eax
   12f73:	89 c1                	mov    %eax,%ecx
   12f75:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   12f79:	83 e0 8f             	and    $0xffffff8f,%eax
   12f7c:	09 c8                	or     %ecx,%eax
   12f7e:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   12f81:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end)
   12f85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12f88:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   12f8b:	72 ab                	jb     12f38 <erase_rows+0x39>
    }
}
   12f8d:	90                   	nop
   12f8e:	c9                   	leave  
   12f8f:	c3                   	ret    

00012f90 <scroll_up>:

/**
 * 整体屏幕上移若干行
 */
static void scroll_up(console_t *console, int lines)
{
   12f90:	55                   	push   %ebp
   12f91:	89 e5                	mov    %esp,%ebp
   12f93:	83 ec 18             	sub    $0x18,%esp
    // 整体上移
    disp_char_t *dest = console->disp_base;
   12f96:	8b 45 08             	mov    0x8(%ebp),%eax
   12f99:	8b 00                	mov    (%eax),%eax
   12f9b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *src = console->disp_base + console->display_cols * lines;
   12f9e:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa1:	8b 10                	mov    (%eax),%edx
   12fa3:	8b 45 08             	mov    0x8(%ebp),%eax
   12fa6:	8b 40 14             	mov    0x14(%eax),%eax
   12fa9:	0f af 45 0c          	imul   0xc(%ebp),%eax
   12fad:	01 c0                	add    %eax,%eax
   12faf:	01 d0                	add    %edx,%eax
   12fb1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   12fb4:	8b 45 08             	mov    0x8(%ebp),%eax
   12fb7:	8b 40 10             	mov    0x10(%eax),%eax
   12fba:	2b 45 0c             	sub    0xc(%ebp),%eax
   12fbd:	89 c2                	mov    %eax,%edx
   12fbf:	8b 45 08             	mov    0x8(%ebp),%eax
   12fc2:	8b 40 14             	mov    0x14(%eax),%eax
   12fc5:	0f af c2             	imul   %edx,%eax
   12fc8:	01 c0                	add    %eax,%eax
   12fca:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   12fcd:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12fd0:	83 ec 04             	sub    $0x4,%esp
   12fd3:	50                   	push   %eax
   12fd4:	ff 75 f0             	pushl  -0x10(%ebp)
   12fd7:	ff 75 f4             	pushl  -0xc(%ebp)
   12fda:	e8 e1 17 00 00       	call   147c0 <kernel_memcpy>
   12fdf:	83 c4 10             	add    $0x10,%esp

    // 擦除最后一行
    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   12fe2:	8b 45 08             	mov    0x8(%ebp),%eax
   12fe5:	8b 40 10             	mov    0x10(%eax),%eax
   12fe8:	8d 50 ff             	lea    -0x1(%eax),%edx
   12feb:	8b 45 08             	mov    0x8(%ebp),%eax
   12fee:	8b 40 10             	mov    0x10(%eax),%eax
   12ff1:	2b 45 0c             	sub    0xc(%ebp),%eax
   12ff4:	83 ec 04             	sub    $0x4,%esp
   12ff7:	52                   	push   %edx
   12ff8:	50                   	push   %eax
   12ff9:	ff 75 08             	pushl  0x8(%ebp)
   12ffc:	e8 fe fe ff ff       	call   12eff <erase_rows>
   13001:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   13004:	8b 45 08             	mov    0x8(%ebp),%eax
   13007:	8b 40 08             	mov    0x8(%eax),%eax
   1300a:	2b 45 0c             	sub    0xc(%ebp),%eax
   1300d:	89 c2                	mov    %eax,%edx
   1300f:	8b 45 08             	mov    0x8(%ebp),%eax
   13012:	89 50 08             	mov    %edx,0x8(%eax)
}
   13015:	90                   	nop
   13016:	c9                   	leave  
   13017:	c3                   	ret    

00013018 <move_to_col0>:

static void move_to_col0(console_t *console)
{
   13018:	55                   	push   %ebp
   13019:	89 e5                	mov    %esp,%ebp
    console->cursor_col = 0;
   1301b:	8b 45 08             	mov    0x8(%ebp),%eax
   1301e:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   13025:	90                   	nop
   13026:	5d                   	pop    %ebp
   13027:	c3                   	ret    

00013028 <move_next_line>:

/**
 * 换至下一行
 */
static void move_next_line(console_t *console)
{
   13028:	55                   	push   %ebp
   13029:	89 e5                	mov    %esp,%ebp
   1302b:	83 ec 08             	sub    $0x8,%esp
    console->cursor_row++;
   1302e:	8b 45 08             	mov    0x8(%ebp),%eax
   13031:	8b 40 08             	mov    0x8(%eax),%eax
   13034:	8d 50 01             	lea    0x1(%eax),%edx
   13037:	8b 45 08             	mov    0x8(%ebp),%eax
   1303a:	89 50 08             	mov    %edx,0x8(%eax)

    // 超出当前屏幕显示的所有行，上移一行
    if (console->cursor_row >= console->display_rows)
   1303d:	8b 45 08             	mov    0x8(%ebp),%eax
   13040:	8b 50 08             	mov    0x8(%eax),%edx
   13043:	8b 45 08             	mov    0x8(%ebp),%eax
   13046:	8b 40 10             	mov    0x10(%eax),%eax
   13049:	39 c2                	cmp    %eax,%edx
   1304b:	7c 10                	jl     1305d <move_next_line+0x35>
    {
        scroll_up(console, 1);
   1304d:	83 ec 08             	sub    $0x8,%esp
   13050:	6a 01                	push   $0x1
   13052:	ff 75 08             	pushl  0x8(%ebp)
   13055:	e8 36 ff ff ff       	call   12f90 <scroll_up>
   1305a:	83 c4 10             	add    $0x10,%esp
    }
}
   1305d:	90                   	nop
   1305e:	c9                   	leave  
   1305f:	c3                   	ret    

00013060 <move_forward>:

/**
 * 将光标往前移n个字符
 */
static void move_forward(console_t *console, int n)
{
   13060:	55                   	push   %ebp
   13061:	89 e5                	mov    %esp,%ebp
   13063:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < n; i++)
   13066:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1306d:	eb 5c                	jmp    130cb <move_forward+0x6b>
    {
        // 超过最后一列需要换行
        if (++console->cursor_col >= console->display_cols)
   1306f:	8b 45 08             	mov    0x8(%ebp),%eax
   13072:	8b 40 0c             	mov    0xc(%eax),%eax
   13075:	8d 50 01             	lea    0x1(%eax),%edx
   13078:	8b 45 08             	mov    0x8(%ebp),%eax
   1307b:	89 50 0c             	mov    %edx,0xc(%eax)
   1307e:	8b 45 08             	mov    0x8(%ebp),%eax
   13081:	8b 50 0c             	mov    0xc(%eax),%edx
   13084:	8b 45 08             	mov    0x8(%ebp),%eax
   13087:	8b 40 14             	mov    0x14(%eax),%eax
   1308a:	39 c2                	cmp    %eax,%edx
   1308c:	7c 39                	jl     130c7 <move_forward+0x67>
        {
            console->cursor_col = 0;
   1308e:	8b 45 08             	mov    0x8(%ebp),%eax
   13091:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   13098:	8b 45 08             	mov    0x8(%ebp),%eax
   1309b:	8b 40 08             	mov    0x8(%eax),%eax
   1309e:	8d 50 01             	lea    0x1(%eax),%edx
   130a1:	8b 45 08             	mov    0x8(%ebp),%eax
   130a4:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows)
   130a7:	8b 45 08             	mov    0x8(%ebp),%eax
   130aa:	8b 50 08             	mov    0x8(%eax),%edx
   130ad:	8b 45 08             	mov    0x8(%ebp),%eax
   130b0:	8b 40 10             	mov    0x10(%eax),%eax
   130b3:	39 c2                	cmp    %eax,%edx
   130b5:	7c 10                	jl     130c7 <move_forward+0x67>
            {
                // 超出末端，上移
                scroll_up(console, 1);
   130b7:	83 ec 08             	sub    $0x8,%esp
   130ba:	6a 01                	push   $0x1
   130bc:	ff 75 08             	pushl  0x8(%ebp)
   130bf:	e8 cc fe ff ff       	call   12f90 <scroll_up>
   130c4:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < n; i++)
   130c7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   130cb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   130ce:	3b 45 0c             	cmp    0xc(%ebp),%eax
   130d1:	7c 9c                	jl     1306f <move_forward+0xf>
            }
        }
    }
}
   130d3:	90                   	nop
   130d4:	c9                   	leave  
   130d5:	c3                   	ret    

000130d6 <show_char>:

static void show_char(console_t *console, char c)
{
   130d6:	55                   	push   %ebp
   130d7:	89 e5                	mov    %esp,%ebp
   130d9:	83 ec 28             	sub    $0x28,%esp
   130dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   130df:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   130e2:	8b 45 08             	mov    0x8(%ebp),%eax
   130e5:	8b 50 0c             	mov    0xc(%eax),%edx
   130e8:	8b 45 08             	mov    0x8(%ebp),%eax
   130eb:	8b 48 08             	mov    0x8(%eax),%ecx
   130ee:	8b 45 08             	mov    0x8(%ebp),%eax
   130f1:	8b 40 14             	mov    0x14(%eax),%eax
   130f4:	0f af c1             	imul   %ecx,%eax
   130f7:	01 d0                	add    %edx,%eax
   130f9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t *p = console->disp_base + offset;
   130fc:	8b 45 08             	mov    0x8(%ebp),%eax
   130ff:	8b 00                	mov    (%eax),%eax
   13101:	8b 55 f4             	mov    -0xc(%ebp),%edx
   13104:	01 d2                	add    %edx,%edx
   13106:	01 d0                	add    %edx,%eax
   13108:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   1310b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1310e:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   13112:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   13114:	8b 45 08             	mov    0x8(%ebp),%eax
   13117:	8b 40 20             	mov    0x20(%eax),%eax
   1311a:	c1 e0 04             	shl    $0x4,%eax
   1311d:	c0 f8 04             	sar    $0x4,%al
   13120:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13123:	83 e0 0f             	and    $0xf,%eax
   13126:	89 c1                	mov    %eax,%ecx
   13128:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1312c:	83 e0 f0             	and    $0xfffffff0,%eax
   1312f:	09 c8                	or     %ecx,%eax
   13131:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   13134:	8b 45 08             	mov    0x8(%ebp),%eax
   13137:	8b 40 24             	mov    0x24(%eax),%eax
   1313a:	c1 e0 05             	shl    $0x5,%eax
   1313d:	c0 f8 05             	sar    $0x5,%al
   13140:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13143:	83 e0 07             	and    $0x7,%eax
   13146:	c1 e0 04             	shl    $0x4,%eax
   13149:	89 c1                	mov    %eax,%ecx
   1314b:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1314f:	83 e0 8f             	and    $0xffffff8f,%eax
   13152:	09 c8                	or     %ecx,%eax
   13154:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   13157:	83 ec 08             	sub    $0x8,%esp
   1315a:	6a 01                	push   $0x1
   1315c:	ff 75 08             	pushl  0x8(%ebp)
   1315f:	e8 fc fe ff ff       	call   13060 <move_forward>
   13164:	83 c4 10             	add    $0x10,%esp
}
   13167:	90                   	nop
   13168:	c9                   	leave  
   13169:	c3                   	ret    

0001316a <save_cursor>:

/**
 * 只支持保存光标
 */
void save_cursor(console_t *console)
{
   1316a:	55                   	push   %ebp
   1316b:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   1316d:	8b 45 08             	mov    0x8(%ebp),%eax
   13170:	8b 50 0c             	mov    0xc(%eax),%edx
   13173:	8b 45 08             	mov    0x8(%ebp),%eax
   13176:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   13179:	8b 45 08             	mov    0x8(%ebp),%eax
   1317c:	8b 50 08             	mov    0x8(%eax),%edx
   1317f:	8b 45 08             	mov    0x8(%ebp),%eax
   13182:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   13185:	90                   	nop
   13186:	5d                   	pop    %ebp
   13187:	c3                   	ret    

00013188 <restore_cursor>:

void restore_cursor(console_t *console)
{
   13188:	55                   	push   %ebp
   13189:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   1318b:	8b 45 08             	mov    0x8(%ebp),%eax
   1318e:	8b 50 18             	mov    0x18(%eax),%edx
   13191:	8b 45 08             	mov    0x8(%ebp),%eax
   13194:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   13197:	8b 45 08             	mov    0x8(%ebp),%eax
   1319a:	8b 50 1c             	mov    0x1c(%eax),%edx
   1319d:	8b 45 08             	mov    0x8(%ebp),%eax
   131a0:	89 50 08             	mov    %edx,0x8(%eax)
}
   131a3:	90                   	nop
   131a4:	5d                   	pop    %ebp
   131a5:	c3                   	ret    

000131a6 <console_init>:
//     mutex_init(&console->mutex);
//     return 0;
// }

int console_init(void)
{
   131a6:	55                   	push   %ebp
   131a7:	89 e5                	mov    %esp,%ebp
   131a9:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < CONSOLE_NR; i++)
   131ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   131b3:	e9 ba 00 00 00       	jmp    13272 <console_init+0xcc>
    {
        console_t *console = console_buf + i;
   131b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   131bb:	6b c0 68             	imul   $0x68,%eax,%eax
   131be:	05 00 30 02 00       	add    $0x23000,%eax
   131c3:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->display_cols = CONSOLE_COL_MAX;
   131c6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   131c9:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
        console->display_rows = CONSOLE_ROW_MAX;
   131d0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   131d3:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)

        // 设置背景
        console->foreground = COLOR_White;
   131da:	8b 45 f0             	mov    -0x10(%ebp),%eax
   131dd:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
        console->background = COLOR_Black;
   131e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   131e7:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

        // 读取光标位置
        int cursor_pos = read_cursor_pos();
   131ee:	e8 52 fb ff ff       	call   12d45 <read_cursor_pos>
   131f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   131f6:	8b 45 f0             	mov    -0x10(%ebp),%eax
   131f9:	8b 48 14             	mov    0x14(%eax),%ecx
   131fc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   131ff:	99                   	cltd   
   13200:	f7 f9                	idiv   %ecx
   13202:	89 c2                	mov    %eax,%edx
   13204:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13207:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   1320a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1320d:	8b 48 14             	mov    0x14(%eax),%ecx
   13210:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13213:	99                   	cltd   
   13214:	f7 f9                	idiv   %ecx
   13216:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13219:	89 50 0c             	mov    %edx,0xc(%eax)

        console->old_cursor_row = console->cursor_row;
   1321c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1321f:	8b 50 08             	mov    0x8(%eax),%edx
   13222:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13225:	89 50 1c             	mov    %edx,0x1c(%eax)
        console->old_cursor_col = console->cursor_col;
   13228:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1322b:	8b 50 0c             	mov    0xc(%eax),%edx
   1322e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13231:	89 50 18             	mov    %edx,0x18(%eax)
        console->write_state = CONSOLE_WRITE_NORMAL;
   13234:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13237:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

        console->disp_base = (disp_char_t *)CONSOLE_DISP_ADDR + i * console->display_cols * console->display_rows;
   1323e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13241:	8b 40 14             	mov    0x14(%eax),%eax
   13244:	0f af 45 f4          	imul   -0xc(%ebp),%eax
   13248:	89 c2                	mov    %eax,%edx
   1324a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1324d:	8b 40 10             	mov    0x10(%eax),%eax
   13250:	0f af c2             	imul   %edx,%eax
   13253:	01 c0                	add    %eax,%eax
   13255:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   1325b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1325e:	89 10                	mov    %edx,(%eax)

        // 清空
        clear_display(console);
   13260:	83 ec 0c             	sub    $0xc,%esp
   13263:	ff 75 f0             	pushl  -0x10(%ebp)
   13266:	e8 0f fc ff ff       	call   12e7a <clear_display>
   1326b:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < CONSOLE_NR; i++)
   1326e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13272:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13276:	0f 8e 3c ff ff ff    	jle    131b8 <console_init+0x12>
    }
    return 0;
   1327c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13281:	c9                   	leave  
   13282:	c3                   	ret    

00013283 <move_backword>:
/**
 * 光标左移
 * 如果左移成功，返回0；否则返回-1
 */
static int move_backword(console_t *console, int n)
{
   13283:	55                   	push   %ebp
   13284:	89 e5                	mov    %esp,%ebp
   13286:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   13289:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++)
   13290:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13297:	eb 55                	jmp    132ee <move_backword+0x6b>
    {
        if (console->cursor_col > 0)
   13299:	8b 45 08             	mov    0x8(%ebp),%eax
   1329c:	8b 40 0c             	mov    0xc(%eax),%eax
   1329f:	85 c0                	test   %eax,%eax
   132a1:	7e 18                	jle    132bb <move_backword+0x38>
        {
            // 非列超始处,可回退
            console->cursor_col--;
   132a3:	8b 45 08             	mov    0x8(%ebp),%eax
   132a6:	8b 40 0c             	mov    0xc(%eax),%eax
   132a9:	8d 50 ff             	lea    -0x1(%eax),%edx
   132ac:	8b 45 08             	mov    0x8(%ebp),%eax
   132af:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   132b2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   132b9:	eb 2f                	jmp    132ea <move_backword+0x67>
        }
        else if (console->cursor_row > 0)
   132bb:	8b 45 08             	mov    0x8(%ebp),%eax
   132be:	8b 40 08             	mov    0x8(%eax),%eax
   132c1:	85 c0                	test   %eax,%eax
   132c3:	7e 25                	jle    132ea <move_backword+0x67>
        {
            // 列起始处，但非首行，可回退
            console->cursor_row--;
   132c5:	8b 45 08             	mov    0x8(%ebp),%eax
   132c8:	8b 40 08             	mov    0x8(%eax),%eax
   132cb:	8d 50 ff             	lea    -0x1(%eax),%edx
   132ce:	8b 45 08             	mov    0x8(%ebp),%eax
   132d1:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   132d4:	8b 45 08             	mov    0x8(%ebp),%eax
   132d7:	8b 40 14             	mov    0x14(%eax),%eax
   132da:	8d 50 ff             	lea    -0x1(%eax),%edx
   132dd:	8b 45 08             	mov    0x8(%ebp),%eax
   132e0:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   132e3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++)
   132ea:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   132ee:	8b 45 f8             	mov    -0x8(%ebp),%eax
   132f1:	3b 45 0c             	cmp    0xc(%ebp),%eax
   132f4:	7c a3                	jl     13299 <move_backword+0x16>
        }
    }

    return status;
   132f6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   132f9:	c9                   	leave  
   132fa:	c3                   	ret    

000132fb <erase_backword>:
/**
 * 擦除左边一个字符 光标左移一个，输出空格，再左移一个
 * @param console
 */
static void erase_backword(console_t *console)
{
   132fb:	55                   	push   %ebp
   132fc:	89 e5                	mov    %esp,%ebp
   132fe:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0)
   13301:	6a 01                	push   $0x1
   13303:	ff 75 08             	pushl  0x8(%ebp)
   13306:	e8 78 ff ff ff       	call   13283 <move_backword>
   1330b:	83 c4 08             	add    $0x8,%esp
   1330e:	85 c0                	test   %eax,%eax
   13310:	75 20                	jne    13332 <erase_backword+0x37>
    {
        show_char(console, ' ');
   13312:	83 ec 08             	sub    $0x8,%esp
   13315:	6a 20                	push   $0x20
   13317:	ff 75 08             	pushl  0x8(%ebp)
   1331a:	e8 b7 fd ff ff       	call   130d6 <show_char>
   1331f:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   13322:	83 ec 08             	sub    $0x8,%esp
   13325:	6a 01                	push   $0x1
   13327:	ff 75 08             	pushl  0x8(%ebp)
   1332a:	e8 54 ff ff ff       	call   13283 <move_backword>
   1332f:	83 c4 10             	add    $0x10,%esp
    }
}
   13332:	90                   	nop
   13333:	c9                   	leave  
   13334:	c3                   	ret    

00013335 <move_next_tab>:

/**
 * 将光标对齐到8的倍数位置上
 */
static void move_next_tab(console_t *console)
{
   13335:	55                   	push   %ebp
   13336:	89 e5                	mov    %esp,%ebp
   13338:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   1333b:	8b 45 08             	mov    0x8(%ebp),%eax
   1333e:	8b 40 0c             	mov    0xc(%eax),%eax
   13341:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8; // 下一显示位置
   13344:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13347:	83 c0 07             	add    $0x7,%eax
   1334a:	8d 50 07             	lea    0x7(%eax),%edx
   1334d:	85 c0                	test   %eax,%eax
   1334f:	0f 48 c2             	cmovs  %edx,%eax
   13352:	c1 f8 03             	sar    $0x3,%eax
   13355:	c1 e0 03             	shl    $0x3,%eax
   13358:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols)
   1335b:	8b 45 08             	mov    0x8(%ebp),%eax
   1335e:	8b 40 14             	mov    0x14(%eax),%eax
   13361:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   13364:	7c 36                	jl     1339c <move_next_tab+0x67>
    {
        col = 0;
   13366:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   1336d:	8b 45 08             	mov    0x8(%ebp),%eax
   13370:	8b 40 08             	mov    0x8(%eax),%eax
   13373:	8d 50 01             	lea    0x1(%eax),%edx
   13376:	8b 45 08             	mov    0x8(%ebp),%eax
   13379:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows)
   1337c:	8b 45 08             	mov    0x8(%ebp),%eax
   1337f:	8b 50 08             	mov    0x8(%eax),%edx
   13382:	8b 45 08             	mov    0x8(%ebp),%eax
   13385:	8b 40 10             	mov    0x10(%eax),%eax
   13388:	39 c2                	cmp    %eax,%edx
   1338a:	7c 10                	jl     1339c <move_next_tab+0x67>
        {
            // 超出末端，上移
            scroll_up(console, 1);
   1338c:	83 ec 08             	sub    $0x8,%esp
   1338f:	6a 01                	push   $0x1
   13391:	ff 75 08             	pushl  0x8(%ebp)
   13394:	e8 f7 fb ff ff       	call   12f90 <scroll_up>
   13399:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   1339c:	8b 45 08             	mov    0x8(%ebp),%eax
   1339f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   133a2:	89 50 0c             	mov    %edx,0xc(%eax)
}
   133a5:	90                   	nop
   133a6:	c9                   	leave  
   133a7:	c3                   	ret    

000133a8 <write_normal>:

/**
 * 普通状态下的字符的写入处理
 */
static void write_normal(console_t *console, char c)
{
   133a8:	55                   	push   %ebp
   133a9:	89 e5                	mov    %esp,%ebp
   133ab:	83 ec 18             	sub    $0x18,%esp
   133ae:	8b 45 0c             	mov    0xc(%ebp),%eax
   133b1:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c)
   133b4:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   133b8:	83 f8 0a             	cmp    $0xa,%eax
   133bb:	74 70                	je     1342d <write_normal+0x85>
   133bd:	83 f8 0a             	cmp    $0xa,%eax
   133c0:	7f 0c                	jg     133ce <write_normal+0x26>
   133c2:	83 f8 08             	cmp    $0x8,%eax
   133c5:	74 34                	je     133fb <write_normal+0x53>
   133c7:	83 f8 09             	cmp    $0x9,%eax
   133ca:	74 41                	je     1340d <write_normal+0x65>
   133cc:	eb 6f                	jmp    1343d <write_normal+0x95>
   133ce:	83 f8 1b             	cmp    $0x1b,%eax
   133d1:	74 0c                	je     133df <write_normal+0x37>
   133d3:	83 f8 7f             	cmp    $0x7f,%eax
   133d6:	74 13                	je     133eb <write_normal+0x43>
   133d8:	83 f8 0d             	cmp    $0xd,%eax
   133db:	74 40                	je     1341d <write_normal+0x75>
   133dd:	eb 5e                	jmp    1343d <write_normal+0x95>
    {
    case ASCII_ESC:
        console->write_state = CONSOLE_WRITE_ESC;
   133df:	8b 45 08             	mov    0x8(%ebp),%eax
   133e2:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        break;
   133e9:	eb 72                	jmp    1345d <write_normal+0xb5>
    case 0x7F:
        erase_backword(console);
   133eb:	83 ec 0c             	sub    $0xc,%esp
   133ee:	ff 75 08             	pushl  0x8(%ebp)
   133f1:	e8 05 ff ff ff       	call   132fb <erase_backword>
   133f6:	83 c4 10             	add    $0x10,%esp
        break;
   133f9:	eb 62                	jmp    1345d <write_normal+0xb5>
    case '\b': // 左移一个字符
        move_backword(console, 1);
   133fb:	83 ec 08             	sub    $0x8,%esp
   133fe:	6a 01                	push   $0x1
   13400:	ff 75 08             	pushl  0x8(%ebp)
   13403:	e8 7b fe ff ff       	call   13283 <move_backword>
   13408:	83 c4 10             	add    $0x10,%esp
        break;
   1340b:	eb 50                	jmp    1345d <write_normal+0xb5>
        // 换行处理
    case '\t': // 对齐的下一制表符
        move_next_tab(console);
   1340d:	83 ec 0c             	sub    $0xc,%esp
   13410:	ff 75 08             	pushl  0x8(%ebp)
   13413:	e8 1d ff ff ff       	call   13335 <move_next_tab>
   13418:	83 c4 10             	add    $0x10,%esp
        break;
   1341b:	eb 40                	jmp    1345d <write_normal+0xb5>
    case '\r':
        move_to_col0(console);
   1341d:	83 ec 0c             	sub    $0xc,%esp
   13420:	ff 75 08             	pushl  0x8(%ebp)
   13423:	e8 f0 fb ff ff       	call   13018 <move_to_col0>
   13428:	83 c4 10             	add    $0x10,%esp
        break;
   1342b:	eb 30                	jmp    1345d <write_normal+0xb5>
    case '\n': // 暂时这样处理
        // move_to_col0(console);
        move_next_line(console);
   1342d:	83 ec 0c             	sub    $0xc,%esp
   13430:	ff 75 08             	pushl  0x8(%ebp)
   13433:	e8 f0 fb ff ff       	call   13028 <move_next_line>
   13438:	83 c4 10             	add    $0x10,%esp
        break;
   1343b:	eb 20                	jmp    1345d <write_normal+0xb5>
        // 普通字符显示
    default:
    {
        if ((c >= ' ') && (c <= '~'))
   1343d:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   13441:	7e 19                	jle    1345c <write_normal+0xb4>
   13443:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   13447:	74 13                	je     1345c <write_normal+0xb4>
        {
            show_char(console, c);
   13449:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   1344d:	83 ec 08             	sub    $0x8,%esp
   13450:	50                   	push   %eax
   13451:	ff 75 08             	pushl  0x8(%ebp)
   13454:	e8 7d fc ff ff       	call   130d6 <show_char>
   13459:	83 c4 10             	add    $0x10,%esp
        }
        break;
   1345c:	90                   	nop
    }
    }
}
   1345d:	90                   	nop
   1345e:	c9                   	leave  
   1345f:	c3                   	ret    

00013460 <move_left>:

/**
 * @brief 光标左移，但不起始左边界，也不往上移
 */
static void move_left(console_t *console, int n)
{
   13460:	55                   	push   %ebp
   13461:	89 e5                	mov    %esp,%ebp
   13463:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   13466:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1346a:	75 07                	jne    13473 <move_left+0x13>
    {
        n = 1;
   1346c:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   13473:	8b 45 08             	mov    0x8(%ebp),%eax
   13476:	8b 40 0c             	mov    0xc(%eax),%eax
   13479:	2b 45 0c             	sub    0xc(%ebp),%eax
   1347c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   1347f:	b8 00 00 00 00       	mov    $0x0,%eax
   13484:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   13488:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   1348c:	89 c2                	mov    %eax,%edx
   1348e:	8b 45 08             	mov    0x8(%ebp),%eax
   13491:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13494:	90                   	nop
   13495:	c9                   	leave  
   13496:	c3                   	ret    

00013497 <move_right>:

/**
 * @brief 光标右移，但不起始右边界，也不往下移
 */
static void move_right(console_t *console, int n)
{
   13497:	55                   	push   %ebp
   13498:	89 e5                	mov    %esp,%ebp
   1349a:	83 ec 10             	sub    $0x10,%esp
    // 至少移致动1个
    if (n == 0)
   1349d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   134a1:	75 07                	jne    134aa <move_right+0x13>
    {
        n = 1;
   134a3:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   134aa:	8b 45 08             	mov    0x8(%ebp),%eax
   134ad:	8b 50 0c             	mov    0xc(%eax),%edx
   134b0:	8b 45 0c             	mov    0xc(%ebp),%eax
   134b3:	01 d0                	add    %edx,%eax
   134b5:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols)
   134b8:	8b 45 08             	mov    0x8(%ebp),%eax
   134bb:	8b 40 14             	mov    0x14(%eax),%eax
   134be:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   134c1:	7c 11                	jl     134d4 <move_right+0x3d>
    {
        console->cursor_col = console->display_cols - 1;
   134c3:	8b 45 08             	mov    0x8(%ebp),%eax
   134c6:	8b 40 14             	mov    0x14(%eax),%eax
   134c9:	8d 50 ff             	lea    -0x1(%eax),%edx
   134cc:	8b 45 08             	mov    0x8(%ebp),%eax
   134cf:	89 50 0c             	mov    %edx,0xc(%eax)
    }
    else
    {
        console->cursor_col = col;
    }
}
   134d2:	eb 09                	jmp    134dd <move_right+0x46>
        console->cursor_col = col;
   134d4:	8b 45 08             	mov    0x8(%ebp),%eax
   134d7:	8b 55 fc             	mov    -0x4(%ebp),%edx
   134da:	89 50 0c             	mov    %edx,0xc(%eax)
}
   134dd:	90                   	nop
   134de:	c9                   	leave  
   134df:	c3                   	ret    

000134e0 <move_cursor>:

/**
 * 移动光标
 */
static void move_cursor(console_t *console)
{
   134e0:	55                   	push   %ebp
   134e1:	89 e5                	mov    %esp,%ebp
    if (console->curr_param_index >= 1)
   134e3:	8b 45 08             	mov    0x8(%ebp),%eax
   134e6:	8b 40 50             	mov    0x50(%eax),%eax
   134e9:	85 c0                	test   %eax,%eax
   134eb:	7e 0c                	jle    134f9 <move_cursor+0x19>
    {
        console->cursor_row = console->esc_param[0];
   134ed:	8b 45 08             	mov    0x8(%ebp),%eax
   134f0:	8b 50 28             	mov    0x28(%eax),%edx
   134f3:	8b 45 08             	mov    0x8(%ebp),%eax
   134f6:	89 50 08             	mov    %edx,0x8(%eax)
    }

    if (console->curr_param_index >= 2)
   134f9:	8b 45 08             	mov    0x8(%ebp),%eax
   134fc:	8b 40 50             	mov    0x50(%eax),%eax
   134ff:	83 f8 01             	cmp    $0x1,%eax
   13502:	7e 0c                	jle    13510 <move_cursor+0x30>
    {
        console->cursor_col = console->esc_param[1];
   13504:	8b 45 08             	mov    0x8(%ebp),%eax
   13507:	8b 50 2c             	mov    0x2c(%eax),%edx
   1350a:	8b 45 08             	mov    0x8(%ebp),%eax
   1350d:	89 50 0c             	mov    %edx,0xc(%eax)
    }
}
   13510:	90                   	nop
   13511:	5d                   	pop    %ebp
   13512:	c3                   	ret    

00013513 <clear_esc_param>:

/**
 * 清空参数表
 */
static void clear_esc_param(console_t *console)
{
   13513:	55                   	push   %ebp
   13514:	89 e5                	mov    %esp,%ebp
   13516:	83 ec 08             	sub    $0x8,%esp
    kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13519:	8b 45 08             	mov    0x8(%ebp),%eax
   1351c:	83 c0 28             	add    $0x28,%eax
   1351f:	83 ec 04             	sub    $0x4,%esp
   13522:	6a 28                	push   $0x28
   13524:	6a 00                	push   $0x0
   13526:	50                   	push   %eax
   13527:	e8 e3 12 00 00       	call   1480f <kernel_memset>
   1352c:	83 c4 10             	add    $0x10,%esp
    console->curr_param_index = 0;
   1352f:	8b 45 08             	mov    0x8(%ebp),%eax
   13532:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13539:	90                   	nop
   1353a:	c9                   	leave  
   1353b:	c3                   	ret    

0001353c <write_esc>:

/**
 * 写入以ESC开头的序列
 */
static void write_esc(console_t *console, char c)
{
   1353c:	55                   	push   %ebp
   1353d:	89 e5                	mov    %esp,%ebp
   1353f:	83 ec 18             	sub    $0x18,%esp
   13542:	8b 45 0c             	mov    0xc(%ebp),%eax
   13545:	88 45 f4             	mov    %al,-0xc(%ebp)
    // https://blog.csdn.net/ScilogyHunter/article/details/106874395
    // ESC状态处理, 转义序列模式 ESC 0x20-0x27(0或多个) 0x30-0x7e
    switch (c)
   13548:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   1354c:	83 f8 38             	cmp    $0x38,%eax
   1354f:	74 21                	je     13572 <write_esc+0x36>
   13551:	83 f8 5b             	cmp    $0x5b,%eax
   13554:	74 33                	je     13589 <write_esc+0x4d>
   13556:	83 f8 37             	cmp    $0x37,%eax
   13559:	75 48                	jne    135a3 <write_esc+0x67>
    {
    case '7': // ESC 7 保存光标
        save_cursor(console);
   1355b:	ff 75 08             	pushl  0x8(%ebp)
   1355e:	e8 07 fc ff ff       	call   1316a <save_cursor>
   13563:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   13566:	8b 45 08             	mov    0x8(%ebp),%eax
   13569:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   13570:	eb 3c                	jmp    135ae <write_esc+0x72>
    case '8': // ESC 8 恢复光标
        restore_cursor(console);
   13572:	ff 75 08             	pushl  0x8(%ebp)
   13575:	e8 0e fc ff ff       	call   13188 <restore_cursor>
   1357a:	83 c4 04             	add    $0x4,%esp
        console->write_state = CONSOLE_WRITE_NORMAL;
   1357d:	8b 45 08             	mov    0x8(%ebp),%eax
   13580:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   13587:	eb 25                	jmp    135ae <write_esc+0x72>
    case '[':
        clear_esc_param(console);
   13589:	83 ec 0c             	sub    $0xc,%esp
   1358c:	ff 75 08             	pushl  0x8(%ebp)
   1358f:	e8 7f ff ff ff       	call   13513 <clear_esc_param>
   13594:	83 c4 10             	add    $0x10,%esp
        console->write_state = CONSOLE_WRITE_SQUARE;
   13597:	8b 45 08             	mov    0x8(%ebp),%eax
   1359a:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
        break;
   135a1:	eb 0b                	jmp    135ae <write_esc+0x72>
    default:
        console->write_state = CONSOLE_WRITE_NORMAL;
   135a3:	8b 45 08             	mov    0x8(%ebp),%eax
   135a6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
        break;
   135ad:	90                   	nop
    }
}
   135ae:	90                   	nop
   135af:	c9                   	leave  
   135b0:	c3                   	ret    

000135b1 <erase_in_display>:

/**
 * 擦除字符操作
 */
static void erase_in_display(console_t *console)
{
   135b1:	55                   	push   %ebp
   135b2:	89 e5                	mov    %esp,%ebp
   135b4:	83 ec 10             	sub    $0x10,%esp
    if (console->curr_param_index <= 0)
   135b7:	8b 45 08             	mov    0x8(%ebp),%eax
   135ba:	8b 40 50             	mov    0x50(%eax),%eax
   135bd:	85 c0                	test   %eax,%eax
   135bf:	7e 3e                	jle    135ff <erase_in_display+0x4e>
    {
        return;
    }

    int param = console->esc_param[0];
   135c1:	8b 45 08             	mov    0x8(%ebp),%eax
   135c4:	8b 40 28             	mov    0x28(%eax),%eax
   135c7:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (param == 2)
   135ca:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   135ce:	75 30                	jne    13600 <erase_in_display+0x4f>
    {
        // 擦除整个屏幕
        erase_rows(console, 0, console->display_rows - 1);
   135d0:	8b 45 08             	mov    0x8(%ebp),%eax
   135d3:	8b 40 10             	mov    0x10(%eax),%eax
   135d6:	83 e8 01             	sub    $0x1,%eax
   135d9:	50                   	push   %eax
   135da:	6a 00                	push   $0x0
   135dc:	ff 75 08             	pushl  0x8(%ebp)
   135df:	e8 1b f9 ff ff       	call   12eff <erase_rows>
   135e4:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   135e7:	8b 45 08             	mov    0x8(%ebp),%eax
   135ea:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   135f1:	8b 45 08             	mov    0x8(%ebp),%eax
   135f4:	8b 50 08             	mov    0x8(%eax),%edx
   135f7:	8b 45 08             	mov    0x8(%ebp),%eax
   135fa:	89 50 0c             	mov    %edx,0xc(%eax)
   135fd:	eb 01                	jmp    13600 <erase_in_display+0x4f>
        return;
   135ff:	90                   	nop
    }
}
   13600:	c9                   	leave  
   13601:	c3                   	ret    

00013602 <set_font_style>:

/**
 * 设置字符属性
 */
static void set_font_style(console_t *console)
{
   13602:	55                   	push   %ebp
   13603:	89 e5                	mov    %esp,%ebp
   13605:	83 ec 10             	sub    $0x10,%esp
    static const cclor_t color_table[] = {
        COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow,  // 0-3
        COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, // 4-7
    };

    for (int i = 0; i < console->curr_param_index; i++)
   13608:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1360f:	eb 78                	jmp    13689 <set_font_style+0x87>
    {
        int param = console->esc_param[i];
   13611:	8b 45 08             	mov    0x8(%ebp),%eax
   13614:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13617:	83 c2 08             	add    $0x8,%edx
   1361a:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   1361e:	89 45 f8             	mov    %eax,-0x8(%ebp)
        if ((param >= 30) && (param <= 37))
   13621:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13625:	7e 1b                	jle    13642 <set_font_style+0x40>
   13627:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   1362b:	7f 15                	jg     13642 <set_font_style+0x40>
        { // 前景色：30-37
            console->foreground = color_table[param - 30];
   1362d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13630:	83 e8 1e             	sub    $0x1e,%eax
   13633:	8b 14 85 80 59 01 00 	mov    0x15980(,%eax,4),%edx
   1363a:	8b 45 08             	mov    0x8(%ebp),%eax
   1363d:	89 50 20             	mov    %edx,0x20(%eax)
   13640:	eb 43                	jmp    13685 <set_font_style+0x83>
        }
        else if ((param >= 40) && (param <= 47))
   13642:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13646:	7e 1b                	jle    13663 <set_font_style+0x61>
   13648:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   1364c:	7f 15                	jg     13663 <set_font_style+0x61>
        {
            console->background = color_table[param - 40];
   1364e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13651:	83 e8 28             	sub    $0x28,%eax
   13654:	8b 14 85 80 59 01 00 	mov    0x15980(,%eax,4),%edx
   1365b:	8b 45 08             	mov    0x8(%ebp),%eax
   1365e:	89 50 24             	mov    %edx,0x24(%eax)
   13661:	eb 22                	jmp    13685 <set_font_style+0x83>
        }
        else if (param == 39)
   13663:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13667:	75 0c                	jne    13675 <set_font_style+0x73>
        { // 39=默认前景色
            console->foreground = COLOR_White;
   13669:	8b 45 08             	mov    0x8(%ebp),%eax
   1366c:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13673:	eb 10                	jmp    13685 <set_font_style+0x83>
        }
        else if (param == 49)
   13675:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13679:	75 0a                	jne    13685 <set_font_style+0x83>
        { // 49=默认背景色
            console->background = COLOR_Black;
   1367b:	8b 45 08             	mov    0x8(%ebp),%eax
   1367e:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    for (int i = 0; i < console->curr_param_index; i++)
   13685:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13689:	8b 45 08             	mov    0x8(%ebp),%eax
   1368c:	8b 40 50             	mov    0x50(%eax),%eax
   1368f:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13692:	0f 8c 79 ff ff ff    	jl     13611 <set_font_style+0xf>
        }
    }
}
   13698:	90                   	nop
   13699:	c9                   	leave  
   1369a:	c3                   	ret    

0001369b <write_esc_square>:

/**
 * @brief 处理ESC [Pn;Pn 开头的字符串
 */
static void write_esc_square(console_t *console, char c)
{
   1369b:	55                   	push   %ebp
   1369c:	89 e5                	mov    %esp,%ebp
   1369e:	83 ec 14             	sub    $0x14,%esp
   136a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   136a4:	88 45 ec             	mov    %al,-0x14(%ebp)
    // 接收参数
    if ((c >= '0') && (c <= '9'))
   136a7:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   136ab:	7e 44                	jle    136f1 <write_esc_square+0x56>
   136ad:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   136b1:	7f 3e                	jg     136f1 <write_esc_square+0x56>
    {
        // 解析当前参数
        int *param = &console->esc_param[console->curr_param_index];
   136b3:	8b 45 08             	mov    0x8(%ebp),%eax
   136b6:	8b 40 50             	mov    0x50(%eax),%eax
   136b9:	83 c0 08             	add    $0x8,%eax
   136bc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   136c3:	8b 45 08             	mov    0x8(%ebp),%eax
   136c6:	01 d0                	add    %edx,%eax
   136c8:	83 c0 08             	add    $0x8,%eax
   136cb:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   136ce:	8b 45 fc             	mov    -0x4(%ebp),%eax
   136d1:	8b 10                	mov    (%eax),%edx
   136d3:	89 d0                	mov    %edx,%eax
   136d5:	c1 e0 02             	shl    $0x2,%eax
   136d8:	01 d0                	add    %edx,%eax
   136da:	01 c0                	add    %eax,%eax
   136dc:	89 c2                	mov    %eax,%edx
   136de:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   136e2:	01 d0                	add    %edx,%eax
   136e4:	8d 50 d0             	lea    -0x30(%eax),%edx
   136e7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   136ea:	89 10                	mov    %edx,(%eax)
    {
   136ec:	e9 ae 00 00 00       	jmp    1379f <write_esc_square+0x104>
    }
    else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX)
   136f1:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   136f5:	75 1f                	jne    13716 <write_esc_square+0x7b>
   136f7:	8b 45 08             	mov    0x8(%ebp),%eax
   136fa:	8b 40 50             	mov    0x50(%eax),%eax
   136fd:	83 f8 09             	cmp    $0x9,%eax
   13700:	7f 14                	jg     13716 <write_esc_square+0x7b>
    {
        // 参数结束，继续处理下一个参数
        console->curr_param_index++;
   13702:	8b 45 08             	mov    0x8(%ebp),%eax
   13705:	8b 40 50             	mov    0x50(%eax),%eax
   13708:	8d 50 01             	lea    0x1(%eax),%edx
   1370b:	8b 45 08             	mov    0x8(%ebp),%eax
   1370e:	89 50 50             	mov    %edx,0x50(%eax)
   13711:	e9 89 00 00 00       	jmp    1379f <write_esc_square+0x104>
    }
    else
    {
        // 结束上一字符的处理
        console->curr_param_index++;
   13716:	8b 45 08             	mov    0x8(%ebp),%eax
   13719:	8b 40 50             	mov    0x50(%eax),%eax
   1371c:	8d 50 01             	lea    0x1(%eax),%edx
   1371f:	8b 45 08             	mov    0x8(%ebp),%eax
   13722:	89 50 50             	mov    %edx,0x50(%eax)

        // 已经接收到所有的字符，继续处理
        switch (c)
   13725:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13729:	83 e8 43             	sub    $0x43,%eax
   1372c:	83 f8 2a             	cmp    $0x2a,%eax
   1372f:	77 64                	ja     13795 <write_esc_square+0xfa>
   13731:	8b 04 85 c0 58 01 00 	mov    0x158c0(,%eax,4),%eax
   13738:	ff e0                	jmp    *%eax
        {
        case 'm': // 设置字符属性
            set_font_style(console);
   1373a:	ff 75 08             	pushl  0x8(%ebp)
   1373d:	e8 c0 fe ff ff       	call   13602 <set_font_style>
   13742:	83 c4 04             	add    $0x4,%esp
            break;
   13745:	eb 4e                	jmp    13795 <write_esc_square+0xfa>
        case 'D': // 光标左移n个位置 ESC [Pn D
            move_left(console, console->esc_param[0]);
   13747:	8b 45 08             	mov    0x8(%ebp),%eax
   1374a:	8b 40 28             	mov    0x28(%eax),%eax
   1374d:	50                   	push   %eax
   1374e:	ff 75 08             	pushl  0x8(%ebp)
   13751:	e8 0a fd ff ff       	call   13460 <move_left>
   13756:	83 c4 08             	add    $0x8,%esp
            break;
   13759:	eb 3a                	jmp    13795 <write_esc_square+0xfa>
        case 'C':
            move_right(console, console->esc_param[0]);
   1375b:	8b 45 08             	mov    0x8(%ebp),%eax
   1375e:	8b 40 28             	mov    0x28(%eax),%eax
   13761:	50                   	push   %eax
   13762:	ff 75 08             	pushl  0x8(%ebp)
   13765:	e8 2d fd ff ff       	call   13497 <move_right>
   1376a:	83 c4 08             	add    $0x8,%esp
            break;
   1376d:	eb 26                	jmp    13795 <write_esc_square+0xfa>
        case 'H':
            move_cursor(console);
   1376f:	ff 75 08             	pushl  0x8(%ebp)
   13772:	e8 69 fd ff ff       	call   134e0 <move_cursor>
   13777:	83 c4 04             	add    $0x4,%esp
            break;
   1377a:	eb 19                	jmp    13795 <write_esc_square+0xfa>
        case 'f':
            move_cursor(console);
   1377c:	ff 75 08             	pushl  0x8(%ebp)
   1377f:	e8 5c fd ff ff       	call   134e0 <move_cursor>
   13784:	83 c4 04             	add    $0x4,%esp
            break;
   13787:	eb 0c                	jmp    13795 <write_esc_square+0xfa>
        case 'J':
            erase_in_display(console);
   13789:	ff 75 08             	pushl  0x8(%ebp)
   1378c:	e8 20 fe ff ff       	call   135b1 <erase_in_display>
   13791:	83 c4 04             	add    $0x4,%esp
            break;
   13794:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13795:	8b 45 08             	mov    0x8(%ebp),%eax
   13798:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   1379f:	90                   	nop
   137a0:	c9                   	leave  
   137a1:	c3                   	ret    

000137a2 <console_write>:
/**
 * 实现pwdget作为tty的输出
 * 可能有多个进程在写，注意保护
 */
int console_write(int console, char *data, int size)
{
   137a2:	55                   	push   %ebp
   137a3:	89 e5                	mov    %esp,%ebp
   137a5:	83 ec 18             	sub    $0x18,%esp
    console_t *c = console_buf + console;
   137a8:	8b 45 08             	mov    0x8(%ebp),%eax
   137ab:	6b c0 68             	imul   $0x68,%eax,%eax
   137ae:	05 00 30 02 00       	add    $0x23000,%eax
   137b3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int len;

    for (len = 0; len < size; len++)
   137b6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   137bd:	eb 68                	jmp    13827 <console_write+0x85>
    {
        char ch = *data++;
   137bf:	8b 45 0c             	mov    0xc(%ebp),%eax
   137c2:	8d 50 01             	lea    0x1(%eax),%edx
   137c5:	89 55 0c             	mov    %edx,0xc(%ebp)
   137c8:	0f b6 00             	movzbl (%eax),%eax
   137cb:	88 45 ef             	mov    %al,-0x11(%ebp)
        // 特殊模式处理ESC
        switch (c->write_state)
   137ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   137d1:	8b 40 04             	mov    0x4(%eax),%eax
   137d4:	83 f8 01             	cmp    $0x1,%eax
   137d7:	74 21                	je     137fa <console_write+0x58>
   137d9:	83 f8 01             	cmp    $0x1,%eax
   137dc:	72 07                	jb     137e5 <console_write+0x43>
   137de:	83 f8 02             	cmp    $0x2,%eax
   137e1:	74 2c                	je     1380f <console_write+0x6d>
            break;
        case CONSOLE_WRITE_SQUARE:
            write_esc_square(c, ch);
            break;
        default:
            break;
   137e3:	eb 3e                	jmp    13823 <console_write+0x81>
            write_normal(c, ch);
   137e5:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   137e9:	83 ec 08             	sub    $0x8,%esp
   137ec:	50                   	push   %eax
   137ed:	ff 75 f0             	pushl  -0x10(%ebp)
   137f0:	e8 b3 fb ff ff       	call   133a8 <write_normal>
   137f5:	83 c4 10             	add    $0x10,%esp
            break;
   137f8:	eb 29                	jmp    13823 <console_write+0x81>
            write_esc(c, ch);
   137fa:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   137fe:	83 ec 08             	sub    $0x8,%esp
   13801:	50                   	push   %eax
   13802:	ff 75 f0             	pushl  -0x10(%ebp)
   13805:	e8 32 fd ff ff       	call   1353c <write_esc>
   1380a:	83 c4 10             	add    $0x10,%esp
            break;
   1380d:	eb 14                	jmp    13823 <console_write+0x81>
            write_esc_square(c, ch);
   1380f:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   13813:	83 ec 08             	sub    $0x8,%esp
   13816:	50                   	push   %eax
   13817:	ff 75 f0             	pushl  -0x10(%ebp)
   1381a:	e8 7c fe ff ff       	call   1369b <write_esc_square>
   1381f:	83 c4 10             	add    $0x10,%esp
            break;
   13822:	90                   	nop
    for (len = 0; len < size; len++)
   13823:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13827:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1382a:	3b 45 10             	cmp    0x10(%ebp),%eax
   1382d:	7c 90                	jl     137bf <console_write+0x1d>
        }
    }
    update_cursor_pos(console);
   1382f:	8b 45 08             	mov    0x8(%ebp),%eax
   13832:	83 ec 0c             	sub    $0xc,%esp
   13835:	50                   	push   %eax
   13836:	e8 7e f5 ff ff       	call   12db9 <update_cursor_pos>
   1383b:	83 c4 10             	add    $0x10,%esp
    return len;
   1383e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   13841:	c9                   	leave  
   13842:	c3                   	ret    

00013843 <inb>:
{
   13843:	55                   	push   %ebp
   13844:	89 e5                	mov    %esp,%ebp
   13846:	83 ec 14             	sub    $0x14,%esp
   13849:	8b 45 08             	mov    0x8(%ebp),%eax
   1384c:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   13850:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13854:	89 c2                	mov    %eax,%edx
   13856:	ec                   	in     (%dx),%al
   13857:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   1385a:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1385e:	c9                   	leave  
   1385f:	c3                   	ret    

00013860 <outb>:
{
   13860:	55                   	push   %ebp
   13861:	89 e5                	mov    %esp,%ebp
   13863:	83 ec 08             	sub    $0x8,%esp
   13866:	8b 55 08             	mov    0x8(%ebp),%edx
   13869:	8b 45 0c             	mov    0xc(%ebp),%eax
   1386c:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13870:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   13873:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13877:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1387b:	ee                   	out    %al,(%dx)
}
   1387c:	90                   	nop
   1387d:	c9                   	leave  
   1387e:	c3                   	ret    

0001387f <get_key>:
    [0x35] = {'/', '?'},
    [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code)
{
   1387f:	55                   	push   %ebp
   13880:	89 e5                	mov    %esp,%ebp
   13882:	83 ec 04             	sub    $0x4,%esp
   13885:	8b 45 08             	mov    0x8(%ebp),%eax
   13888:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   1388b:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   1388f:	83 e0 7f             	and    $0x7f,%eax
}
   13892:	c9                   	leave  
   13893:	c3                   	ret    

00013894 <is_make_code>:

static inline int is_make_code(uint8_t key_code)
{
   13894:	55                   	push   %ebp
   13895:	89 e5                	mov    %esp,%ebp
   13897:	83 ec 04             	sub    $0x4,%esp
   1389a:	8b 45 08             	mov    0x8(%ebp),%eax
   1389d:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   138a0:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   138a4:	f7 d0                	not    %eax
   138a6:	c0 e8 07             	shr    $0x7,%al
   138a9:	0f b6 c0             	movzbl %al,%eax
}
   138ac:	c9                   	leave  
   138ad:	c3                   	ret    

000138ae <kbd_wait_send_ready>:

/**
 * 等待可写数据
 */
void kbd_wait_send_ready(void)
{
   138ae:	55                   	push   %ebp
   138af:	89 e5                	mov    %esp,%ebp
   138b1:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   138b4:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   138bb:	eb 14                	jmp    138d1 <kbd_wait_send_ready+0x23>
    {
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0)
   138bd:	6a 64                	push   $0x64
   138bf:	e8 7f ff ff ff       	call   13843 <inb>
   138c4:	83 c4 04             	add    $0x4,%esp
   138c7:	0f b6 c0             	movzbl %al,%eax
   138ca:	83 e0 02             	and    $0x2,%eax
   138cd:	85 c0                	test   %eax,%eax
   138cf:	74 0f                	je     138e0 <kbd_wait_send_ready+0x32>
    while (time_out--)
   138d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   138d4:	8d 50 ff             	lea    -0x1(%eax),%edx
   138d7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   138da:	85 c0                	test   %eax,%eax
   138dc:	75 df                	jne    138bd <kbd_wait_send_ready+0xf>
   138de:	eb 01                	jmp    138e1 <kbd_wait_send_ready+0x33>
        {
            return;
   138e0:	90                   	nop
        }
    }
}
   138e1:	c9                   	leave  
   138e2:	c3                   	ret    

000138e3 <kbd_write>:

/**
 * 向键盘端口写数据
 */
void kbd_write(uint8_t port, uint8_t data)
{
   138e3:	55                   	push   %ebp
   138e4:	89 e5                	mov    %esp,%ebp
   138e6:	83 ec 08             	sub    $0x8,%esp
   138e9:	8b 55 08             	mov    0x8(%ebp),%edx
   138ec:	8b 45 0c             	mov    0xc(%ebp),%eax
   138ef:	88 55 fc             	mov    %dl,-0x4(%ebp)
   138f2:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   138f5:	e8 b4 ff ff ff       	call   138ae <kbd_wait_send_ready>
    outb(port, data);
   138fa:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   138fe:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   13902:	52                   	push   %edx
   13903:	50                   	push   %eax
   13904:	e8 57 ff ff ff       	call   13860 <outb>
   13909:	83 c4 08             	add    $0x8,%esp
}
   1390c:	90                   	nop
   1390d:	c9                   	leave  
   1390e:	c3                   	ret    

0001390f <kbd_wait_recv_ready>:

/**
 * 等待可用的键盘数据
 */
void kbd_wait_recv_ready(void)
{
   1390f:	55                   	push   %ebp
   13910:	89 e5                	mov    %esp,%ebp
   13912:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   13915:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--)
   1391c:	eb 14                	jmp    13932 <kbd_wait_recv_ready+0x23>
    {
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY)
   1391e:	6a 64                	push   $0x64
   13920:	e8 1e ff ff ff       	call   13843 <inb>
   13925:	83 c4 04             	add    $0x4,%esp
   13928:	0f b6 c0             	movzbl %al,%eax
   1392b:	83 e0 01             	and    $0x1,%eax
   1392e:	85 c0                	test   %eax,%eax
   13930:	75 0f                	jne    13941 <kbd_wait_recv_ready+0x32>
    while (time_out--)
   13932:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13935:	8d 50 ff             	lea    -0x1(%eax),%edx
   13938:	89 55 fc             	mov    %edx,-0x4(%ebp)
   1393b:	85 c0                	test   %eax,%eax
   1393d:	75 df                	jne    1391e <kbd_wait_recv_ready+0xf>
   1393f:	eb 01                	jmp    13942 <kbd_wait_recv_ready+0x33>
        {
            return;
   13941:	90                   	nop
        }
    }
}
   13942:	c9                   	leave  
   13943:	c3                   	ret    

00013944 <kbd_read>:

/**
 * 读键盘数据
 */
uint8_t kbd_read(void)
{
   13944:	55                   	push   %ebp
   13945:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   13947:	e8 c3 ff ff ff       	call   1390f <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   1394c:	6a 60                	push   $0x60
   1394e:	e8 f0 fe ff ff       	call   13843 <inb>
   13953:	83 c4 04             	add    $0x4,%esp
}
   13956:	c9                   	leave  
   13957:	c3                   	ret    

00013958 <update_led_status>:

/**
 * 更新键盘上状态指示灯
 */
static void update_led_status(void)
{
   13958:	55                   	push   %ebp
   13959:	89 e5                	mov    %esp,%ebp
   1395b:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   1395e:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   13965:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   1396c:	0f b6 c0             	movzbl %al,%eax
   1396f:	83 e0 01             	and    $0x1,%eax
   13972:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   13975:	68 ed 00 00 00       	push   $0xed
   1397a:	6a 60                	push   $0x60
   1397c:	e8 62 ff ff ff       	call   138e3 <kbd_write>
   13981:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   13984:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13987:	0f b6 c0             	movzbl %al,%eax
   1398a:	50                   	push   %eax
   1398b:	6a 60                	push   $0x60
   1398d:	e8 51 ff ff ff       	call   138e3 <kbd_write>
   13992:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   13995:	e8 aa ff ff ff       	call   13944 <kbd_read>
}
   1399a:	90                   	nop
   1399b:	c9                   	leave  
   1399c:	c3                   	ret    

0001399d <do_fx_key>:

static void do_fx_key(int key)
{
   1399d:	55                   	push   %ebp
   1399e:	89 e5                	mov    %esp,%ebp
   139a0:	83 ec 10             	sub    $0x10,%esp
    int index = key - KEY_F1;
   139a3:	8b 45 08             	mov    0x8(%ebp),%eax
   139a6:	83 e8 3b             	sub    $0x3b,%eax
   139a9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press)
   139ac:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   139b3:	83 e0 20             	and    $0x20,%eax
   139b6:	84 c0                	test   %al,%al
    {
        // tty_select(index);
    }
}
   139b8:	90                   	nop
   139b9:	c9                   	leave  
   139ba:	c3                   	ret    

000139bb <do_normal_key>:

/**
 * 处理单字符的标准键
 */
static void do_normal_key(uint8_t raw_code)
{
   139bb:	55                   	push   %ebp
   139bc:	89 e5                	mov    %esp,%ebp
   139be:	83 ec 28             	sub    $0x28,%esp
   139c1:	8b 45 08             	mov    0x8(%ebp),%eax
   139c4:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);         // 去掉最高位
   139c7:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   139cb:	50                   	push   %eax
   139cc:	e8 ae fe ff ff       	call   1387f <get_key>
   139d1:	83 c4 04             	add    $0x4,%esp
   139d4:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code); // 是否是按键按下的键值
   139d7:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   139db:	50                   	push   %eax
   139dc:	e8 b3 fe ff ff       	call   13894 <is_make_code>
   139e1:	83 c4 04             	add    $0x4,%esp
   139e4:	89 45 f0             	mov    %eax,-0x10(%ebp)

    // 暂时只处理按键按下
    switch (key)
   139e7:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   139eb:	83 e8 1d             	sub    $0x1d,%eax
   139ee:	83 f8 25             	cmp    $0x25,%eax
   139f1:	0f 87 f6 00 00 00    	ja     13aed <do_normal_key+0x132>
   139f7:	8b 04 85 a8 5b 01 00 	mov    0x15ba8(,%eax,4),%eax
   139fe:	ff e0                	jmp    *%eax
    {
        // shift, alt, ctrl键，记录标志位
    case KEY_RSHIFT:
        kbd_state.rshift_press = is_make; // 仅设置标志位
   13a00:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a03:	c1 e0 07             	shl    $0x7,%eax
   13a06:	c0 f8 07             	sar    $0x7,%al
   13a09:	83 e0 01             	and    $0x1,%eax
   13a0c:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13a13:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13a1a:	83 e0 fb             	and    $0xfffffffb,%eax
   13a1d:	09 d0                	or     %edx,%eax
   13a1f:	a2 68 30 02 00       	mov    %al,0x23068
        break;
   13a24:	e9 61 01 00 00       	jmp    13b8a <do_normal_key+0x1cf>
    case KEY_LSHIFT:
        kbd_state.lshift_press = is_make; // 仅设置标志位
   13a29:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a2c:	c1 e0 07             	shl    $0x7,%eax
   13a2f:	c0 f8 07             	sar    $0x7,%al
   13a32:	83 e0 01             	and    $0x1,%eax
   13a35:	8d 14 00             	lea    (%eax,%eax,1),%edx
   13a38:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13a3f:	83 e0 fd             	and    $0xfffffffd,%eax
   13a42:	09 d0                	or     %edx,%eax
   13a44:	a2 68 30 02 00       	mov    %al,0x23068
        break;
   13a49:	e9 3c 01 00 00       	jmp    13b8a <do_normal_key+0x1cf>
    case KEY_CAPS: // 大小写键，设置大小写状态
        if (is_make)
   13a4e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13a52:	0f 84 2e 01 00 00    	je     13b86 <do_normal_key+0x1cb>
        {
            kbd_state.caps_lock = ~kbd_state.caps_lock;
   13a58:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13a5f:	c1 e0 07             	shl    $0x7,%eax
   13a62:	c0 f8 07             	sar    $0x7,%al
   13a65:	f7 d0                	not    %eax
   13a67:	c1 e0 07             	shl    $0x7,%eax
   13a6a:	c0 f8 07             	sar    $0x7,%al
   13a6d:	83 e0 01             	and    $0x1,%eax
   13a70:	89 c2                	mov    %eax,%edx
   13a72:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13a79:	83 e0 fe             	and    $0xfffffffe,%eax
   13a7c:	09 d0                	or     %edx,%eax
   13a7e:	a2 68 30 02 00       	mov    %al,0x23068
            update_led_status();
   13a83:	e8 d0 fe ff ff       	call   13958 <update_led_status>
        }
        break;
   13a88:	e9 f9 00 00 00       	jmp    13b86 <do_normal_key+0x1cb>
    case KEY_ALT:
        kbd_state.lalt_press = is_make; // 仅设置标志位
   13a8d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13a90:	c1 e0 07             	shl    $0x7,%eax
   13a93:	c0 f8 07             	sar    $0x7,%al
   13a96:	83 e0 01             	and    $0x1,%eax
   13a99:	c1 e0 04             	shl    $0x4,%eax
   13a9c:	89 c2                	mov    %eax,%edx
   13a9e:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13aa5:	83 e0 ef             	and    $0xffffffef,%eax
   13aa8:	09 d0                	or     %edx,%eax
   13aaa:	a2 68 30 02 00       	mov    %al,0x23068
        break;
   13aaf:	e9 d6 00 00 00       	jmp    13b8a <do_normal_key+0x1cf>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make; // 仅设置标志位
   13ab4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13ab7:	c1 e0 07             	shl    $0x7,%eax
   13aba:	c0 f8 07             	sar    $0x7,%al
   13abd:	83 e0 01             	and    $0x1,%eax
   13ac0:	c1 e0 05             	shl    $0x5,%eax
   13ac3:	89 c2                	mov    %eax,%edx
   13ac5:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13acc:	83 e0 df             	and    $0xffffffdf,%eax
   13acf:	09 d0                	or     %edx,%eax
   13ad1:	a2 68 30 02 00       	mov    %al,0x23068
        break;
   13ad6:	e9 af 00 00 00       	jmp    13b8a <do_normal_key+0x1cf>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
        do_fx_key(key);
   13adb:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13adf:	50                   	push   %eax
   13ae0:	e8 b8 fe ff ff       	call   1399d <do_fx_key>
   13ae5:	83 c4 04             	add    $0x4,%esp
        break;
   13ae8:	e9 9d 00 00 00       	jmp    13b8a <do_normal_key+0x1cf>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make)
   13aed:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   13af1:	0f 84 92 00 00 00    	je     13b89 <do_normal_key+0x1ce>
        {
            // 根据shift控制取相应的字符，这里有进行大小写转换或者shif转换
            if (kbd_state.rshift_press || kbd_state.lshift_press)
   13af7:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13afe:	83 e0 04             	and    $0x4,%eax
   13b01:	84 c0                	test   %al,%al
   13b03:	75 0e                	jne    13b13 <do_normal_key+0x158>
   13b05:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13b0c:	83 e0 02             	and    $0x2,%eax
   13b0f:	84 c0                	test   %al,%al
   13b11:	74 11                	je     13b24 <do_normal_key+0x169>
            {
                key = map_table[key].func; // 第2功能
   13b13:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13b17:	0f b6 84 00 a1 59 01 	movzbl 0x159a1(%eax,%eax,1),%eax
   13b1e:	00 
   13b1f:	88 45 f7             	mov    %al,-0x9(%ebp)
   13b22:	eb 0f                	jmp    13b33 <do_normal_key+0x178>
            }
            else
            {
                key = map_table[key].normal; // 第1功能
   13b24:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13b28:	0f b6 84 00 a0 59 01 	movzbl 0x159a0(%eax,%eax,1),%eax
   13b2f:	00 
   13b30:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            // 根据caps再进行一次字母的大小写转换
            if (kbd_state.caps_lock)
   13b33:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13b3a:	83 e0 01             	and    $0x1,%eax
   13b3d:	84 c0                	test   %al,%al
   13b3f:	74 2e                	je     13b6f <do_normal_key+0x1b4>
            {
                if ((key >= 'A') && (key <= 'Z'))
   13b41:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   13b45:	7e 12                	jle    13b59 <do_normal_key+0x19e>
   13b47:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   13b4b:	7f 0c                	jg     13b59 <do_normal_key+0x19e>
                {
                    // 大写转小写
                    key = key - 'A' + 'a';
   13b4d:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   13b51:	83 c0 20             	add    $0x20,%eax
   13b54:	88 45 f7             	mov    %al,-0x9(%ebp)
   13b57:	eb 16                	jmp    13b6f <do_normal_key+0x1b4>
                }
                else if ((key >= 'a') && (key <= 'z'))
   13b59:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   13b5d:	7e 10                	jle    13b6f <do_normal_key+0x1b4>
   13b5f:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   13b63:	7f 0a                	jg     13b6f <do_normal_key+0x1b4>
                {
                    // 小写转大小
                    key = key - 'a' + 'A';
   13b65:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   13b69:	83 e8 20             	sub    $0x20,%eax
   13b6c:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            // 最后，不管是否是控制字符，都会被写入
            log_printf("key=%c", key);
   13b6f:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   13b73:	83 ec 08             	sub    $0x8,%esp
   13b76:	50                   	push   %eax
   13b77:	68 a0 5b 01 00       	push   $0x15ba0
   13b7c:	e8 5e 12 00 00       	call   14ddf <log_printf>
   13b81:	83 c4 10             	add    $0x10,%esp
            // tty_in(key);
        }
        break;
   13b84:	eb 03                	jmp    13b89 <do_normal_key+0x1ce>
        break;
   13b86:	90                   	nop
   13b87:	eb 01                	jmp    13b8a <do_normal_key+0x1cf>
        break;
   13b89:	90                   	nop
    }
}
   13b8a:	90                   	nop
   13b8b:	c9                   	leave  
   13b8c:	c3                   	ret    

00013b8d <do_e0_key>:

/**
 * E0开始的键处理，只处理功能键，其它更长的序列不处理
 */
static void do_e0_key(uint8_t raw_code)
{
   13b8d:	55                   	push   %ebp
   13b8e:	89 e5                	mov    %esp,%ebp
   13b90:	83 ec 14             	sub    $0x14,%esp
   13b93:	8b 45 08             	mov    0x8(%ebp),%eax
   13b96:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);          // 去掉最高位
   13b99:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   13b9d:	50                   	push   %eax
   13b9e:	e8 dc fc ff ff       	call   1387f <get_key>
   13ba3:	83 c4 04             	add    $0x4,%esp
   13ba6:	0f be c0             	movsbl %al,%eax
   13ba9:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code); // 按下或释放
   13bac:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   13bb0:	50                   	push   %eax
   13bb1:	e8 de fc ff ff       	call   13894 <is_make_code>
   13bb6:	83 c4 04             	add    $0x4,%esp
   13bb9:	89 45 f8             	mov    %eax,-0x8(%ebp)

    // E0开头，主要是HOME、END、光标移动等功能键
    // 设置一下光标位置，然后直接写入
    switch (key)
   13bbc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13bbf:	83 f8 1d             	cmp    $0x1d,%eax
   13bc2:	74 07                	je     13bcb <do_e0_key+0x3e>
   13bc4:	83 f8 38             	cmp    $0x38,%eax
   13bc7:	74 26                	je     13bef <do_e0_key+0x62>
        break;
    case KEY_ALT:
        kbd_state.ralt_press = is_make; // 仅设置标志位
        break;
    }
}
   13bc9:	eb 49                	jmp    13c14 <do_e0_key+0x87>
        kbd_state.rctrl_press = is_make; // 仅设置标志位
   13bcb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bce:	c1 e0 07             	shl    $0x7,%eax
   13bd1:	c0 f8 07             	sar    $0x7,%al
   13bd4:	83 e0 01             	and    $0x1,%eax
   13bd7:	c1 e0 06             	shl    $0x6,%eax
   13bda:	89 c2                	mov    %eax,%edx
   13bdc:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13be3:	83 e0 bf             	and    $0xffffffbf,%eax
   13be6:	09 d0                	or     %edx,%eax
   13be8:	a2 68 30 02 00       	mov    %al,0x23068
        break;
   13bed:	eb 25                	jmp    13c14 <do_e0_key+0x87>
        kbd_state.ralt_press = is_make; // 仅设置标志位
   13bef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13bf2:	c1 e0 07             	shl    $0x7,%eax
   13bf5:	c0 f8 07             	sar    $0x7,%al
   13bf8:	83 e0 01             	and    $0x1,%eax
   13bfb:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   13c02:	0f b6 05 68 30 02 00 	movzbl 0x23068,%eax
   13c09:	83 e0 f7             	and    $0xfffffff7,%eax
   13c0c:	09 d0                	or     %edx,%eax
   13c0e:	a2 68 30 02 00       	mov    %al,0x23068
        break;
   13c13:	90                   	nop
}
   13c14:	90                   	nop
   13c15:	c9                   	leave  
   13c16:	c3                   	ret    

00013c17 <do_handler_kbd>:

/**
 * @brief 按键中断处理程序
 */
void do_handler_kbd(exception_frame_t *frame)
{
   13c17:	55                   	push   %ebp
   13c18:	89 e5                	mov    %esp,%ebp
   13c1a:	83 ec 18             	sub    $0x18,%esp
        BEGIN_E0, // 收到e0字符
        BEGIN_E1, // 收到e1字符
    } recv_state = NORMAL;

    // 检查是否有数据，无数据则退出
    uint8_t status = inb(KBD_PORT_STAT);
   13c1d:	6a 64                	push   $0x64
   13c1f:	e8 1f fc ff ff       	call   13843 <inb>
   13c24:	83 c4 04             	add    $0x4,%esp
   13c27:	88 45 f7             	mov    %al,-0x9(%ebp)
    if (!(status & KBD_STAT_RECV_READY))
   13c2a:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   13c2e:	83 e0 01             	and    $0x1,%eax
   13c31:	85 c0                	test   %eax,%eax
   13c33:	75 12                	jne    13c47 <do_handler_kbd+0x30>
    {
        pic_send_eoi(IRQ1_KEYBOARD);
   13c35:	83 ec 0c             	sub    $0xc,%esp
   13c38:	6a 21                	push   $0x21
   13c3a:	e8 76 f0 ff ff       	call   12cb5 <pic_send_eoi>
   13c3f:	83 c4 10             	add    $0x10,%esp
        return;
   13c42:	e9 90 00 00 00       	jmp    13cd7 <do_handler_kbd+0xc0>
    }

    // 读取键值
    uint8_t raw_code = inb(KBD_PORT_DATA);
   13c47:	83 ec 0c             	sub    $0xc,%esp
   13c4a:	6a 60                	push   $0x60
   13c4c:	e8 f2 fb ff ff       	call   13843 <inb>
   13c51:	83 c4 10             	add    $0x10,%esp
   13c54:	88 45 f6             	mov    %al,-0xa(%ebp)

    // 读取完成之后，就可以发EOI，方便后续继续响应键盘中断
    // 否则,键值的处理过程可能略长，将导致中断响应延迟
    pic_send_eoi(IRQ1_KEYBOARD);
   13c57:	83 ec 0c             	sub    $0xc,%esp
   13c5a:	6a 21                	push   $0x21
   13c5c:	e8 54 f0 ff ff       	call   12cb5 <pic_send_eoi>
   13c61:	83 c4 10             	add    $0x10,%esp

    // 实测qemu下收不到E0和E1，估计是没有发出去
    // 方向键、HOME/END等键码和小键盘上发出来的完全一样。不清楚原因
    // 也许是键盘布局的问题？所以，这里就忽略小键盘？
    if (raw_code == KEY_E0)
   13c64:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   13c68:	75 0c                	jne    13c76 <do_handler_kbd+0x5f>
    {
        // E0字符
        recv_state = BEGIN_E0;
   13c6a:	c7 05 6c 30 02 00 01 	movl   $0x1,0x2306c
   13c71:	00 00 00 
   13c74:	eb 61                	jmp    13cd7 <do_handler_kbd+0xc0>
    }
    else if (raw_code == KEY_E1)
   13c76:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   13c7a:	75 0c                	jne    13c88 <do_handler_kbd+0x71>
    {
        // E1字符，不处理
        recv_state = BEGIN_E1;
   13c7c:	c7 05 6c 30 02 00 02 	movl   $0x2,0x2306c
   13c83:	00 00 00 
   13c86:	eb 4f                	jmp    13cd7 <do_handler_kbd+0xc0>
    }
    else
    {
        switch (recv_state)
   13c88:	a1 6c 30 02 00       	mov    0x2306c,%eax
   13c8d:	83 f8 01             	cmp    $0x1,%eax
   13c90:	74 1e                	je     13cb0 <do_handler_kbd+0x99>
   13c92:	83 f8 01             	cmp    $0x1,%eax
   13c95:	72 07                	jb     13c9e <do_handler_kbd+0x87>
   13c97:	83 f8 02             	cmp    $0x2,%eax
   13c9a:	74 30                	je     13ccc <do_handler_kbd+0xb5>
   13c9c:	eb 39                	jmp    13cd7 <do_handler_kbd+0xc0>
        {
        case NORMAL:
            do_normal_key(raw_code);
   13c9e:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   13ca2:	83 ec 0c             	sub    $0xc,%esp
   13ca5:	50                   	push   %eax
   13ca6:	e8 10 fd ff ff       	call   139bb <do_normal_key>
   13cab:	83 c4 10             	add    $0x10,%esp
            break;
   13cae:	eb 27                	jmp    13cd7 <do_handler_kbd+0xc0>
        case BEGIN_E0: // 不处理print scr
            do_e0_key(raw_code);
   13cb0:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   13cb4:	83 ec 0c             	sub    $0xc,%esp
   13cb7:	50                   	push   %eax
   13cb8:	e8 d0 fe ff ff       	call   13b8d <do_e0_key>
   13cbd:	83 c4 10             	add    $0x10,%esp
            recv_state = NORMAL;
   13cc0:	c7 05 6c 30 02 00 00 	movl   $0x0,0x2306c
   13cc7:	00 00 00 
            break;
   13cca:	eb 0b                	jmp    13cd7 <do_handler_kbd+0xc0>
        case BEGIN_E1: // 不处理pause
            recv_state = NORMAL;
   13ccc:	c7 05 6c 30 02 00 00 	movl   $0x0,0x2306c
   13cd3:	00 00 00 
            break;
   13cd6:	90                   	nop
        }
    }
}
   13cd7:	c9                   	leave  
   13cd8:	c3                   	ret    

00013cd9 <kbd_init>:

/**
 * 键盘硬件初始化
 */
void kbd_init(void)
{
   13cd9:	55                   	push   %ebp
   13cda:	89 e5                	mov    %esp,%ebp
   13cdc:	83 ec 08             	sub    $0x8,%esp
    static int inited = 0;

    if (!inited)
   13cdf:	a1 70 30 02 00       	mov    0x23070,%eax
   13ce4:	85 c0                	test   %eax,%eax
   13ce6:	75 2e                	jne    13d16 <kbd_init+0x3d>
    {
        update_led_status();
   13ce8:	e8 6b fc ff ff       	call   13958 <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   13ced:	83 ec 08             	sub    $0x8,%esp
   13cf0:	68 b2 02 01 00       	push   $0x102b2
   13cf5:	6a 21                	push   $0x21
   13cf7:	e8 57 ee ff ff       	call   12b53 <irq_install>
   13cfc:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   13cff:	83 ec 0c             	sub    $0xc,%esp
   13d02:	6a 21                	push   $0x21
   13d04:	e8 84 ee ff ff       	call   12b8d <irq_enable>
   13d09:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   13d0c:	c7 05 70 30 02 00 01 	movl   $0x1,0x23070
   13d13:	00 00 00 
    }
   13d16:	90                   	nop
   13d17:	c9                   	leave  
   13d18:	c3                   	ret    

00013d19 <outb>:
{
   13d19:	55                   	push   %ebp
   13d1a:	89 e5                	mov    %esp,%ebp
   13d1c:	83 ec 08             	sub    $0x8,%esp
   13d1f:	8b 55 08             	mov    0x8(%ebp),%edx
   13d22:	8b 45 0c             	mov    0xc(%ebp),%eax
   13d25:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13d29:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   13d2c:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13d30:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13d34:	ee                   	out    %al,(%dx)
}
   13d35:	90                   	nop
   13d36:	c9                   	leave  
   13d37:	c3                   	ret    

00013d38 <init_pic>:
#include "cpu/irq.h"
#include "os_cfg.h"
#include "comm/cpu_instr.h"
static uint32_t sys_tick;
static void init_pic(void)
{
   13d38:	55                   	push   %ebp
   13d39:	89 e5                	mov    %esp,%ebp
   13d3b:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS); // 每隔10ms+1
   13d3e:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   13d45:	6a 36                	push   $0x36
   13d47:	6a 43                	push   $0x43
   13d49:	e8 cb ff ff ff       	call   13d19 <outb>
   13d4e:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);        // 加载低8位
   13d51:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d54:	0f b6 c0             	movzbl %al,%eax
   13d57:	50                   	push   %eax
   13d58:	6a 40                	push   $0x40
   13d5a:	e8 ba ff ff ff       	call   13d19 <outb>
   13d5f:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); // 再加载高8位
   13d62:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13d65:	c1 e8 08             	shr    $0x8,%eax
   13d68:	0f b6 c0             	movzbl %al,%eax
   13d6b:	50                   	push   %eax
   13d6c:	6a 40                	push   $0x40
   13d6e:	e8 a6 ff ff ff       	call   13d19 <outb>
   13d73:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   13d76:	83 ec 08             	sub    $0x8,%esp
   13d79:	68 93 02 01 00       	push   $0x10293
   13d7e:	6a 20                	push   $0x20
   13d80:	e8 ce ed ff ff       	call   12b53 <irq_install>
   13d85:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   13d88:	83 ec 0c             	sub    $0xc,%esp
   13d8b:	6a 20                	push   $0x20
   13d8d:	e8 fb ed ff ff       	call   12b8d <irq_enable>
   13d92:	83 c4 10             	add    $0x10,%esp
}
   13d95:	90                   	nop
   13d96:	c9                   	leave  
   13d97:	c3                   	ret    

00013d98 <do_handler_timer>:
void do_handler_timer(exception_frame_t *frame)
{
   13d98:	55                   	push   %ebp
   13d99:	89 e5                	mov    %esp,%ebp
   13d9b:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   13d9e:	a1 74 30 02 00       	mov    0x23074,%eax
   13da3:	83 c0 01             	add    $0x1,%eax
   13da6:	a3 74 30 02 00       	mov    %eax,0x23074
    // 先发EOI，而不是放在最后
    // 放最后将从任务中切换出去之后，除非任务再切换回来才能继续响应
    pic_send_eoi(IRQ0_TIMER);
   13dab:	83 ec 0c             	sub    $0xc,%esp
   13dae:	6a 20                	push   $0x20
   13db0:	e8 00 ef ff ff       	call   12cb5 <pic_send_eoi>
   13db5:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   13db8:	e8 9b d8 ff ff       	call   11658 <task_time_tick>
}
   13dbd:	90                   	nop
   13dbe:	c9                   	leave  
   13dbf:	c3                   	ret    

00013dc0 <time_init>:
void time_init(void)
{
   13dc0:	55                   	push   %ebp
   13dc1:	89 e5                	mov    %esp,%ebp
   13dc3:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   13dc6:	c7 05 74 30 02 00 00 	movl   $0x0,0x23074
   13dcd:	00 00 00 
    init_pic();
   13dd0:	e8 63 ff ff ff       	call   13d38 <init_pic>
   13dd5:	90                   	nop
   13dd6:	c9                   	leave  
   13dd7:	c3                   	ret    

00013dd8 <inb>:
{
   13dd8:	55                   	push   %ebp
   13dd9:	89 e5                	mov    %esp,%ebp
   13ddb:	83 ec 14             	sub    $0x14,%esp
   13dde:	8b 45 08             	mov    0x8(%ebp),%eax
   13de1:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   13de5:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13de9:	89 c2                	mov    %eax,%edx
   13deb:	ec                   	in     (%dx),%al
   13dec:	88 45 ff             	mov    %al,-0x1(%ebp)
    return rv;
   13def:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13df3:	c9                   	leave  
   13df4:	c3                   	ret    

00013df5 <inw>:
{
   13df5:	55                   	push   %ebp
   13df6:	89 e5                	mov    %esp,%ebp
   13df8:	83 ec 14             	sub    $0x14,%esp
   13dfb:	8b 45 08             	mov    0x8(%ebp),%eax
   13dfe:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    __asm__ __volatile__("in %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
   13e02:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13e06:	89 c2                	mov    %eax,%edx
   13e08:	66 ed                	in     (%dx),%ax
   13e0a:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
    return rv;
   13e0e:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   13e12:	c9                   	leave  
   13e13:	c3                   	ret    

00013e14 <outb>:
{
   13e14:	55                   	push   %ebp
   13e15:	89 e5                	mov    %esp,%ebp
   13e17:	83 ec 08             	sub    $0x8,%esp
   13e1a:	8b 55 08             	mov    0x8(%ebp),%edx
   13e1d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e20:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13e24:	88 45 f8             	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
   13e27:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   13e2b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   13e2f:	ee                   	out    %al,(%dx)
}
   13e30:	90                   	nop
   13e31:	c9                   	leave  
   13e32:	c3                   	ret    

00013e33 <read_disk>:
static uint8_t TEMP_ADDR[100 * 1024];
static uint8_t *temp_pos;
#define TEMP_FILE_ID 100

static void read_disk(int sector, int sector_count, uint8_t *buf)
{
   13e33:	55                   	push   %ebp
   13e34:	89 e5                	mov    %esp,%ebp
   13e36:	53                   	push   %ebx
   13e37:	83 ec 10             	sub    $0x10,%esp
    outb(0x1F6, (uint8_t)(0xE0)); // 选择磁盘
   13e3a:	68 e0 00 00 00       	push   $0xe0
   13e3f:	68 f6 01 00 00       	push   $0x1f6
   13e44:	e8 cb ff ff ff       	call   13e14 <outb>
   13e49:	83 c4 08             	add    $0x8,%esp
    outb(0x1F2, (uint8_t)(sector_count >> 8));
   13e4c:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e4f:	c1 f8 08             	sar    $0x8,%eax
   13e52:	0f b6 c0             	movzbl %al,%eax
   13e55:	50                   	push   %eax
   13e56:	68 f2 01 00 00       	push   $0x1f2
   13e5b:	e8 b4 ff ff ff       	call   13e14 <outb>
   13e60:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector >> 24));
   13e63:	8b 45 08             	mov    0x8(%ebp),%eax
   13e66:	c1 f8 18             	sar    $0x18,%eax
   13e69:	0f b6 c0             	movzbl %al,%eax
   13e6c:	50                   	push   %eax
   13e6d:	68 f3 01 00 00       	push   $0x1f3
   13e72:	e8 9d ff ff ff       	call   13e14 <outb>
   13e77:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(0));
   13e7a:	6a 00                	push   $0x0
   13e7c:	68 f4 01 00 00       	push   $0x1f4
   13e81:	e8 8e ff ff ff       	call   13e14 <outb>
   13e86:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(0));
   13e89:	6a 00                	push   $0x0
   13e8b:	68 f5 01 00 00       	push   $0x1f5
   13e90:	e8 7f ff ff ff       	call   13e14 <outb>
   13e95:	83 c4 08             	add    $0x8,%esp

    outb(0x1F2, (uint8_t)(sector_count));
   13e98:	8b 45 0c             	mov    0xc(%ebp),%eax
   13e9b:	0f b6 c0             	movzbl %al,%eax
   13e9e:	50                   	push   %eax
   13e9f:	68 f2 01 00 00       	push   $0x1f2
   13ea4:	e8 6b ff ff ff       	call   13e14 <outb>
   13ea9:	83 c4 08             	add    $0x8,%esp
    outb(0x1F3, (uint8_t)(sector));
   13eac:	8b 45 08             	mov    0x8(%ebp),%eax
   13eaf:	0f b6 c0             	movzbl %al,%eax
   13eb2:	50                   	push   %eax
   13eb3:	68 f3 01 00 00       	push   $0x1f3
   13eb8:	e8 57 ff ff ff       	call   13e14 <outb>
   13ebd:	83 c4 08             	add    $0x8,%esp
    outb(0x1F4, (uint8_t)(sector >> 8));
   13ec0:	8b 45 08             	mov    0x8(%ebp),%eax
   13ec3:	c1 f8 08             	sar    $0x8,%eax
   13ec6:	0f b6 c0             	movzbl %al,%eax
   13ec9:	50                   	push   %eax
   13eca:	68 f4 01 00 00       	push   $0x1f4
   13ecf:	e8 40 ff ff ff       	call   13e14 <outb>
   13ed4:	83 c4 08             	add    $0x8,%esp
    outb(0x1F5, (uint8_t)(sector >> 16));
   13ed7:	8b 45 08             	mov    0x8(%ebp),%eax
   13eda:	c1 f8 10             	sar    $0x10,%eax
   13edd:	0f b6 c0             	movzbl %al,%eax
   13ee0:	50                   	push   %eax
   13ee1:	68 f5 01 00 00       	push   $0x1f5
   13ee6:	e8 29 ff ff ff       	call   13e14 <outb>
   13eeb:	83 c4 08             	add    $0x8,%esp

    outb(0x1F7, (uint8_t)(0x24));
   13eee:	6a 24                	push   $0x24
   13ef0:	68 f7 01 00 00       	push   $0x1f7
   13ef5:	e8 1a ff ff ff       	call   13e14 <outb>
   13efa:	83 c4 08             	add    $0x8,%esp

    uint16_t *data_buf = (uint16_t *)buf;
   13efd:	8b 45 10             	mov    0x10(%ebp),%eax
   13f00:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (sector_count-- > 0)
   13f03:	eb 4a                	jmp    13f4f <read_disk+0x11c>
    {
        while ((inb(0x1F7) & 0x88) != 0x8)
   13f05:	90                   	nop
   13f06:	68 f7 01 00 00       	push   $0x1f7
   13f0b:	e8 c8 fe ff ff       	call   13dd8 <inb>
   13f10:	83 c4 04             	add    $0x4,%esp
   13f13:	0f b6 c0             	movzbl %al,%eax
   13f16:	25 88 00 00 00       	and    $0x88,%eax
   13f1b:	83 f8 08             	cmp    $0x8,%eax
   13f1e:	75 e6                	jne    13f06 <read_disk+0xd3>
        {
            /* code */
        }
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   13f20:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13f27:	eb 1d                	jmp    13f46 <read_disk+0x113>
        {
            *data_buf++ = inw(0x1F0);
   13f29:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   13f2c:	8d 43 02             	lea    0x2(%ebx),%eax
   13f2f:	89 45 f8             	mov    %eax,-0x8(%ebp)
   13f32:	68 f0 01 00 00       	push   $0x1f0
   13f37:	e8 b9 fe ff ff       	call   13df5 <inw>
   13f3c:	83 c4 04             	add    $0x4,%esp
   13f3f:	66 89 03             	mov    %ax,(%ebx)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
   13f42:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   13f46:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   13f4d:	7e da                	jle    13f29 <read_disk+0xf6>
    while (sector_count-- > 0)
   13f4f:	8b 45 0c             	mov    0xc(%ebp),%eax
   13f52:	8d 50 ff             	lea    -0x1(%eax),%edx
   13f55:	89 55 0c             	mov    %edx,0xc(%ebp)
   13f58:	85 c0                	test   %eax,%eax
   13f5a:	7f a9                	jg     13f05 <read_disk+0xd2>
            /* code */
        }
    }
}
   13f5c:	90                   	nop
   13f5d:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   13f60:	c9                   	leave  
   13f61:	c3                   	ret    

00013f62 <sys_open>:

int sys_open(const char *name, int flags, ...)
{
   13f62:	55                   	push   %ebp
   13f63:	89 e5                	mov    %esp,%ebp
    if (name[0] == '/')
   13f65:	8b 45 08             	mov    0x8(%ebp),%eax
   13f68:	0f b6 00             	movzbl (%eax),%eax
   13f6b:	3c 2f                	cmp    $0x2f,%al
   13f6d:	75 25                	jne    13f94 <sys_open+0x32>
    {
        read_disk(5000, 80, (uint8_t *)TEMP_ADDR);
   13f6f:	68 80 30 02 00       	push   $0x23080
   13f74:	6a 50                	push   $0x50
   13f76:	68 88 13 00 00       	push   $0x1388
   13f7b:	e8 b3 fe ff ff       	call   13e33 <read_disk>
   13f80:	83 c4 0c             	add    $0xc,%esp
        temp_pos = (uint8_t *)TEMP_ADDR;
   13f83:	c7 05 80 c0 03 00 80 	movl   $0x23080,0x3c080
   13f8a:	30 02 00 
        return TEMP_FILE_ID;
   13f8d:	b8 64 00 00 00       	mov    $0x64,%eax
   13f92:	eb 05                	jmp    13f99 <sys_open+0x37>
    }
    return -1;
   13f94:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13f99:	c9                   	leave  
   13f9a:	c3                   	ret    

00013f9b <sys_read>:

int sys_read(int file, char *ptr, int len)
{
   13f9b:	55                   	push   %ebp
   13f9c:	89 e5                	mov    %esp,%ebp
   13f9e:	83 ec 08             	sub    $0x8,%esp
    if (file == TEMP_FILE_ID)
   13fa1:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   13fa5:	75 2c                	jne    13fd3 <sys_read+0x38>
    {
        kernel_memcpy(ptr, temp_pos, len);
   13fa7:	a1 80 c0 03 00       	mov    0x3c080,%eax
   13fac:	83 ec 04             	sub    $0x4,%esp
   13faf:	ff 75 10             	pushl  0x10(%ebp)
   13fb2:	50                   	push   %eax
   13fb3:	ff 75 0c             	pushl  0xc(%ebp)
   13fb6:	e8 05 08 00 00       	call   147c0 <kernel_memcpy>
   13fbb:	83 c4 10             	add    $0x10,%esp
        temp_pos += len;
   13fbe:	8b 15 80 c0 03 00    	mov    0x3c080,%edx
   13fc4:	8b 45 10             	mov    0x10(%ebp),%eax
   13fc7:	01 d0                	add    %edx,%eax
   13fc9:	a3 80 c0 03 00       	mov    %eax,0x3c080
        return len;
   13fce:	8b 45 10             	mov    0x10(%ebp),%eax
   13fd1:	eb 05                	jmp    13fd8 <sys_read+0x3d>
    }
    return -1;
   13fd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13fd8:	c9                   	leave  
   13fd9:	c3                   	ret    

00013fda <sys_write>:

int sys_write(int file, char *ptr, int len)
{
   13fda:	55                   	push   %ebp
   13fdb:	89 e5                	mov    %esp,%ebp
   13fdd:	83 ec 08             	sub    $0x8,%esp
    if (file == 1)
   13fe0:	83 7d 08 01          	cmpl   $0x1,0x8(%ebp)
   13fe4:	75 13                	jne    13ff9 <sys_write+0x1f>
    {
        // ptr[len] = '\0';
        console_write(0, ptr, len);
   13fe6:	83 ec 04             	sub    $0x4,%esp
   13fe9:	ff 75 10             	pushl  0x10(%ebp)
   13fec:	ff 75 0c             	pushl  0xc(%ebp)
   13fef:	6a 00                	push   $0x0
   13ff1:	e8 ac f7 ff ff       	call   137a2 <console_write>
   13ff6:	83 c4 10             	add    $0x10,%esp
        // log_printf("%s", ptr);
    }
    return -1;
   13ff9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13ffe:	c9                   	leave  
   13fff:	c3                   	ret    

00014000 <sys_lseek>:

int sys_lseek(int file, int ptr, int dir)
{
   14000:	55                   	push   %ebp
   14001:	89 e5                	mov    %esp,%ebp
    if (file == TEMP_FILE_ID)
   14003:	83 7d 08 64          	cmpl   $0x64,0x8(%ebp)
   14007:	75 14                	jne    1401d <sys_lseek+0x1d>
    {
        temp_pos = (uint8_t *)(TEMP_ADDR + ptr);
   14009:	8b 45 0c             	mov    0xc(%ebp),%eax
   1400c:	05 80 30 02 00       	add    $0x23080,%eax
   14011:	a3 80 c0 03 00       	mov    %eax,0x3c080
        return 0;
   14016:	b8 00 00 00 00       	mov    $0x0,%eax
   1401b:	eb 05                	jmp    14022 <sys_lseek+0x22>
    }

    return -1;
   1401d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14022:	5d                   	pop    %ebp
   14023:	c3                   	ret    

00014024 <sys_close>:

int sys_close(int file)
{
   14024:	55                   	push   %ebp
   14025:	89 e5                	mov    %esp,%ebp
    return 0;
   14027:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1402c:	5d                   	pop    %ebp
   1402d:	c3                   	ret    

0001402e <sys_isatty>:

/**
 * 判断文件描述符与tty关联
 */
int sys_isatty(int file)
{
   1402e:	55                   	push   %ebp
   1402f:	89 e5                	mov    %esp,%ebp
    return 0;
   14031:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14036:	5d                   	pop    %ebp
   14037:	c3                   	ret    

00014038 <sys_fstat>:

/**
 * @brief 获取文件状态
 */
int sys_fstat(int file, struct stat *st)
{
   14038:	55                   	push   %ebp
   14039:	89 e5                	mov    %esp,%ebp
    return 0;
   1403b:	b8 00 00 00 00       	mov    $0x0,%eax
   14040:	5d                   	pop    %ebp
   14041:	c3                   	ret    

00014042 <kernel_init>:
#include "core/memory.h"
#include "dev/console.h"
#include "dev/kbd.h"

void kernel_init(boot_info_t *boot_info)
{
   14042:	55                   	push   %ebp
   14043:	89 e5                	mov    %esp,%ebp
   14045:	83 ec 08             	sub    $0x8,%esp
    cpu_init();
   14048:	e8 21 e3 ff ff       	call   1236e <cpu_init>
    log_init();
   1404d:	e8 87 0d 00 00       	call   14dd9 <log_init>
    console_init();
   14052:	e8 4f f1 ff ff       	call   131a6 <console_init>

    // 内存初始化要放前面一点，因为后面的代码可能需要内存分配
    memory_init(boot_info);
   14057:	83 ec 0c             	sub    $0xc,%esp
   1405a:	ff 75 08             	pushl  0x8(%ebp)
   1405d:	e8 8e cc ff ff       	call   10cf0 <memory_init>
   14062:	83 c4 10             	add    $0x10,%esp
    irq_init();
   14065:	e8 3b e9 ff ff       	call   129a5 <irq_init>
    time_init();
   1406a:	e8 51 fd ff ff       	call   13dc0 <time_init>

    task_manager_init();
   1406f:	e8 92 d3 ff ff       	call   11406 <task_manager_init>
    kbd_init();
   14074:	e8 60 fc ff ff       	call   13cd9 <kbd_init>
}
   14079:	90                   	nop
   1407a:	c9                   	leave  
   1407b:	c3                   	ret    

0001407c <move_to_first_task>:

/**
 * @brief 移至第一个进程运行
 */
void move_to_first_task(void)
{
   1407c:	55                   	push   %ebp
   1407d:	89 e5                	mov    %esp,%ebp
   1407f:	56                   	push   %esi
   14080:	53                   	push   %ebx
   14081:	83 ec 10             	sub    $0x10,%esp
    // 不能直接用Jmp far进入，因为当前特权级0，不能跳到低特权级的代码
    // 下面的iret后，还需要手动加载ds, fs, es等寄存器值，iret不会自动加载
    // 注意，运行下面的代码可能会产生异常：段保护异常或页保护异常。
    // 可根据产生的异常类型和错误码，并结合手册来找到问题所在
    task_t *curr = task_current();
   14084:	e8 c6 d4 ff ff       	call   1154f <task_current>
   14089:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   1408c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14090:	75 19                	jne    140ab <move_to_first_task+0x2f>
   14092:	68 b8 5c 01 00       	push   $0x15cb8
   14097:	68 34 5d 01 00       	push   $0x15d34
   1409c:	6a 57                	push   $0x57
   1409e:	68 c4 5c 01 00       	push   $0x15cc4
   140a3:	e8 90 0a 00 00       	call   14b38 <panic>
   140a8:	83 c4 10             	add    $0x10,%esp

    tss_t *tss = &(curr->tss);
   140ab:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140ae:	83 c0 58             	add    $0x58,%eax
   140b1:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"     // SS
        "push %[esp]\n\t"    // ESP
        "push %[eflags]\n\t" // EFLAGS
        "push %[cs]\n\t"     // CS
        "push %[eip]\n\t"    // ip
        "iret\n\t" ::[ss] "r"(tss->ss),
   140b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   140b7:	8b 40 50             	mov    0x50(%eax),%eax
        [esp] "r"(tss->esp), [eflags] "r"(tss->eflags),
   140ba:	8b 55 f0             	mov    -0x10(%ebp),%edx
   140bd:	8b 52 38             	mov    0x38(%edx),%edx
   140c0:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   140c3:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs] "r"(tss->cs), [eip] "r"(tss->eip));
   140c6:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   140c9:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   140cc:	8b 75 f0             	mov    -0x10(%ebp),%esi
   140cf:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   140d2:	50                   	push   %eax
   140d3:	52                   	push   %edx
   140d4:	51                   	push   %ecx
   140d5:	53                   	push   %ebx
   140d6:	56                   	push   %esi
   140d7:	cf                   	iret   
}
   140d8:	90                   	nop
   140d9:	8d 65 f8             	lea    -0x8(%ebp),%esp
   140dc:	5b                   	pop    %ebx
   140dd:	5e                   	pop    %esi
   140de:	5d                   	pop    %ebp
   140df:	c3                   	ret    

000140e0 <init_main>:

void init_main(void)
{
   140e0:	55                   	push   %ebp
   140e1:	89 e5                	mov    %esp,%ebp
   140e3:	83 ec 08             	sub    $0x8,%esp
    // list_test();

    log_printf("Kernel is running...");
   140e6:	83 ec 0c             	sub    $0xc,%esp
   140e9:	68 fe 5c 01 00       	push   $0x15cfe
   140ee:	e8 ec 0c 00 00       	call   14ddf <log_printf>
   140f3:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s", OS_VERSION);
   140f6:	83 ec 08             	sub    $0x8,%esp
   140f9:	68 13 5d 01 00       	push   $0x15d13
   140fe:	68 19 5d 01 00       	push   $0x15d19
   14103:	e8 d7 0c 00 00       	call   14ddf <log_printf>
   14108:	83 c4 10             	add    $0x10,%esp
    log_printf("%d %d %x %c", 123456, -123, 0x123456, 'a');
   1410b:	83 ec 0c             	sub    $0xc,%esp
   1410e:	6a 61                	push   $0x61
   14110:	68 56 34 12 00       	push   $0x123456
   14115:	6a 85                	push   $0xffffff85
   14117:	68 40 e2 01 00       	push   $0x1e240
   1411c:	68 25 5d 01 00       	push   $0x15d25
   14121:	e8 b9 0c 00 00       	call   14ddf <log_printf>
   14126:	83 c4 20             	add    $0x20,%esp

    // task_init(&init_task, "init task", (uint32_t)init_task_entry, (uint32_t)&init_task_stack[1024]); // 压栈先-4再入栈
    task_first_init();
   14129:	e8 da d1 ff ff       	call   11308 <task_first_init>
    move_to_first_task();
   1412e:	e8 49 ff ff ff       	call   1407c <move_to_first_task>
    //     sem_notify(&sem);
    //     // sys_msleep(1000);
    //     // task_switch_from_to(task_first_task(), &init_task);
    //     // sys_sched_yield();
    // }
   14133:	90                   	nop
   14134:	c9                   	leave  
   14135:	c3                   	ret    

00014136 <list_count>:
{
   14136:	55                   	push   %ebp
   14137:	89 e5                	mov    %esp,%ebp
    return list->count;
   14139:	8b 45 08             	mov    0x8(%ebp),%eax
   1413c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1413f:	5d                   	pop    %ebp
   14140:	c3                   	ret    

00014141 <mutex_init>:

/**
 * 锁初始化
 */
void mutex_init(mutex_t *mutex)
{
   14141:	55                   	push   %ebp
   14142:	89 e5                	mov    %esp,%ebp
   14144:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   14147:	8b 45 08             	mov    0x8(%ebp),%eax
   1414a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   14151:	8b 45 08             	mov    0x8(%ebp),%eax
   14154:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   1415a:	8b 45 08             	mov    0x8(%ebp),%eax
   1415d:	83 c0 08             	add    $0x8,%eax
   14160:	83 ec 0c             	sub    $0xc,%esp
   14163:	50                   	push   %eax
   14164:	e8 8b 0a 00 00       	call   14bf4 <list_init>
   14169:	83 c4 10             	add    $0x10,%esp
}
   1416c:	90                   	nop
   1416d:	c9                   	leave  
   1416e:	c3                   	ret    

0001416f <mutex_lock>:

/**
 * 申请锁
 */
void mutex_lock(mutex_t *mutex)
{
   1416f:	55                   	push   %ebp
   14170:	89 e5                	mov    %esp,%ebp
   14172:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   14175:	e8 66 eb ff ff       	call   12ce0 <irq_enter_protection>
   1417a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t *curr = task_current();
   1417d:	e8 cd d3 ff ff       	call   1154f <task_current>
   14182:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0)
   14185:	8b 45 08             	mov    0x8(%ebp),%eax
   14188:	8b 40 04             	mov    0x4(%eax),%eax
   1418b:	85 c0                	test   %eax,%eax
   1418d:	75 14                	jne    141a3 <mutex_lock+0x34>
    {
        // 没有任务占用，占用之
        mutex->locked_count = 1;
   1418f:	8b 45 08             	mov    0x8(%ebp),%eax
   14192:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   14199:	8b 45 08             	mov    0x8(%ebp),%eax
   1419c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1419f:	89 10                	mov    %edx,(%eax)
   141a1:	eb 4f                	jmp    141f2 <mutex_lock+0x83>
    }
    else if (mutex->owner == curr)
   141a3:	8b 45 08             	mov    0x8(%ebp),%eax
   141a6:	8b 00                	mov    (%eax),%eax
   141a8:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   141ab:	75 11                	jne    141be <mutex_lock+0x4f>
    {
        // 已经为当前任务所有，只增加计数
        mutex->locked_count++;
   141ad:	8b 45 08             	mov    0x8(%ebp),%eax
   141b0:	8b 40 04             	mov    0x4(%eax),%eax
   141b3:	8d 50 01             	lea    0x1(%eax),%edx
   141b6:	8b 45 08             	mov    0x8(%ebp),%eax
   141b9:	89 50 04             	mov    %edx,0x4(%eax)
   141bc:	eb 34                	jmp    141f2 <mutex_lock+0x83>
    }
    else
    {
        // 有其它任务占用，则进入队列等待
        task_t *curr = task_current();
   141be:	e8 8c d3 ff ff       	call   1154f <task_current>
   141c3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   141c6:	83 ec 0c             	sub    $0xc,%esp
   141c9:	ff 75 ec             	pushl  -0x14(%ebp)
   141cc:	e8 53 d3 ff ff       	call   11524 <task_set_block>
   141d1:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   141d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   141d7:	8d 50 48             	lea    0x48(%eax),%edx
   141da:	8b 45 08             	mov    0x8(%ebp),%eax
   141dd:	83 c0 08             	add    $0x8,%eax
   141e0:	83 ec 08             	sub    $0x8,%esp
   141e3:	52                   	push   %edx
   141e4:	50                   	push   %eax
   141e5:	e8 8e 0a 00 00       	call   14c78 <list_insert_last>
   141ea:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   141ed:	e8 0b d4 ff ff       	call   115fd <task_dispatch>
    }

    irq_leave_protection(irq_state);
   141f2:	83 ec 0c             	sub    $0xc,%esp
   141f5:	ff 75 f4             	pushl  -0xc(%ebp)
   141f8:	e8 fb ea ff ff       	call   12cf8 <irq_leave_protection>
   141fd:	83 c4 10             	add    $0x10,%esp
}
   14200:	90                   	nop
   14201:	c9                   	leave  
   14202:	c3                   	ret    

00014203 <mutex_unlock>:

/**
 * 释放锁
 */
void mutex_unlock(mutex_t *mutex)
{
   14203:	55                   	push   %ebp
   14204:	89 e5                	mov    %esp,%ebp
   14206:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   14209:	e8 d2 ea ff ff       	call   12ce0 <irq_enter_protection>
   1420e:	89 45 f4             	mov    %eax,-0xc(%ebp)

    // 只有锁的拥有者才能释放锁
    task_t *curr = task_current();
   14211:	e8 39 d3 ff ff       	call   1154f <task_current>
   14216:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr)
   14219:	8b 45 08             	mov    0x8(%ebp),%eax
   1421c:	8b 00                	mov    (%eax),%eax
   1421e:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   14221:	0f 85 88 00 00 00    	jne    142af <mutex_unlock+0xac>
    {
        if (--mutex->locked_count == 0)
   14227:	8b 45 08             	mov    0x8(%ebp),%eax
   1422a:	8b 40 04             	mov    0x4(%eax),%eax
   1422d:	8d 50 ff             	lea    -0x1(%eax),%edx
   14230:	8b 45 08             	mov    0x8(%ebp),%eax
   14233:	89 50 04             	mov    %edx,0x4(%eax)
   14236:	8b 45 08             	mov    0x8(%ebp),%eax
   14239:	8b 40 04             	mov    0x4(%eax),%eax
   1423c:	85 c0                	test   %eax,%eax
   1423e:	75 6f                	jne    142af <mutex_unlock+0xac>
        {
            // 减到0，释放锁
            mutex->owner = (task_t *)0;
   14240:	8b 45 08             	mov    0x8(%ebp),%eax
   14243:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

            // 如果队列中有任务等待，则立即唤醒并占用锁
            if (list_count(&mutex->wait_list))
   14249:	8b 45 08             	mov    0x8(%ebp),%eax
   1424c:	83 c0 08             	add    $0x8,%eax
   1424f:	83 ec 0c             	sub    $0xc,%esp
   14252:	50                   	push   %eax
   14253:	e8 de fe ff ff       	call   14136 <list_count>
   14258:	83 c4 10             	add    $0x10,%esp
   1425b:	85 c0                	test   %eax,%eax
   1425d:	74 50                	je     142af <mutex_unlock+0xac>
            {
                list_node_t *task_node = list_remove_first(&mutex->wait_list);
   1425f:	8b 45 08             	mov    0x8(%ebp),%eax
   14262:	83 c0 08             	add    $0x8,%eax
   14265:	83 ec 0c             	sub    $0xc,%esp
   14268:	50                   	push   %eax
   14269:	e8 6e 0a 00 00       	call   14cdc <list_remove_first>
   1426e:	83 c4 10             	add    $0x10,%esp
   14271:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t *task = list_node_parent(task_node, task_t, wait_node);
   14274:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14278:	74 08                	je     14282 <mutex_unlock+0x7f>
   1427a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1427d:	83 e8 48             	sub    $0x48,%eax
   14280:	eb 05                	jmp    14287 <mutex_unlock+0x84>
   14282:	b8 00 00 00 00       	mov    $0x0,%eax
   14287:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   1428a:	83 ec 0c             	sub    $0xc,%esp
   1428d:	ff 75 e8             	pushl  -0x18(%ebp)
   14290:	e8 5b d2 ff ff       	call   114f0 <task_set_ready>
   14295:	83 c4 10             	add    $0x10,%esp

                // 在这里占用，而不是在任务醒后占用，因为可能抢不到
                mutex->locked_count = 1;
   14298:	8b 45 08             	mov    0x8(%ebp),%eax
   1429b:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   142a2:	8b 45 08             	mov    0x8(%ebp),%eax
   142a5:	8b 55 e8             	mov    -0x18(%ebp),%edx
   142a8:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   142aa:	e8 4e d3 ff ff       	call   115fd <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   142af:	83 ec 0c             	sub    $0xc,%esp
   142b2:	ff 75 f4             	pushl  -0xc(%ebp)
   142b5:	e8 3e ea ff ff       	call   12cf8 <irq_leave_protection>
   142ba:	83 c4 10             	add    $0x10,%esp
   142bd:	90                   	nop
   142be:	c9                   	leave  
   142bf:	c3                   	ret    

000142c0 <list_count>:
{
   142c0:	55                   	push   %ebp
   142c1:	89 e5                	mov    %esp,%ebp
    return list->count;
   142c3:	8b 45 08             	mov    0x8(%ebp),%eax
   142c6:	8b 40 08             	mov    0x8(%eax),%eax
}
   142c9:	5d                   	pop    %ebp
   142ca:	c3                   	ret    

000142cb <sem_init>:

/**
 * 信号量初始化
 */
void sem_init(sem_t *sem, int init_count)
{
   142cb:	55                   	push   %ebp
   142cc:	89 e5                	mov    %esp,%ebp
   142ce:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   142d1:	8b 45 08             	mov    0x8(%ebp),%eax
   142d4:	8b 55 0c             	mov    0xc(%ebp),%edx
   142d7:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   142d9:	8b 45 08             	mov    0x8(%ebp),%eax
   142dc:	83 c0 04             	add    $0x4,%eax
   142df:	83 ec 0c             	sub    $0xc,%esp
   142e2:	50                   	push   %eax
   142e3:	e8 0c 09 00 00       	call   14bf4 <list_init>
   142e8:	83 c4 10             	add    $0x10,%esp
}
   142eb:	90                   	nop
   142ec:	c9                   	leave  
   142ed:	c3                   	ret    

000142ee <sem_wait>:

/**
 * 申请信号量
 */
void sem_wait(sem_t *sem)
{
   142ee:	55                   	push   %ebp
   142ef:	89 e5                	mov    %esp,%ebp
   142f1:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   142f4:	e8 e7 e9 ff ff       	call   12ce0 <irq_enter_protection>
   142f9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0)
   142fc:	8b 45 08             	mov    0x8(%ebp),%eax
   142ff:	8b 00                	mov    (%eax),%eax
   14301:	85 c0                	test   %eax,%eax
   14303:	7e 0f                	jle    14314 <sem_wait+0x26>
    {
        sem->count--;
   14305:	8b 45 08             	mov    0x8(%ebp),%eax
   14308:	8b 00                	mov    (%eax),%eax
   1430a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1430d:	8b 45 08             	mov    0x8(%ebp),%eax
   14310:	89 10                	mov    %edx,(%eax)
   14312:	eb 34                	jmp    14348 <sem_wait+0x5a>
    }
    else
    {
        // 从就绪队列中移除，然后加入信号量的等待队列
        task_t *curr = task_current();
   14314:	e8 36 d2 ff ff       	call   1154f <task_current>
   14319:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   1431c:	83 ec 0c             	sub    $0xc,%esp
   1431f:	ff 75 f0             	pushl  -0x10(%ebp)
   14322:	e8 fd d1 ff ff       	call   11524 <task_set_block>
   14327:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   1432a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1432d:	8d 50 48             	lea    0x48(%eax),%edx
   14330:	8b 45 08             	mov    0x8(%ebp),%eax
   14333:	83 c0 04             	add    $0x4,%eax
   14336:	83 ec 08             	sub    $0x8,%esp
   14339:	52                   	push   %edx
   1433a:	50                   	push   %eax
   1433b:	e8 38 09 00 00       	call   14c78 <list_insert_last>
   14340:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   14343:	e8 b5 d2 ff ff       	call   115fd <task_dispatch>
    }

    irq_leave_protection(irq_state);
   14348:	83 ec 0c             	sub    $0xc,%esp
   1434b:	ff 75 f4             	pushl  -0xc(%ebp)
   1434e:	e8 a5 e9 ff ff       	call   12cf8 <irq_leave_protection>
   14353:	83 c4 10             	add    $0x10,%esp
}
   14356:	90                   	nop
   14357:	c9                   	leave  
   14358:	c3                   	ret    

00014359 <sem_notify>:

/**
 * 释放信号量
 */
void sem_notify(sem_t *sem)
{
   14359:	55                   	push   %ebp
   1435a:	89 e5                	mov    %esp,%ebp
   1435c:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   1435f:	e8 7c e9 ff ff       	call   12ce0 <irq_enter_protection>
   14364:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list))
   14367:	8b 45 08             	mov    0x8(%ebp),%eax
   1436a:	83 c0 04             	add    $0x4,%eax
   1436d:	83 ec 0c             	sub    $0xc,%esp
   14370:	50                   	push   %eax
   14371:	e8 4a ff ff ff       	call   142c0 <list_count>
   14376:	83 c4 10             	add    $0x10,%esp
   14379:	85 c0                	test   %eax,%eax
   1437b:	74 40                	je     143bd <sem_notify+0x64>
    {
        // 有进程等待，则唤醒加入就绪队列
        list_node_t *node = list_remove_first(&sem->wait_list);
   1437d:	8b 45 08             	mov    0x8(%ebp),%eax
   14380:	83 c0 04             	add    $0x4,%eax
   14383:	83 ec 0c             	sub    $0xc,%esp
   14386:	50                   	push   %eax
   14387:	e8 50 09 00 00       	call   14cdc <list_remove_first>
   1438c:	83 c4 10             	add    $0x10,%esp
   1438f:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t *task = list_node_parent(node, task_t, wait_node);
   14392:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14396:	74 08                	je     143a0 <sem_notify+0x47>
   14398:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1439b:	83 e8 48             	sub    $0x48,%eax
   1439e:	eb 05                	jmp    143a5 <sem_notify+0x4c>
   143a0:	b8 00 00 00 00       	mov    $0x0,%eax
   143a5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   143a8:	83 ec 0c             	sub    $0xc,%esp
   143ab:	ff 75 ec             	pushl  -0x14(%ebp)
   143ae:	e8 3d d1 ff ff       	call   114f0 <task_set_ready>
   143b3:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   143b6:	e8 42 d2 ff ff       	call   115fd <task_dispatch>
   143bb:	eb 0d                	jmp    143ca <sem_notify+0x71>
    }
    else
    {
        sem->count++;
   143bd:	8b 45 08             	mov    0x8(%ebp),%eax
   143c0:	8b 00                	mov    (%eax),%eax
   143c2:	8d 50 01             	lea    0x1(%eax),%edx
   143c5:	8b 45 08             	mov    0x8(%ebp),%eax
   143c8:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   143ca:	83 ec 0c             	sub    $0xc,%esp
   143cd:	ff 75 f4             	pushl  -0xc(%ebp)
   143d0:	e8 23 e9 ff ff       	call   12cf8 <irq_leave_protection>
   143d5:	83 c4 10             	add    $0x10,%esp
}
   143d8:	90                   	nop
   143d9:	c9                   	leave  
   143da:	c3                   	ret    

000143db <sem_count>:

/**
 * 获取信号量的当前值
 */
int sem_count(sem_t *sem)
{
   143db:	55                   	push   %ebp
   143dc:	89 e5                	mov    %esp,%ebp
   143de:	83 ec 18             	sub    $0x18,%esp
    irq_state_t irq_state = irq_enter_protection();
   143e1:	e8 fa e8 ff ff       	call   12ce0 <irq_enter_protection>
   143e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   143e9:	8b 45 08             	mov    0x8(%ebp),%eax
   143ec:	8b 00                	mov    (%eax),%eax
   143ee:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   143f1:	83 ec 0c             	sub    $0xc,%esp
   143f4:	ff 75 f4             	pushl  -0xc(%ebp)
   143f7:	e8 fc e8 ff ff       	call   12cf8 <irq_leave_protection>
   143fc:	83 c4 10             	add    $0x10,%esp
    return count;
   143ff:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14402:	c9                   	leave  
   14403:	c3                   	ret    

00014404 <bitmap_byte_count>:

/**
 * @brief 获取所需要的字节数量
 */
int bitmap_byte_count(int bit_count)
{
   14404:	55                   	push   %ebp
   14405:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8; // 向上取整
   14407:	8b 45 08             	mov    0x8(%ebp),%eax
   1440a:	83 c0 07             	add    $0x7,%eax
   1440d:	8d 50 07             	lea    0x7(%eax),%edx
   14410:	85 c0                	test   %eax,%eax
   14412:	0f 48 c2             	cmovs  %edx,%eax
   14415:	c1 f8 03             	sar    $0x3,%eax
}
   14418:	5d                   	pop    %ebp
   14419:	c3                   	ret    

0001441a <bitmap_init>:

/**
 * @brief 位图初始化
 */
void bitmap_init(bitmap_t *bitmap, uint8_t *bits, int count, int init_bit)
{
   1441a:	55                   	push   %ebp
   1441b:	89 e5                	mov    %esp,%ebp
   1441d:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   14420:	8b 45 08             	mov    0x8(%ebp),%eax
   14423:	8b 55 10             	mov    0x10(%ebp),%edx
   14426:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   14428:	8b 45 08             	mov    0x8(%ebp),%eax
   1442b:	8b 55 0c             	mov    0xc(%ebp),%edx
   1442e:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   14431:	8b 45 08             	mov    0x8(%ebp),%eax
   14434:	8b 00                	mov    (%eax),%eax
   14436:	50                   	push   %eax
   14437:	e8 c8 ff ff ff       	call   14404 <bitmap_byte_count>
   1443c:	83 c4 04             	add    $0x4,%esp
   1443f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF : 0, bytes); // 将bitmap置位
   14442:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14446:	74 07                	je     1444f <bitmap_init+0x35>
   14448:	ba ff 00 00 00       	mov    $0xff,%edx
   1444d:	eb 05                	jmp    14454 <bitmap_init+0x3a>
   1444f:	ba 00 00 00 00       	mov    $0x0,%edx
   14454:	8b 45 08             	mov    0x8(%ebp),%eax
   14457:	8b 40 04             	mov    0x4(%eax),%eax
   1445a:	83 ec 04             	sub    $0x4,%esp
   1445d:	ff 75 f4             	pushl  -0xc(%ebp)
   14460:	52                   	push   %edx
   14461:	50                   	push   %eax
   14462:	e8 a8 03 00 00       	call   1480f <kernel_memset>
   14467:	83 c4 10             	add    $0x10,%esp
}
   1446a:	90                   	nop
   1446b:	c9                   	leave  
   1446c:	c3                   	ret    

0001446d <bitmap_set_bit>:

/**
 * @brief 连续设置N个位
 */
void bitmap_set_bit(bitmap_t *bitmap, int index, int count, int bit)
{
   1446d:	55                   	push   %ebp
   1446e:	89 e5                	mov    %esp,%ebp
   14470:	56                   	push   %esi
   14471:	53                   	push   %ebx
   14472:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   14475:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1447c:	e9 a2 00 00 00       	jmp    14523 <bitmap_set_bit+0xb6>
    {
        // 可以考虑进行一定程序的优化!!
        if (bit)
   14481:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   14485:	74 4a                	je     144d1 <bitmap_set_bit+0x64>
        {
            bitmap->bits[index / 8] |= 1 << (index % 8);
   14487:	8b 45 08             	mov    0x8(%ebp),%eax
   1448a:	8b 50 04             	mov    0x4(%eax),%edx
   1448d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14490:	8d 48 07             	lea    0x7(%eax),%ecx
   14493:	85 c0                	test   %eax,%eax
   14495:	0f 48 c1             	cmovs  %ecx,%eax
   14498:	c1 f8 03             	sar    $0x3,%eax
   1449b:	89 c3                	mov    %eax,%ebx
   1449d:	89 d8                	mov    %ebx,%eax
   1449f:	01 d0                	add    %edx,%eax
   144a1:	0f b6 00             	movzbl (%eax),%eax
   144a4:	89 c6                	mov    %eax,%esi
   144a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   144a9:	99                   	cltd   
   144aa:	c1 ea 1d             	shr    $0x1d,%edx
   144ad:	01 d0                	add    %edx,%eax
   144af:	83 e0 07             	and    $0x7,%eax
   144b2:	29 d0                	sub    %edx,%eax
   144b4:	ba 01 00 00 00       	mov    $0x1,%edx
   144b9:	89 c1                	mov    %eax,%ecx
   144bb:	d3 e2                	shl    %cl,%edx
   144bd:	89 d0                	mov    %edx,%eax
   144bf:	89 f2                	mov    %esi,%edx
   144c1:	09 c2                	or     %eax,%edx
   144c3:	8b 45 08             	mov    0x8(%ebp),%eax
   144c6:	8b 40 04             	mov    0x4(%eax),%eax
   144c9:	89 d9                	mov    %ebx,%ecx
   144cb:	01 c8                	add    %ecx,%eax
   144cd:	88 10                	mov    %dl,(%eax)
   144cf:	eb 4a                	jmp    1451b <bitmap_set_bit+0xae>
        }
        else
        {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   144d1:	8b 45 08             	mov    0x8(%ebp),%eax
   144d4:	8b 50 04             	mov    0x4(%eax),%edx
   144d7:	8b 45 0c             	mov    0xc(%ebp),%eax
   144da:	8d 48 07             	lea    0x7(%eax),%ecx
   144dd:	85 c0                	test   %eax,%eax
   144df:	0f 48 c1             	cmovs  %ecx,%eax
   144e2:	c1 f8 03             	sar    $0x3,%eax
   144e5:	89 c3                	mov    %eax,%ebx
   144e7:	89 d8                	mov    %ebx,%eax
   144e9:	01 d0                	add    %edx,%eax
   144eb:	0f b6 00             	movzbl (%eax),%eax
   144ee:	89 c6                	mov    %eax,%esi
   144f0:	8b 45 0c             	mov    0xc(%ebp),%eax
   144f3:	99                   	cltd   
   144f4:	c1 ea 1d             	shr    $0x1d,%edx
   144f7:	01 d0                	add    %edx,%eax
   144f9:	83 e0 07             	and    $0x7,%eax
   144fc:	29 d0                	sub    %edx,%eax
   144fe:	ba 01 00 00 00       	mov    $0x1,%edx
   14503:	89 c1                	mov    %eax,%ecx
   14505:	d3 e2                	shl    %cl,%edx
   14507:	89 d0                	mov    %edx,%eax
   14509:	f7 d0                	not    %eax
   1450b:	89 f2                	mov    %esi,%edx
   1450d:	21 c2                	and    %eax,%edx
   1450f:	8b 45 08             	mov    0x8(%ebp),%eax
   14512:	8b 40 04             	mov    0x4(%eax),%eax
   14515:	89 d9                	mov    %ebx,%ecx
   14517:	01 c8                	add    %ecx,%eax
   14519:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++)
   1451b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1451f:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   14523:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14526:	3b 45 10             	cmp    0x10(%ebp),%eax
   14529:	7d 0e                	jge    14539 <bitmap_set_bit+0xcc>
   1452b:	8b 45 08             	mov    0x8(%ebp),%eax
   1452e:	8b 00                	mov    (%eax),%eax
   14530:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14533:	0f 8c 48 ff ff ff    	jl     14481 <bitmap_set_bit+0x14>
        }
    }
}
   14539:	90                   	nop
   1453a:	83 c4 10             	add    $0x10,%esp
   1453d:	5b                   	pop    %ebx
   1453e:	5e                   	pop    %esi
   1453f:	5d                   	pop    %ebp
   14540:	c3                   	ret    

00014541 <bitmap_get_bit>:

/**
 * @brief 获取指定位的状态
 */
int bitmap_get_bit(bitmap_t *bitmap, int index)
{
   14541:	55                   	push   %ebp
   14542:	89 e5                	mov    %esp,%ebp
   14544:	53                   	push   %ebx
    // return bitmap->bits[index / 8] & (1 << (index % 8));
    //  2023-3-9 这里应该返回0或者1
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   14545:	8b 45 08             	mov    0x8(%ebp),%eax
   14548:	8b 50 04             	mov    0x4(%eax),%edx
   1454b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1454e:	8d 48 07             	lea    0x7(%eax),%ecx
   14551:	85 c0                	test   %eax,%eax
   14553:	0f 48 c1             	cmovs  %ecx,%eax
   14556:	c1 f8 03             	sar    $0x3,%eax
   14559:	01 d0                	add    %edx,%eax
   1455b:	0f b6 00             	movzbl (%eax),%eax
   1455e:	0f b6 d8             	movzbl %al,%ebx
   14561:	8b 45 0c             	mov    0xc(%ebp),%eax
   14564:	99                   	cltd   
   14565:	c1 ea 1d             	shr    $0x1d,%edx
   14568:	01 d0                	add    %edx,%eax
   1456a:	83 e0 07             	and    $0x7,%eax
   1456d:	29 d0                	sub    %edx,%eax
   1456f:	89 c1                	mov    %eax,%ecx
   14571:	d3 fb                	sar    %cl,%ebx
   14573:	89 d8                	mov    %ebx,%eax
   14575:	83 e0 01             	and    $0x1,%eax
}
   14578:	5b                   	pop    %ebx
   14579:	5d                   	pop    %ebp
   1457a:	c3                   	ret    

0001457b <bitmap_is_set>:

/**
 * @brief 检查指定位是否置1
 */
int bitmap_is_set(bitmap_t *bitmap, int index)
{
   1457b:	55                   	push   %ebp
   1457c:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   1457e:	ff 75 0c             	pushl  0xc(%ebp)
   14581:	ff 75 08             	pushl  0x8(%ebp)
   14584:	e8 b8 ff ff ff       	call   14541 <bitmap_get_bit>
   14589:	83 c4 08             	add    $0x8,%esp
   1458c:	85 c0                	test   %eax,%eax
   1458e:	0f 95 c0             	setne  %al
   14591:	0f b6 c0             	movzbl %al,%eax
}
   14594:	c9                   	leave  
   14595:	c3                   	ret    

00014596 <bitmap_alloc_nbits>:

/**
 * @brief 连续分配若干指定比特位，返回起始索引
 */
int bitmap_alloc_nbits(bitmap_t *bitmap, int bit, int count)
{
   14596:	55                   	push   %ebp
   14597:	89 e5                	mov    %esp,%ebp
   14599:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   1459c:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   145a3:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count)
   145aa:	e9 85 00 00 00       	jmp    14634 <bitmap_alloc_nbits+0x9e>
    {
        // 定位到第一个相同的索引处
        if (bitmap_get_bit(bitmap, search_idx) != bit)
   145af:	ff 75 fc             	pushl  -0x4(%ebp)
   145b2:	ff 75 08             	pushl  0x8(%ebp)
   145b5:	e8 87 ff ff ff       	call   14541 <bitmap_get_bit>
   145ba:	83 c4 08             	add    $0x8,%esp
   145bd:	39 45 0c             	cmp    %eax,0xc(%ebp)
   145c0:	74 06                	je     145c8 <bitmap_alloc_nbits+0x32>
        {
            // 不同，继续寻找起始的bit
            search_idx++;
   145c2:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   145c6:	eb 6c                	jmp    14634 <bitmap_alloc_nbits+0x9e>
        }

        // 记录起始索引
        ok_idx = search_idx;
   145c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   145cb:	89 45 f8             	mov    %eax,-0x8(%ebp)

        // 继续计算下一部分
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   145ce:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   145d5:	eb 27                	jmp    145fe <bitmap_alloc_nbits+0x68>
        {
            if (bitmap_get_bit(bitmap, search_idx++) != bit)
   145d7:	8b 45 fc             	mov    -0x4(%ebp),%eax
   145da:	8d 50 01             	lea    0x1(%eax),%edx
   145dd:	89 55 fc             	mov    %edx,-0x4(%ebp)
   145e0:	50                   	push   %eax
   145e1:	ff 75 08             	pushl  0x8(%ebp)
   145e4:	e8 58 ff ff ff       	call   14541 <bitmap_get_bit>
   145e9:	83 c4 08             	add    $0x8,%esp
   145ec:	39 45 0c             	cmp    %eax,0xc(%ebp)
   145ef:	74 09                	je     145fa <bitmap_alloc_nbits+0x64>
            {
                // 不足count个，退出，重新进行最外层的比较
                ok_idx = -1;
   145f1:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   145f8:	eb 16                	jmp    14610 <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++)
   145fa:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   145fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14601:	3b 45 10             	cmp    0x10(%ebp),%eax
   14604:	7d 0a                	jge    14610 <bitmap_alloc_nbits+0x7a>
   14606:	8b 45 08             	mov    0x8(%ebp),%eax
   14609:	8b 00                	mov    (%eax),%eax
   1460b:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1460e:	7c c7                	jl     145d7 <bitmap_alloc_nbits+0x41>
            }
        }

        // 找到，设置各位，然后退出
        if (i >= count)
   14610:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14613:	3b 45 10             	cmp    0x10(%ebp),%eax
   14616:	7c 1c                	jl     14634 <bitmap_alloc_nbits+0x9e>
        {
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   14618:	8b 45 0c             	mov    0xc(%ebp),%eax
   1461b:	f7 d0                	not    %eax
   1461d:	50                   	push   %eax
   1461e:	ff 75 10             	pushl  0x10(%ebp)
   14621:	ff 75 f8             	pushl  -0x8(%ebp)
   14624:	ff 75 08             	pushl  0x8(%ebp)
   14627:	e8 41 fe ff ff       	call   1446d <bitmap_set_bit>
   1462c:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   1462f:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14632:	eb 13                	jmp    14647 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count)
   14634:	8b 45 08             	mov    0x8(%ebp),%eax
   14637:	8b 00                	mov    (%eax),%eax
   14639:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   1463c:	0f 8c 6d ff ff ff    	jl     145af <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   14642:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   14647:	c9                   	leave  
   14648:	c3                   	ret    

00014649 <hlt>:
{
   14649:	55                   	push   %ebp
   1464a:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   1464c:	f4                   	hlt    
}
   1464d:	90                   	nop
   1464e:	5d                   	pop    %ebp
   1464f:	c3                   	ret    

00014650 <kernel_strcpy>:
#include "tools/klib.h"
#include "comm/types.h"
#include "comm/cpu_instr.h"

void kernel_strcpy(char *dest, const char *src)
{
   14650:	55                   	push   %ebp
   14651:	89 e5                	mov    %esp,%ebp
    if (!dest || !src)
   14653:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14657:	74 3b                	je     14694 <kernel_strcpy+0x44>
   14659:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1465d:	74 35                	je     14694 <kernel_strcpy+0x44>
    {
        return;
    }

    while (*dest && *src)
   1465f:	eb 17                	jmp    14678 <kernel_strcpy+0x28>
    {
        *dest++ = *src++;
   14661:	8b 55 0c             	mov    0xc(%ebp),%edx
   14664:	8d 42 01             	lea    0x1(%edx),%eax
   14667:	89 45 0c             	mov    %eax,0xc(%ebp)
   1466a:	8b 45 08             	mov    0x8(%ebp),%eax
   1466d:	8d 48 01             	lea    0x1(%eax),%ecx
   14670:	89 4d 08             	mov    %ecx,0x8(%ebp)
   14673:	0f b6 12             	movzbl (%edx),%edx
   14676:	88 10                	mov    %dl,(%eax)
    while (*dest && *src)
   14678:	8b 45 08             	mov    0x8(%ebp),%eax
   1467b:	0f b6 00             	movzbl (%eax),%eax
   1467e:	84 c0                	test   %al,%al
   14680:	74 0a                	je     1468c <kernel_strcpy+0x3c>
   14682:	8b 45 0c             	mov    0xc(%ebp),%eax
   14685:	0f b6 00             	movzbl (%eax),%eax
   14688:	84 c0                	test   %al,%al
   1468a:	75 d5                	jne    14661 <kernel_strcpy+0x11>
    }
    *dest = '\0';
   1468c:	8b 45 08             	mov    0x8(%ebp),%eax
   1468f:	c6 00 00             	movb   $0x0,(%eax)
   14692:	eb 01                	jmp    14695 <kernel_strcpy+0x45>
        return;
   14694:	90                   	nop
}
   14695:	5d                   	pop    %ebp
   14696:	c3                   	ret    

00014697 <kernel_strncpy>:

void kernel_strncpy(char *dest, const char *src, int size)
{
   14697:	55                   	push   %ebp
   14698:	89 e5                	mov    %esp,%ebp
   1469a:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   1469d:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   146a1:	74 61                	je     14704 <kernel_strncpy+0x6d>
   146a3:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   146a7:	74 5b                	je     14704 <kernel_strncpy+0x6d>
   146a9:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   146ad:	74 55                	je     14704 <kernel_strncpy+0x6d>
    {
        return;
    }

    char *d = dest;
   146af:	8b 45 08             	mov    0x8(%ebp),%eax
   146b2:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char *s = src;
   146b5:	8b 45 0c             	mov    0xc(%ebp),%eax
   146b8:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s))
   146bb:	eb 17                	jmp    146d4 <kernel_strncpy+0x3d>
    {
        *d++ = *s++;
   146bd:	8b 55 f8             	mov    -0x8(%ebp),%edx
   146c0:	8d 42 01             	lea    0x1(%edx),%eax
   146c3:	89 45 f8             	mov    %eax,-0x8(%ebp)
   146c6:	8b 45 fc             	mov    -0x4(%ebp),%eax
   146c9:	8d 48 01             	lea    0x1(%eax),%ecx
   146cc:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   146cf:	0f b6 12             	movzbl (%edx),%edx
   146d2:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s))
   146d4:	8b 45 10             	mov    0x10(%ebp),%eax
   146d7:	8d 50 ff             	lea    -0x1(%eax),%edx
   146da:	89 55 10             	mov    %edx,0x10(%ebp)
   146dd:	85 c0                	test   %eax,%eax
   146df:	7e 0a                	jle    146eb <kernel_strncpy+0x54>
   146e1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   146e4:	0f b6 00             	movzbl (%eax),%eax
   146e7:	84 c0                	test   %al,%al
   146e9:	75 d2                	jne    146bd <kernel_strncpy+0x26>
    }
    if (size == 0)
   146eb:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   146ef:	75 0b                	jne    146fc <kernel_strncpy+0x65>
    {
        *(d - 1) = '\0';
   146f1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   146f4:	83 e8 01             	sub    $0x1,%eax
   146f7:	c6 00 00             	movb   $0x0,(%eax)
   146fa:	eb 09                	jmp    14705 <kernel_strncpy+0x6e>
    }
    else
    {
        *d = '\0';
   146fc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   146ff:	c6 00 00             	movb   $0x0,(%eax)
   14702:	eb 01                	jmp    14705 <kernel_strncpy+0x6e>
        return;
   14704:	90                   	nop
    }
}
   14705:	c9                   	leave  
   14706:	c3                   	ret    

00014707 <kernel_strncmp>:

int kernel_strncmp(const char *s1, const char *s2, int size)
{
   14707:	55                   	push   %ebp
   14708:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2)
   1470a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1470e:	74 06                	je     14716 <kernel_strncmp+0xf>
   14710:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14714:	75 13                	jne    14729 <kernel_strncmp+0x22>
    {
        return -1;
   14716:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1471b:	eb 66                	jmp    14783 <kernel_strncmp+0x7c>
    }

    while (*s1 && *s2 && (*s1 == *s2) && size)
    {
        s1++;
   1471d:	83 45 08 01          	addl   $0x1,0x8(%ebp)
        s2++;
   14721:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
        size--;
   14725:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size)
   14729:	8b 45 08             	mov    0x8(%ebp),%eax
   1472c:	0f b6 00             	movzbl (%eax),%eax
   1472f:	84 c0                	test   %al,%al
   14731:	74 20                	je     14753 <kernel_strncmp+0x4c>
   14733:	8b 45 0c             	mov    0xc(%ebp),%eax
   14736:	0f b6 00             	movzbl (%eax),%eax
   14739:	84 c0                	test   %al,%al
   1473b:	74 16                	je     14753 <kernel_strncmp+0x4c>
   1473d:	8b 45 08             	mov    0x8(%ebp),%eax
   14740:	0f b6 10             	movzbl (%eax),%edx
   14743:	8b 45 0c             	mov    0xc(%ebp),%eax
   14746:	0f b6 00             	movzbl (%eax),%eax
   14749:	38 c2                	cmp    %al,%dl
   1474b:	75 06                	jne    14753 <kernel_strncmp+0x4c>
   1474d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14751:	75 ca                	jne    1471d <kernel_strncmp+0x16>
    }
    // 相等返回0
    // s1="abc",s2="abcdef" 也属于相等
    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   14753:	8b 45 08             	mov    0x8(%ebp),%eax
   14756:	0f b6 00             	movzbl (%eax),%eax
   14759:	84 c0                	test   %al,%al
   1475b:	74 21                	je     1477e <kernel_strncmp+0x77>
   1475d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14760:	0f b6 00             	movzbl (%eax),%eax
   14763:	84 c0                	test   %al,%al
   14765:	74 17                	je     1477e <kernel_strncmp+0x77>
   14767:	8b 45 08             	mov    0x8(%ebp),%eax
   1476a:	0f b6 10             	movzbl (%eax),%edx
   1476d:	8b 45 0c             	mov    0xc(%ebp),%eax
   14770:	0f b6 00             	movzbl (%eax),%eax
   14773:	38 c2                	cmp    %al,%dl
   14775:	74 07                	je     1477e <kernel_strncmp+0x77>
   14777:	b8 01 00 00 00       	mov    $0x1,%eax
   1477c:	eb 05                	jmp    14783 <kernel_strncmp+0x7c>
   1477e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14783:	5d                   	pop    %ebp
   14784:	c3                   	ret    

00014785 <kernel_strlen>:

int kernel_strlen(const char *str)
{
   14785:	55                   	push   %ebp
   14786:	89 e5                	mov    %esp,%ebp
   14788:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0)
   1478b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1478f:	75 07                	jne    14798 <kernel_strlen+0x13>
    {
        return 0;
   14791:	b8 00 00 00 00       	mov    $0x0,%eax
   14796:	eb 26                	jmp    147be <kernel_strlen+0x39>
    }

    const char *c = str;
   14798:	8b 45 08             	mov    0x8(%ebp),%eax
   1479b:	89 45 fc             	mov    %eax,-0x4(%ebp)

    int len = 0;
   1479e:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
    while (*c++)
   147a5:	eb 04                	jmp    147ab <kernel_strlen+0x26>
    {
        len++;
   147a7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
    while (*c++)
   147ab:	8b 45 fc             	mov    -0x4(%ebp),%eax
   147ae:	8d 50 01             	lea    0x1(%eax),%edx
   147b1:	89 55 fc             	mov    %edx,-0x4(%ebp)
   147b4:	0f b6 00             	movzbl (%eax),%eax
   147b7:	84 c0                	test   %al,%al
   147b9:	75 ec                	jne    147a7 <kernel_strlen+0x22>
    }

    return len;
   147bb:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   147be:	c9                   	leave  
   147bf:	c3                   	ret    

000147c0 <kernel_memcpy>:

void kernel_memcpy(void *dest, void *src, int size)
{
   147c0:	55                   	push   %ebp
   147c1:	89 e5                	mov    %esp,%ebp
   147c3:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size)
   147c6:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   147ca:	74 40                	je     1480c <kernel_memcpy+0x4c>
   147cc:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   147d0:	74 3a                	je     1480c <kernel_memcpy+0x4c>
   147d2:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   147d6:	74 34                	je     1480c <kernel_memcpy+0x4c>
    {
        return;
    }

    uint8_t *s = (uint8_t *)src;
   147d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   147db:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *d = (uint8_t *)dest;
   147de:	8b 45 08             	mov    0x8(%ebp),%eax
   147e1:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   147e4:	eb 17                	jmp    147fd <kernel_memcpy+0x3d>
    {
        *d++ = *s++;
   147e6:	8b 55 fc             	mov    -0x4(%ebp),%edx
   147e9:	8d 42 01             	lea    0x1(%edx),%eax
   147ec:	89 45 fc             	mov    %eax,-0x4(%ebp)
   147ef:	8b 45 f8             	mov    -0x8(%ebp),%eax
   147f2:	8d 48 01             	lea    0x1(%eax),%ecx
   147f5:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   147f8:	0f b6 12             	movzbl (%edx),%edx
   147fb:	88 10                	mov    %dl,(%eax)
    while (size--)
   147fd:	8b 45 10             	mov    0x10(%ebp),%eax
   14800:	8d 50 ff             	lea    -0x1(%eax),%edx
   14803:	89 55 10             	mov    %edx,0x10(%ebp)
   14806:	85 c0                	test   %eax,%eax
   14808:	75 dc                	jne    147e6 <kernel_memcpy+0x26>
   1480a:	eb 01                	jmp    1480d <kernel_memcpy+0x4d>
        return;
   1480c:	90                   	nop
    }
}
   1480d:	c9                   	leave  
   1480e:	c3                   	ret    

0001480f <kernel_memset>:

// 内存逐字节设置v
void kernel_memset(void *dest, uint8_t v, int size)
{
   1480f:	55                   	push   %ebp
   14810:	89 e5                	mov    %esp,%ebp
   14812:	83 ec 14             	sub    $0x14,%esp
   14815:	8b 45 0c             	mov    0xc(%ebp),%eax
   14818:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size)
   1481b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1481f:	74 2c                	je     1484d <kernel_memset+0x3e>
   14821:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   14825:	74 26                	je     1484d <kernel_memset+0x3e>
    {
        return;
    }

    uint8_t *d = (uint8_t *)dest;
   14827:	8b 45 08             	mov    0x8(%ebp),%eax
   1482a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--)
   1482d:	eb 0f                	jmp    1483e <kernel_memset+0x2f>
    {
        *d++ = v;
   1482f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14832:	8d 50 01             	lea    0x1(%eax),%edx
   14835:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14838:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   1483c:	88 10                	mov    %dl,(%eax)
    while (size--)
   1483e:	8b 45 10             	mov    0x10(%ebp),%eax
   14841:	8d 50 ff             	lea    -0x1(%eax),%edx
   14844:	89 55 10             	mov    %edx,0x10(%ebp)
   14847:	85 c0                	test   %eax,%eax
   14849:	75 e4                	jne    1482f <kernel_memset+0x20>
   1484b:	eb 01                	jmp    1484e <kernel_memset+0x3f>
        return;
   1484d:	90                   	nop
    }
}
   1484e:	c9                   	leave  
   1484f:	c3                   	ret    

00014850 <kernel_memcmp>:

int kernel_memcmp(void *d1, void *d2, int size)
{
   14850:	55                   	push   %ebp
   14851:	89 e5                	mov    %esp,%ebp
   14853:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2)
   14856:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1485a:	74 06                	je     14862 <kernel_memcmp+0x12>
   1485c:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14860:	75 07                	jne    14869 <kernel_memcmp+0x19>
    {
        return 1;
   14862:	b8 01 00 00 00       	mov    $0x1,%eax
   14867:	eb 43                	jmp    148ac <kernel_memcmp+0x5c>
    }

    uint8_t *p_d1 = (uint8_t *)d1;
   14869:	8b 45 08             	mov    0x8(%ebp),%eax
   1486c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t *p_d2 = (uint8_t *)d2;
   1486f:	8b 45 0c             	mov    0xc(%ebp),%eax
   14872:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--)
   14875:	eb 23                	jmp    1489a <kernel_memcmp+0x4a>
    {
        if (*p_d1++ != *p_d2++)
   14877:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1487a:	8d 50 01             	lea    0x1(%eax),%edx
   1487d:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14880:	0f b6 08             	movzbl (%eax),%ecx
   14883:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14886:	8d 50 01             	lea    0x1(%eax),%edx
   14889:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1488c:	0f b6 00             	movzbl (%eax),%eax
   1488f:	38 c1                	cmp    %al,%cl
   14891:	74 07                	je     1489a <kernel_memcmp+0x4a>
        {
            return 1;
   14893:	b8 01 00 00 00       	mov    $0x1,%eax
   14898:	eb 12                	jmp    148ac <kernel_memcmp+0x5c>
    while (size--)
   1489a:	8b 45 10             	mov    0x10(%ebp),%eax
   1489d:	8d 50 ff             	lea    -0x1(%eax),%edx
   148a0:	89 55 10             	mov    %edx,0x10(%ebp)
   148a3:	85 c0                	test   %eax,%eax
   148a5:	75 d0                	jne    14877 <kernel_memcmp+0x27>
        }
    }

    // 内存一样返回0
    return 0;
   148a7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   148ac:	c9                   	leave  
   148ad:	c3                   	ret    

000148ae <kernel_itoa>:

void kernel_itoa(char *buf, int num, int base)
{
   148ae:	55                   	push   %ebp
   148af:	89 e5                	mov    %esp,%ebp
   148b1:	53                   	push   %ebx
   148b2:	83 ec 20             	sub    $0x20,%esp
    // 转换字符索引[-15, -14, ...-1, 0, 1, ...., 14, 15]
    static const char *num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char *p = buf;
   148b5:	8b 45 08             	mov    0x8(%ebp),%eax
   148b8:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   148bb:	8b 45 0c             	mov    0xc(%ebp),%eax
   148be:	89 45 e8             	mov    %eax,-0x18(%ebp)

    // 仅支持部分进制
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16))
   148c1:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   148c5:	74 1d                	je     148e4 <kernel_itoa+0x36>
   148c7:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   148cb:	74 17                	je     148e4 <kernel_itoa+0x36>
   148cd:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   148d1:	74 11                	je     148e4 <kernel_itoa+0x36>
   148d3:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   148d7:	74 0b                	je     148e4 <kernel_itoa+0x36>
    {
        *p = '\0';
   148d9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   148dc:	c6 00 00             	movb   $0x0,(%eax)
        return;
   148df:	e9 03 01 00 00       	jmp    149e7 <kernel_itoa+0x139>
    }

    // 只支持十进制负数
    int signed_num = 0;
   148e4:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10))
   148eb:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   148ef:	79 19                	jns    1490a <kernel_itoa+0x5c>
   148f1:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   148f5:	75 13                	jne    1490a <kernel_itoa+0x5c>
    {
        *p++ = '-';
   148f7:	8b 45 f8             	mov    -0x8(%ebp),%eax
   148fa:	8d 50 01             	lea    0x1(%eax),%edx
   148fd:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14900:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   14903:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num)
   1490a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1490e:	74 3b                	je     1494b <kernel_itoa+0x9d>
    {
        do
        {
            char ch = num2ch[num % base + 15];
   14910:	8b 0d 50 60 01 00    	mov    0x16050,%ecx
   14916:	8b 45 0c             	mov    0xc(%ebp),%eax
   14919:	99                   	cltd   
   1491a:	f7 7d 10             	idivl  0x10(%ebp)
   1491d:	89 d0                	mov    %edx,%eax
   1491f:	83 c0 0f             	add    $0xf,%eax
   14922:	01 c8                	add    %ecx,%eax
   14924:	0f b6 00             	movzbl (%eax),%eax
   14927:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   1492a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1492d:	8d 50 01             	lea    0x1(%eax),%edx
   14930:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14933:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   14937:	88 10                	mov    %dl,(%eax)
            num /= base;
   14939:	8b 45 0c             	mov    0xc(%ebp),%eax
   1493c:	99                   	cltd   
   1493d:	f7 7d 10             	idivl  0x10(%ebp)
   14940:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   14943:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   14947:	75 c7                	jne    14910 <kernel_itoa+0x62>
   14949:	eb 4b                	jmp    14996 <kernel_itoa+0xe8>
    }
    else
    {
        uint32_t u_num = (uint32_t)num;
   1494b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1494e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do
        {
            char ch = num2ch[u_num % base + 15];
   14951:	8b 0d 50 60 01 00    	mov    0x16050,%ecx
   14957:	8b 5d 10             	mov    0x10(%ebp),%ebx
   1495a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1495d:	ba 00 00 00 00       	mov    $0x0,%edx
   14962:	f7 f3                	div    %ebx
   14964:	89 d0                	mov    %edx,%eax
   14966:	83 c0 0f             	add    $0xf,%eax
   14969:	01 c8                	add    %ecx,%eax
   1496b:	0f b6 00             	movzbl (%eax),%eax
   1496e:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   14971:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14974:	8d 50 01             	lea    0x1(%eax),%edx
   14977:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1497a:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   1497e:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   14980:	8b 5d 10             	mov    0x10(%ebp),%ebx
   14983:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14986:	ba 00 00 00 00       	mov    $0x0,%edx
   1498b:	f7 f3                	div    %ebx
   1498d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   14990:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14994:	75 bb                	jne    14951 <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   14996:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14999:	8d 50 ff             	lea    -0x1(%eax),%edx
   1499c:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1499f:	c6 00 00             	movb   $0x0,(%eax)

    // 将转换结果逆序，生成最终的结果
    char *start = (!signed_num) ? buf : buf + 1;
   149a2:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   149a6:	74 08                	je     149b0 <kernel_itoa+0x102>
   149a8:	8b 45 08             	mov    0x8(%ebp),%eax
   149ab:	83 c0 01             	add    $0x1,%eax
   149ae:	eb 03                	jmp    149b3 <kernel_itoa+0x105>
   149b0:	8b 45 08             	mov    0x8(%ebp),%eax
   149b3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p)
   149b6:	eb 27                	jmp    149df <kernel_itoa+0x131>
    {
        char ch = *start;
   149b8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149bb:	0f b6 00             	movzbl (%eax),%eax
   149be:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   149c1:	8b 45 f8             	mov    -0x8(%ebp),%eax
   149c4:	0f b6 10             	movzbl (%eax),%edx
   149c7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149ca:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   149cc:	8b 45 f8             	mov    -0x8(%ebp),%eax
   149cf:	8d 50 ff             	lea    -0x1(%eax),%edx
   149d2:	89 55 f8             	mov    %edx,-0x8(%ebp)
   149d5:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   149d9:	88 10                	mov    %dl,(%eax)
        start++;
   149db:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p)
   149df:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149e2:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   149e5:	72 d1                	jb     149b8 <kernel_itoa+0x10a>
    }
}
   149e7:	83 c4 20             	add    $0x20,%esp
   149ea:	5b                   	pop    %ebx
   149eb:	5d                   	pop    %ebp
   149ec:	c3                   	ret    

000149ed <kernel_vsprintf>:
// buf 为最终显示的目标
// fmt 为整个字符串
// args 为va_list 可变变量
void kernel_vsprintf(char *buf, const char *fmt, va_list args)
{
   149ed:	55                   	push   %ebp
   149ee:	89 e5                	mov    %esp,%ebp
   149f0:	83 ec 20             	sub    $0x20,%esp
    enum
    {
        NORMAL,
        READ_FMT
    } state = NORMAL;
   149f3:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char *curr = buf;
   149fa:	8b 45 08             	mov    0x8(%ebp),%eax
   149fd:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++))
   14a00:	e9 17 01 00 00       	jmp    14b1c <kernel_vsprintf+0x12f>
    {
        switch (state)
   14a05:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14a08:	85 c0                	test   %eax,%eax
   14a0a:	74 0a                	je     14a16 <kernel_vsprintf+0x29>
   14a0c:	83 f8 01             	cmp    $0x1,%eax
   14a0f:	74 2b                	je     14a3c <kernel_vsprintf+0x4f>
   14a11:	e9 06 01 00 00       	jmp    14b1c <kernel_vsprintf+0x12f>
        {
        // 普通字符
        case NORMAL:
            if (ch == '%')
   14a16:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   14a1a:	75 0c                	jne    14a28 <kernel_vsprintf+0x3b>
            {
                state = READ_FMT;
   14a1c:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   14a23:	e9 f4 00 00 00       	jmp    14b1c <kernel_vsprintf+0x12f>
            }
            else
            {
                *curr++ = ch;
   14a28:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14a2b:	8d 50 01             	lea    0x1(%eax),%edx
   14a2e:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14a31:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   14a35:	88 10                	mov    %dl,(%eax)
            }
            break;
   14a37:	e9 e0 00 00 00       	jmp    14b1c <kernel_vsprintf+0x12f>
        // 格式化控制字符，只支持部分
        case READ_FMT:
            if (ch == 'd')
   14a3c:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   14a40:	75 31                	jne    14a73 <kernel_vsprintf+0x86>
            {
                int num = va_arg(args, int);
   14a42:	8b 45 10             	mov    0x10(%ebp),%eax
   14a45:	8d 50 04             	lea    0x4(%eax),%edx
   14a48:	89 55 10             	mov    %edx,0x10(%ebp)
   14a4b:	8b 00                	mov    (%eax),%eax
   14a4d:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                kernel_itoa(curr, num, 10);
   14a50:	6a 0a                	push   $0xa
   14a52:	ff 75 e4             	pushl  -0x1c(%ebp)
   14a55:	ff 75 f8             	pushl  -0x8(%ebp)
   14a58:	e8 51 fe ff ff       	call   148ae <kernel_itoa>
   14a5d:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr); // 移动到下一个
   14a60:	ff 75 f8             	pushl  -0x8(%ebp)
   14a63:	e8 1d fd ff ff       	call   14785 <kernel_strlen>
   14a68:	83 c4 04             	add    $0x4,%esp
   14a6b:	01 45 f8             	add    %eax,-0x8(%ebp)
   14a6e:	e9 a1 00 00 00       	jmp    14b14 <kernel_vsprintf+0x127>
            }
            else if (ch == 'x')
   14a73:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   14a77:	75 2e                	jne    14aa7 <kernel_vsprintf+0xba>
            {
                int num = va_arg(args, int);
   14a79:	8b 45 10             	mov    0x10(%ebp),%eax
   14a7c:	8d 50 04             	lea    0x4(%eax),%edx
   14a7f:	89 55 10             	mov    %edx,0x10(%ebp)
   14a82:	8b 00                	mov    (%eax),%eax
   14a84:	89 45 e8             	mov    %eax,-0x18(%ebp)
                kernel_itoa(curr, num, 16);
   14a87:	6a 10                	push   $0x10
   14a89:	ff 75 e8             	pushl  -0x18(%ebp)
   14a8c:	ff 75 f8             	pushl  -0x8(%ebp)
   14a8f:	e8 1a fe ff ff       	call   148ae <kernel_itoa>
   14a94:	83 c4 0c             	add    $0xc,%esp
                curr += kernel_strlen(curr);
   14a97:	ff 75 f8             	pushl  -0x8(%ebp)
   14a9a:	e8 e6 fc ff ff       	call   14785 <kernel_strlen>
   14a9f:	83 c4 04             	add    $0x4,%esp
   14aa2:	01 45 f8             	add    %eax,-0x8(%ebp)
   14aa5:	eb 6d                	jmp    14b14 <kernel_vsprintf+0x127>
            }
            else if (ch == 'c')
   14aa7:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   14aab:	75 1f                	jne    14acc <kernel_vsprintf+0xdf>
            {
                char c = va_arg(args, int);
   14aad:	8b 45 10             	mov    0x10(%ebp),%eax
   14ab0:	8d 50 04             	lea    0x4(%eax),%edx
   14ab3:	89 55 10             	mov    %edx,0x10(%ebp)
   14ab6:	8b 00                	mov    (%eax),%eax
   14ab8:	88 45 ee             	mov    %al,-0x12(%ebp)
                *curr++ = c;
   14abb:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14abe:	8d 50 01             	lea    0x1(%eax),%edx
   14ac1:	89 55 f8             	mov    %edx,-0x8(%ebp)
   14ac4:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   14ac8:	88 10                	mov    %dl,(%eax)
   14aca:	eb 48                	jmp    14b14 <kernel_vsprintf+0x127>
            }
            else if (ch == 's')
   14acc:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   14ad0:	75 42                	jne    14b14 <kernel_vsprintf+0x127>
            {
                const char *str = va_arg(args, char *);
   14ad2:	8b 45 10             	mov    0x10(%ebp),%eax
   14ad5:	8d 50 04             	lea    0x4(%eax),%edx
   14ad8:	89 55 10             	mov    %edx,0x10(%ebp)
   14adb:	8b 00                	mov    (%eax),%eax
   14add:	89 45 f4             	mov    %eax,-0xc(%ebp)
                int len = kernel_strlen(str);
   14ae0:	ff 75 f4             	pushl  -0xc(%ebp)
   14ae3:	e8 9d fc ff ff       	call   14785 <kernel_strlen>
   14ae8:	83 c4 04             	add    $0x4,%esp
   14aeb:	89 45 f0             	mov    %eax,-0x10(%ebp)
                while (len--)
   14aee:	eb 17                	jmp    14b07 <kernel_vsprintf+0x11a>
                {
                    *curr++ = *str++;
   14af0:	8b 55 f4             	mov    -0xc(%ebp),%edx
   14af3:	8d 42 01             	lea    0x1(%edx),%eax
   14af6:	89 45 f4             	mov    %eax,-0xc(%ebp)
   14af9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14afc:	8d 48 01             	lea    0x1(%eax),%ecx
   14aff:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   14b02:	0f b6 12             	movzbl (%edx),%edx
   14b05:	88 10                	mov    %dl,(%eax)
                while (len--)
   14b07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14b0a:	8d 50 ff             	lea    -0x1(%eax),%edx
   14b0d:	89 55 f0             	mov    %edx,-0x10(%ebp)
   14b10:	85 c0                	test   %eax,%eax
   14b12:	75 dc                	jne    14af0 <kernel_vsprintf+0x103>
                }
            }
            state = NORMAL;
   14b14:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
            break;
   14b1b:	90                   	nop
    while ((ch = *fmt++))
   14b1c:	8b 45 0c             	mov    0xc(%ebp),%eax
   14b1f:	8d 50 01             	lea    0x1(%eax),%edx
   14b22:	89 55 0c             	mov    %edx,0xc(%ebp)
   14b25:	0f b6 00             	movzbl (%eax),%eax
   14b28:	88 45 ef             	mov    %al,-0x11(%ebp)
   14b2b:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   14b2f:	0f 85 d0 fe ff ff    	jne    14a05 <kernel_vsprintf+0x18>
        }
    }
}
   14b35:	90                   	nop
   14b36:	c9                   	leave  
   14b37:	c3                   	ret    

00014b38 <panic>:

void panic(const char *file, int line, const char *func, const char *cond)
{
   14b38:	55                   	push   %ebp
   14b39:	89 e5                	mov    %esp,%ebp
   14b3b:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   14b3e:	83 ec 08             	sub    $0x8,%esp
   14b41:	ff 75 14             	pushl  0x14(%ebp)
   14b44:	68 48 5d 01 00       	push   $0x15d48
   14b49:	e8 91 02 00 00       	call   14ddf <log_printf>
   14b4e:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   14b51:	ff 75 10             	pushl  0x10(%ebp)
   14b54:	ff 75 0c             	pushl  0xc(%ebp)
   14b57:	ff 75 08             	pushl  0x8(%ebp)
   14b5a:	68 5a 5d 01 00       	push   $0x15d5a
   14b5f:	e8 7b 02 00 00       	call   14ddf <log_printf>
   14b64:	83 c4 10             	add    $0x10,%esp

    for (;;)
    {
        hlt();
   14b67:	e8 dd fa ff ff       	call   14649 <hlt>
   14b6c:	eb f9                	jmp    14b67 <panic+0x2f>

00014b6e <get_file_name>:

/**
 * @brief 从路径中解释文件名
 */
char *get_file_name(char *name)
{
   14b6e:	55                   	push   %ebp
   14b6f:	89 e5                	mov    %esp,%ebp
   14b71:	83 ec 10             	sub    $0x10,%esp
    char *s = name;
   14b74:	8b 45 08             	mov    0x8(%ebp),%eax
   14b77:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 定位到结束符
    while (*s != '\0')
   14b7a:	eb 04                	jmp    14b80 <get_file_name+0x12>
    {
        s++;
   14b7c:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0')
   14b80:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14b83:	0f b6 00             	movzbl (%eax),%eax
   14b86:	84 c0                	test   %al,%al
   14b88:	75 f2                	jne    14b7c <get_file_name+0xe>
    }

    // 反向搜索，直到找到反斜杆或者到文件开头
    while ((*s != '\\') && (*s != '/') && (s >= name))
   14b8a:	eb 04                	jmp    14b90 <get_file_name+0x22>
    {
        s--;
   14b8c:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name))
   14b90:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14b93:	0f b6 00             	movzbl (%eax),%eax
   14b96:	3c 5c                	cmp    $0x5c,%al
   14b98:	74 12                	je     14bac <get_file_name+0x3e>
   14b9a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14b9d:	0f b6 00             	movzbl (%eax),%eax
   14ba0:	3c 2f                	cmp    $0x2f,%al
   14ba2:	74 08                	je     14bac <get_file_name+0x3e>
   14ba4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14ba7:	3b 45 08             	cmp    0x8(%ebp),%eax
   14baa:	73 e0                	jae    14b8c <get_file_name+0x1e>
    }
    return s + 1;
   14bac:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14baf:	83 c0 01             	add    $0x1,%eax
}
   14bb2:	c9                   	leave  
   14bb3:	c3                   	ret    

00014bb4 <strings_count>:

/**
 * @brief 计算字符串的数量
 */
int strings_count(char **start)
{
   14bb4:	55                   	push   %ebp
   14bb5:	89 e5                	mov    %esp,%ebp
   14bb7:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   14bba:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start)
   14bc1:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   14bc5:	74 15                	je     14bdc <strings_count+0x28>
    {
        while (*start++)
   14bc7:	eb 04                	jmp    14bcd <strings_count+0x19>
        {
            count++;
   14bc9:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++)
   14bcd:	8b 45 08             	mov    0x8(%ebp),%eax
   14bd0:	8d 50 04             	lea    0x4(%eax),%edx
   14bd3:	89 55 08             	mov    %edx,0x8(%ebp)
   14bd6:	8b 00                	mov    (%eax),%eax
   14bd8:	85 c0                	test   %eax,%eax
   14bda:	75 ed                	jne    14bc9 <strings_count+0x15>
        }
    }
    return count;
   14bdc:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14bdf:	c9                   	leave  
   14be0:	c3                   	ret    

00014be1 <list_is_empty>:
{
   14be1:	55                   	push   %ebp
   14be2:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   14be4:	8b 45 08             	mov    0x8(%ebp),%eax
   14be7:	8b 40 08             	mov    0x8(%eax),%eax
   14bea:	85 c0                	test   %eax,%eax
   14bec:	0f 94 c0             	sete   %al
   14bef:	0f b6 c0             	movzbl %al,%eax
}
   14bf2:	5d                   	pop    %ebp
   14bf3:	c3                   	ret    

00014bf4 <list_init>:
/**
 * 初始化链表
 * @param list 待初始化的链表
 */
void list_init(list_t *list)
{
   14bf4:	55                   	push   %ebp
   14bf5:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   14bf7:	8b 45 08             	mov    0x8(%ebp),%eax
   14bfa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14c01:	8b 45 08             	mov    0x8(%ebp),%eax
   14c04:	8b 50 04             	mov    0x4(%eax),%edx
   14c07:	8b 45 08             	mov    0x8(%ebp),%eax
   14c0a:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   14c0c:	8b 45 08             	mov    0x8(%ebp),%eax
   14c0f:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   14c16:	90                   	nop
   14c17:	5d                   	pop    %ebp
   14c18:	c3                   	ret    

00014c19 <list_insert_first>:
 * 将指定表项插入到指定链表的头部
 * @param list 待插入的链表
 * @param node 待插入的结点
 */
void list_insert_first(list_t *list, list_node_t *node)
{
   14c19:	55                   	push   %ebp
   14c1a:	89 e5                	mov    %esp,%ebp
    // 设置好待插入结点的前后，前面为空
    node->next = list->first;
   14c1c:	8b 45 08             	mov    0x8(%ebp),%eax
   14c1f:	8b 10                	mov    (%eax),%edx
   14c21:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c24:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   14c27:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c2a:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

    // 如果为空，需要同时设置first和last指向自己
    if (list_is_empty(list))
   14c30:	ff 75 08             	pushl  0x8(%ebp)
   14c33:	e8 a9 ff ff ff       	call   14be1 <list_is_empty>
   14c38:	83 c4 04             	add    $0x4,%esp
   14c3b:	85 c0                	test   %eax,%eax
   14c3d:	74 15                	je     14c54 <list_insert_first+0x3b>
    {
        list->last = list->first = node;
   14c3f:	8b 45 08             	mov    0x8(%ebp),%eax
   14c42:	8b 55 0c             	mov    0xc(%ebp),%edx
   14c45:	89 10                	mov    %edx,(%eax)
   14c47:	8b 45 08             	mov    0x8(%ebp),%eax
   14c4a:	8b 10                	mov    (%eax),%edx
   14c4c:	8b 45 08             	mov    0x8(%ebp),%eax
   14c4f:	89 50 04             	mov    %edx,0x4(%eax)
   14c52:	eb 12                	jmp    14c66 <list_insert_first+0x4d>
    }
    else
    {
        // 否则，设置好原本第一个结点的pre
        list->first->pre = node;
   14c54:	8b 45 08             	mov    0x8(%ebp),%eax
   14c57:	8b 00                	mov    (%eax),%eax
   14c59:	8b 55 0c             	mov    0xc(%ebp),%edx
   14c5c:	89 10                	mov    %edx,(%eax)

        // 调整first指向
        list->first = node;
   14c5e:	8b 45 08             	mov    0x8(%ebp),%eax
   14c61:	8b 55 0c             	mov    0xc(%ebp),%edx
   14c64:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   14c66:	8b 45 08             	mov    0x8(%ebp),%eax
   14c69:	8b 40 08             	mov    0x8(%eax),%eax
   14c6c:	8d 50 01             	lea    0x1(%eax),%edx
   14c6f:	8b 45 08             	mov    0x8(%ebp),%eax
   14c72:	89 50 08             	mov    %edx,0x8(%eax)
}
   14c75:	90                   	nop
   14c76:	c9                   	leave  
   14c77:	c3                   	ret    

00014c78 <list_insert_last>:
 * 将指定表项插入到指定链表的尾部
 * @param list 操作的链表
 * @param node 待插入的结点
 */
void list_insert_last(list_t *list, list_node_t *node)
{
   14c78:	55                   	push   %ebp
   14c79:	89 e5                	mov    %esp,%ebp
    // 设置好结点本身
    node->pre = list->last;
   14c7b:	8b 45 08             	mov    0x8(%ebp),%eax
   14c7e:	8b 50 04             	mov    0x4(%eax),%edx
   14c81:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c84:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t *)0;
   14c86:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c89:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

    // 表空，则first/last都指向唯一的node
    if (list_is_empty(list))
   14c90:	ff 75 08             	pushl  0x8(%ebp)
   14c93:	e8 49 ff ff ff       	call   14be1 <list_is_empty>
   14c98:	83 c4 04             	add    $0x4,%esp
   14c9b:	85 c0                	test   %eax,%eax
   14c9d:	74 16                	je     14cb5 <list_insert_last+0x3d>
    {
        list->first = list->last = node;
   14c9f:	8b 45 08             	mov    0x8(%ebp),%eax
   14ca2:	8b 55 0c             	mov    0xc(%ebp),%edx
   14ca5:	89 50 04             	mov    %edx,0x4(%eax)
   14ca8:	8b 45 08             	mov    0x8(%ebp),%eax
   14cab:	8b 50 04             	mov    0x4(%eax),%edx
   14cae:	8b 45 08             	mov    0x8(%ebp),%eax
   14cb1:	89 10                	mov    %edx,(%eax)
   14cb3:	eb 15                	jmp    14cca <list_insert_last+0x52>
    }
    else
    {
        // 否则，调整last结点的向一指向为node
        list->last->next = node;
   14cb5:	8b 45 08             	mov    0x8(%ebp),%eax
   14cb8:	8b 40 04             	mov    0x4(%eax),%eax
   14cbb:	8b 55 0c             	mov    0xc(%ebp),%edx
   14cbe:	89 50 04             	mov    %edx,0x4(%eax)

        // node变成了新的后继结点
        list->last = node;
   14cc1:	8b 45 08             	mov    0x8(%ebp),%eax
   14cc4:	8b 55 0c             	mov    0xc(%ebp),%edx
   14cc7:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   14cca:	8b 45 08             	mov    0x8(%ebp),%eax
   14ccd:	8b 40 08             	mov    0x8(%eax),%eax
   14cd0:	8d 50 01             	lea    0x1(%eax),%edx
   14cd3:	8b 45 08             	mov    0x8(%ebp),%eax
   14cd6:	89 50 08             	mov    %edx,0x8(%eax)
}
   14cd9:	90                   	nop
   14cda:	c9                   	leave  
   14cdb:	c3                   	ret    

00014cdc <list_remove_first>:
 * 移除指定链表的头部
 * @param list 操作的链表
 * @return 链表的第一个结点
 */
list_node_t *list_remove_first(list_t *list)
{
   14cdc:	55                   	push   %ebp
   14cdd:	89 e5                	mov    %esp,%ebp
   14cdf:	83 ec 10             	sub    $0x10,%esp
    // 表项为空，返回空
    if (list_is_empty(list))
   14ce2:	ff 75 08             	pushl  0x8(%ebp)
   14ce5:	e8 f7 fe ff ff       	call   14be1 <list_is_empty>
   14cea:	83 c4 04             	add    $0x4,%esp
   14ced:	85 c0                	test   %eax,%eax
   14cef:	74 07                	je     14cf8 <list_remove_first+0x1c>
    {
        return (list_node_t *)0;
   14cf1:	b8 00 00 00 00       	mov    $0x0,%eax
   14cf6:	eb 5a                	jmp    14d52 <list_remove_first+0x76>
    }

    // 取第一个结点
    list_node_t *remove_node = list->first;
   14cf8:	8b 45 08             	mov    0x8(%ebp),%eax
   14cfb:	8b 00                	mov    (%eax),%eax
   14cfd:	89 45 fc             	mov    %eax,-0x4(%ebp)

    // 将first往表尾移1个，跳过刚才移过的那个，如果没有后继，则first=0
    list->first = remove_node->next;
   14d00:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d03:	8b 50 04             	mov    0x4(%eax),%edx
   14d06:	8b 45 08             	mov    0x8(%ebp),%eax
   14d09:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0)
   14d0b:	8b 45 08             	mov    0x8(%ebp),%eax
   14d0e:	8b 00                	mov    (%eax),%eax
   14d10:	85 c0                	test   %eax,%eax
   14d12:	75 0c                	jne    14d20 <list_remove_first+0x44>
    {
        // node为最后一个结点
        list->last = (list_node_t *)0;
   14d14:	8b 45 08             	mov    0x8(%ebp),%eax
   14d17:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14d1e:	eb 0c                	jmp    14d2c <list_remove_first+0x50>
    }
    else
    {
        // 非最后一结点，将后继的前驱清0
        remove_node->next->pre = (list_node_t *)0;
   14d20:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d23:	8b 40 04             	mov    0x4(%eax),%eax
   14d26:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    // 调整node自己，置0，因为没有后继结点
    remove_node->next = remove_node->pre = (list_node_t *)0;
   14d2c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d2f:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   14d35:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d38:	8b 10                	mov    (%eax),%edx
   14d3a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d3d:	89 50 04             	mov    %edx,0x4(%eax)

    // 同时调整计数值
    list->count--;
   14d40:	8b 45 08             	mov    0x8(%ebp),%eax
   14d43:	8b 40 08             	mov    0x8(%eax),%eax
   14d46:	8d 50 ff             	lea    -0x1(%eax),%edx
   14d49:	8b 45 08             	mov    0x8(%ebp),%eax
   14d4c:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   14d4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   14d52:	c9                   	leave  
   14d53:	c3                   	ret    

00014d54 <list_remove>:
/**
 * 移除指定链表的中的表项
 * 不检查node是否在结点中
 */
list_node_t *list_remove(list_t *list, list_node_t *remove_node)
{
   14d54:	55                   	push   %ebp
   14d55:	89 e5                	mov    %esp,%ebp
    // 如果是头，头往前移
    if (remove_node == list->first)
   14d57:	8b 45 08             	mov    0x8(%ebp),%eax
   14d5a:	8b 00                	mov    (%eax),%eax
   14d5c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14d5f:	75 0b                	jne    14d6c <list_remove+0x18>
    {
        list->first = remove_node->next;
   14d61:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d64:	8b 50 04             	mov    0x4(%eax),%edx
   14d67:	8b 45 08             	mov    0x8(%ebp),%eax
   14d6a:	89 10                	mov    %edx,(%eax)
    }

    // 如果是尾，则尾往回移
    if (remove_node == list->last)
   14d6c:	8b 45 08             	mov    0x8(%ebp),%eax
   14d6f:	8b 40 04             	mov    0x4(%eax),%eax
   14d72:	39 45 0c             	cmp    %eax,0xc(%ebp)
   14d75:	75 0b                	jne    14d82 <list_remove+0x2e>
    {
        list->last = remove_node->pre;
   14d77:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d7a:	8b 10                	mov    (%eax),%edx
   14d7c:	8b 45 08             	mov    0x8(%ebp),%eax
   14d7f:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有前，则调整前的后继
    if (remove_node->pre)
   14d82:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d85:	8b 00                	mov    (%eax),%eax
   14d87:	85 c0                	test   %eax,%eax
   14d89:	74 0e                	je     14d99 <list_remove+0x45>
    {
        remove_node->pre->next = remove_node->next;
   14d8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d8e:	8b 00                	mov    (%eax),%eax
   14d90:	8b 55 0c             	mov    0xc(%ebp),%edx
   14d93:	8b 52 04             	mov    0x4(%edx),%edx
   14d96:	89 50 04             	mov    %edx,0x4(%eax)
    }

    // 如果有后，则调整后往前的
    if (remove_node->next)
   14d99:	8b 45 0c             	mov    0xc(%ebp),%eax
   14d9c:	8b 40 04             	mov    0x4(%eax),%eax
   14d9f:	85 c0                	test   %eax,%eax
   14da1:	74 0d                	je     14db0 <list_remove+0x5c>
    {
        remove_node->next->pre = remove_node->pre;
   14da3:	8b 45 0c             	mov    0xc(%ebp),%eax
   14da6:	8b 40 04             	mov    0x4(%eax),%eax
   14da9:	8b 55 0c             	mov    0xc(%ebp),%edx
   14dac:	8b 12                	mov    (%edx),%edx
   14dae:	89 10                	mov    %edx,(%eax)
    }

    // 清空node指向
    remove_node->pre = remove_node->next = (list_node_t *)0;
   14db0:	8b 45 0c             	mov    0xc(%ebp),%eax
   14db3:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   14dba:	8b 45 0c             	mov    0xc(%ebp),%eax
   14dbd:	8b 50 04             	mov    0x4(%eax),%edx
   14dc0:	8b 45 0c             	mov    0xc(%ebp),%eax
   14dc3:	89 10                	mov    %edx,(%eax)
    --list->count;
   14dc5:	8b 45 08             	mov    0x8(%ebp),%eax
   14dc8:	8b 40 08             	mov    0x8(%eax),%eax
   14dcb:	8d 50 ff             	lea    -0x1(%eax),%edx
   14dce:	8b 45 08             	mov    0x8(%ebp),%eax
   14dd1:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   14dd4:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   14dd7:	5d                   	pop    %ebp
   14dd8:	c3                   	ret    

00014dd9 <log_init>:
#define COM1_PORT 0x3F8 // RS232端口0初始化

static mutex_t mutex;

void log_init(void)
{
   14dd9:	55                   	push   %ebp
   14dda:	89 e5                	mov    %esp,%ebp
    outb(COM1_PORT + 1, 0x00); //                  (hi byte)
    outb(COM1_PORT + 3, 0x03); // 8 bits, no parity, one stop bit
    outb(COM1_PORT + 2, 0xC7); // Enable FIFO, clear them, with 14-byte threshold
    mutex_init(&mutex);
#endif
}
   14ddc:	90                   	nop
   14ddd:	5d                   	pop    %ebp
   14dde:	c3                   	ret    

00014ddf <log_printf>:

void log_printf(const char *fmt, ...)
{
   14ddf:	55                   	push   %ebp
   14de0:	89 e5                	mov    %esp,%ebp
   14de2:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;
    kernel_memset(str_buf, '\0', sizeof(str_buf));
   14de8:	83 ec 04             	sub    $0x4,%esp
   14deb:	68 80 00 00 00       	push   $0x80
   14df0:	6a 00                	push   $0x0
   14df2:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   14df8:	50                   	push   %eax
   14df9:	e8 11 fa ff ff       	call   1480f <kernel_memset>
   14dfe:	83 c4 10             	add    $0x10,%esp
    va_start(args, fmt);
   14e01:	8d 45 0c             	lea    0xc(%ebp),%eax
   14e04:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   14e0a:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   14e10:	83 ec 04             	sub    $0x4,%esp
   14e13:	50                   	push   %eax
   14e14:	ff 75 08             	pushl  0x8(%ebp)
   14e17:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   14e1d:	50                   	push   %eax
   14e1e:	e8 ca fb ff ff       	call   149ed <kernel_vsprintf>
   14e23:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    // 临界区进入
    // irq_state_t state = irq_enter_protection();
    mutex_lock(&mutex);
   14e26:	83 ec 0c             	sub    $0xc,%esp
   14e29:	68 84 c0 03 00       	push   $0x3c084
   14e2e:	e8 3c f3 ff ff       	call   1416f <mutex_lock>
   14e33:	83 c4 10             	add    $0x10,%esp
    }
    // 增加默认换行
    outb(COM1_PORT, '\r'); // 行号不变，列号归零
    outb(COM1_PORT, '\n'); // 列号不变，行号+1
#else
    console_write(0, str_buf, kernel_strlen(str_buf));
   14e36:	83 ec 0c             	sub    $0xc,%esp
   14e39:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   14e3f:	50                   	push   %eax
   14e40:	e8 40 f9 ff ff       	call   14785 <kernel_strlen>
   14e45:	83 c4 10             	add    $0x10,%esp
   14e48:	83 ec 04             	sub    $0x4,%esp
   14e4b:	50                   	push   %eax
   14e4c:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   14e52:	50                   	push   %eax
   14e53:	6a 00                	push   $0x0
   14e55:	e8 48 e9 ff ff       	call   137a2 <console_write>
   14e5a:	83 c4 10             	add    $0x10,%esp
    char c = '\n';
   14e5d:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    console_write(0, &c, 1);
   14e64:	83 ec 04             	sub    $0x4,%esp
   14e67:	6a 01                	push   $0x1
   14e69:	8d 85 73 ff ff ff    	lea    -0x8d(%ebp),%eax
   14e6f:	50                   	push   %eax
   14e70:	6a 00                	push   $0x0
   14e72:	e8 2b e9 ff ff       	call   137a2 <console_write>
   14e77:	83 c4 10             	add    $0x10,%esp
#endif
    // irq_leave_protection(state); // 临界区退出
    mutex_unlock(&mutex);
   14e7a:	83 ec 0c             	sub    $0xc,%esp
   14e7d:	68 84 c0 03 00       	push   $0x3c084
   14e82:	e8 7c f3 ff ff       	call   14203 <mutex_unlock>
   14e87:	83 c4 10             	add    $0x10,%esp
   14e8a:	90                   	nop
   14e8b:	c9                   	leave  
   14e8c:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    // 需要重新加载各数据段
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:
#include "tools/log.h"
#include "core/task.h"
#include "applib/lib_syscall.h"

int first_task_main(void)
{
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
    int count = 3;
80000016:	c7 45 f4 03 00 00 00 	movl   $0x3,-0xc(%ebp)

    int pid = getpid();
8000001d:	e8 46 01 00 00       	call   80000168 <getpid>
80000022:	89 45 f0             	mov    %eax,-0x10(%ebp)
    pid = fork();
80000025:	e8 81 01 00 00       	call   800001ab <fork>
8000002a:	89 45 f0             	mov    %eax,-0x10(%ebp)
    print_msg("First task id=%d", pid);
8000002d:	83 ec 08             	sub    $0x8,%esp
80000030:	ff 75 f0             	pushl  -0x10(%ebp)
80000033:	68 40 5c 01 00       	push   $0x15c40
80000038:	e8 46 01 00 00       	call   80000183 <print_msg>
8000003d:	83 c4 10             	add    $0x10,%esp
    if (pid < 0)
80000040:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000044:	79 14                	jns    8000005a <first_task_main+0x4a>
    {
        print_msg("create task failed\n", 0);
80000046:	83 ec 08             	sub    $0x8,%esp
80000049:	6a 00                	push   $0x0
8000004b:	68 51 5c 01 00       	push   $0x15c51
80000050:	e8 2e 01 00 00       	call   80000183 <print_msg>
80000055:	83 c4 10             	add    $0x10,%esp
80000058:	eb 73                	jmp    800000cd <first_task_main+0xbd>
    }
    else if (pid == 0)
8000005a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000005e:	75 47                	jne    800000a7 <first_task_main+0x97>
    {
        print_msg("child: %d\n", count);
80000060:	83 ec 08             	sub    $0x8,%esp
80000063:	ff 75 f4             	pushl  -0xc(%ebp)
80000066:	68 65 5c 01 00       	push   $0x15c65
8000006b:	e8 13 01 00 00       	call   80000183 <print_msg>
80000070:	83 c4 10             	add    $0x10,%esp
        char *argv[] = {"arg0", "arg1", "arg2", "arg3"};
80000073:	c7 45 e0 70 5c 01 00 	movl   $0x15c70,-0x20(%ebp)
8000007a:	c7 45 e4 75 5c 01 00 	movl   $0x15c75,-0x1c(%ebp)
80000081:	c7 45 e8 7a 5c 01 00 	movl   $0x15c7a,-0x18(%ebp)
80000088:	c7 45 ec 7f 5c 01 00 	movl   $0x15c7f,-0x14(%ebp)
        execve("/shell.elf", argv, (char **)0);
8000008f:	83 ec 04             	sub    $0x4,%esp
80000092:	6a 00                	push   $0x0
80000094:	8d 45 e0             	lea    -0x20(%ebp),%eax
80000097:	50                   	push   %eax
80000098:	68 84 5c 01 00       	push   $0x15c84
8000009d:	e8 24 01 00 00       	call   800001c6 <execve>
800000a2:	83 c4 10             	add    $0x10,%esp
800000a5:	eb 26                	jmp    800000cd <first_task_main+0xbd>
    }
    else
    {
        print_msg("child task id=%d\n", pid);
800000a7:	83 ec 08             	sub    $0x8,%esp
800000aa:	ff 75 f0             	pushl  -0x10(%ebp)
800000ad:	68 8f 5c 01 00       	push   $0x15c8f
800000b2:	e8 cc 00 00 00       	call   80000183 <print_msg>
800000b7:	83 c4 10             	add    $0x10,%esp
        print_msg("parent: %d\n", count);
800000ba:	83 ec 08             	sub    $0x8,%esp
800000bd:	ff 75 f4             	pushl  -0xc(%ebp)
800000c0:	68 a1 5c 01 00       	push   $0x15ca1
800000c5:	e8 b9 00 00 00       	call   80000183 <print_msg>
800000ca:	83 c4 10             	add    $0x10,%esp
    }

    for (;;)
    {
        print_msg("task id=%d", pid);
800000cd:	83 ec 08             	sub    $0x8,%esp
800000d0:	ff 75 f0             	pushl  -0x10(%ebp)
800000d3:	68 ad 5c 01 00       	push   $0x15cad
800000d8:	e8 a6 00 00 00       	call   80000183 <print_msg>
800000dd:	83 c4 10             	add    $0x10,%esp
        // log_printf("first task.");
        // sys_msleep(1000);
        msleep(1000);
800000e0:	83 ec 0c             	sub    $0xc,%esp
800000e3:	68 e8 03 00 00       	push   $0x3e8
800000e8:	e8 51 00 00 00       	call   8000013e <msleep>
800000ed:	83 c4 10             	add    $0x10,%esp
        print_msg("task id=%d", pid);
800000f0:	eb db                	jmp    800000cd <first_task_main+0xbd>

800000f2 <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
800000f2:	55                   	push   %ebp
800000f3:	89 e5                	mov    %esp,%ebp
800000f5:	57                   	push   %edi
800000f6:	56                   	push   %esi
800000f7:	53                   	push   %ebx
800000f8:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
800000fb:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
80000102:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
80000109:	8b 45 08             	mov    0x8(%ebp),%eax
8000010c:	8b 40 10             	mov    0x10(%eax),%eax
8000010f:	8b 55 08             	mov    0x8(%ebp),%edx
80000112:	8b 52 0c             	mov    0xc(%edx),%edx
80000115:	8b 4d 08             	mov    0x8(%ebp),%ecx
80000118:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
8000011b:	8b 5d 08             	mov    0x8(%ebp),%ebx
8000011e:	8b 5b 04             	mov    0x4(%ebx),%ebx
80000121:	8b 75 08             	mov    0x8(%ebp),%esi
80000124:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000126:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000129:	50                   	push   %eax
8000012a:	52                   	push   %edx
8000012b:	51                   	push   %ecx
8000012c:	53                   	push   %ebx
8000012d:	56                   	push   %esi
8000012e:	ff 1f                	lcall  *(%edi)
80000130:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
80000133:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000136:	83 c4 10             	add    $0x10,%esp
80000139:	5b                   	pop    %ebx
8000013a:	5e                   	pop    %esi
8000013b:	5f                   	pop    %edi
8000013c:	5d                   	pop    %ebp
8000013d:	c3                   	ret    

8000013e <msleep>:

int msleep(int ms)
{
8000013e:	55                   	push   %ebp
8000013f:	89 e5                	mov    %esp,%ebp
80000141:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
80000144:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000148:	7e 1b                	jle    80000165 <msleep+0x27>
    {
        return;
    }

    syscall_args_t args;
    args.id = SYS_msleep;
8000014a:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000151:	8b 45 08             	mov    0x8(%ebp),%eax
80000154:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000157:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000015a:	50                   	push   %eax
8000015b:	e8 92 ff ff ff       	call   800000f2 <sys_call>
80000160:	83 c4 04             	add    $0x4,%esp
80000163:	eb 01                	jmp    80000166 <msleep+0x28>
        return;
80000165:	90                   	nop
}
80000166:	c9                   	leave  
80000167:	c3                   	ret    

80000168 <getpid>:

int getpid(void)
{
80000168:	55                   	push   %ebp
80000169:	89 e5                	mov    %esp,%ebp
8000016b:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000016e:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000175:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000178:	50                   	push   %eax
80000179:	e8 74 ff ff ff       	call   800000f2 <sys_call>
8000017e:	83 c4 04             	add    $0x4,%esp
}
80000181:	c9                   	leave  
80000182:	c3                   	ret    

80000183 <print_msg>:

void print_msg(const char *fmt, int arg)
{
80000183:	55                   	push   %ebp
80000184:	89 e5                	mov    %esp,%ebp
80000186:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000189:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
80000190:	8b 45 08             	mov    0x8(%ebp),%eax
80000193:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000196:	8b 45 0c             	mov    0xc(%ebp),%eax
80000199:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
8000019c:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000019f:	50                   	push   %eax
800001a0:	e8 4d ff ff ff       	call   800000f2 <sys_call>
800001a5:	83 c4 04             	add    $0x4,%esp
}
800001a8:	90                   	nop
800001a9:	c9                   	leave  
800001aa:	c3                   	ret    

800001ab <fork>:

int fork(void)
{
800001ab:	55                   	push   %ebp
800001ac:	89 e5                	mov    %esp,%ebp
800001ae:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
800001b1:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
800001b8:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001bb:	50                   	push   %eax
800001bc:	e8 31 ff ff ff       	call   800000f2 <sys_call>
800001c1:	83 c4 04             	add    $0x4,%esp
}
800001c4:	c9                   	leave  
800001c5:	c3                   	ret    

800001c6 <execve>:

int execve(const char *name, char *const *argv, char *const *env)
{
800001c6:	55                   	push   %ebp
800001c7:	89 e5                	mov    %esp,%ebp
800001c9:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001cc:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001d3:	8b 45 08             	mov    0x8(%ebp),%eax
800001d6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001d9:	8b 45 0c             	mov    0xc(%ebp),%eax
800001dc:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001df:	8b 45 10             	mov    0x10(%ebp),%eax
800001e2:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001e5:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e8:	50                   	push   %eax
800001e9:	e8 04 ff ff ff       	call   800000f2 <sys_call>
800001ee:	83 c4 04             	add    $0x4,%esp
}
800001f1:	c9                   	leave  
800001f2:	c3                   	ret    

800001f3 <yield>:

int yield(void)
{
800001f3:	55                   	push   %ebp
800001f4:	89 e5                	mov    %esp,%ebp
800001f6:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001f9:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
80000200:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000203:	50                   	push   %eax
80000204:	e8 e9 fe ff ff       	call   800000f2 <sys_call>
80000209:	83 c4 04             	add    $0x4,%esp
}
8000020c:	c9                   	leave  
8000020d:	c3                   	ret    

8000020e <open>:

int open(const char *name, int flags, ...)
{
8000020e:	55                   	push   %ebp
8000020f:	89 e5                	mov    %esp,%ebp
80000211:	83 ec 20             	sub    $0x20,%esp
    // 不考虑支持太多参数
    syscall_args_t args;
    args.id = SYS_open;
80000214:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8000021b:	8b 45 08             	mov    0x8(%ebp),%eax
8000021e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
80000221:	8b 45 0c             	mov    0xc(%ebp),%eax
80000224:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000227:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000022a:	50                   	push   %eax
8000022b:	e8 c2 fe ff ff       	call   800000f2 <sys_call>
80000230:	83 c4 04             	add    $0x4,%esp
}
80000233:	c9                   	leave  
80000234:	c3                   	ret    

80000235 <read>:

int read(int file, char *ptr, int len)
{
80000235:	55                   	push   %ebp
80000236:	89 e5                	mov    %esp,%ebp
80000238:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000023b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000242:	8b 45 08             	mov    0x8(%ebp),%eax
80000245:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000248:	8b 45 0c             	mov    0xc(%ebp),%eax
8000024b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000024e:	8b 45 10             	mov    0x10(%ebp),%eax
80000251:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000254:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000257:	50                   	push   %eax
80000258:	e8 95 fe ff ff       	call   800000f2 <sys_call>
8000025d:	83 c4 04             	add    $0x4,%esp
}
80000260:	c9                   	leave  
80000261:	c3                   	ret    

80000262 <write>:

int write(int file, char *ptr, int len)
{
80000262:	55                   	push   %ebp
80000263:	89 e5                	mov    %esp,%ebp
80000265:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000268:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000026f:	8b 45 08             	mov    0x8(%ebp),%eax
80000272:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000275:	8b 45 0c             	mov    0xc(%ebp),%eax
80000278:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000027b:	8b 45 10             	mov    0x10(%ebp),%eax
8000027e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000281:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000284:	50                   	push   %eax
80000285:	e8 68 fe ff ff       	call   800000f2 <sys_call>
8000028a:	83 c4 04             	add    $0x4,%esp
}
8000028d:	c9                   	leave  
8000028e:	c3                   	ret    

8000028f <close>:

int close(int file)
{
8000028f:	55                   	push   %ebp
80000290:	89 e5                	mov    %esp,%ebp
80000292:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
80000295:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
8000029c:	8b 45 08             	mov    0x8(%ebp),%eax
8000029f:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002a2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002a5:	50                   	push   %eax
800002a6:	e8 47 fe ff ff       	call   800000f2 <sys_call>
800002ab:	83 c4 04             	add    $0x4,%esp
}
800002ae:	c9                   	leave  
800002af:	c3                   	ret    

800002b0 <lseek>:

int lseek(int file, int ptr, int dir)
{
800002b0:	55                   	push   %ebp
800002b1:	89 e5                	mov    %esp,%ebp
800002b3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002b6:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002bd:	8b 45 08             	mov    0x8(%ebp),%eax
800002c0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002c3:	8b 45 0c             	mov    0xc(%ebp),%eax
800002c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002c9:	8b 45 10             	mov    0x10(%ebp),%eax
800002cc:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002cf:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002d2:	50                   	push   %eax
800002d3:	e8 1a fe ff ff       	call   800000f2 <sys_call>
800002d8:	83 c4 04             	add    $0x4,%esp
}
800002db:	c9                   	leave  
800002dc:	c3                   	ret    

800002dd <fstat>:

/**
 * 获取文件的状态
 */
int fstat(int file, struct stat *st)
{
800002dd:	55                   	push   %ebp
800002de:	89 e5                	mov    %esp,%ebp
800002e0:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
800002e3:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
800002ea:	8b 45 08             	mov    0x8(%ebp),%eax
800002ed:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
800002f0:	8b 45 0c             	mov    0xc(%ebp),%eax
800002f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
800002f6:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f9:	50                   	push   %eax
800002fa:	e8 f3 fd ff ff       	call   800000f2 <sys_call>
800002ff:	83 c4 04             	add    $0x4,%esp
}
80000302:	c9                   	leave  
80000303:	c3                   	ret    

80000304 <isatty>:

/**
 * 判断文件描述符与tty关联
 */
int isatty(int file)
{
80000304:	55                   	push   %ebp
80000305:	89 e5                	mov    %esp,%ebp
80000307:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000030a:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
80000311:	8b 45 08             	mov    0x8(%ebp),%eax
80000314:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000317:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000031a:	50                   	push   %eax
8000031b:	e8 d2 fd ff ff       	call   800000f2 <sys_call>
80000320:	83 c4 04             	add    $0x4,%esp
}
80000323:	c9                   	leave  
80000324:	c3                   	ret    

80000325 <sbrk>:

void *sbrk(ptrdiff_t incr)
{
80000325:	55                   	push   %ebp
80000326:	89 e5                	mov    %esp,%ebp
80000328:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000032b:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
80000332:	8b 45 08             	mov    0x8(%ebp),%eax
80000335:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000338:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033b:	50                   	push   %eax
8000033c:	e8 b1 fd ff ff       	call   800000f2 <sys_call>
80000341:	83 c4 04             	add    $0x4,%esp
80000344:	c9                   	leave  
80000345:	c3                   	ret    
