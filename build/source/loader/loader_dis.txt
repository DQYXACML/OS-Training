
C:/diy-x86os-master/start/start/build/source/loader/loader.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000700 memsz 0x00000700 flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00002000 memsz 0x00002054 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006b8  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000048  000086b8  000086b8  000016b8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00002000  00009000  00009000  00002000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000b000  0000b000  00004000  2**5
                  ALLOC
  4 .comment      00000011  00000000  00000000  00004000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00004018  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009c9  00000000  00000000  00004078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000362  00000000  00000000  00004a41  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000352  00000000  00000000  00004da3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000320  00000000  00000000  000050f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000044a  00000000  00000000  00005418  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00005862  2**0
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00008000 l    d  .text	00000000 .text
000086b8 l    d  .rodata	00000000 .rodata
00009000 l    d  .data	00000000 .data
0000b000 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000002a inb
00008042 l     F .text	0000002d outb
0000806f l     F .text	0000000b cli
0000807a l     F .text	00000036 lgdt
000080b0 l     F .text	0000001a read_cr0
000080ca l     F .text	00000012 write_cr0
000080dc l     F .text	0000002b far_jump
00008107 l     F .text	0000003b show_msg
00008142 l     F .text	00000139 detect_memory
0000827b l     F .text	00000096 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008334 l     F .text	0000001d inb
00008351 l     F .text	0000001f inw
00008370 l     F .text	0000001f outb
0000838f l     F .text	00000011 read_cr0
000083a0 l     F .text	0000000c write_cr0
000083ac l     F .text	0000000c write_cr3
000083b8 l     F .text	00000011 read_cr4
000083c9 l     F .text	0000000c write_cr4
000083d5 l     F .text	0000012f read_disk
00008504 l     F .text	0000011a reload_elf_file
0000861e l     F .text	00000005 die
0000a000 l     O .data	00001000 page_dir.1897
00008311 g     F .text	00000023 loader_entry
00009000 g     O .data	00000018 gdt_table
00008667 g     F .text	00000051 load_kernel
00008623 g     F .text	00000044 enable_page_mode
0000b000 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000b000 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000b000 g       .data	00000000 _edata
0000b054 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
  	.code16
 	.text
	.global _start
	.extern loader_entry
_start:
	jmp loader_entry
    8000:	e9 0e 03             	jmp    8311 <loader_entry>

00008003 <protect_mode_entry>:
	.code32
	.text
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %ss
    8009:	8e d0                	mov    %ax,%ss
	mov %ax, %es
    800b:	8e c0                	mov    %ax,%es
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
    8011:	ea 67 86 00 00       	ljmp   $0x0,$0x8667
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <inb>:
#define CPU_INSTR_H

#include "comm/types.h"

static inline uint8_t inb(uint16_t port)
{
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    801d:	66 83 ec 14          	sub    $0x14,%esp
    8021:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8026:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;

    // inb al, dx
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
    802a:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    8030:	66 89 c2             	mov    %eax,%edx
    8033:	ec                   	in     (%dx),%al
    8034:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8038:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    803e:	66 c9                	leavel 
    8040:	66 c3                	retl   

00008042 <outb>:
    __asm__ __volatile__("in %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
    return rv;
}

static inline void outb(uint16_t port, uint8_t data)
{
    8042:	66 55                	push   %ebp
    8044:	66 89 e5             	mov    %esp,%ebp
    8047:	66 83 ec 08          	sub    $0x8,%esp
    804b:	67 66 8b 55 08       	mov    0x8(%ebp),%edx
    8050:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    8055:	67 89 55 fc          	mov    %dx,-0x4(%ebp)
    8059:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
    805d:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8063:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8069:	ee                   	out    %al,(%dx)
}
    806a:	90                   	nop
    806b:	66 c9                	leavel 
    806d:	66 c3                	retl   

0000806f <cli>:

static inline void cli(void)
{
    806f:	66 55                	push   %ebp
    8071:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    8074:	fa                   	cli    
}
    8075:	90                   	nop
    8076:	66 5d                	pop    %ebp
    8078:	66 c3                	retl   

0000807a <lgdt>:
{
    __asm__ __volatile__("sti");
}

static inline void lgdt(uint32_t start, uint32_t size)
{
    807a:	66 55                	push   %ebp
    807c:	66 89 e5             	mov    %esp,%ebp
    807f:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16;
    } gdt;

    gdt.start31_16 = start >> 16;
    8083:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8088:	66 c1 e8 10          	shr    $0x10,%eax
    808c:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0 = start & 0xFFFF;
    8090:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8095:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit = size - 1;
    8099:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    809e:	66 83 e8 01          	sub    $0x1,%eax
    80a2:	67 89 45 fa          	mov    %ax,-0x6(%ebp)
    __asm__ __volatile__("lgdt %[g]" ::[g] "m"(gdt));
    80a6:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ab:	90                   	nop
    80ac:	66 c9                	leavel 
    80ae:	66 c3                	retl   

000080b0 <read_cr0>:
    idt.limit = size - 1;
    __asm__ __volatile__("lidt %[g]" ::[g] "m"(idt));
}

static inline uint16_t read_cr0(void)
{
    80b0:	66 55                	push   %ebp
    80b2:	66 89 e5             	mov    %esp,%ebp
    80b5:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile__("mov %%cr0, %[v]" : [v] "=r"(cr0));
    80b9:	0f 20 c0             	mov    %cr0,%eax
    80bc:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c1:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c6:	66 c9                	leavel 
    80c8:	66 c3                	retl   

000080ca <write_cr0>:

static inline void write_cr0(uint32_t v)
{
    80ca:	66 55                	push   %ebp
    80cc:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr0" ::[v] "r"(v));
    80cf:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d4:	0f 22 c0             	mov    %eax,%cr0
}
    80d7:	90                   	nop
    80d8:	66 5d                	pop    %ebp
    80da:	66 c3                	retl   

000080dc <far_jump>:
{
    __asm__ __volatile__("mov %[v], %%cr4" ::[v] "r"(v));
}

static inline void far_jump(uint32_t selector, uint32_t offset)
{
    80dc:	66 55                	push   %ebp
    80de:	66 89 e5             	mov    %esp,%ebp
    80e1:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t addr[] = {offset, selector};
    80e5:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ea:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80ef:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f4:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])" ::[a] "r"(addr));
    80f9:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    80fe:	67 66 ff 28          	ljmpl  *(%eax)
}
    8102:	90                   	nop
    8103:	66 c9                	leavel 
    8105:	66 c3                	retl   

00008107 <show_msg>:

boot_info_t boot_info;

static void
show_msg(const char *msg)
{
    8107:	66 55                	push   %ebp
    8109:	66 89 e5             	mov    %esp,%ebp
    810c:	66 83 ec 10          	sub    $0x10,%esp
    char c;
    while ((c = *msg++) != '\0')
    8110:	eb 0c                	jmp    811e <show_msg+0x17>
    {
        __asm__ __volatile__(
    8112:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    8118:	b4 0e                	mov    $0xe,%ah
    811a:	88 c0                	mov    %al,%al
    811c:	cd 10                	int    $0x10
    while ((c = *msg++) != '\0')
    811e:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8123:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    8128:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    812d:	67 66 0f b6 00       	movzbl (%eax),%eax
    8132:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8136:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813b:	75 d5                	jne    8112 <show_msg+0xb>
            "mov $0xe, %%ah\n\t"
            "mov %[ch], %%al\n\t"
            "int $0x10" ::[ch] "r"(c));
    }
}
    813d:	90                   	nop
    813e:	66 c9                	leavel 
    8140:	66 c3                	retl   

00008142 <detect_memory>:

static void detect_memory(void)
{
    8142:	66 55                	push   %ebp
    8144:	66 89 e5             	mov    %esp,%ebp
    8147:	66 57                	push   %edi
    8149:	66 56                	push   %esi
    814b:	66 53                	push   %ebx
    814d:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contID = 0;
    8151:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    8158:	00 00 
    uint32_t signature, bytes;
    SMAP_entry_t smap_entry;
    show_msg("tyr to detect memory\r\n");
    815a:	66 68 b8 86 00 00    	pushl  $0x86b8
    8160:	66 e8 a1 ff ff ff    	calll  8107 <show_msg>
    8166:	66 83 c4 04          	add    $0x4,%esp
    boot_info.ram_region_count = 0;
    816a:	66 c7 06 50 b0 00 00 	movl   $0x0,-0x4fb0
    8171:	00 00 
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++)
    8173:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817a:	00 00 
    817c:	e9 d0 00             	jmp    824f <detect_memory+0x10d>
    {
        SMAP_entry_t *entry = &smap_entry;
    817f:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8184:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)
        __asm__ __volatile__("int $0x15"
    8189:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    818f:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8194:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819a:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a0:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a5:	66 89 f7             	mov    %esi,%edi
    81a8:	cd 15                	int    $0x15
    81aa:	66 89 da             	mov    %ebx,%edx
    81ad:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b2:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81b7:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
                             : "=a"(signature), "=c"(bytes), "=b"(contID)
                             : "a"(0xE820), "b"(contID), "c"(24), "d"(0x534D4150), "D"(entry));
        if (signature != 0x534D4150)
    81bc:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c3:	4d 53 
    81c5:	74 13                	je     81da <detect_memory+0x98>
        {
            show_msg("failed\r\n");
    81c7:	66 68 cf 86 00 00    	pushl  $0x86cf
    81cd:	66 e8 34 ff ff ff    	calll  8107 <show_msg>
    81d3:	66 83 c4 04          	add    $0x4,%esp
            return;
    81d7:	e9 92 00             	jmp    826c <detect_memory+0x12a>
        }
        if (bytes > 20 && (entry->ACPI & 0x0001) == 0)
    81da:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e0:	76 13                	jbe    81f5 <detect_memory+0xb3>
    81e2:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81e7:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81ec:	66 83 e0 01          	and    $0x1,%eax
    81f0:	66 85 c0             	test   %eax,%eax
    81f3:	74 53                	je     8248 <detect_memory+0x106>
        {
            continue;
        }
        if (entry->Type == 1)
    81f5:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fa:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    81ff:	66 83 f8 01          	cmp    $0x1,%eax
    8203:	75 39                	jne    823e <detect_memory+0xfc>
        {
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;
    8205:	66 a1 50 b0          	mov    0xb050,%eax
    8209:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    820e:	67 66 8b 12          	mov    (%edx),%edx
    8212:	67 66 89 14 c5 00 b0 	mov    %edx,0xb000(,%eax,8)
    8219:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL;
    821b:	66 a1 50 b0          	mov    0xb050,%eax
    821f:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8224:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    8229:	67 66 89 14 c5 04 b0 	mov    %edx,0xb004(,%eax,8)
    8230:	00 00 
            boot_info.ram_region_count++;
    8232:	66 a1 50 b0          	mov    0xb050,%eax
    8236:	66 83 c0 01          	add    $0x1,%eax
    823a:	66 a3 50 b0          	mov    %eax,0xb050
        }
        if (contID == 0)
    823e:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8244:	74 15                	je     825b <detect_memory+0x119>
    8246:	eb 01                	jmp    8249 <detect_memory+0x107>
            continue;
    8248:	90                   	nop
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++)
    8249:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    824f:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8255:	0f 8e 26 ff          	jle    817f <detect_memory+0x3d>
    8259:	eb 01                	jmp    825c <detect_memory+0x11a>
        {
            break;
    825b:	90                   	nop
        }
    }
    show_msg("detect_memory done.\r\n");
    825c:	66 68 d8 86 00 00    	pushl  $0x86d8
    8262:	66 e8 9f fe ff ff    	calll  8107 <show_msg>
    8268:	66 83 c4 04          	add    $0x4,%esp
}
    826c:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8271:	66 5b                	pop    %ebx
    8273:	66 5e                	pop    %esi
    8275:	66 5f                	pop    %edi
    8277:	66 5d                	pop    %ebp
    8279:	66 c3                	retl   

0000827b <enter_protect_mode>:
    {0xFFFF, 0x0000, 0x9a00, 0x00cf},
    {0xFFFF, 0x0000, 0x9200, 0x00cf}};

// 从实模式进入保护模式
static void enter_protect_mode(void)
{
    827b:	66 55                	push   %ebp
    827d:	66 89 e5             	mov    %esp,%ebp
    8280:	66 83 ec 10          	sub    $0x10,%esp
    // 关中断
    cli();
    8284:	66 e8 e5 fd ff ff    	calll  806f <cli>
    // 打开A20地址线
    uint8_t v = inb(0x92);
    828a:	66 68 92 00 00 00    	pushl  $0x92
    8290:	66 e8 82 fd ff ff    	calll  8018 <inb>
    8296:	66 83 c4 04          	add    $0x4,%esp
    829a:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    829e:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a4:	66 83 c8 02          	or     $0x2,%eax
    82a8:	66 0f b6 c0          	movzbl %al,%eax
    82ac:	66 50                	push   %eax
    82ae:	66 68 92 00 00 00    	pushl  $0x92
    82b4:	66 e8 88 fd ff ff    	calll  8042 <outb>
    82ba:	66 83 c4 08          	add    $0x8,%esp

    // 加载gdt表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82be:	66 b8 00 90 00 00    	mov    $0x9000,%eax
    82c4:	66 6a 18             	pushl  $0x18
    82c7:	66 50                	push   %eax
    82c9:	66 e8 ab fd ff ff    	calll  807a <lgdt>
    82cf:	66 83 c4 08          	add    $0x8,%esp

    // 打开保护模式的使能位 设置CR0
    uint32_t cr0 = read_cr0();
    82d3:	66 e8 d7 fd ff ff    	calll  80b0 <read_cr0>
    82d9:	66 0f b7 c0          	movzwl %ax,%eax
    82dd:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e2:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e7:	66 83 c8 01          	or     $0x1,%eax
    82eb:	66 50                	push   %eax
    82ed:	66 e8 d7 fd ff ff    	calll  80ca <write_cr0>
    82f3:	66 83 c4 04          	add    $0x4,%esp

    // 远跳转，清空流水线，跳转到32位代码执行
    far_jump(8, (uint32_t)protect_mode_entry);
    82f7:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 6a 08             	pushl  $0x8
    8302:	66 e8 d4 fd ff ff    	calll  80dc <far_jump>
    8308:	66 83 c4 08          	add    $0x8,%esp
}
    830c:	90                   	nop
    830d:	66 c9                	leavel 
    830f:	66 c3                	retl   

00008311 <loader_entry>:

void loader_entry(void)
{
    8311:	66 55                	push   %ebp
    8313:	66 89 e5             	mov    %esp,%ebp
    show_msg("....loading....\n\r");
    8316:	66 68 ee 86 00 00    	pushl  $0x86ee
    831c:	66 e8 e5 fd ff ff    	calll  8107 <show_msg>
    8322:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8326:	66 e8 16 fe ff ff    	calll  8142 <detect_memory>
    enter_protect_mode();
    832c:	66 e8 49 ff ff ff    	calll  827b <enter_protect_mode>
    for (;;)
    8332:	eb fe                	jmp    8332 <loader_entry+0x21>

00008334 <inb>:
{
    8334:	55                   	push   %bp
    8335:	89 e5                	mov    %sp,%bp
    8337:	83 ec 14             	sub    $0x14,%sp
    833a:	8b 45 08             	mov    0x8(%di),%ax
    833d:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("inb %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
    8341:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8345:	89 c2                	mov    %ax,%dx
    8347:	ec                   	in     (%dx),%al
    8348:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    834b:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    834f:	c9                   	leave  
    8350:	c3                   	ret    

00008351 <inw>:
{
    8351:	55                   	push   %bp
    8352:	89 e5                	mov    %sp,%bp
    8354:	83 ec 14             	sub    $0x14,%sp
    8357:	8b 45 08             	mov    0x8(%di),%ax
    835a:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("in %[p], %[v]" : [v] "=a"(rv) : [p] "d"(port));
    835e:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8362:	89 c2                	mov    %ax,%dx
    8364:	66 ed                	in     (%dx),%eax
    8366:	66 89 45 fe          	mov    %eax,-0x2(%di)
    return rv;
    836a:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    836e:	c9                   	leave  
    836f:	c3                   	ret    

00008370 <outb>:
{
    8370:	55                   	push   %bp
    8371:	89 e5                	mov    %sp,%bp
    8373:	83 ec 08             	sub    $0x8,%sp
    8376:	8b 55 08             	mov    0x8(%di),%dx
    8379:	8b 45 0c             	mov    0xc(%di),%ax
    837c:	66 89 55 fc          	mov    %edx,-0x4(%di)
    8380:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v], %[p]" ::[p] "d"(port), [v] "a"(data));
    8383:	0f b7 55 fc          	movzww -0x4(%di),%dx
    8387:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    838b:	ee                   	out    %al,(%dx)
}
    838c:	90                   	nop
    838d:	c9                   	leave  
    838e:	c3                   	ret    

0000838f <read_cr0>:
{
    838f:	55                   	push   %bp
    8390:	89 e5                	mov    %sp,%bp
    8392:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile__("mov %%cr0, %[v]" : [v] "=r"(cr0));
    8395:	0f 20 c0             	mov    %cr0,%eax
    8398:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr0;
    839b:	8b 45 fc             	mov    -0x4(%di),%ax
}
    839e:	c9                   	leave  
    839f:	c3                   	ret    

000083a0 <write_cr0>:
{
    83a0:	55                   	push   %bp
    83a1:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr0" ::[v] "r"(v));
    83a3:	8b 45 08             	mov    0x8(%di),%ax
    83a6:	0f 22 c0             	mov    %eax,%cr0
}
    83a9:	90                   	nop
    83aa:	5d                   	pop    %bp
    83ab:	c3                   	ret    

000083ac <write_cr3>:
{
    83ac:	55                   	push   %bp
    83ad:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr3" ::[v] "r"(v));
    83af:	8b 45 08             	mov    0x8(%di),%ax
    83b2:	0f 22 d8             	mov    %eax,%cr3
}
    83b5:	90                   	nop
    83b6:	5d                   	pop    %bp
    83b7:	c3                   	ret    

000083b8 <read_cr4>:
{
    83b8:	55                   	push   %bp
    83b9:	89 e5                	mov    %sp,%bp
    83bb:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile__("mov %%cr4, %[v]" : [v] "=r"(cr4));
    83be:	0f 20 e0             	mov    %cr4,%eax
    83c1:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr4;
    83c4:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83c7:	c9                   	leave  
    83c8:	c3                   	ret    

000083c9 <write_cr4>:
{
    83c9:	55                   	push   %bp
    83ca:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr4" ::[v] "r"(v));
    83cc:	8b 45 08             	mov    0x8(%di),%ax
    83cf:	0f 22 e0             	mov    %eax,%cr4
}
    83d2:	90                   	nop
    83d3:	5d                   	pop    %bp
    83d4:	c3                   	ret    

000083d5 <read_disk>:

#include "loader.h"
#include "comm/elf.h"

static void read_disk(int sector, int sector_count, uint8_t *buf)
{
    83d5:	55                   	push   %bp
    83d6:	89 e5                	mov    %sp,%bp
    83d8:	53                   	push   %bx
    83d9:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t)(0xE0)); // 选择磁盘
    83dc:	68 e0 00             	push   $0xe0
    83df:	00 00                	add    %al,(%bx,%si)
    83e1:	68 f6 01             	push   $0x1f6
    83e4:	00 00                	add    %al,(%bx,%si)
    83e6:	e8 85 ff             	call   836e <inw+0x1d>
    83e9:	ff                   	(bad)  
    83ea:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F2, (uint8_t)(sector_count >> 8));
    83ee:	8b 45 0c             	mov    0xc(%di),%ax
    83f1:	c1 f8 08             	sar    $0x8,%ax
    83f4:	0f b6 c0             	movzbw %al,%ax
    83f7:	50                   	push   %ax
    83f8:	68 f2 01             	push   $0x1f2
    83fb:	00 00                	add    %al,(%bx,%si)
    83fd:	e8 6e ff             	call   836e <inw+0x1d>
    8400:	ff                   	(bad)  
    8401:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t)(sector >> 24));
    8405:	8b 45 08             	mov    0x8(%di),%ax
    8408:	c1 f8 18             	sar    $0x18,%ax
    840b:	0f b6 c0             	movzbw %al,%ax
    840e:	50                   	push   %ax
    840f:	68 f3 01             	push   $0x1f3
    8412:	00 00                	add    %al,(%bx,%si)
    8414:	e8 57 ff             	call   836e <inw+0x1d>
    8417:	ff                   	(bad)  
    8418:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t)(0));
    841c:	6a 00                	push   $0x0
    841e:	68 f4 01             	push   $0x1f4
    8421:	00 00                	add    %al,(%bx,%si)
    8423:	e8 48 ff             	call   836e <inw+0x1d>
    8426:	ff                   	(bad)  
    8427:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t)(0));
    842b:	6a 00                	push   $0x0
    842d:	68 f5 01             	push   $0x1f5
    8430:	00 00                	add    %al,(%bx,%si)
    8432:	e8 39 ff             	call   836e <inw+0x1d>
    8435:	ff                   	(bad)  
    8436:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t)(sector_count));
    843a:	8b 45 0c             	mov    0xc(%di),%ax
    843d:	0f b6 c0             	movzbw %al,%ax
    8440:	50                   	push   %ax
    8441:	68 f2 01             	push   $0x1f2
    8444:	00 00                	add    %al,(%bx,%si)
    8446:	e8 25 ff             	call   836e <inw+0x1d>
    8449:	ff                   	(bad)  
    844a:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t)(sector));
    844e:	8b 45 08             	mov    0x8(%di),%ax
    8451:	0f b6 c0             	movzbw %al,%ax
    8454:	50                   	push   %ax
    8455:	68 f3 01             	push   $0x1f3
    8458:	00 00                	add    %al,(%bx,%si)
    845a:	e8 11 ff             	call   836e <inw+0x1d>
    845d:	ff                   	(bad)  
    845e:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t)(sector >> 8));
    8462:	8b 45 08             	mov    0x8(%di),%ax
    8465:	c1 f8 08             	sar    $0x8,%ax
    8468:	0f b6 c0             	movzbw %al,%ax
    846b:	50                   	push   %ax
    846c:	68 f4 01             	push   $0x1f4
    846f:	00 00                	add    %al,(%bx,%si)
    8471:	e8 fa fe             	call   836e <inw+0x1d>
    8474:	ff                   	(bad)  
    8475:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t)(sector >> 16));
    8479:	8b 45 08             	mov    0x8(%di),%ax
    847c:	c1 f8 10             	sar    $0x10,%ax
    847f:	0f b6 c0             	movzbw %al,%ax
    8482:	50                   	push   %ax
    8483:	68 f5 01             	push   $0x1f5
    8486:	00 00                	add    %al,(%bx,%si)
    8488:	e8 e3 fe             	call   836e <inw+0x1d>
    848b:	ff                   	(bad)  
    848c:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F7, (uint8_t)(0x24));
    8490:	6a 24                	push   $0x24
    8492:	68 f7 01             	push   $0x1f7
    8495:	00 00                	add    %al,(%bx,%si)
    8497:	e8 d4 fe             	call   836e <inw+0x1d>
    849a:	ff                   	(bad)  
    849b:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    uint16_t *data_buf = (uint16_t *)buf;
    849f:	8b 45 10             	mov    0x10(%di),%ax
    84a2:	89 45 f8             	mov    %ax,-0x8(%di)
    while (sector_count-- > 0)
    84a5:	eb 4a                	jmp    84f1 <read_disk+0x11c>
    {
        while ((inb(0x1F7) & 0x88) != 0x8)
    84a7:	90                   	nop
    84a8:	68 f7 01             	push   $0x1f7
    84ab:	00 00                	add    %al,(%bx,%si)
    84ad:	e8 82 fe             	call   8332 <loader_entry+0x21>
    84b0:	ff                   	(bad)  
    84b1:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84b5:	0f b6 c0             	movzbw %al,%ax
    84b8:	25 88 00             	and    $0x88,%ax
    84bb:	00 00                	add    %al,(%bx,%si)
    84bd:	83 f8 08             	cmp    $0x8,%ax
    84c0:	75 e6                	jne    84a8 <read_disk+0xd3>
        {
            /* code */
        }
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
    84c2:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    84c7:	00 00                	add    %al,(%bx,%si)
    84c9:	eb 1d                	jmp    84e8 <read_disk+0x113>
        {
            *data_buf++ = inw(0x1F0);
    84cb:	8b 5d f8             	mov    -0x8(%di),%bx
    84ce:	8d 43 02             	lea    0x2(%bp,%di),%ax
    84d1:	89 45 f8             	mov    %ax,-0x8(%di)
    84d4:	68 f0 01             	push   $0x1f0
    84d7:	00 00                	add    %al,(%bx,%si)
    84d9:	e8 73 fe             	call   834f <inb+0x1b>
    84dc:	ff                   	(bad)  
    84dd:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84e1:	66 89 03             	mov    %eax,(%bp,%di)
        for (int i = 0; i < SECTOR_SIZE / 2; i++)
    84e4:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84e8:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84ed:	00 00                	add    %al,(%bx,%si)
    84ef:	7e da                	jle    84cb <read_disk+0xf6>
    while (sector_count-- > 0)
    84f1:	8b 45 0c             	mov    0xc(%di),%ax
    84f4:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84f7:	89 55 0c             	mov    %dx,0xc(%di)
    84fa:	85 c0                	test   %ax,%ax
    84fc:	7f a9                	jg     84a7 <read_disk+0xd2>
            /* code */
        }
    }
}
    84fe:	90                   	nop
    84ff:	8b 5d fc             	mov    -0x4(%di),%bx
    8502:	c9                   	leave  
    8503:	c3                   	ret    

00008504 <reload_elf_file>:

static uint32_t reload_elf_file(uint8_t *file_buffer)
{
    8504:	55                   	push   %bp
    8505:	89 e5                	mov    %sp,%bp
    8507:	83 ec 20             	sub    $0x20,%sp
    Elf32_Ehdr *elf_hdr = (Elf32_Ehdr *)file_buffer;
    850a:	8b 45 08             	mov    0x8(%di),%ax
    850d:	89 45 e8             	mov    %ax,-0x18(%di)
    if ((elf_hdr->e_ident[0] != 0x7F) || (elf_hdr->e_ident[1] != 'E') || (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F'))
    8510:	8b 45 e8             	mov    -0x18(%di),%ax
    8513:	0f b6 00             	movzbw (%bx,%si),%ax
    8516:	3c 7f                	cmp    $0x7f,%al
    8518:	75 21                	jne    853b <reload_elf_file+0x37>
    851a:	8b 45 e8             	mov    -0x18(%di),%ax
    851d:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    8521:	3c 45                	cmp    $0x45,%al
    8523:	75 16                	jne    853b <reload_elf_file+0x37>
    8525:	8b 45 e8             	mov    -0x18(%di),%ax
    8528:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    852c:	3c 4c                	cmp    $0x4c,%al
    852e:	75 0b                	jne    853b <reload_elf_file+0x37>
    8530:	8b 45 e8             	mov    -0x18(%di),%ax
    8533:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    8537:	3c 46                	cmp    $0x46,%al
    8539:	74 0a                	je     8545 <reload_elf_file+0x41>
    {
        return 0;
    853b:	b8 00 00             	mov    $0x0,%ax
    853e:	00 00                	add    %al,(%bx,%si)
    8540:	e9 d7 00             	jmp    861a <reload_elf_file+0x116>
    8543:	00 00                	add    %al,(%bx,%si)
    }
    for (int i = 0; i < elf_hdr->e_phnum; i++)
    8545:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    854a:	00 00                	add    %al,(%bx,%si)
    854c:	e9 b2 00             	jmp    8601 <reload_elf_file+0xfd>
    854f:	00 00                	add    %al,(%bx,%si)
    {
        Elf32_Phdr *phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    8551:	8b 45 e8             	mov    -0x18(%di),%ax
    8554:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    8557:	8b 45 08             	mov    0x8(%di),%ax
    855a:	01 c2                	add    %ax,%dx
    855c:	8b 45 fc             	mov    -0x4(%di),%ax
    855f:	c1 e0 05             	shl    $0x5,%ax
    8562:	01 d0                	add    %dx,%ax
    8564:	89 45 e4             	mov    %ax,-0x1c(%di)
        if (phdr->p_type != PT_LOAD)
    8567:	8b 45 e4             	mov    -0x1c(%di),%ax
    856a:	8b 00                	mov    (%bx,%si),%ax
    856c:	83 f8 01             	cmp    $0x1,%ax
    856f:	0f 85 89 00          	jne    85fc <reload_elf_file+0xf8>
    8573:	00 00                	add    %al,(%bx,%si)
        {
            continue;
        }
        uint8_t *src = file_buffer + phdr->p_offset;
    8575:	8b 45 e4             	mov    -0x1c(%di),%ax
    8578:	8b 50 04             	mov    0x4(%bx,%si),%dx
    857b:	8b 45 08             	mov    0x8(%di),%ax
    857e:	01 d0                	add    %dx,%ax
    8580:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t *dest = (uint8_t *)phdr->p_paddr;
    8583:	8b 45 e4             	mov    -0x1c(%di),%ax
    8586:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8589:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_filesz; j++)
    858c:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    8591:	00 00                	add    %al,(%bx,%si)
    8593:	eb 1b                	jmp    85b0 <reload_elf_file+0xac>
        {
            *dest++ = *src++;
    8595:	8b 55 f8             	mov    -0x8(%di),%dx
    8598:	8d 42 01             	lea    0x1(%bp,%si),%ax
    859b:	89 45 f8             	mov    %ax,-0x8(%di)
    859e:	8b 45 f4             	mov    -0xc(%di),%ax
    85a1:	8d 48 01             	lea    0x1(%bx,%si),%cx
    85a4:	89 4d f4             	mov    %cx,-0xc(%di)
    85a7:	0f b6 12             	movzbw (%bp,%si),%dx
    85aa:	88 10                	mov    %dl,(%bx,%si)
        for (int j = 0; j < phdr->p_filesz; j++)
    85ac:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    85b0:	8b 45 e4             	mov    -0x1c(%di),%ax
    85b3:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85b6:	8b 45 f0             	mov    -0x10(%di),%ax
    85b9:	39 c2                	cmp    %ax,%dx
    85bb:	77 d8                	ja     8595 <reload_elf_file+0x91>
        }
        // memsz和filesz不同时，后续要填0
        dest = (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    85bd:	8b 45 e4             	mov    -0x1c(%di),%ax
    85c0:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85c3:	8b 45 e4             	mov    -0x1c(%di),%ax
    85c6:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85c9:	01 d0                	add    %dx,%ax
    85cb:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++)
    85ce:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    85d3:	00 00                	add    %al,(%bx,%si)
    85d5:	eb 10                	jmp    85e7 <reload_elf_file+0xe3>
        {
            *dest++ = 0;
    85d7:	8b 45 f4             	mov    -0xc(%di),%ax
    85da:	8d 50 01             	lea    0x1(%bx,%si),%dx
    85dd:	89 55 f4             	mov    %dx,-0xc(%di)
    85e0:	c6 00 00             	movb   $0x0,(%bx,%si)
        for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++)
    85e3:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85e7:	8b 45 e4             	mov    -0x1c(%di),%ax
    85ea:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85ed:	8b 45 e4             	mov    -0x1c(%di),%ax
    85f0:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85f3:	29 c2                	sub    %ax,%dx
    85f5:	8b 45 ec             	mov    -0x14(%di),%ax
    85f8:	39 c2                	cmp    %ax,%dx
    85fa:	77 db                	ja     85d7 <reload_elf_file+0xd3>
    85fc:	eb 01                	jmp    85ff <reload_elf_file+0xfb>
            continue;
    85fe:	90                   	nop
    for (int i = 0; i < elf_hdr->e_phnum; i++)
    85ff:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    8603:	8b 45 e8             	mov    -0x18(%di),%ax
    8606:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    860a:	0f b7 c0             	movzww %ax,%ax
    860d:	39 45 fc             	cmp    %ax,-0x4(%di)
    8610:	0f 8c 3b ff          	jl     854f <reload_elf_file+0x4b>
    8614:	ff                   	(bad)  
    8615:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
        }
    }
    return elf_hdr->e_entry;
    8619:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    861c:	c9                   	leave  
    861d:	c3                   	ret    

0000861e <die>:

static void die(int code)
{
    861e:	55                   	push   %bp
    861f:	89 e5                	mov    %sp,%bp
    for (;;)
    8621:	eb fe                	jmp    8621 <die+0x3>

00008623 <enable_page_mode>:
 * 将0-4M空间映射到0-4M和SYS_KERNEL_BASE_ADDR~+4MB空间
 * 0-4MB的映射主要用于保护loader自己还能正常工作
 * SYS_KERNEL_BASE_ADDR+4MB则用于为内核提供正确的虚拟地址空间
 */
void enable_page_mode(void)
{
    8623:	55                   	push   %bp
    8624:	89 e5                	mov    %sp,%bp
    8626:	83 ec 10             	sub    $0x10,%sp
    static uint32_t page_dir[1024] __attribute__((aligned(4096))) = {
        [0] = PDE_P | PDE_PS | PDE_W, // PDE_PS，开启4MB的页
    };

    // 设置PSE，以便启用4M的页，而不是4KB
    uint32_t cr4 = read_cr4();
    8629:	e8 8a fd             	call   83b6 <write_cr3+0xa>
    862c:	ff                   	(bad)  
    862d:	ff 89 45 fc          	decw   -0x3bb(%bx,%di)
    write_cr4(cr4 | CR4_PSE);
    8631:	8b 45 fc             	mov    -0x4(%di),%ax
    8634:	83 c8 10             	or     $0x10,%ax
    8637:	50                   	push   %ax
    8638:	e8 8c fd             	call   83c7 <read_cr4+0xf>
    863b:	ff                   	(bad)  
    863c:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    // 设置页表地址
    write_cr3((uint32_t)page_dir);
    8640:	b8 00 a0             	mov    $0xa000,%ax
    8643:	00 00                	add    %al,(%bx,%si)
    8645:	50                   	push   %ax
    8646:	e8 61 fd             	call   83aa <write_cr0+0xa>
    8649:	ff                   	(bad)  
    864a:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    // 开启分页机制
    write_cr0(read_cr0() | CR0_PG);
    864e:	e8 3c fd             	call   838d <outb+0x1d>
    8651:	ff                   	(bad)  
    8652:	ff 0f                	decw   (%bx)
    8654:	b7 c0                	mov    $0xc0,%bh
    8656:	0d 00 00             	or     $0x0,%ax
    8659:	00 80 50 e8          	add    %al,-0x17b0(%bx,%si)
    865d:	3f                   	aas    
    865e:	fd                   	std    
    865f:	ff                   	(bad)  
    8660:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
}
    8664:	90                   	nop
    8665:	c9                   	leave  
    8666:	c3                   	ret    

00008667 <load_kernel>:

void load_kernel(void)
{
    8667:	55                   	push   %bp
    8668:	89 e5                	mov    %sp,%bp
    866a:	83 ec 18             	sub    $0x18,%sp
    read_disk(100, 500, (uint8_t *)SYS_KERNEL_ADDR);
    866d:	68 00 00             	push   $0x0
    8670:	10 00                	adc    %al,(%bx,%si)
    8672:	68 f4 01             	push   $0x1f4
    8675:	00 00                	add    %al,(%bx,%si)
    8677:	6a 64                	push   $0x64
    8679:	e8 57 fd             	call   83d3 <write_cr4+0xa>
    867c:	ff                   	(bad)  
    867d:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)

    uint32_t kernel_entry = reload_elf_file((uint8_t *)SYS_KERNEL_ADDR);
    8681:	68 00 00             	push   $0x0
    8684:	10 00                	adc    %al,(%bx,%si)
    8686:	e8 79 fe             	call   8502 <read_disk+0x12d>
    8689:	ff                   	(bad)  
    868a:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    868e:	89 45 f4             	mov    %ax,-0xc(%di)
    if (kernel_entry == 0)
    8691:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    8695:	75 0a                	jne    86a1 <load_kernel+0x3a>
    {
        die(-1);
    8697:	6a ff                	push   $0xffff
    8699:	e8 80 ff             	call   861c <reload_elf_file+0x118>
    869c:	ff                   	(bad)  
    869d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    }
    // 开启分页机制
    enable_page_mode();
    86a1:	e8 7d ff             	call   8621 <die+0x3>
    86a4:	ff                   	(bad)  
    86a5:	ff 8b 45 f4          	decw   -0xbbb(%bp,%di)
    ((void (*)(boot_info_t *))kernel_entry)(&boot_info);
    86a9:	83 ec 0c             	sub    $0xc,%sp
    86ac:	68 00 b0             	push   $0xb000
    86af:	00 00                	add    %al,(%bx,%si)
    86b1:	ff d0                	call   *%ax
    86b3:	83 c4 10             	add    $0x10,%sp
    for (;;)
    86b6:	eb fe                	jmp    86b6 <load_kernel+0x4f>
