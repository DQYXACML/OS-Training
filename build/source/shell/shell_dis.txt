
C:/diy-x86os-master/start/start/build/source/shell/shell.elf:     file format elf32-i386
C:/diy-x86os-master/start/start/build/source/shell/shell.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x81000155

Program Header:
    LOAD off    0x00001000 vaddr 0x81000000 paddr 0x81000000 align 2**12
         filesz 0x00000194 memsz 0x00000194 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017f  81000000  81000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000015  8100017f  8100017f  0000117f  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_info   00000346  00000000  00000000  00001194  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_abbrev 000001a3  00000000  00000000  000014da  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000060  00000000  00000000  00001680  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   000001c5  00000000  00000000  000016e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_str    000001da  00000000  00000000  000018a5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .comment      00000011  00000000  00000000  00001a7f  2**0
                  CONTENTS, READONLY
  8 .debug_frame  0000012c  00000000  00000000  00001a90  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
81000000 l    d  .text	00000000 .text
8100017f l    d  .rodata	00000000 .rodata
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 main.c
81000000 l     F .text	0000004c sys_call
8100004c l     F .text	0000002a msleep
81000076 l     F .text	0000001b getpid
81000091 l     F .text	00000028 print_msg
810000b9 l     F .text	0000001b fork
810000d4 l     F .text	0000001b yield
00000000 l    df *ABS*	00000000 cstart.c
81000194 g       .rodata	00000000 __bss_start__
81000194 g       .rodata	00000000 __bss_end__
81000155 g       .text	00000000 _start
81000165 g     F .text	0000001a cstart
810000ef g     F .text	00000066 main



Disassembly of section .text:

81000000 <sys_call>:

/**
 * 执行系统调用
 */
static inline int sys_call(syscall_args_t *args)
{
81000000:	55                   	push   %ebp
81000001:	89 e5                	mov    %esp,%ebp
81000003:	57                   	push   %edi
81000004:	56                   	push   %esi
81000005:	53                   	push   %ebx
81000006:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0}; // 使用特权级0
81000009:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
81000010:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
        "push %[arg1]\n\t"
        "push %[arg0]\n\t"
        "push %[id]\n\t"
        "lcalll *(%[gate])\n\n"
        : "=a"(ret)
        : [arg3] "r"(args->arg3), [arg2] "r"(args->arg2), [arg1] "r"(args->arg1),
81000017:	8b 45 08             	mov    0x8(%ebp),%eax
8100001a:	8b 40 10             	mov    0x10(%eax),%eax
8100001d:	8b 55 08             	mov    0x8(%ebp),%edx
81000020:	8b 52 0c             	mov    0xc(%edx),%edx
81000023:	8b 4d 08             	mov    0x8(%ebp),%ecx
81000026:	8b 49 08             	mov    0x8(%ecx),%ecx
          [arg0] "r"(args->arg0), [id] "r"(args->id),
81000029:	8b 5d 08             	mov    0x8(%ebp),%ebx
8100002c:	8b 5b 04             	mov    0x4(%ebx),%ebx
8100002f:	8b 75 08             	mov    0x8(%ebp),%esi
81000032:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
81000034:	8d 7d e8             	lea    -0x18(%ebp),%edi
81000037:	50                   	push   %eax
81000038:	52                   	push   %edx
81000039:	51                   	push   %ecx
8100003a:	53                   	push   %ebx
8100003b:	56                   	push   %esi
8100003c:	ff 1f                	lcall  *(%edi)
8100003e:	89 45 f0             	mov    %eax,-0x10(%ebp)
          [gate] "r"(sys_gate_addr));
    return ret;
81000041:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
81000044:	83 c4 10             	add    $0x10,%esp
81000047:	5b                   	pop    %ebx
81000048:	5e                   	pop    %esi
81000049:	5f                   	pop    %edi
8100004a:	5d                   	pop    %ebp
8100004b:	c3                   	ret    

8100004c <msleep>:

static inline void msleep(int ms)
{
8100004c:	55                   	push   %ebp
8100004d:	89 e5                	mov    %esp,%ebp
8100004f:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0)
81000052:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
81000056:	7e 1b                	jle    81000073 <msleep+0x27>
    {
        return;
    }

    syscall_args_t args;
    args.id = SYS_msleep;
81000058:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
8100005f:	8b 45 08             	mov    0x8(%ebp),%eax
81000062:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
81000065:	8d 45 ec             	lea    -0x14(%ebp),%eax
81000068:	50                   	push   %eax
81000069:	e8 92 ff ff ff       	call   81000000 <sys_call>
8100006e:	83 c4 04             	add    $0x4,%esp
81000071:	eb 01                	jmp    81000074 <msleep+0x28>
        return;
81000073:	90                   	nop
}
81000074:	c9                   	leave  
81000075:	c3                   	ret    

81000076 <getpid>:

static inline int getpid(void)
{
81000076:	55                   	push   %ebp
81000077:	89 e5                	mov    %esp,%ebp
81000079:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8100007c:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
81000083:	8d 45 ec             	lea    -0x14(%ebp),%eax
81000086:	50                   	push   %eax
81000087:	e8 74 ff ff ff       	call   81000000 <sys_call>
8100008c:	83 c4 04             	add    $0x4,%esp
}
8100008f:	c9                   	leave  
81000090:	c3                   	ret    

81000091 <print_msg>:

static inline void print_msg(const char *fmt, int arg)
{
81000091:	55                   	push   %ebp
81000092:	89 e5                	mov    %esp,%ebp
81000094:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
81000097:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8100009e:	8b 45 08             	mov    0x8(%ebp),%eax
810000a1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
810000a4:	8b 45 0c             	mov    0xc(%ebp),%eax
810000a7:	89 45 f4             	mov    %eax,-0xc(%ebp)
    sys_call(&args);
810000aa:	8d 45 ec             	lea    -0x14(%ebp),%eax
810000ad:	50                   	push   %eax
810000ae:	e8 4d ff ff ff       	call   81000000 <sys_call>
810000b3:	83 c4 04             	add    $0x4,%esp
}
810000b6:	90                   	nop
810000b7:	c9                   	leave  
810000b8:	c3                   	ret    

810000b9 <fork>:

static inline int fork(void)
{
810000b9:	55                   	push   %ebp
810000ba:	89 e5                	mov    %esp,%ebp
810000bc:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
810000bf:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
810000c6:	8d 45 ec             	lea    -0x14(%ebp),%eax
810000c9:	50                   	push   %eax
810000ca:	e8 31 ff ff ff       	call   81000000 <sys_call>
810000cf:	83 c4 04             	add    $0x4,%esp
}
810000d2:	c9                   	leave  
810000d3:	c3                   	ret    

810000d4 <yield>:
    args.arg2 = (int)env;
    return sys_call(&args);
}

static inline int yield(void)
{
810000d4:	55                   	push   %ebp
810000d5:	89 e5                	mov    %esp,%ebp
810000d7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
810000da:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
810000e1:	8d 45 ec             	lea    -0x14(%ebp),%eax
810000e4:	50                   	push   %eax
810000e5:	e8 16 ff ff ff       	call   81000000 <sys_call>
810000ea:	83 c4 04             	add    $0x4,%esp
}
810000ed:	c9                   	leave  
810000ee:	c3                   	ret    

810000ef <main>:
#include "lib_syscall.h"

int main(int argc, char **argv)
{
810000ef:	55                   	push   %ebp
810000f0:	89 e5                	mov    %esp,%ebp
810000f2:	83 ec 10             	sub    $0x10,%esp

    for (int i = 0; i < argc; i++)
810000f5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
810000fc:	eb 23                	jmp    81000121 <main+0x32>
    {
        print_msg("arg: %s", argv[i]);
810000fe:	8b 45 fc             	mov    -0x4(%ebp),%eax
81000101:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
81000108:	8b 45 0c             	mov    0xc(%ebp),%eax
8100010b:	01 d0                	add    %edx,%eax
8100010d:	8b 00                	mov    (%eax),%eax
8100010f:	50                   	push   %eax
81000110:	68 7f 01 00 81       	push   $0x8100017f
81000115:	e8 77 ff ff ff       	call   81000091 <print_msg>
8100011a:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < argc; i++)
8100011d:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
81000121:	8b 45 fc             	mov    -0x4(%ebp),%eax
81000124:	3b 45 08             	cmp    0x8(%ebp),%eax
81000127:	7c d5                	jl     810000fe <main+0xf>
    }

    fork();
81000129:	e8 8b ff ff ff       	call   810000b9 <fork>
    yield();
8100012e:	e8 a1 ff ff ff       	call   810000d4 <yield>

    for (;;)
    {
        print_msg("shell pid=%d", getpid());
81000133:	e8 3e ff ff ff       	call   81000076 <getpid>
81000138:	50                   	push   %eax
81000139:	68 87 01 00 81       	push   $0x81000187
8100013e:	e8 4e ff ff ff       	call   81000091 <print_msg>
81000143:	83 c4 08             	add    $0x8,%esp
        msleep(1000);
81000146:	68 e8 03 00 00       	push   $0x3e8
8100014b:	e8 fc fe ff ff       	call   8100004c <msleep>
81000150:	83 c4 04             	add    $0x4,%esp
        print_msg("shell pid=%d", getpid());
81000153:	eb de                	jmp    81000133 <main+0x44>

81000155 <_start>:
    .global _start
    .extern cstart
_start:
    # 设置各数据段的选择子,由于应用任务都是用tss恢复的，所以
    # 实际不必设置，但为安全起见，还是设置一下
    mov %ss, %ax
81000155:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
81000158:	8e d8                	mov    %eax,%ds
    mov %ax, %es
8100015a:	8e c0                	mov    %eax,%es
    mov %ax, %fs
8100015c:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
8100015e:	8e e8                	mov    %eax,%gs

    # 进入主函数执行，注意此时栈没有变，参数仍然在其中
    # 所以调用cstart时，仍然可以看到参数
    jmp cstart
81000160:	e9 00 00 00 00       	jmp    81000165 <cstart>

81000165 <cstart>:

/**
 * @brief 应用的初始化，C部分
 */
void cstart(int argc, char **argv)
{
81000165:	55                   	push   %ebp
81000166:	89 e5                	mov    %esp,%ebp
81000168:	83 ec 08             	sub    $0x8,%esp
    main(argc, argv);
8100016b:	83 ec 08             	sub    $0x8,%esp
8100016e:	ff 75 0c             	pushl  0xc(%ebp)
81000171:	ff 75 08             	pushl  0x8(%ebp)
81000174:	e8 76 ff ff ff       	call   810000ef <main>
81000179:	83 c4 10             	add    $0x10,%esp
8100017c:	90                   	nop
8100017d:	c9                   	leave  
8100017e:	c3                   	ret    
